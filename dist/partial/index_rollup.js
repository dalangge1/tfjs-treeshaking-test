!function(e){"function"==typeof define&&define.amd?define(e):e()}((function(){"use strict";class e{constructor(e,t){this.backend=e,this.dataMover=t,this.data=new WeakMap,this.dataIdsCount=0}get(e){return this.data.has(e)||this.dataMover.moveData(this.backend,e),this.data.get(e)}set(e,t){this.dataIdsCount++,this.data.set(e,t)}has(e){return this.data.has(e)}delete(e){return this.dataIdsCount--,this.data.delete(e)}numDataIds(){return this.dataIdsCount}}class t{refCount(e){return n("refCount")}incRef(e){return n("incRef")}timerAvailable(){return!0}time(e){return n("time")}read(e){return n("read")}readSync(e){return n("readSync")}numDataIds(){return n("numDataIds")}disposeData(e,t){return n("disposeData")}write(e,t,a){return n("write")}move(e,t,a,r,s){return n("move")}memory(){return n("memory")}floatPrecision(){return n("floatPrecision")}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}dispose(){return n("dispose")}}function n(e){throw new Error(`'${e}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`)}function a(e){let t=e.length,n=0,a=0;for(;t>0;)a=Math.random()*t|0,t--,n=e[t],e[t]=e[a],e[a]=n}function r(e,t,n){return Math.max(e,Math.min(t,n))}function s(e){return e%2==0?e:e+1}function o(e){let t=0;for(let n=0;n<e.length;n++)t+=e[n];return t}function i(e,t){if(!e)throw new Error("string"==typeof t?t:t())}function u(e,t,n=""){i(p(e,t),(()=>n+` Shapes ${e} and ${t} must match`))}function l(e){i(null!=e,(()=>"The input to the tensor constructor must be a non-null value."))}function c(e,t=[],n=!1){if(null==t&&(t=[]),Array.isArray(e)||$(e)&&!n)for(let a=0;a<e.length;++a)c(e[a],t,n);else t.push(e);return t}function d(e){if(0===e.length)return 1;let t=e[0];for(let n=1;n<e.length;n++)t*=e[n];return t}function p(e,t){if(e===t)return!0;if(null==e||null==t)return!1;if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}function h(e){return e%1==0}function f(e){const t=Math.ceil(Math.sqrt(e));return[t,Math.ceil(e/t)]}function m(e,t){return t<=e.length?e:e+" ".repeat(t-e.length)}function g(e,t=(e=>0),n){return new Promise(((a,r)=>{let s=0;const o=()=>{if(e())return void a();s++;const i=t(s);null!=n&&s>=n?r():setTimeout(o,i)};o()}))}function y(e,t){let n=1,a=-1;for(let t=0;t<e.length;++t)if(e[t]>=0)n*=e[t];else if(-1===e[t]){if(-1!==a)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${a} and dim ${t}`);a=t}else if(e[t]<0)throw Error(`Shapes can not be < 0. Found ${e[t]} at dim ${t}`);if(-1===a){if(t>0&&t!==n)throw Error(`Size(${t}) must match the product of shape ${e}`);return e}if(0===n)throw Error(`Cannot infer the missing size in [${e}] when there are 0 elements`);if(t%n!=0)throw Error(`The implicit shape can't be a fractional number. Got ${t} / ${n}`);const r=e.slice();return r[a]=t/n,r}function b(e,t){const n=t.length;return i((e=null==e?t.map(((e,t)=>t)):[].concat(e)).every((e=>e>=-n&&e<n)),(()=>`All values in axis param must be in range [-${n}, ${n}) but got axis ${e}`)),i(e.every((e=>h(e))),(()=>`All values in axis param must be integers but got axis ${e}`)),e.map((e=>e<0?n+e:e))}function x(e,t){const n=[],a=[],r=null!=t&&Array.isArray(t)&&0===t.length,s=null==t||r?null:b(t,e).sort();let o=0;for(let t=0;t<e.length;++t){if(null!=s){if(s[o]===t&&1!==e[t])throw new Error(`Can't squeeze axis ${t} since its dim '${e[t]}' is not 1`);(null==s[o]||s[o]>t)&&1===e[t]&&(n.push(e[t]),a.push(t)),s[o]<=t&&o++}1!==e[t]&&(n.push(e[t]),a.push(t))}return{newShape:n,keptDims:a}}function v(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else{if("bool"!==e)throw new Error(`Unknown data type ${e}`);n=new Uint8Array(t)}return n}function k(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else if("bool"===e)n=new Uint8Array(t);else{if("string"!==e)throw new Error(`Unknown data type ${e}`);n=new Array(t)}return n}function w(e,t){for(let n=0;n<e.length;n++){const a=e[n];if(isNaN(a)||!isFinite(a))throw Error(`A tensor of type ${t} being uploaded contains ${a}.`)}}function I(e){return"bool"===e||"complex64"===e||"float32"===e||"int32"===e||"string"===e}function N(e,t){return"complex64"!==t&&(("float32"!==t||"complex64"===e)&&(("int32"!==t||"float32"===e||"complex64"===e)&&("bool"!==t||"bool"!==e)))}function $(e){return e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array}function T(e){if("float32"===e||"int32"===e)return 4;if("complex64"===e)return 8;if("bool"===e)return 1;throw new Error(`Unknown dtype ${e}`)}function C(e){if(null==e)return 0;let t=0;return e.forEach((e=>t+=e.length)),t}function E(e){return"string"==typeof e||e instanceof String}function S(e){return"boolean"==typeof e}function R(e){return"number"==typeof e}function A(e){return Array.isArray(e)?A(e[0]):e instanceof Float32Array?"float32":e instanceof Int32Array||e instanceof Uint8Array?"int32":R(e)?"float32":E(e)?"string":S(e)?"bool":"float32"}function _(e){return!!(e&&e.constructor&&e.call&&e.apply)}function F(e,t){for(let n=t;n<e;++n)if(e%n==0)return n;return e}function O(e){const t=e.length;if(t<2)return[];const n=new Array(t-1);n[t-2]=e[t-1];for(let a=t-3;a>=0;--a)n[a]=n[a+1]*e[a+1];return n}function D(e,t,n,a=!1){const r=new Array;if(1===t.length){const s=t[0]*(a?2:1);for(let t=0;t<s;t++)r[t]=n[e+t]}else{const s=t[0],o=t.slice(1),i=o.reduce(((e,t)=>e*t))*(a?2:1);for(let t=0;t<s;t++)r[t]=D(e+t*i,o,n,a)}return r}function M(e,t,n=!1){if(0===e.length)return t[0];const a=e.reduce(((e,t)=>e*t))*(n?2:1);if(0===a)return[];if(a!==t.length)throw new Error(`[${e}] does not match the input size ${t.length}${n?" for a complex tensor":""}.`);return D(0,e,t,n)}function L(e,t){const n=P(e,t);for(let e=0;e<n.length;e++)n[e]=1;return n}function P(e,t){if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t)return new Uint8Array(e);throw new Error(`Unknown data type ${t}`)}function B(e,t){const n=e.reduce(((e,t)=>e*t),1);if(null==t||"float32"===t)return M(e,new Float32Array(n));if("int32"===t)return M(e,new Int32Array(n));if("bool"===t)return M(e,new Uint8Array(n));throw new Error(`Unknown data type ${t}`)}function W(e){e.forEach((t=>{i(Number.isInteger(t)&&t>=0,(()=>`Tensor must have a shape comprised of positive integers but got shape [${e}].`))}))}function V(e,t,n){if(0===t)return 0;if(1===t)return e[0];let a=e[e.length-1];for(let t=0;t<e.length-1;++t)a+=n[t]*e[t];return a}function z(e,t,n){if(0===t)return[];if(1===t)return[e];const a=new Array(t);for(let t=0;t<a.length-1;++t)a[t]=Math.floor(e/n[t]),e-=a[t]*n[t];return a[a.length-1]=e,a}function U(e){return e&&e.then&&"function"==typeof e.then}const G="tfjsflags";class H{constructor(e){this.global=e,this.flags={},this.flagRegistry={},this.urlFlags={},this.getQueryParams=j,this.populateURLFlags()}setPlatform(e,t){null!=this.platform&&console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${t}.`),this.platformName=e,this.platform=t}registerFlag(e,t,n){if(this.flagRegistry[e]={evaluationFn:t,setHook:n},null!=this.urlFlags[e]){const t=this.urlFlags[e];console.warn(`Setting feature override from URL ${e}: ${t}.`),this.set(e,t)}}async getAsync(e){return e in this.flags||(this.flags[e]=await this.evaluateFlag(e)),this.flags[e]}get(e){if(e in this.flags)return this.flags[e];const t=this.evaluateFlag(e);if(U(t))throw new Error(`Flag ${e} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[e]=t,this.flags[e]}getNumber(e){return this.get(e)}getBool(e){return this.get(e)}getFlags(){return this.flags}get features(){return this.flags}set(e,t){if(null==this.flagRegistry[e])throw new Error(`Cannot set flag ${e} as it has not been registered.`);this.flags[e]=t,null!=this.flagRegistry[e].setHook&&this.flagRegistry[e].setHook(t)}evaluateFlag(e){if(null==this.flagRegistry[e])throw new Error(`Cannot evaluate flag '${e}': no evaluation function found.`);return this.flagRegistry[e].evaluationFn()}setFlags(e){this.flags=Object.assign({},e)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(void 0===this.global||void 0===this.global.location||void 0===this.global.location.search)return;const e=this.getQueryParams(this.global.location.search);if(G in e){e.tfjsflags.split(",").forEach((e=>{const[t,n]=e.split(":");this.urlFlags[t]=function(e,t){if("true"===(t=t.toLowerCase())||"false"===t)return"true"===t;if(""+ +t===t)return+t;throw new Error(`Could not parse value flag value ${t} for flag ${e}.`)}(t,n)}))}}}function j(e){const t={};return e.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,((e,...n)=>(function(e,t,n){e[decodeURIComponent(t)]=decodeURIComponent(n||"")}(t,n[0],n[1]),n.join("=")))),t}function q(){return X}let K,X=null;function Y(){if(null==K){let e;if("undefined"!=typeof window)e=window;else if("undefined"!=typeof global)e=global;else if("undefined"!=typeof process)e=process;else{if("undefined"==typeof self)throw new Error("Could not find a global object");e=self}K=e}return K}function Q(e,t){const n=function(){const e=Y();return null==e._tfGlobals&&(e._tfGlobals=new Map),e._tfGlobals}();if(n.has(e))return n.get(e);{const a=t();return n.set(e,a),n.get(e)}}const Z="Abs",J="Acos",ee="Acosh",te="Add",ne="AddN",ae="All",re="Any",se="ArgMax",oe="ArgMin",ie="Asin",ue="Asinh",le="Atan",ce="Atanh",de="Atan2",pe="AvgPool",he="AvgPoolGrad",fe="AvgPool3D",me="AvgPool3DGrad",ge="BatchMatMul",ye="BatchToSpaceND",be="Bincount",xe="Cast",ve="Ceil",ke="ClipByValue",we="Complex",Ie="ComplexAbs",Ne="Concat",$e="Conv2D",Te="Conv2DBackpropFilter",Ce="Conv2DBackpropInput",Ee="Conv3D",Se="Conv3DBackpropFilterV2",Re="Conv3DBackpropInputV2",Ae="Cos",_e="Cosh",Fe="Cumsum",Oe="CropAndResize",De="DenseBincount",Me="DepthToSpace",Le="DepthwiseConv2dNative",Pe="DepthwiseConv2dNativeBackpropFilter",Be="DepthwiseConv2dNativeBackpropInput",We="Diag",Ve="Dilation2D",ze="Dilation2DBackpropInput",Ue="Dilation2DBackpropFilter",Ge="RealDiv",He="Einsum",je="Elu",qe="EluGrad",Ke="Erf",Xe="Equal",Ye="Exp",Qe="ExpandDims",Ze="Expm1",Je="FFT",et="Fill",tt="FlipLeftRight",nt="Floor",at="FloorDiv",rt="FusedBatchNorm",st="GatherV2",ot="GatherNd",it="Greater",ut="GreaterEqual",lt="Identity",ct="IFFT",dt="Imag",pt="IsFinite",ht="IsInf",ft="IsNan",mt="LeakyRelu",gt="Less",yt="LessEqual",bt="LinSpace",xt="Log",vt="Log1p",kt="LogicalAnd",wt="LogicalNot",It="LogicalOr",Nt="LRN",$t="LRNGrad",Tt="Max",Ct="Maximum",Et="MaxPool",St="MaxPoolGrad",Rt="MaxPool3D",At="MaxPool3DGrad",_t="MaxPoolWithArgmax",Ft="Mean",Ot="Min",Dt="Minimum",Mt="MirrorPad",Lt="Mod",Pt="Multinomial",Bt="Multiply",Wt="Neg",Vt="NotEqual",zt="NonMaxSuppressionV3",Ut="NonMaxSuppressionV4",Gt="NonMaxSuppressionV5",Ht="OnesLike",jt="OneHot",qt="Pack",Kt="PadV2",Xt="Pow",Yt="Prelu",Qt="Prod",Zt="Range",Jt="Real",en="Reciprocal",tn="Relu",nn="Reshape",an="ResizeNearestNeighbor",rn="ResizeNearestNeighborGrad",sn="ResizeBilinear",on="ResizeBilinearGrad",un="Relu6",ln="Reverse",cn="Round",dn="Rsqrt",pn="ScatterNd",hn="Select",fn="Selu",mn="Slice",gn="Sin",yn="Sinh",bn="Sign",xn="Sigmoid",vn="Softplus",kn="Sqrt",wn="Sum",In="SpaceToBatchND",Nn="SplitV",$n="Softmax",Tn="SparseFillEmptyRows",Cn="SparseReshape",En="SparseSegmentMean",Sn="SparseSegmentSum",Rn="SparseToDense",An="SquaredDifference",_n="Square",Fn="StridedSlice",On="StringNGrams",Dn="StringSplit",Mn="StringToHashBucketFast",Ln="Sub",Pn="Tan",Bn="Tanh",Wn="Tile",Vn="TopK",zn="Transform",Un="Transpose",Gn="Unique",Hn="Unpack",jn="UnsortedSegmentSum",qn="ZerosLike",Kn="Step",Xn="FromPixels",Yn="RotateWithOffset",Qn="_FusedMatMul",Zn="FusedConv2D",Jn="FusedDepthwiseConv2D",ea=Q("kernelRegistry",(()=>new Map)),ta=Q("gradRegistry",(()=>new Map));function na(e,t){const n=oa(e,t);return ea.get(n)}function aa(e){return ta.get(e)}function ra(e){const t=ea.entries(),n=[];for(;;){const{done:a,value:r}=t.next();if(a)break;const[s,o]=r,[i]=s.split("_");i===e&&n.push(o)}return n}function sa(e){const{kernelName:t,backendName:n}=e,a=oa(t,n);ea.has(a)&&console.warn(`The kernel '${t}' for backend '${n}' is already registered`),ea.set(a,e)}function oa(e,t){return`${t}_${e}`}var ia=la,ua=null;try{ua=new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,1,13,2,96,0,1,127,96,4,127,127,127,127,1,127,3,7,6,0,1,1,1,1,1,6,6,1,127,1,65,0,11,7,50,6,3,109,117,108,0,1,5,100,105,118,95,115,0,2,5,100,105,118,95,117,0,3,5,114,101,109,95,115,0,4,5,114,101,109,95,117,0,5,8,103,101,116,95,104,105,103,104,0,0,10,191,1,6,4,0,35,0,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,126,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,127,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,128,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,129,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,130,34,4,66,32,135,167,36,0,32,4,167,11])),{}).exports}catch(e){}function la(e,t,n){this.low=0|e,this.high=0|t,this.unsigned=!!n}function ca(e){return!0===(e&&e.__isLong__)}la.prototype.__isLong__,Object.defineProperty(la.prototype,"__isLong__",{value:!0}),la.isLong=ca;var da={},pa={};function ha(e,t){var n,a,r;return t?(r=0<=(e>>>=0)&&e<256)&&(a=pa[e])?a:(n=ma(e,(0|e)<0?-1:0,!0),r&&(pa[e]=n),n):(r=-128<=(e|=0)&&e<128)&&(a=da[e])?a:(n=ma(e,e<0?-1:0,!1),r&&(da[e]=n),n)}function fa(e,t){if(isNaN(e))return t?Na:Ia;if(t){if(e<0)return Na;if(e>=va)return Sa}else{if(e<=-ka)return Ra;if(e+1>=ka)return Ea}return e<0?fa(-e,t).neg():ma(e%xa|0,e/xa|0,t)}function ma(e,t,n){return new la(e,t,n)}la.fromInt=ha,la.fromNumber=fa,la.fromBits=ma;var ga=Math.pow;function ya(e,t,n){if(0===e.length)throw Error("empty string");if("NaN"===e||"Infinity"===e||"+Infinity"===e||"-Infinity"===e)return Ia;if("number"==typeof t?(n=t,t=!1):t=!!t,(n=n||10)<2||36<n)throw RangeError("radix");var a;if((a=e.indexOf("-"))>0)throw Error("interior hyphen");if(0===a)return ya(e.substring(1),t,n).neg();for(var r=fa(ga(n,8)),s=Ia,o=0;o<e.length;o+=8){var i=Math.min(8,e.length-o),u=parseInt(e.substring(o,o+i),n);if(i<8){var l=fa(ga(n,i));s=s.mul(l).add(fa(u))}else s=(s=s.mul(r)).add(fa(u))}return s.unsigned=t,s}function ba(e,t){return"number"==typeof e?fa(e,t):"string"==typeof e?ya(e,t):ma(e.low,e.high,"boolean"==typeof t?t:e.unsigned)}la.fromString=ya,la.fromValue=ba;var xa=4294967296,va=xa*xa,ka=va/2,wa=ha(1<<24),Ia=ha(0);la.ZERO=Ia;var Na=ha(0,!0);la.UZERO=Na;var $a=ha(1);la.ONE=$a;var Ta=ha(1,!0);la.UONE=Ta;var Ca=ha(-1);la.NEG_ONE=Ca;var Ea=ma(-1,2147483647,!1);la.MAX_VALUE=Ea;var Sa=ma(-1,-1,!0);la.MAX_UNSIGNED_VALUE=Sa;var Ra=ma(0,-2147483648,!1);la.MIN_VALUE=Ra;var Aa=la.prototype;Aa.toInt=function(){return this.unsigned?this.low>>>0:this.low},Aa.toNumber=function(){return this.unsigned?(this.high>>>0)*xa+(this.low>>>0):this.high*xa+(this.low>>>0)},Aa.toString=function(e){if((e=e||10)<2||36<e)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative()){if(this.eq(Ra)){var t=fa(e),n=this.div(t),a=n.mul(t).sub(this);return n.toString(e)+a.toInt().toString(e)}return"-"+this.neg().toString(e)}for(var r=fa(ga(e,6),this.unsigned),s=this,o="";;){var i=s.div(r),u=(s.sub(i.mul(r)).toInt()>>>0).toString(e);if((s=i).isZero())return u+o;for(;u.length<6;)u="0"+u;o=""+u+o}},Aa.getHighBits=function(){return this.high},Aa.getHighBitsUnsigned=function(){return this.high>>>0},Aa.getLowBits=function(){return this.low},Aa.getLowBitsUnsigned=function(){return this.low>>>0},Aa.getNumBitsAbs=function(){if(this.isNegative())return this.eq(Ra)?64:this.neg().getNumBitsAbs();for(var e=0!=this.high?this.high:this.low,t=31;t>0&&0==(e&1<<t);t--);return 0!=this.high?t+33:t+1},Aa.isZero=function(){return 0===this.high&&0===this.low},Aa.eqz=Aa.isZero,Aa.isNegative=function(){return!this.unsigned&&this.high<0},Aa.isPositive=function(){return this.unsigned||this.high>=0},Aa.isOdd=function(){return 1==(1&this.low)},Aa.isEven=function(){return 0==(1&this.low)},Aa.equals=function(e){return ca(e)||(e=ba(e)),(this.unsigned===e.unsigned||this.high>>>31!=1||e.high>>>31!=1)&&(this.high===e.high&&this.low===e.low)},Aa.eq=Aa.equals,Aa.notEquals=function(e){return!this.eq(e)},Aa.neq=Aa.notEquals,Aa.ne=Aa.notEquals,Aa.lessThan=function(e){return this.comp(e)<0},Aa.lt=Aa.lessThan,Aa.lessThanOrEqual=function(e){return this.comp(e)<=0},Aa.lte=Aa.lessThanOrEqual,Aa.le=Aa.lessThanOrEqual,Aa.greaterThan=function(e){return this.comp(e)>0},Aa.gt=Aa.greaterThan,Aa.greaterThanOrEqual=function(e){return this.comp(e)>=0},Aa.gte=Aa.greaterThanOrEqual,Aa.ge=Aa.greaterThanOrEqual,Aa.compare=function(e){if(ca(e)||(e=ba(e)),this.eq(e))return 0;var t=this.isNegative(),n=e.isNegative();return t&&!n?-1:!t&&n?1:this.unsigned?e.high>>>0>this.high>>>0||e.high===this.high&&e.low>>>0>this.low>>>0?-1:1:this.sub(e).isNegative()?-1:1},Aa.comp=Aa.compare,Aa.negate=function(){return!this.unsigned&&this.eq(Ra)?Ra:this.not().add($a)},Aa.neg=Aa.negate,Aa.add=function(e){ca(e)||(e=ba(e));var t=this.high>>>16,n=65535&this.high,a=this.low>>>16,r=65535&this.low,s=e.high>>>16,o=65535&e.high,i=e.low>>>16,u=0,l=0,c=0,d=0;return c+=(d+=r+(65535&e.low))>>>16,l+=(c+=a+i)>>>16,u+=(l+=n+o)>>>16,u+=t+s,ma((c&=65535)<<16|(d&=65535),(u&=65535)<<16|(l&=65535),this.unsigned)},Aa.subtract=function(e){return ca(e)||(e=ba(e)),this.add(e.neg())},Aa.sub=Aa.subtract,Aa.multiply=function(e){if(this.isZero())return Ia;if(ca(e)||(e=ba(e)),ua)return ma(ua.mul(this.low,this.high,e.low,e.high),ua.get_high(),this.unsigned);if(e.isZero())return Ia;if(this.eq(Ra))return e.isOdd()?Ra:Ia;if(e.eq(Ra))return this.isOdd()?Ra:Ia;if(this.isNegative())return e.isNegative()?this.neg().mul(e.neg()):this.neg().mul(e).neg();if(e.isNegative())return this.mul(e.neg()).neg();if(this.lt(wa)&&e.lt(wa))return fa(this.toNumber()*e.toNumber(),this.unsigned);var t=this.high>>>16,n=65535&this.high,a=this.low>>>16,r=65535&this.low,s=e.high>>>16,o=65535&e.high,i=e.low>>>16,u=65535&e.low,l=0,c=0,d=0,p=0;return d+=(p+=r*u)>>>16,c+=(d+=a*u)>>>16,d&=65535,c+=(d+=r*i)>>>16,l+=(c+=n*u)>>>16,c&=65535,l+=(c+=a*i)>>>16,c&=65535,l+=(c+=r*o)>>>16,l+=t*u+n*i+a*o+r*s,ma((d&=65535)<<16|(p&=65535),(l&=65535)<<16|(c&=65535),this.unsigned)},Aa.mul=Aa.multiply,Aa.divide=function(e){if(ca(e)||(e=ba(e)),e.isZero())throw Error("division by zero");var t,n,a;if(ua)return this.unsigned||-2147483648!==this.high||-1!==e.low||-1!==e.high?ma((this.unsigned?ua.div_u:ua.div_s)(this.low,this.high,e.low,e.high),ua.get_high(),this.unsigned):this;if(this.isZero())return this.unsigned?Na:Ia;if(this.unsigned){if(e.unsigned||(e=e.toUnsigned()),e.gt(this))return Na;if(e.gt(this.shru(1)))return Ta;a=Na}else{if(this.eq(Ra))return e.eq($a)||e.eq(Ca)?Ra:e.eq(Ra)?$a:(t=this.shr(1).div(e).shl(1)).eq(Ia)?e.isNegative()?$a:Ca:(n=this.sub(e.mul(t)),a=t.add(n.div(e)));if(e.eq(Ra))return this.unsigned?Na:Ia;if(this.isNegative())return e.isNegative()?this.neg().div(e.neg()):this.neg().div(e).neg();if(e.isNegative())return this.div(e.neg()).neg();a=Ia}for(n=this;n.gte(e);){t=Math.max(1,Math.floor(n.toNumber()/e.toNumber()));for(var r=Math.ceil(Math.log(t)/Math.LN2),s=r<=48?1:ga(2,r-48),o=fa(t),i=o.mul(e);i.isNegative()||i.gt(n);)i=(o=fa(t-=s,this.unsigned)).mul(e);o.isZero()&&(o=$a),a=a.add(o),n=n.sub(i)}return a},Aa.div=Aa.divide,Aa.modulo=function(e){return ca(e)||(e=ba(e)),ua?ma((this.unsigned?ua.rem_u:ua.rem_s)(this.low,this.high,e.low,e.high),ua.get_high(),this.unsigned):this.sub(this.div(e).mul(e))},Aa.mod=Aa.modulo,Aa.rem=Aa.modulo,Aa.not=function(){return ma(~this.low,~this.high,this.unsigned)},Aa.and=function(e){return ca(e)||(e=ba(e)),ma(this.low&e.low,this.high&e.high,this.unsigned)},Aa.or=function(e){return ca(e)||(e=ba(e)),ma(this.low|e.low,this.high|e.high,this.unsigned)},Aa.xor=function(e){return ca(e)||(e=ba(e)),ma(this.low^e.low,this.high^e.high,this.unsigned)},Aa.shiftLeft=function(e){return ca(e)&&(e=e.toInt()),0==(e&=63)?this:e<32?ma(this.low<<e,this.high<<e|this.low>>>32-e,this.unsigned):ma(0,this.low<<e-32,this.unsigned)},Aa.shl=Aa.shiftLeft,Aa.shiftRight=function(e){return ca(e)&&(e=e.toInt()),0==(e&=63)?this:e<32?ma(this.low>>>e|this.high<<32-e,this.high>>e,this.unsigned):ma(this.high>>e-32,this.high>=0?0:-1,this.unsigned)},Aa.shr=Aa.shiftRight,Aa.shiftRightUnsigned=function(e){if(ca(e)&&(e=e.toInt()),0===(e&=63))return this;var t=this.high;return e<32?ma(this.low>>>e|t<<32-e,t>>>e,this.unsigned):ma(32===e?t:t>>>e-32,0,this.unsigned)},Aa.shru=Aa.shiftRightUnsigned,Aa.shr_u=Aa.shiftRightUnsigned,Aa.toSigned=function(){return this.unsigned?ma(this.low,this.high,!1):this},Aa.toUnsigned=function(){return this.unsigned?this:ma(this.low,this.high,!0)},Aa.toBytes=function(e){return e?this.toBytesLE():this.toBytesBE()},Aa.toBytesLE=function(){var e=this.high,t=this.low;return[255&t,t>>>8&255,t>>>16&255,t>>>24,255&e,e>>>8&255,e>>>16&255,e>>>24]},Aa.toBytesBE=function(){var e=this.high,t=this.low;return[e>>>24,e>>>16&255,e>>>8&255,255&e,t>>>24,t>>>16&255,t>>>8&255,255&t]},la.fromBytes=function(e,t,n){return n?la.fromBytesLE(e,t):la.fromBytesBE(e,t)},la.fromBytesLE=function(e,t){return new la(e[0]|e[1]<<8|e[2]<<16|e[3]<<24,e[4]|e[5]<<8|e[6]<<16|e[7]<<24,t)},la.fromBytesBE=function(e,t){return new la(e[4]<<24|e[5]<<16|e[6]<<8|e[7],e[0]<<24|e[1]<<16|e[2]<<8|e[3],t)};const _a=ia||Object.freeze(Object.assign(Object.create(null),ia,{default:ia}));function Fa(e){return _a.fromString(e,!0,16)}const Oa=Fa("c3a5c85c97cb3127"),Da=Fa("b492b66fbe98f273"),Ma=Fa("9ae16a3b2f90404f");function La(e){return e.xor(e.shru(47))}function Pa(e,t,n){const a=e.slice(t,t+n);return _a.fromBytes(Array.from(a),!0,!0)}function Ba(e,t){return Pa(e,t,8)}function Wa(e,t){return Pa(e,t,4)}function Va(e,t){return 0===t?e:e.shru(t).or(e.shl(64-t))}function za(e,t,n=Fa("9ddfea08eb382d69")){let a=e.xor(t).mul(n);a=a.xor(a.shru(47));let r=t.xor(a).mul(n);return r=r.xor(r.shru(47)),r=r.mul(n),r}function Ua(e,t,n,a){return function(e,t,n,a,r,s){r=r.add(e),s=Va(s.add(r).add(a),21);const o=r;return r=(r=r.add(t)).add(n),s=s.add(Va(r,44)),[r.add(a),s.add(o)]}(Ba(e,t),Ba(e,t+8),Ba(e,t+16),Ba(e,t+24),n,a)}function Ga(e,t=e.length){const n=_a.fromNumber(81,!0);if(t<=32)return t<=16?function(e,t=e.length){if(t>=8){const n=Ma.add(2*t),a=Ba(e,0).add(Ma),r=Ba(e,t-8);return za(Va(r,37).mul(n).add(a),Va(a,25).add(r).mul(n),n)}if(t>=4){const n=Ma.add(2*t);return za(Wa(e,0).shl(3).add(t),Wa(e,t-4),n)}if(t>0){const n=e[0]+(e[t>>1]<<8),a=t+(e[t-1]<<2);return La(Ma.mul(n).xor(Oa.mul(a))).mul(Ma)}return Ma}(e,t):function(e,t=e.length){const n=Ma.add(2*t),a=Ba(e,0).mul(Da),r=Ba(e,8),s=Ba(e,t-8).mul(n),o=Ba(e,t-16).mul(Ma);return za(Va(a.add(r),43).add(Va(s,30)).add(o),a.add(Va(r.add(Ma),18)).add(s),n)}(e,t);if(t<=64)return function(e,t=e.length){const n=Ma.add(2*t),a=Ba(e,0).mul(Ma),r=Ba(e,8),s=Ba(e,t-8).mul(n),o=Ba(e,t-16).mul(Ma),i=Va(a.add(r),43).add(Va(s,30)).add(o),u=za(i,a.add(Va(r.add(Ma),18)).add(s),n),l=Ba(e,16).mul(n),c=Ba(e,24),d=i.add(Ba(e,t-32)).mul(n),p=u.add(Ba(e,t-24)).mul(n);return za(Va(l.add(c),43).add(Va(d,30)).add(p),l.add(Va(c.add(a),18)).add(d),n)}(e,t);let a=n,r=n.mul(Da).add(113),s=La(r.mul(Ma).add(113)).mul(Ma),o=[_a.UZERO,_a.UZERO],i=[_a.UZERO,_a.UZERO];a=a.mul(Ma).add(Ba(e,0));let u=0;const l=64*(t-1>>6),c=l+(t-1&63)-63;do{a=Va(a.add(r).add(o[0]).add(Ba(e,u+8)),37).mul(Da),r=Va(r.add(o[1]).add(Ba(e,u+48)),42).mul(Da),a=a.xor(i[1]),r=r.add(o[0]).add(Ba(e,u+40)),s=Va(s.add(i[0]),33).mul(Da),o=Ua(e,u,o[1].mul(Da),a.add(i[0])),i=Ua(e,u+32,s.add(i[1]),r.add(Ba(e,u+16))),[s,a]=[a,s],u+=64}while(u!==l);const d=Da.add(s.and(255).shl(1));return u=c,i[0]=i[0].add(t-1&63),o[0]=o[0].add(i[0]),i[0]=i[0].add(o[0]),a=Va(a.add(r).add(o[0]).add(Ba(e,u+8)),37).mul(d),r=Va(r.add(o[1]).add(Ba(e,u+48)),42).mul(d),a=a.xor(i[1].mul(9)),r=r.add(o[0].mul(9).add(Ba(e,u+40))),s=Va(s.add(i[0]),33).mul(d),o=Ua(e,u,o[1].mul(d),a.add(i[0])),i=Ua(e,u+32,s.add(i[1]),r.add(Ba(e,u+16))),[s,a]=[a,s],za(za(o[0],i[0],d).add(La(r).mul(Oa)).add(s),za(o[1],i[1],d).add(a),d)}function Ha(e,t){return"string"===t?Ka(e):ja([e],t)}function ja(e,t){if("string"===t)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(e)&&(e=c(e)),q().getBool("DEBUG")&&w(e,t),function(e,t){return e instanceof Float32Array&&"float32"===t||e instanceof Int32Array&&"int32"===t||e instanceof Uint8Array&&"bool"===t}(e,t))return e;if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t){const t=new Uint8Array(e.length);for(let n=0;n<t.length;++n)0!==Math.round(e[n])&&(t[n]=1);return t}throw new Error(`Unknown data type ${t}`)}function qa(){return q().platform.now()}function Ka(e,t="utf-8"){return t=t||"utf-8",q().platform.encode(e,t)}function Xa(e,t="utf-8"){return t=t||"utf-8",q().platform.decode(e,t)}var Ya=Object.freeze({__proto__:null,createScalarValue:Ha,toTypedArray:ja,now:qa,fetch:function(e,t){return q().platform.fetch(e,t)},encodeString:Ka,decodeString:Xa,shuffle:a,shuffleCombo:function(e,t){if(e.length!==t.length)throw new Error(`Array sizes must match to be shuffled together First array length was ${e.length}Second array length was ${t.length}`);let n,a,r=e.length,s=0;for(;r>0;)s=Math.random()*r|0,r--,n=e[r],a=t[r],e[r]=e[s],t[r]=t[s],e[s]=n,t[s]=a},clamp:r,nearestLargerEven:s,sum:o,randUniform:function(e,t){const n=Math.random();return t*n+(1-n)*e},distSquared:function(e,t){let n=0;for(let a=0;a<e.length;a++){const r=Number(e[a])-Number(t[a]);n+=r*r}return n},assert:i,assertShapesMatch:u,assertNonNull:l,flatten:c,sizeFromShape:d,isScalarShape:function(e){return 0===e.length},arraysEqual:p,isInt:h,tanh:function(e){if(null!=Math.tanh)return Math.tanh(e);if(e===1/0)return 1;if(e===-1/0)return-1;{const t=Math.exp(2*e);return(t-1)/(t+1)}},sizeToSquarishShape:f,createShuffledIndices:function(e){const t=new Uint32Array(e);for(let n=0;n<e;++n)t[n]=n;return a(t),t},rightPad:m,repeatedTry:g,inferFromImplicitShape:y,parseAxisParam:b,squeezeShape:x,getTypedArrayFromDType:v,getArrayFromDType:k,checkConversionForErrors:w,isValidDtype:I,hasEncodingLoss:N,isTypedArray:$,bytesPerElement:T,bytesFromStringArray:C,isString:E,isBoolean:S,isNumber:R,inferDtype:A,isFunction:_,nearestDivisor:F,computeStrides:O,toNestedArray:M,makeOnesTypedArray:L,makeZerosTypedArray:P,makeZerosNestedTypedArray:B,assertNonNegativeIntegerDimensions:W,locToIndex:V,indexToLoc:z,isPromise:U,hexToLong:Fa,fingerPrint64:Ga});class Qa{constructor(e,t){this.backendTimer=e,this.logger=t,null==t&&(this.logger=new Ja)}profileKernel(e,t,n){let a;const r=()=>{a=n()};let s;const o=qa();if(this.backendTimer.timerAvailable())s=this.backendTimer.time(r);else{r();for(const e of a)e.dataSync();s=Promise.resolve({kernelMs:qa()-o})}if(q().getBool("CHECK_COMPUTATION_FOR_ERRORS"))for(let t=0;t<a.length;t++){const n=a[t];n.data().then((t=>{Za(t,n.dtype,e)}))}return{kernelName:e,outputs:a,inputs:t,timeMs:s.then((e=>e.kernelMs)),extraInfo:s.then((e=>null!=e.getExtraProfileInfo?e.getExtraProfileInfo():""))}}logKernelProfile(e){const{kernelName:t,outputs:n,timeMs:a,inputs:r,extraInfo:s}=e;n.forEach((e=>{Promise.all([e.data(),a,s]).then((n=>{this.logger.logKernelProfile(t,e,n[0],n[1],r,n[2])}))}))}}function Za(e,t,n){if("float32"!==t)return!1;for(let t=0;t<e.length;t++){const a=e[t];if(isNaN(a)||!isFinite(a))return console.warn(`Found ${a} in the result of '${n}'`),!0}return!1}class Ja{logKernelProfile(e,t,n,a,r,s){const o="number"==typeof a?m(`${a}ms`,9):a.error,i=m(e,25),u=t.rank,l=t.size,c=m(t.shape.toString(),14);let d="";for(const e in r){const n=r[e];if(null!=n){const a=n.shape||t.shape,r=a.length;d+=`${e}: ${r}D ${r>0?a:""} `}}console.log(`%c${i}\t%c${o}\t%c${u}D ${c}\t%c${l}\t%c${d}\t%c${s}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}function er(e,t,n,a){const r=O(t),s=function(e,t,n,a){const r=d(t),s=a[a.length-1],o=new Array(s).fill(0),i=t.length,u="complex64"===n?rr(e):e;if(i>1)for(let e=0;e<r/s;e++){const t=e*s;for(let e=0;e<s;e++)o[e]=Math.max(o[e],tr(u[t+e],0,n).length)}return o}(e,t,n,r),o=t.length,i=ar(e,t,n,r,s),u=["Tensor"];return a&&(u.push(`  dtype: ${n}`),u.push(`  rank: ${o}`),u.push(`  shape: [${t}]`),u.push("  values:")),u.push(i.map((e=>"    "+e)).join("\n")),u.join("\n")}function tr(e,t,n){let a;return a=Array.isArray(e)?`${parseFloat(e[0].toFixed(7))} + ${parseFloat(e[1].toFixed(7))}j`:E(e)?`'${e}'`:"bool"===n?nr(e):parseFloat(e.toFixed(7)).toString(),m(a,t)}function nr(e){return 0===e?"false":"true"}function ar(e,t,n,a,r,s=!0){const o="complex64"===n?2:1,i=t[0],u=t.length;if(0===u){if("complex64"===n){return[tr(rr(e)[0],0,n)]}return"bool"===n?[nr(e[0])]:[e[0].toString()]}if(1===u){if(i>20){const t=3*o;let a=Array.from(e.slice(0,t)),s=Array.from(e.slice((i-3)*o,i*o));return"complex64"===n&&(a=rr(a),s=rr(s)),["["+a.map(((e,t)=>tr(e,r[t],n))).join(", ")+", ..., "+s.map(((e,t)=>tr(e,r[i-3+t],n))).join(", ")+"]"]}return["["+("complex64"===n?rr(e):Array.from(e)).map(((e,t)=>tr(e,r[t],n))).join(", ")+"]"]}const l=t.slice(1),c=a.slice(1),d=a[0]*o,p=[];if(i>20){for(let t=0;t<3;t++){const a=t*d,s=a+d;p.push(...ar(e.slice(a,s),l,n,c,r,!1))}p.push("...");for(let t=i-3;t<i;t++){const a=t*d,s=a+d;p.push(...ar(e.slice(a,s),l,n,c,r,t===i-1))}}else for(let t=0;t<i;t++){const a=t*d,s=a+d;p.push(...ar(e.slice(a,s),l,n,c,r,t===i-1))}const h=2===u?",":"";p[0]="["+p[0]+h;for(let e=1;e<p.length-1;e++)p[e]=" "+p[e]+h;let f=",\n";for(let e=2;e<u;e++)f+="\n";return p[p.length-1]=" "+p[p.length-1]+"]"+(s?"":f),p}function rr(e){const t=[];for(let n=0;n<e.length;n+=2)t.push([e[n],e[n+1]]);return t}class sr{constructor(e,t,n){if(this.dtype=t,this.shape=e.slice(),this.size=d(e),null!=n){const e=n.length;i(e===this.size,(()=>`Length of values '${e}' does not match the size inferred by the shape '${this.size}'.`))}if("complex64"===t)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=n||k(t,this.size),this.strides=O(e)}set(e,...t){0===t.length&&(t=[0]),i(t.length===this.rank,(()=>`The number of provided coordinates (${t.length}) must match the rank (${this.rank})`));const n=this.locToIndex(t);this.values[n]=e}get(...e){0===e.length&&(e=[0]);let t=0;for(const n of e){if(n<0||n>=this.shape[t]){const t=`Requested out of range element at ${e}.   Buffer shape=${this.shape}`;throw new Error(t)}t++}let n=e[e.length-1];for(let t=0;t<e.length-1;++t)n+=this.strides[t]*e[t];return this.values[n]}locToIndex(e){if(0===this.rank)return 0;if(1===this.rank)return e[0];let t=e[e.length-1];for(let n=0;n<e.length-1;++n)t+=this.strides[n]*e[n];return t}indexToLoc(e){if(0===this.rank)return[];if(1===this.rank)return[e];const t=new Array(this.shape.length);for(let n=0;n<t.length-1;++n)t[n]=Math.floor(e/this.strides[n]),e-=t[n]*this.strides[n];return t[t.length-1]=e,t}get rank(){return this.shape.length}toTensor(){return or().makeTensor(this.values,this.shape,this.dtype)}}let or=null,ir=null,ur=null;class lr{constructor(e,t,n,a){this.kept=!1,this.isDisposedInternal=!1,this.shape=e.slice(),this.dtype=t||"float32",this.size=d(e),this.strides=O(e),this.dataId=n,this.id=a,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}async buffer(){const e=await this.data();return ir.buffer(this.shape,this.dtype,e)}bufferSync(){return ir.buffer(this.shape,this.dtype,this.dataSync())}async array(){const e=await this.data();return M(this.shape,e,"complex64"===this.dtype)}arraySync(){return M(this.shape,this.dataSync(),"complex64"===this.dtype)}async data(){this.throwIfDisposed();const e=or().read(this.dataId);if("string"===this.dtype){const t=await e;try{return t.map((e=>Xa(e)))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return e}dataSync(){this.throwIfDisposed();const e=or().readSync(this.dataId);if("string"===this.dtype)try{return e.map((e=>Xa(e)))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return e}async bytes(){this.throwIfDisposed();const e=await or().read(this.dataId);return"string"===this.dtype?e:new Uint8Array(e.buffer)}dispose(){this.isDisposed||(or().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(e=!1){return ir.print(this,e)}clone(){return this.throwIfDisposed(),ir.clone(this)}toString(e=!1){return er(this.dataSync(),this.shape,this.dtype,e)}cast(e){return this.throwIfDisposed(),ir.cast(this,e)}variable(e=!0,t,n){return this.throwIfDisposed(),or().makeVariable(this,e,t,n)}}Object.defineProperty(lr,Symbol.hasInstance,{value:e=>!!e&&null!=e.data&&null!=e.dataSync&&null!=e.throwIfDisposed}),Q("Tensor",(()=>lr));class cr extends lr{constructor(e,t,n,a){super(e.shape,e.dtype,e.dataId,a),this.trainable=t,this.name=n}assign(e){if(e.dtype!==this.dtype)throw new Error(`dtype of the new value (${e.dtype}) and previous value (${this.dtype}) must match`);if(!p(e.shape,this.shape))throw new Error(`shape of the new value (${e.shape}) and previous value (${this.shape}) must match`);or().disposeTensor(this),this.dataId=e.dataId,or().incRef(this,null)}dispose(){or().disposeVariable(this),this.isDisposedInternal=!0}}var dr,pr,hr,fr,mr;Object.defineProperty(cr,Symbol.hasInstance,{value:e=>e instanceof lr&&null!=e.assign&&e.assign instanceof Function}),function(e){e.R0="R0",e.R1="R1",e.R2="R2",e.R3="R3",e.R4="R4",e.R5="R5",e.R6="R6"}(dr||(dr={})),function(e){e.float32="float32",e.int32="int32",e.bool="int32",e.complex64="complex64"}(pr||(pr={})),function(e){e.float32="float32",e.int32="int32",e.bool="bool",e.complex64="complex64"}(hr||(hr={})),function(e){e.float32="float32",e.int32="float32",e.bool="float32",e.complex64="complex64"}(fr||(fr={})),function(e){e.float32="complex64",e.int32="complex64",e.bool="complex64",e.complex64="complex64"}(mr||(mr={}));const gr={float32:fr,int32:pr,bool:hr,complex64:mr};function yr(e,t){if("string"===e||"string"===t){if("string"===e&&"string"===t)return"string";throw new Error(`Can not upcast ${e} with ${t}`)}return gr[e][t]}function br(e){return yr(e,"int32")}function xr(e,t){if(e.dtype===t.dtype)return[e,t];const n=yr(e.dtype,t.dtype);return[e.cast(n),t.cast(n)]}function vr(e,t){i(e.dtype===t.dtype,(()=>`The dtypes of the first(${e.dtype}) and second(${t.dtype}) input must match`))}function kr(e){const t=[];return wr(e,t,new Set),t}function wr(e,t,n){if(null==e)return;if(e instanceof lr)return void t.push(e);if(a=e,!Array.isArray(a)&&"object"!=typeof a)return;var a;const r=e;for(const e in r){const a=r[e];n.has(a)||(n.add(a),wr(a,t,n))}}var Ir=Object.freeze({__proto__:null,makeTypesMatch:xr,assertTypesMatch:vr,isTensorInList:function(e,t){return t.some((t=>t.id===e.id))},getTensorsInContainer:kr});function Nr(e){return null!=e.kernelName}class $r{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null,get kernelNames(){return Array.from(new Set(this.kernels.map((e=>e.name))))}}}dispose(){for(const e in this.registeredVariables)this.registeredVariables[e].dispose()}}class Tr{constructor(e){this.ENV=e,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new $r}async ready(){if(null!=this.pendingBackendInit)return this.pendingBackendInit.then((()=>{}));if(null!=this.backendInstance)return;const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t];if(await this.initializeBackend(n).success)return void await this.setBackend(n)}throw new Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(null!=this.pendingBackendInit)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(null==this.backendInstance){const{name:e,asyncInit:t}=this.initializeBackendsAndReturnBest();if(t)throw new Error(`The highest priority backend '${e}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(e)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(e){if(!(e in this.registry)){if(!(e in this.registryFactory))return null;{const{asyncInit:t}=this.initializeBackend(e);if(t)return null}}return this.registry[e]}findBackendFactory(e){return e in this.registryFactory?this.registryFactory[e].factory:null}registerBackend(e,t,n=1){return e in this.registryFactory?(console.warn(`${e} backend was already registered. Reusing existing backend factory.`),!1):(this.registryFactory[e]={factory:t,priority:n},!0)}async setBackend(e){if(null==this.registryFactory[e])throw new Error(`Backend name '${e}' not found in registry`);if(this.backendName=e,null==this.registry[e]){this.backendInstance=null;const{success:t,asyncInit:n}=this.initializeBackend(e);if(!(n?await t:t))return!1}return this.backendInstance=this.registry[e],this.setupRegisteredKernels(),this.profiler=new Qa(this.backendInstance),!0}setupRegisteredKernels(){ra(this.backendName).forEach((e=>{null!=e.setupFunc&&e.setupFunc(this.backendInstance)}))}disposeRegisteredKernels(e){ra(e).forEach((t=>{null!=t.disposeFunc&&t.disposeFunc(this.registry[e])}))}initializeBackend(e){const n=this.registryFactory[e];if(null==n)throw new Error(`Cannot initialize backend ${e}, no registration found.`);try{const a=n.factory();if(!a||a instanceof t||"function"!=typeof a.then)return this.registry[e]=a,{success:!0,asyncInit:!1};{const t=++this.pendingBackendInitId,n=a.then((n=>!(t<this.pendingBackendInitId)&&(this.registry[e]=n,this.pendingBackendInit=null,!0))).catch((n=>(t<this.pendingBackendInitId||(this.pendingBackendInit=null,console.warn(`Initialization of backend ${e} failed`),console.warn(n.stack||n.message)),!1)));return this.pendingBackendInit=n,{success:n,asyncInit:!0}}}catch(t){return console.warn(`Initialization of backend ${e} failed`),console.warn(t.stack||t.message),{success:!1,asyncInit:!1}}}removeBackend(e){if(!(e in this.registryFactory))throw new Error(`${e} backend not found in registry`);this.backendName===e&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,e in this.registry&&(this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e]),delete this.registryFactory[e],this.backendName===e&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort(((e,t)=>this.registryFactory[t].priority-this.registryFactory[e].priority))}initializeBackendsAndReturnBest(){const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t],{success:a,asyncInit:r}=this.initializeBackend(n);if(r||a)return{name:n,asyncInit:r}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(e,t){const n=this.state.tensorInfo.get(t),a=n.backend,r=this.readSync(t),s=a.refCount(t);a.disposeData(t,!0),n.backend=e,e.move(t,r,n.shape,n.dtype,s),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(e,t){let n,a=null;if(null==t){if("function"!=typeof e)throw new Error("Please provide a function to tidy()");t=e}else{if("string"!=typeof e&&!(e instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof t)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");a=e}return this.scopedRun((()=>this.startScope(a)),(()=>this.endScope(n)),(()=>(n=t(),n instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),n)))}scopedRun(e,t,n){e();try{const e=n();return t(),e}catch(e){throw t(),e}}nextTensorId(){return Tr.nextTensorId++}nextVariableId(){return Tr.nextVariableId++}clone(e){const t=Er.runKernel(lt,{x:e}),n={x:e};return this.addTapeNode(this.state.activeScope.name,n,[t],(e=>({x:()=>{const t={x:e},n={dtype:"float32"};return Er.runKernel(xe,t,n)}})),[],{}),t}runKernel(e,t,n){if(!(null!=na(e,this.backendName)))throw new Error(`Kernel '${e}' not registered for backend '${this.backendName}'`);return this.runKernelFunc({kernelName:e,inputs:t,attrs:n})}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(e,t,n){const a=this.backend.numDataIds();let r=0;n.forEach((e=>{r+="complex64"===e.dtype?3:1}));const s=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],o=a-t-r-s;if(o>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${o} data ids) after running '${e}'`)}runKernelFunc(e){let t,n=[];const a=this.isTapeOn(),r=this.state.numBytes,s=this.state.numTensors;let o,u;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0),null==this.backendName&&this.backend;const l=Nr(e)?e.kernelName:null!=this.state.activeScope?this.state.activeScope.name:"";if(Nr(e)){const{kernelName:t,inputs:r,attrs:s}=e;null==this.backendName&&this.backend;const l=na(t,this.backendName);i(null!=l,(()=>`Cannot find registered kernel '${t}' for backend '${this.backendName}'`)),o=()=>{const e=this.backend.numDataIds();u=l.kernelFunc({inputs:r,attrs:s,backend:this.backend});const o=Array.isArray(u)?u:[u];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(t,e,o);const i=o.map((e=>{if(null!=e.rank)return e;const{dataId:t,shape:n,dtype:a}=e;return this.makeTensorFromDataId(t,n,a)}));if(a){const e=this.getTensorsForGradient(t,r,i);n=this.saveTensorsForBackwardMode(e)}return i}}else{const{forwardFunc:t}=e,r=e=>{a&&(n=e.map((e=>this.keep(this.clone(e)))))};o=()=>{const e=this.backend.numDataIds();u=this.tidy((()=>t(this.backend,r)));const n=Array.isArray(u)?u:[u];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(l,e,n),n}}const{inputs:c,attrs:d}=e,p=Nr(e)?null:e.backwardsFunc;let h;return this.scopedRun((()=>this.state.kernelDepth++),(()=>this.state.kernelDepth--),(()=>{this.ENV.getBool("DEBUG")||this.state.profiling?(h=this.profiler.profileKernel(l,c,(()=>o())),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(h),t=h.outputs):t=o()})),a&&this.addTapeNode(l,c,t,p,n,d),this.state.profiling&&this.state.activeProfile.kernels.push({name:l,bytesAdded:this.state.numBytes-r,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-s,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(c).map((e=>null!=c[e]?c[e].shape:null)),outputShapes:t.map((e=>e.shape)),kernelTimeMs:h.timeMs,extraInfo:h.extraInfo}),Array.isArray(u)?t:t[0]}saveTensorsForBackwardMode(e){return e.map((e=>this.keep(this.clone(e))))}getTensorsForGradient(e,t,n){const a=aa(e);if(null!=a){const e=a.inputsToSave||[],r=a.outputsToSave||[];let s;a.saveAllInputs?(i(Array.isArray(t),(()=>"saveAllInputs is true, expected inputs to be an array.")),s=Object.keys(t).map((e=>t[e]))):s=e.map((e=>t[e]));const o=n.filter(((e,t)=>r[t]));return s.concat(o)}return[]}makeTensor(e,t,n,a){if(null==e)throw new Error("Values passed to engine.makeTensor() are null");n=n||"float32",a=a||this.backend;let r=e;"string"===n&&E(e[0])&&(r=e.map((e=>Ka(e))));const s=a.write(r,t,n),o=new lr(t,n,s,this.nextTensorId());if(this.trackTensor(o,a),"string"===n){const e=this.state.tensorInfo.get(s),t=C(r);this.state.numBytes+=t-e.bytes,e.bytes=t}return o}makeTensorFromDataId(e,t,n,a){const r=new lr(t,n=n||"float32",e,this.nextTensorId());return this.trackTensor(r,a),r}makeVariable(e,t=!0,n,a){n=n||this.nextVariableId().toString(),null!=a&&a!==e.dtype&&(e=e.cast(a));const r=new cr(e,t,n,this.nextTensorId());if(null!=this.state.registeredVariables[r.name])throw new Error(`Variable with name ${r.name} was already registered`);return this.state.registeredVariables[r.name]=r,this.incRef(r,this.backend),r}trackTensor(e,t){this.state.numTensors++,"string"===e.dtype&&this.state.numStringTensors++;let n=0;"complex64"!==e.dtype&&"string"!==e.dtype&&(n=e.size*T(e.dtype)),this.state.numBytes+=n,this.state.tensorInfo.has(e.dataId)||(this.state.numDataBuffers++,this.state.tensorInfo.set(e.dataId,{backend:t||this.backend,dtype:e.dtype,shape:e.shape,bytes:n})),e instanceof cr||this.track(e)}incRef(e,t){this.trackTensor(e,t),this.backend.incRef(e.dataId)}removeDataId(e,t){this.state.tensorInfo.has(e)&&this.state.tensorInfo.get(e).backend===t&&(this.state.tensorInfo.delete(e),this.state.numDataBuffers--)}disposeTensor(e){if(!this.state.tensorInfo.has(e.dataId))return;const t=this.state.tensorInfo.get(e.dataId);if(this.state.numTensors--,"string"===e.dtype&&(this.state.numStringTensors--,this.state.numBytes-=t.bytes),"complex64"!==e.dtype&&"string"!==e.dtype){const t=e.size*T(e.dtype);this.state.numBytes-=t}t.backend.disposeData(e.dataId)&&this.removeDataId(e.dataId,t.backend)}disposeVariables(){for(const e in this.state.registeredVariables){const t=this.state.registeredVariables[e];this.disposeVariable(t)}}disposeVariable(e){this.disposeTensor(e),null!=this.state.registeredVariables[e.name]&&delete this.state.registeredVariables[e.name]}memory(){const e=this.backend.memory();return e.numTensors=this.state.numTensors,e.numDataBuffers=this.state.numDataBuffers,e.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(e.unreliable=!0,null==e.reasons&&(e.reasons=[]),e.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),e}async profile(e){this.state.profiling=!0;const t=this.state.numBytes,n=this.state.numTensors;this.state.activeProfile.kernels=[],this.state.activeProfile.result=await e(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map((e=>e.totalBytesSnapshot))),this.state.activeProfile.newBytes=this.state.numBytes-t,this.state.activeProfile.newTensors=this.state.numTensors-n;for(const e of this.state.activeProfile.kernels)e.kernelTimeMs=await e.kernelTimeMs,e.extraInfo=await e.extraInfo;return this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(e,t,n,a,r,s){const o={id:this.state.nextTapeNodeId++,kernelName:e,inputs:t,outputs:n,saved:r},i=aa(e);null!=i&&(a=i.gradFunc),null!=a&&(o.gradient=e=>(e=e.map(((e,t)=>{if(null==e){const e=n[t],a=P(e.size,e.dtype);return this.makeTensor(a,e.shape,e.dtype)}return e})),a(e.length>1?e:e[0],r,s))),this.state.activeTape.push(o)}keep(e){return e.kept=!0,e}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(e){const t={track:[],name:"unnamed scope",id:this.state.nextScopeId++};e&&(t.name=e),this.state.scopeStack.push(t),this.state.activeScope=t}endScope(e){const t=kr(e),n=new Set(t.map((e=>e.id)));for(let e=0;e<this.state.activeScope.track.length;e++){const t=this.state.activeScope.track[e];t.kept||n.has(t.id)||t.dispose()}const a=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],t.forEach((e=>{e.kept||e.scopeId!==a.id||this.track(e)}))}gradients(e,t,n,a=!1){if(i(t.length>0,(()=>"gradients() received an empty list of xs.")),null!=n&&"float32"!==n.dtype)throw new Error(`dy must have 'float32' dtype, but has '${n.dtype}'`);const r=this.scopedRun((()=>this.startTape()),(()=>this.endTape()),(()=>this.tidy("forward",e)));i(r instanceof lr,(()=>"The result y returned by f() must be a tensor."));const s=function(e,t,n){const a={},r={};for(let e=0;e<t.length;e++)a[t[e].id]=!0;for(let n=0;n<e.length;n++){const s=e[n],o=s.inputs;for(const e in o){const n=o[e];let i=!1;for(let e=0;e<t.length;e++)if(a[n.id]){s.outputs.forEach((e=>a[e.id]=!0)),i=!0,r[s.id]=!0;break}if(i)break}}const s={};s[n.id]=!0;const o={};for(let t=e.length-1;t>=0;t--){const n=e[t],a=n.inputs;for(let e=0;e<n.outputs.length;e++)if(s[n.outputs[e].id]){for(const e in a)s[a[e].id]=!0,o[n.id]=!0;break}}const i=[];for(let t=0;t<e.length;t++){const n=e[t];if(r[n.id]&&o[n.id]){const e={};for(const t in n.inputs){const r=n.inputs[t];a[r.id]&&(e[t]=r)}const t=Object.assign({},n);t.inputs=e,t.outputs=n.outputs,i.push(t)}}return i}(this.state.activeTape,t,r);if(!a&&0===s.length&&t.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",(()=>{const e={};e[r.id]=null==n?function(e){const t=L(d(e),"float32");return Er.makeTensor(t,e,"float32")}(r.shape):n,function(e,t,n,a){for(let r=t.length-1;r>=0;r--){const s=t[r],o=[];if(s.outputs.forEach((t=>{const n=e[t.id];null!=n?o.push(n):o.push(null)})),null==s.gradient)throw new Error(`Cannot compute gradient: gradient function not found for ${s.kernelName}.`);const i=s.gradient(o);for(const t in s.inputs){if(!(t in i))throw new Error(`Cannot backprop through input ${t}. Available gradients found: ${Object.keys(i)}.`);const r=n((()=>i[t]()));if("float32"!==r.dtype)throw new Error(`Error in gradient for op ${s.kernelName}. The gradient of input ${t} must have 'float32' dtype, but has '${r.dtype}'`);const o=s.inputs[t];if(!p(r.shape,o.shape))throw new Error(`Error in gradient for op ${s.kernelName}. The gradient of input '${t}' has shape '${r.shape}', which does not match the shape of the input '${o.shape}'`);if(null==e[o.id])e[o.id]=r;else{const t=e[o.id];e[o.id]=a(t,r),t.dispose()}}}}(e,s,(e=>this.tidy(e)),Sr);const a=t.map((t=>e[t.id]));return 0===this.state.gradientDepth&&(this.state.activeTape.forEach((e=>{for(const t of e.saved)t.dispose()})),this.state.activeTape=null),{value:r,grads:a}}))}customGrad(e){return i(_(e),(()=>"The f passed in customGrad(f) must be a function.")),(...t)=>{let n;i(t.every((e=>e instanceof lr)),(()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors"));const a={};t.forEach(((e,t)=>{a[t]=e}));return this.runKernelFunc({forwardFunc:(a,r)=>(n=e(...t,r),i(n.value instanceof lr,(()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor")),i(_(n.gradFunc),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function.")),n.value),backwardsFunc:(e,a)=>{const r=n.gradFunc(e,a),s=Array.isArray(r)?r:[r];i(s.length===t.length,(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...).")),i(s.every((e=>e instanceof lr)),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors."));const o={};return s.forEach(((e,t)=>{o[t]=()=>e})),o},inputs:a})}}readSync(e){return this.state.tensorInfo.get(e).backend.readSync(e)}read(e){return this.state.tensorInfo.get(e).backend.read(e)}async time(e){const t=qa(),n=await this.backend.time(e);return n.wallMs=qa()-t,n}track(e){return null!=this.state.activeScope&&(e.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(e)),e}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new $r;for(const e in this.registry)this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}function Cr(){const e=Y();if(null==e._tfengine){const t=new H(e);e._tfengine=new Tr(t)}var t;return t=e._tfengine.ENV,X=t,or=()=>e._tfengine,e._tfengine}Tr.nextTensorId=0,Tr.nextVariableId=0;const Er=Cr();function Sr(e,t){const n={a:e,b:t};return Er.runKernel(te,n)}function Rr(e){if(e||"undefined"!=typeof navigator&&null!=navigator){if(e||(e=navigator),"ReactNative"===e.product)return!0;const t=e.userAgent||e.vendor||window.opera;return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0,4))}return!1}function Ar(){return"undefined"!=typeof window&&null!=window.document||"undefined"!=typeof WorkerGlobalScope}var _r=Object.freeze({__proto__:null,isMobile:Rr,isBrowser:Ar});const Fr=q();function Or(e,t){let n=e;if($(e))return"string"===t?[]:[e.length];if(!Array.isArray(e))return[];const a=[];for(;Array.isArray(n)||$(n)&&"string"!==t;)a.push(n.length),n=n[0];return Array.isArray(e)&&q().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&Dr(e,a,[]),a}function Dr(e,t,n){if(n=n||[],!Array.isArray(e)&&!$(e))return void i(0===t.length,(()=>`Element arr[${n.join("][")}] is a primitive, but should be an array/TypedArray of ${t[0]} elements`));i(t.length>0,(()=>`Element arr[${n.join("][")}] should be a primitive, but is an array of ${e.length} elements`)),i(e.length===t[0],(()=>`Element arr[${n.join("][")}] should have ${t[0]} elements, but has ${e.length} elements`));const a=t.slice(1);for(let t=0;t<e.length;++t)Dr(e[t],a,n.concat(t))}function Mr(e,t,n,a){if("string_or_numeric"!==e){if(null==e)throw new Error("Expected dtype cannot be null.");if("numeric"!==e&&e!==t||"numeric"===e&&"string"===t)throw new Error(`Argument '${n}' passed to '${a}' must be ${e} tensor, but got ${t} tensor`)}}function Lr(e,t,n,a="numeric"){if(e instanceof lr)return Mr(a,e.dtype,t,n),e;let r=A(e);if("string"!==r&&["bool","int32","float32"].indexOf(a)>=0&&(r=a),Mr(a,r,t,n),null==e||!$(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e){const a=null==e?"null":e.constructor.name;throw new Error(`Argument '${t}' passed to '${n}' must be a Tensor or TensorLike, but got '${a}'`)}const s=Or(e,r);$(e)||Array.isArray(e)||(e=[e]);const o="string"!==r?ja(e,r):c(e,[],!0);return Er.makeTensor(o,s,r)}function Pr(e,t,n,a="numeric"){if(!Array.isArray(e))throw new Error(`Argument ${t} passed to ${n} must be a \`Tensor[]\` or \`TensorLike[]\``);return e.map(((e,r)=>Lr(e,`${t}[${r}]`,n,a)))}Fr.registerFlag("DEBUG",(()=>!1),(e=>{e&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")})),Fr.registerFlag("IS_BROWSER",(()=>Ar())),Fr.registerFlag("IS_NODE",(()=>"undefined"!=typeof process&&void 0!==process.versions&&void 0!==process.versions.node)),Fr.registerFlag("IS_CHROME",(()=>"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor))),Fr.registerFlag("PROD",(()=>!1)),Fr.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",(()=>Fr.getBool("DEBUG"))),Fr.registerFlag("DEPRECATION_WARNINGS_ENABLED",(()=>!0)),Fr.registerFlag("IS_TEST",(()=>!1)),Fr.registerFlag("CHECK_COMPUTATION_FOR_ERRORS",(()=>!0)),Fr.registerFlag("WRAP_TO_IMAGEBITMAP",(()=>!1));const Br="__op";function Wr(e){const t=Object.keys(e);if(1!==t.length)throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${t.length} keys.`);let n=t[0];const a=e[n];n.endsWith("_")&&(n=n.substring(0,n.length-1)),n+=Br;const r=(...e)=>{Er.startScope(n);try{const t=a(...e);return U(t)&&console.error("Cannot return a Promise inside of tidy."),Er.endScope(t),t}catch(e){throw Er.endScope(null),e}};return Object.defineProperty(r,"name",{value:n,configurable:!0}),r}const Vr=Wr({complex_:function(e,t){const n=Lr(e,"real","complex"),a=Lr(t,"imag","complex");u(n.shape,a.shape,`real and imag shapes, ${n.shape} and ${a.shape}, must match in call to tf.complex().`);const r={real:n,imag:a};return Er.runKernel(we,r)}});function zr(e,t,n,a){if(null==a&&(a=A(e)),"complex64"===a)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(!$(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=t){W(t);const e=d(t),a=d(n);i(e===a,(()=>`Based on the provided shape, [${t}], the tensor should have ${e} values but has ${a}`));for(let e=0;e<n.length;++e){const a=n[e],r=e!==n.length-1||a!==d(t.slice(e));i(n[e]===t[e]||!r,(()=>`Error creating a new Tensor. Inferred shape (${n}) does not match the provided shape (${t}). `))}}return $(e)||Array.isArray(e)||(e=[e]),t=t||n,e="string"!==a?ja(e,a):c(e,[],!0),Er.makeTensor(e,t,a)}function Ur(e,t,n){return zr(e,t,Or(e,n),n)}const Gr={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8};function Hr(e,t){const n={};let a,r=0;for(const s of t){const t=s.name,o=s.dtype,i=s.shape,u=d(i);let l;if("quantization"in s){const n=s.quantization;if("uint8"===n.dtype||"uint16"===n.dtype){if(!("min"in n)||!("scale"in n))throw new Error(`Weight ${s.name} with quantization ${n.dtype} doesn't have corresponding metadata min and scale.`)}else{if("float16"!==n.dtype)throw new Error(`Weight ${s.name} has unknown quantization dtype ${n.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);if("float32"!==o)throw new Error(`Weight ${s.name} is quantized with ${n.dtype} which only supports weights of type float32 not ${o}.`)}const i=Gr[n.dtype],c=e.slice(r,r+u*i),d="uint8"===n.dtype?new Uint8Array(c):new Uint16Array(c);if("float32"===o)if("uint8"===n.dtype||"uint16"===n.dtype){l=new Float32Array(d.length);for(let e=0;e<d.length;e++){const t=d[e];l[e]=t*n.scale+n.min}}else{if("float16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type float32.`);void 0===a&&(a=Zr()),l=a(d)}else{if("int32"!==o)throw new Error(`Unsupported dtype in weight '${t}': ${o}`);if("uint8"!==n.dtype&&"uint16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type int32.`);l=new Int32Array(d.length);for(let e=0;e<d.length;e++){const t=d[e];l[e]=Math.round(t*n.scale+n.min)}}r+=u*i}else if("string"===o){const t=d(s.shape);l=[];for(let n=0;n<t;n++){const t=new Uint32Array(e.slice(r,r+4))[0];r+=4;const n=new Uint8Array(e.slice(r,r+t));l.push(n),r+=t}}else{const a=Gr[o],s=e.slice(r,r+u*a);if("float32"===o)l=new Float32Array(s);else if("int32"===o)l=new Int32Array(s);else if("bool"===o)l=new Uint8Array(s);else{if("complex64"!==o)throw new Error(`Unsupported dtype in weight '${t}': ${o}`);{l=new Float32Array(s);const e=new Float32Array(l.length/2),a=new Float32Array(l.length/2);for(let t=0;t<e.length;t++)e[t]=l[2*t],a[t]=l[2*t+1];const r=Ur(e,i,"float32"),o=Ur(a,i,"float32");n[t]=Vr(r,o),r.dispose(),o.dispose()}}r+=u*a}"complex64"!==o&&(n[t]=Ur(l,i,o))}return n}function jr(e){if(null===e)throw new Error(`Invalid input value: ${JSON.stringify(e)}`);let t=0;const n=[];e.forEach((e=>{if(t+=e.byteLength,n.push(e.byteLength===e.buffer.byteLength?e:new e.constructor(e)),!(e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array))throw new Error(`Unsupported TypedArray subtype: ${e.constructor.name}`)}));const a=new Uint8Array(t);let r=0;return n.forEach((e=>{a.set(new Uint8Array(e.buffer),r),r+=e.byteLength})),a.buffer}const qr="undefined"!=typeof Buffer&&("undefined"==typeof Blob||"undefined"==typeof atob||"undefined"==typeof btoa);function Kr(e){return qr?Buffer.byteLength(e):new Blob([e]).size}function Xr(e){if(1===e.length)return e[0];let t=0;e.forEach((e=>{t+=e.byteLength}));const n=new Uint8Array(t);let a=0;return e.forEach((e=>{n.set(new Uint8Array(e),a),a+=e.byteLength})),n.buffer}function Yr(e){for(e=e.trim();e.endsWith("/");)e=e.slice(0,e.length-1);const t=e.split("/");return t[t.length-1]}function Qr(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==e.modelTopology?0:Kr(JSON.stringify(e.modelTopology)),weightSpecsBytes:null==e.weightSpecs?0:Kr(JSON.stringify(e.weightSpecs)),weightDataBytes:null==e.weightData?0:e.weightData.byteLength}}function Zr(){const e=function(){const e=e=>{let t=e<<13,n=0;for(;0==(8388608&t);)n-=8388608,t<<=1;return t&=-8388609,n+=947912704,t|n},t=new Uint32Array(2048);t[0]=0;for(let n=1;n<1024;n++)t[n]=e(n);for(let e=1024;e<2048;e++)t[e]=939524096+(e-1024<<13);return t}(),t=function(){const e=new Uint32Array(64);e[0]=0,e[31]=1199570944,e[32]=2147483648,e[63]=3347054592;for(let t=1;t<31;t++)e[t]=t<<23;for(let t=33;t<63;t++)e[t]=2147483648+(t-32<<23);return e}(),n=function(){const e=new Uint32Array(64);for(let t=0;t<64;t++)e[t]=1024;return e[0]=e[32]=0,e}();return a=>{const r=new ArrayBuffer(4*a.length),s=new Uint32Array(r);for(let r=0;r<a.length;r++){const o=a[r],i=e[n[o>>10]+(1023&o)]+t[o>>10];s[r]=i}return new Float32Array(r)}}class Jr{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return null==Jr.instance&&(Jr.instance=new Jr),Jr.instance}static registerSaveRouter(e){Jr.getInstance().saveRouters.push(e)}static registerLoadRouter(e){Jr.getInstance().loadRouters.push(e)}static getSaveHandlers(e){return Jr.getHandlers(e,"save")}static getLoadHandlers(e,t){return Jr.getHandlers(e,"load",t)}static getHandlers(e,t,n){const a=[];return("load"===t?Jr.getInstance().loadRouters:Jr.getInstance().saveRouters).forEach((t=>{const r=t(e,n);null!==r&&a.push(r)})),a}}const es=e=>Jr.getSaveHandlers(e),ts=(e,t)=>Jr.getLoadHandlers(e,t),ns="tensorflowjs",as="models_store",rs="model_info_store";function ss(){if(!q().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");const e="undefined"==typeof window?self:window,t=e.indexedDB||e.mozIndexedDB||e.webkitIndexedDB||e.msIndexedDB||e.shimIndexedDB;if(null==t)throw new Error("The current browser does not appear to support IndexedDB.");return t}function os(e){const t=e.result;t.createObjectStore(as,{keyPath:"modelPath"}),t.createObjectStore(rs,{keyPath:"modelPath"})}class is{constructor(e){if(this.indexedDB=ss(),null==e||!e)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=e}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return this.databaseAction(this.modelPath,e)}async load(){return this.databaseAction(this.modelPath)}databaseAction(e,t){return new Promise(((e,n)=>{const a=this.indexedDB.open(ns,1);a.onupgradeneeded=()=>os(a),a.onsuccess=()=>{const r=a.result;if(null==t){const t=r.transaction(as,"readonly"),a=t.objectStore(as).get(this.modelPath);a.onsuccess=()=>{if(null==a.result)return r.close(),n(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));e(a.result.modelArtifacts)},a.onerror=e=>(r.close(),n(a.error)),t.oncomplete=()=>r.close()}else{const a=Qr(t),s=r.transaction(rs,"readwrite");let o=s.objectStore(rs);const i=o.put({modelPath:this.modelPath,modelArtifactsInfo:a});let u;i.onsuccess=()=>{u=r.transaction(as,"readwrite");const i=u.objectStore(as).put({modelPath:this.modelPath,modelArtifacts:t,modelArtifactsInfo:a});i.onsuccess=()=>e({modelArtifactsInfo:a}),i.onerror=e=>{o=s.objectStore(rs);const t=o.delete(this.modelPath);t.onsuccess=()=>(r.close(),n(i.error)),t.onerror=e=>(r.close(),n(i.error))}},i.onerror=e=>(r.close(),n(i.error)),s.oncomplete=()=>{null==u?r.close():u.oncomplete=()=>r.close()}}},a.onerror=e=>n(a.error)}))}}is.URL_SCHEME="indexeddb://";const us=e=>{return q().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(is.URL_SCHEME)?(t=e.slice(is.URL_SCHEME.length),new is(t)):null;var t};Jr.registerSaveRouter(us),Jr.registerLoadRouter(us);class ls{constructor(){this.indexedDB=ss()}async listModels(){return new Promise(((e,t)=>{const n=this.indexedDB.open(ns,1);n.onupgradeneeded=()=>os(n),n.onsuccess=()=>{const a=n.result,r=a.transaction(rs,"readonly"),s=r.objectStore(rs).getAll();s.onsuccess=()=>{const t={};for(const e of s.result)t[e.modelPath]=e.modelArtifactsInfo;e(t)},s.onerror=e=>(a.close(),t(s.error)),r.oncomplete=()=>a.close()},n.onerror=e=>t(n.error)}))}async removeModel(e){var t;return e=(t=e).startsWith(is.URL_SCHEME)?t.slice(is.URL_SCHEME.length):t,new Promise(((t,n)=>{const a=this.indexedDB.open(ns,1);a.onupgradeneeded=()=>os(a),a.onsuccess=()=>{const r=a.result,s=r.transaction(rs,"readwrite"),o=s.objectStore(rs),i=o.get(e);let u;i.onsuccess=()=>{if(null==i.result)return r.close(),n(new Error(`Cannot find model with path '${e}' in IndexedDB.`));{const a=o.delete(e),s=()=>{u=r.transaction(as,"readwrite");const a=u.objectStore(as).delete(e);a.onsuccess=()=>t(i.result.modelArtifactsInfo),a.onerror=e=>n(i.error)};a.onsuccess=s,a.onerror=e=>(s(),r.close(),n(i.error))}},i.onerror=e=>(r.close(),n(i.error)),s.oncomplete=()=>{null==u?r.close():u.oncomplete=()=>r.close()}},a.onerror=e=>n(a.error)}))}}const cs="/",ds="tensorflowjs_models",ps="info",hs="model_topology",fs="weight_specs",ms="weight_data",gs="model_metadata";function ys(e){return{info:[ds,e,ps].join(cs),topology:[ds,e,hs].join(cs),weightSpecs:[ds,e,fs].join(cs),weightData:[ds,e,ms].join(cs),modelMetadata:[ds,e,gs].join(cs)}}function bs(e){const t=e.split(cs);if(t.length<3)throw new Error(`Invalid key format: ${e}`);return t.slice(1,t.length-1).join(cs)}class xs{constructor(e){if(!q().getBool("IS_BROWSER")||"undefined"==typeof window||void 0===window.localStorage)throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==e||!e)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=e,this.keys=ys(this.modelPath)}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{const t=JSON.stringify(e.modelTopology),n=JSON.stringify(e.weightSpecs),a=Qr(e);try{this.LS.setItem(this.keys.info,JSON.stringify(a)),this.LS.setItem(this.keys.topology,t),this.LS.setItem(this.keys.weightSpecs,n),this.LS.setItem(this.keys.weightData,function(e){if(qr)return Buffer.from(e).toString("base64");const t=new Uint8Array(e);let n="";for(let e=0,a=t.length;e<a;e++)n+=String.fromCharCode(t[e]);return btoa(n)}(e.weightData));const r={format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy};return null!=e.signature&&(r.signature=e.signature),null!=e.userDefinedMetadata&&(r.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(r.modelInitializer=e.modelInitializer),this.LS.setItem(this.keys.modelMetadata,JSON.stringify(r)),{modelArtifactsInfo:a}}catch(e){throw this.LS.removeItem(this.keys.info),this.LS.removeItem(this.keys.topology),this.LS.removeItem(this.keys.weightSpecs),this.LS.removeItem(this.keys.weightData),this.LS.removeItem(this.keys.modelMetadata),new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${a.modelTopologyBytes}, weightSpecsBytes=${a.weightSpecsBytes}, weightDataBytes=${a.weightDataBytes}.`)}}}async load(){const e=JSON.parse(this.LS.getItem(this.keys.info));if(null==e)throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);if("JSON"!==e.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");const t={},n=JSON.parse(this.LS.getItem(this.keys.topology));if(null==n)throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);t.modelTopology=n;const a=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(null==a)throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);t.weightSpecs=a;const r=this.LS.getItem(this.keys.modelMetadata);if(null!=r){const e=JSON.parse(r);t.format=e.format,t.generatedBy=e.generatedBy,t.convertedBy=e.convertedBy,null!=e.signature&&(t.signature=e.signature),null!=e.userDefinedMetadata&&(t.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(t.modelInitializer=e.modelInitializer)}const s=this.LS.getItem(this.keys.weightData);if(null==s)throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);return t.weightData=function(e){if(qr){const t=Buffer.from(e,"base64");return t.buffer.slice(t.byteOffset,t.byteOffset+t.byteLength)}const t=atob(e),n=new Uint8Array(t.length);for(let e=0;e<t.length;++e)n.set([t.charCodeAt(e)],e);return n.buffer}(s),t}}xs.URL_SCHEME="localstorage://";const vs=e=>{return q().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(xs.URL_SCHEME)?(t=e.slice(xs.URL_SCHEME.length),new xs(t)):null;var t};Jr.registerSaveRouter(vs),Jr.registerLoadRouter(vs);class ks{constructor(){i(q().getBool("IS_BROWSER"),(()=>"Current environment is not a web browser")),i("undefined"==typeof window||void 0!==window.localStorage,(()=>"Current browser does not appear to support localStorage")),this.LS=window.localStorage}async listModels(){const e={},t=ds+cs,n=cs+ps;for(let a=0;a<this.LS.length;++a){const r=this.LS.key(a);if(r.startsWith(t)&&r.endsWith(n)){e[bs(r)]=JSON.parse(this.LS.getItem(r))}}return e}async removeModel(e){var t;const n=ys(e=(t=e).startsWith(xs.URL_SCHEME)?t.slice(xs.URL_SCHEME.length):t);if(null==this.LS.getItem(n.info))throw new Error(`Cannot find model at path '${e}'`);const a=JSON.parse(this.LS.getItem(n.info));return this.LS.removeItem(n.info),this.LS.removeItem(n.topology),this.LS.removeItem(n.weightSpecs),this.LS.removeItem(n.weightData),a}}const ws="://";class Is{constructor(){this.managers={}}static getInstance(){return null==Is.instance&&(Is.instance=new Is),Is.instance}static registerManager(e,t){i(null!=e,(()=>"scheme must not be undefined or null.")),e.endsWith(ws)&&(e=e.slice(0,e.indexOf(ws))),i(e.length>0,(()=>"scheme must not be an empty string."));const n=Is.getInstance();i(null==n.managers[e],(()=>`A model store manager is already registered for scheme '${e}'.`)),n.managers[e]=t}static getManager(e){const t=this.getInstance().managers[e];if(null==t)throw new Error(`Cannot find model manager for scheme '${e}'`);return t}static getSchemes(){return Object.keys(this.getInstance().managers)}}function Ns(e){if(-1===e.indexOf(ws))throw new Error(`The url string provided does not contain a scheme. Supported schemes are: ${Is.getSchemes().join(",")}`);return{scheme:e.split(ws)[0],path:e.split(ws)[1]}}async function $s(e,t,n=!1){i(e!==t,(()=>`Old path and new path are the same: '${e}'`));const a=Jr.getLoadHandlers(e);i(a.length>0,(()=>`Copying failed because no load handler is found for source URL ${e}.`)),i(a.length<2,(()=>`Copying failed because more than one (${a.length}) load handlers for source URL ${e}.`));const r=a[0],s=Jr.getSaveHandlers(t);i(s.length>0,(()=>`Copying failed because no save handler is found for destination URL ${t}.`)),i(s.length<2,(()=>`Copying failed because more than one (${a.length}) save handlers for destination URL ${t}.`));const o=s[0],u=Ns(e).scheme,l=Ns(e).path,c=u===Ns(e).scheme,d=await r.load();n&&c&&await Is.getManager(u).removeModel(l);const p=await o.save(d);return n&&!c&&await Is.getManager(u).removeModel(l),p.modelArtifactsInfo}class Ts{fetch(e,t){return fetch(e,t)}now(){return performance.now()}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Browser's encoder only supports utf-8, but got ${t}`);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(e)}decode(e,t){return new TextDecoder(t).decode(e)}}if(q().get("IS_BROWSER")){q().setPlatform("browser",new Ts);try{Is.registerManager(xs.URL_SCHEME,new ks)}catch(e){}try{Is.registerManager(is.URL_SCHEME,new ls)}catch(e){}}const Cs=()=>require("node-fetch");let Es;class Ss{constructor(){this.util=require("util"),this.textEncoder=new this.util.TextEncoder}fetch(e,t){return null!=q().global.fetch?q().global.fetch(e,t):(null==Es&&(Es=Cs()),Es(e,t))}now(){const e=process.hrtime();return 1e3*e[0]+e[1]/1e6}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Node built-in encoder only supports utf-8, but got ${t}`);return this.textEncoder.encode(e)}decode(e,t){return 0===e.length?"":new this.util.TextDecoder(t).decode(e)}}function Rs(e,t="float32",n){return t=t||"float32",W(e),new sr(e,t,n)}q().get("IS_NODE")&&q().setPlatform("node",new Ss);const As=Wr({cast_:function(e,t){const n=Lr(e,"x","cast");if(!I(t))throw new Error(`Failed to cast to unknown dtype ${t}`);if("string"===t&&"string"!==n.dtype||"string"!==t&&"string"===n.dtype)throw new Error("Only strings can be casted to strings");const a={x:n},r={dtype:t};return Er.runKernel(xe,a,r)}});const _s=Wr({clone_:function(e){const t={x:Lr(e,"x","clone","string_or_numeric")};return Er.runKernel(lt,t)}});function Fs(e,t=!1){console.log(e.toString(t))}Cr();ir={buffer:Rs,cast:As,clone:_s,print:Fs};function Os(e){return new Promise((e=>setTimeout(e))).then(e)}class Ds{constructor(e){if(!q().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");e.startsWith(Ds.URL_SCHEME)&&(e=e.slice(Ds.URL_SCHEME.length)),null!=e&&0!==e.length||(e="model"),this.modelTopologyFileName=e+".json",this.weightDataFileName=e+".weights.bin"}async save(e){if("undefined"==typeof document)throw new Error("Browser downloads are not supported in this environment since `document` is not present");const t=window.URL.createObjectURL(new Blob([e.weightData],{type:"application/octet-stream"}));if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{const n=[{paths:["./"+this.weightDataFileName],weights:e.weightSpecs}],a={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,weightsManifest:n};null!=e.signature&&(a.signature=e.signature),null!=e.userDefinedMetadata&&(a.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(a.modelInitializer=e.modelInitializer);const r=window.URL.createObjectURL(new Blob([JSON.stringify(a)],{type:"application/json"})),s=null==this.jsonAnchor?document.createElement("a"):this.jsonAnchor;if(s.download=this.modelTopologyFileName,s.href=r,await Os((()=>s.dispatchEvent(new MouseEvent("click")))),null!=e.weightData){const e=null==this.weightDataAnchor?document.createElement("a"):this.weightDataAnchor;e.download=this.weightDataFileName,e.href=t,await Os((()=>e.dispatchEvent(new MouseEvent("click"))))}return{modelArtifactsInfo:Qr(e)}}}}Ds.URL_SCHEME="downloads://";class Ms{constructor(e){if(null==e||e.length<1)throw new Error(`When calling browserFiles, at least 1 file is required, but received ${e}`);this.files=e}async load(){const e=this.files[0],t=this.files.slice(1);return new Promise(((n,a)=>{const r=new FileReader;r.onload=r=>{const s=JSON.parse(r.target.result),o=s.modelTopology;if(null==o)return void a(new Error(`modelTopology field is missing from file ${e.name}`));0===t.length&&n({modelTopology:o});const i=s.weightsManifest;if(null==i)return void a(new Error(`weightManifest field is missing from file ${e.name}`));let u;try{u=this.checkManifestAndWeightFiles(i,t)}catch(e){return void a(e)}const l=[],c=[],d=[];i.forEach((e=>{e.paths.forEach((e=>{c.push(e),d.push(null)})),l.push(...e.weights)})),i.forEach((e=>{e.paths.forEach((e=>{const t=new FileReader;t.onload=t=>{const a=t.target.result,r=c.indexOf(e);if(d[r]=a,-1===d.indexOf(null)){const e={modelTopology:o,weightSpecs:l,weightData:Xr(d),format:s.format,generatedBy:s.generatedBy,convertedBy:s.convertedBy};null!=s.signature&&(e.signature=s.signature),null!=s.userDefinedMetadata&&(e.userDefinedMetadata=s.userDefinedMetadata),null!=s.modelInitializer&&(e.modelInitializer=s.modelInitializer),n(e)}},t.onerror=t=>a(`Failed to weights data from file of path '${e}'.`),t.readAsArrayBuffer(u[e])}))}))},r.onerror=t=>a(`Failed to read model topology and weights manifest JSON from file '${e.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`),r.readAsText(e)}))}checkManifestAndWeightFiles(e,t){const n=[],a=t.map((e=>Yr(e.name))),r={};for(const s of e)s.paths.forEach((e=>{const s=Yr(e);if(-1!==n.indexOf(s))throw new Error(`Duplicate file basename found in weights manifest: '${s}'`);if(n.push(s),-1===a.indexOf(s))throw new Error(`Weight file with basename '${s}' is not provided.`);r[e]=t[a.indexOf(s)]}));if(n.length!==t.length)throw new Error(`Mismatch in the number of files in weights manifest (${n.length}) and the number of weight files provided (${t.length}).`);return r}}function Ls(e,t,n,a){!function(e){i(null!=e&&Array.isArray(e)&&e.length>0,(()=>"promises must be a none empty array"))}(e),function(e,t){i(e>=0&&e<=1,(()=>`Progress fraction must be in range [0, 1], but got startFraction ${e}`)),i(t>=0&&t<=1,(()=>`Progress fraction must be in range [0, 1], but got endFraction ${t}`)),i(t>=e,(()=>`startFraction must be no more than endFraction, but got startFraction ${e} and endFraction ${t}`))}(n=null==n?0:n,a=null==a?1:a);let r=0;return Promise.all(e.map((s=>(s.then((s=>{const o=n+ ++r/e.length*(a-n);return t(o),s})),s))))}async function Ps(e,t){null==t&&(t={});const n=null==t.fetchFunc?q().platform.fetch:t.fetchFunc,a=e.map((e=>n(e,t.requestInit,{isBinary:!0}))),r=(null==t.onProgress?await Promise.all(a):await Ls(a,t.onProgress,0,.5)).map((e=>e.arrayBuffer()));return null==t.onProgress?await Promise.all(r):await Ls(r,t.onProgress,.5,1)}function Bs(e){return async(t,n="",a)=>{const r=t.map((()=>!1)),s={},o=null!=a?a.map((()=>!1)):[],i=[];if(t.forEach(((e,t)=>{let n=0;e.weights.forEach((e=>{const u="quantization"in e?e.quantization.dtype:e.dtype,l=Gr[u]*d(e.shape),c=()=>{r[t]=!0,null==s[t]&&(s[t]=[]),s[t].push({manifestEntry:e,groupOffset:n,sizeBytes:l})};null!=a?a.forEach(((t,n)=>{t===e.name&&(c(),o[n]=!0)})):c(),i.push(e.name),n+=l}))})),!o.every((e=>e))){const e=a.filter(((e,t)=>!o[t]));throw new Error(`Could not find weights in manifest with names: ${e.join(", ")}. \nManifest JSON has weights with names: ${i.join(", ")}.`)}const u=r.reduce(((e,t,n)=>(t&&e.push(n),e)),[]),l=[];u.forEach((e=>{t[e].paths.forEach((e=>{const t=n+(n.endsWith("/")?"":"/")+e;l.push(t)}))}));const c=await e(l),p={};let h=0;return u.forEach((e=>{const n=t[e].paths.length;let a=0;for(let e=0;e<n;e++)a+=c[h+e].byteLength;const r=new ArrayBuffer(a),o=new Uint8Array(r);let i=0;for(let e=0;e<n;e++){const t=new Uint8Array(c[h+e]);o.set(t,i),i+=t.byteLength}s[e].forEach((e=>{const t=Hr(r.slice(e.groupOffset,e.groupOffset+e.sizeBytes),[e.manifestEntry]);for(const e in t)p[e]=t[e]})),h+=n})),p}}Jr.registerSaveRouter((e=>q().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(Ds.URL_SCHEME)?function(e="model"){return new Ds(e)}(e.slice(Ds.URL_SCHEME.length)):null));class Ws{constructor(e,t){if(this.DEFAULT_METHOD="POST",null==t&&(t={}),this.weightPathPrefix=t.weightPathPrefix,this.onProgress=t.onProgress,this.weightUrlConverter=t.weightUrlConverter,null!=t.fetchFunc?(i("function"==typeof t.fetchFunc,(()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)")),this.fetch=t.fetchFunc):this.fetch=q().platform.fetch,i(null!=e&&e.length>0,(()=>"URL path for http must not be null, undefined or empty.")),Array.isArray(e)&&i(2===e.length,(()=>`URL paths for http must have a length of 2, (actual length is ${e.length}).`)),this.path=e,null!=t.requestInit&&null!=t.requestInit.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=t.requestInit||{}}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");const t=Object.assign({method:this.DEFAULT_METHOD},this.requestInit);t.body=new FormData;const n=[{paths:["./model.weights.bin"],weights:e.weightSpecs}],a={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,weightsManifest:n};null!=e.signature&&(a.signature=e.signature),null!=e.userDefinedMetadata&&(a.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(a.modelInitializer=e.modelInitializer),t.body.append("model.json",new Blob([JSON.stringify(a)],{type:"application/json"}),"model.json"),null!=e.weightData&&t.body.append("model.weights.bin",new Blob([e.weightData],{type:"application/octet-stream"}),"model.weights.bin");const r=await this.fetch(this.path,t);if(r.ok)return{modelArtifactsInfo:Qr(e),responses:[r]};throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${r.status}.`)}async load(){const e=await this.fetch(this.path,this.requestInit);if(!e.ok)throw new Error(`Request to ${this.path} failed with status code ${e.status}. Please verify this URL points to the model JSON of the model to load.`);let t;try{t=await e.json()}catch(e){let t=`Failed to parse model JSON of response from ${this.path}.`;throw this.path.endsWith(".pb")?t+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":t+=" Please make sure the server is serving valid JSON for this request.",new Error(t)}const n=t.modelTopology,a=t.weightsManifest,r=t.generatedBy,s=t.convertedBy,o=t.format,i=t.signature,u=t.userDefinedMetadata;if(null==n&&null==a)throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);let l,c;if(null!=a){const e=await this.loadWeights(a);[l,c]=e}const d={modelTopology:n,weightSpecs:l,weightData:c,generatedBy:r,convertedBy:s,format:o};null!=i&&(d.signature=i),null!=u&&(d.userDefinedMetadata=u);const p=t.modelInitializer;return p&&(d.modelInitializer=p),d}async loadWeights(e){const t=Array.isArray(this.path)?this.path[1]:this.path,[n,a]=function(e){const t=e.lastIndexOf("/"),n=e.lastIndexOf("?"),a=e.substring(0,t),r=n>t?e.substring(n):"";return[a+"/",r]}(t),r=this.weightPathPrefix||n,s=[];for(const t of e)s.push(...t.weights);const o=[],i=[];for(const t of e)for(const e of t.paths)null!=this.weightUrlConverter?i.push(this.weightUrlConverter(e)):o.push(r+e+a);this.weightUrlConverter&&o.push(...await Promise.all(i));return[s,Xr(await Ps(o,{requestInit:this.requestInit,fetchFunc:this.fetch,onProgress:this.onProgress}))]}}function Vs(e){return null!=e.match(Ws.URL_SCHEME_REGEX)}Ws.URL_SCHEME_REGEX=/^https?:\/\//;const zs=(e,t)=>{if("undefined"==typeof fetch&&(null==t||null==t.fetchFunc))return null;{let n=!0;if(n=Array.isArray(e)?e.every((e=>Vs(e))):Vs(e),n)return Us(e,t)}return null};function Us(e,t){return new Ws(e,t)}function Gs(e,t){return Us(e,t)}Jr.registerSaveRouter(zs),Jr.registerLoadRouter(zs);class Hs{constructor(e){this.modelArtifacts=e}async load(){return this.modelArtifacts}}class js{constructor(e){this.saveHandler=e}async save(e){return this.saveHandler(e)}}var qs=Object.freeze({__proto__:null,browserFiles:function(e){return new Ms(e)},browserHTTPRequest:Gs,concatenateArrayBuffers:Xr,decodeWeights:Hr,encodeWeights:async function(e,t){const n=[],a=[],r=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);for(let s=0;s<r.length;++s){const o=r[s],i=Array.isArray(e)?e[s].tensor:e[o];if("float32"!==i.dtype&&"int32"!==i.dtype&&"bool"!==i.dtype&&"string"!==i.dtype&&"complex64"!==i.dtype)throw new Error(`Unsupported dtype in weight '${o}': ${i.dtype}`);const u={name:o,shape:i.shape,dtype:i.dtype};if("string"===i.dtype){const e=new Promise((async e=>{const t=await i.bytes(),n=t.reduce(((e,t)=>e+t.length),0)+4*t.length,a=new Uint8Array(n);let r=0;for(let e=0;e<t.length;e++){const n=t[e],s=new Uint8Array(new Uint32Array([n.length]).buffer);a.set(s,r),r+=4,a.set(n,r),r+=n.length}e(a)}));a.push(e)}else a.push(i.data());null!=t&&(u.group=t),n.push(u)}return{data:jr(await Promise.all(a)),specs:n}},fromMemory:function(e,t,n,a){if(1===arguments.length){return null!=e.modelTopology||null!=e.weightSpecs?new Hs(e):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new Hs({modelTopology:e}))}return console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new Hs({modelTopology:e,weightSpecs:t,weightData:n,trainingConfig:a})},getLoadHandlers:ts,getModelArtifactsInfoForJSON:Qr,getSaveHandlers:es,http:Us,isHTTPScheme:Vs,loadWeights:async function(e,t="",n,a){return Bs((e=>Ps(e,{requestInit:a})))(e,t,n)},registerLoadRouter:e=>Jr.registerLoadRouter(e),registerSaveRouter:e=>Jr.registerSaveRouter(e),weightsLoaderFactory:Bs,withSaveHandler:function(e){return new js(e)},copyModel:async function(e,t){return $s(e,t,!1)},listModels:async function(){const e=Is.getSchemes(),t={};for(const n of e){const e=await Is.getManager(n).listModels();for(const a in e){t[n+ws+a]=e[a]}}return t},moveModel:async function(e,t){return $s(e,t,!0)},removeModel:async function(e){const t=Ns(e);return Is.getManager(t.scheme).removeModel(t.path)}});const Ks=Wr({matMul_:function(e,t,n=!1,a=!1){let r=Lr(e,"a","matMul"),s=Lr(t,"b","matMul");[r,s]=xr(r,s);const o={a:r,b:s},i={transposeA:n,transposeB:a};return Er.runKernel(ge,o,i)}});const Xs=Wr({oneHot_:function(e,t,n=1,a=0){if(t<2)throw new Error(`Error in oneHot: depth must be >=2, but it is ${t}`);const r={indices:Lr(e,"indices","oneHot","int32")},s={depth:t,onValue:n,offValue:a};return Er.runKernel(jt,r,s)}});const Ys=Wr({transpose_:function(e,t){const n=Lr(e,"x","transpose");if(null==t&&(t=n.shape.map(((e,t)=>t)).reverse()),i(n.rank===t.length,(()=>`Error in transpose: rank of input ${n.rank} must match length of perm ${t}.`)),t.forEach((e=>{i(e>=0&&e<n.rank,(()=>"All entries in 'perm' must be between 0 and "+(n.rank-1)+` but got ${t}`))})),n.rank<=1)return n.clone();const a={x:n},r={perm:t};return Er.runKernel(Un,a,r)}});const Qs=Wr({confusionMatrix_:function(e,t,n){const a=Lr(e,"labels","confusionMatrix"),r=Lr(t,"predictions","confusionMatrix");i(null==n||n>0&&Number.isInteger(n),(()=>`If provided, numClasses must be a positive integer, but got ${n}`)),i(1===a.rank,(()=>`Expected the rank of labels to be 1, but got ${a.rank}`)),i(1===r.rank,(()=>`Expected the rank of predictions to be 1, but got ${r.rank}`)),i(a.shape[0]===r.shape[0],(()=>`Mismatch in the number of examples: ${a.shape[0]} vs. ${r.shape[0]}. Labels and predictions should have the same number of elements.`)),i(n>0&&Number.isInteger(n),(()=>`numClasses is required to be a positive integer, but got ${n}`));const s=Xs(As(a,"int32"),n),o=Xs(As(r,"int32"),n),u=Ys(s),l=Ks(u,o);return As(l,"int32")}});var Zs=Object.freeze({__proto__:null,confusionMatrix:Qs});function Js(e,t,n){if(l(e),null!=t&&3!==t.length)throw new Error("tensor3d() requires shape to have three numbers");const a=Or(e,n);if(3!==a.length&&1!==a.length)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===a.length&&null==t)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return zr(e,t,a,n)}let eo;function to(e,t=3){if(t>4)throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");if(null==e)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");let n=!1,a=!1,r=!1,s=!1,o=!1,i=!1;if(e.data instanceof Uint8Array)n=!0;else if("undefined"!=typeof ImageData&&e instanceof ImageData)a=!0;else if("undefined"!=typeof HTMLVideoElement&&e instanceof HTMLVideoElement)r=!0;else if("undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement)s=!0;else if(null!=e.getContext)o=!0;else{if(!("undefined"!=typeof ImageBitmap&&e instanceof ImageBitmap))throw new Error(`pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was ${e.constructor.name}`);i=!0}if(r){const t=2;if(r&&e.readyState<t)throw new Error("The video element has not loaded data yet. Please wait for `loadeddata` event on the <video> element.")}if(null!=na(Xn,Er.backendName)){const n={pixels:e},a={numChannels:t};return Er.runKernel(Xn,n,a)}const[u,l]=r?[e.videoWidth,e.videoHeight]:[e.width,e.height];let c,d;if(o?c=e.getContext("2d").getImageData(0,0,u,l).data:a||n?c=e.data:(s||r||i)&&(null==eo&&(eo=document.createElement("canvas").getContext("2d")),eo.canvas.width=u,eo.canvas.height=l,eo.drawImage(e,0,0,u,l),c=eo.getImageData(0,0,u,l).data),4===t)d=new Int32Array(c);else{const e=u*l;d=new Int32Array(e*t);for(let n=0;n<e;n++)for(let e=0;e<t;++e)d[n*t+e]=c[4*n+e]}return Js(d,[l,u,t],"int32")}function no(e){return"undefined"!=typeof window&&"undefined"!=typeof ImageBitmap&&window.hasOwnProperty("createImageBitmap")&&!(e instanceof ImageBitmap)&&function(e){return null!=e&&0!==e.width&&0!==e.height}(e)&&!function(e){return null!=e&&e.data instanceof Uint8Array}(e)}const ao=Wr({fromPixels_:to});var ro=Object.freeze({__proto__:null,fromPixelsAsync:async function(e,t=3){let n=null;if(q().getBool("WRAP_TO_IMAGEBITMAP")&&no(e)){let t;try{t=await createImageBitmap(e,{premultiplyAlpha:"none"})}catch(e){t=null}n=null!=t&&t.width===e.width&&t.height===e.height?t:e}else n=e;return to(n,t)},toPixels:async function(e,t){let n=Lr(e,"img","toPixels");if(!(e instanceof lr)){const e=n;n=As(e,"int32"),e.dispose()}if(2!==n.rank&&3!==n.rank)throw new Error(`toPixels only supports rank 2 or 3 tensors, got rank ${n.rank}.`);const[a,r]=n.shape.slice(0,2),s=2===n.rank?1:n.shape[2];if(s>4||2===s)throw new Error(`toPixels only supports depth of size 1, 3 or 4 but got ${s}`);if("float32"!==n.dtype&&"int32"!==n.dtype)throw new Error(`Unsupported type for toPixels: ${n.dtype}. Please use float32 or int32 tensors.`);const o=await n.data(),i="float32"===n.dtype?255:1,u=new Uint8ClampedArray(r*a*4);for(let e=0;e<a*r;++e){const t=[0,0,0,255];for(let a=0;a<s;a++){const r=o[e*s+a];if("float32"===n.dtype){if(r<0||r>1)throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${r}.`)}else if("int32"===n.dtype&&(r<0||r>255))throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${r}.`);1===s?(t[0]=r*i,t[1]=r*i,t[2]=r*i):t[a]=r*i}const a=4*e;u[a+0]=Math.round(t[0]),u[a+1]=Math.round(t[1]),u[a+2]=Math.round(t[2]),u[a+3]=Math.round(t[3])}if(null!=t){t.width=r,t.height=a;const e=t.getContext("2d"),n=new ImageData(u,r,a);e.putImageData(n,0,0)}return n!==e&&n.dispose(),u},fromPixels:ao});function so(e,t){const n=e.shape.length,a=t.shape.length;if(n<1)throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${n}.`);if(a<1)throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${a}.`);if("int32"!==t.dtype)throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);if(t.shape[a-1]>n)throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${t.shape[a-1]} vs. ${n}`);if(0===d(e.shape))throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${e.shape}.`);const r=t.shape,s=r[r.length-1];let o=1;for(let e=0;e<r.length-1;++e)o*=r[e];const i=e.shape,u=r.slice();u.pop();let l=1;for(let e=s;e<n;++e)l*=i[e],u.push(i[e]);const c=[...O(e.shape).map((e=>e/l)),1].slice(0,s);return[u,o,l,c]}var oo=Object.freeze({__proto__:null,prepareAndValidate:so});function io(e,t,n){const a=t.rank>1?t.shape[t.rank-1]:1,r=t.rank>1?t.rank-1:1,s=`Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${n.shape}, indices.shape: ${t.shape}, shape: ${e}, sliceDim: ${a}, and batchDim: ${r}.`;if(n.rank<r)throw new Error(s+` update.rank < ${r}. `);if(e.length<a+(n.rank-r))throw new Error(s+` Output shape length < ${a+(n.rank-r)}`);if(n.rank!==r+e.length-a)throw new Error(s+" update.rank != "+(r+e.length-a));for(let e=0;e<r;++e)if(n.shape[e]!==t.shape[e])throw new Error(s+` updates.shape[${e}] (${n.shape[e]}) != indices.shape[${e}] (${t.shape[e]}).`);for(let t=0;t<n.rank-r;++t)if(n.shape[t+r]!==e[t+a])throw new Error(s+` updates.shape[${t+r}] (${n.shape[t+r]}) != shape[${t+r}] (${e[t+r]})`)}function uo(e,t,n){if(t.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${t.rank}.`);if(e.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${e.rank}.`);if("int32"!==t.dtype)throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${t.dtype}`);if(n.length<1)throw new Error(`Output rank must be greater or equal to 1, but got shape: ${n}`);if(0===n.length){if(0===t.size)throw new Error(`Indices specified for empty output. indices shape: ${t.shape}`);if(0===e.size)throw new Error(`Updates specified for empty output. updates shape: ${e.shape}`)}io(n,t,e)}function lo(e,t,n){const a=t.shape.length,r=a>1?t.shape[a-1]:1,s=n.length;let o=1;for(let e=r;e<s;++e)o*=n[e];const i=r<1?1:r;return{sliceRank:r,numUpdates:d(t.shape)/i,sliceSize:o,strides:[...O(n.slice(0,r)),1],outputSize:d(n)}}var co=Object.freeze({__proto__:null,validateUpdateShape:io,validateInput:uo,calculateShapes:lo});function po(e,t,n){const a=e.shape.length;i(a===t.length,(()=>`Error in slice${a}D: Length of begin ${t} must match the rank of the array (${a}).`)),i(a===n.length,(()=>`Error in slice${a}D: Length of size ${n} must match the rank of the array (${a}).`));for(let r=0;r<a;++r)i(t[r]+n[r]<=e.shape[r],(()=>`Error in slice${a}D: begin[${r}] + size[${r}] (${t[r]+n[r]}) would overflow input.shape[${r}] (${e.shape[r]})`))}function ho(e){const t=[];let n=0;for(;e>0;)1&e&&t.push(n),e/=2,n++;return t}function fo(e,t,n){const a=[];for(let r=0;r<e.length;r++)a[r]=Math.ceil((t[r]-e[r])/n[r]);return a}function mo(e,t,n,a){const r=[...e];for(let e=r.length;e<a.length;e++)r.push(1);for(let e=0;e<n;e++)0===e?r[t]=1:(r.splice(t,0,1),r.pop());return r}function go(e,t,n){return n<=e?n:n-(t-1)}function yo(e,t){const n=[];for(let a=0;a<e;a++)n.push(t+a);return n}function bo(e,t,n,a,r,s,o,i,u){const l=e.length;let c=new Array(l),d=new Array(l),p=new Array(l);if(t.length&&n>0){const u=t[0],l=n+1;c=xo(o,u,l,a,e),d=vo(i,u,l,r,e),p=mo(s,u,l,e)}else for(let t=0;t<l;t++)c[t]=wo(o,a,s,e,t,u),d[t]=Io(i,r,s,e,t,u),p[t]=ko(s,t,u);return{begin:c,end:d,strides:p}}function xo(e,t,n,a,r){const s=[...r],o=yo(n,t);for(let r=0;r<s.length;r++)if(o.indexOf(r)>-1)s[r]=0;else{const o=go(t,n,r);let i=a[o];e&1<<o&&(i=0),s[r]=i}return s}function vo(e,t,n,a,s){const o=[...s],i=yo(n,t);for(let r=0;r<o.length;r++)if(i.indexOf(r)>-1)o[r]=Number.MAX_SAFE_INTEGER;else{const s=go(t,n,r);let i=a[s];e&1<<s&&(i=Number.MAX_SAFE_INTEGER),o[r]=i}for(let e=0;e<o.length;e++){const t=s[e];o[e]<0&&(o[e]+=t),o[e]=r(0,o[e],s[e])}return o}function ko(e,t,n){let a=e[t];return(n&1<<t||null==a)&&(a=1),a}function wo(e,t,n,a,s,o){let i=t[s];const u=n[s]||1;(e&1<<s||o&1<<s||null==i)&&(i=u>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);const l=a[s];return i<0&&(i+=l),i=r(0,i,l-1),i}function Io(e,t,n,a,s,o){let i=t[s];const u=n[s]||1;(e&1<<s||o&1<<s||null==i)&&(i=u>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);const l=a[s];return i<0&&(i+=l),i=u>0?r(0,i,l):r(-1,i,l-1),i}function No(e,t,n){let a=n.length;for(let e=0;e<n.length;e++)if(n[e]>1){a=e;break}for(let r=a+1;r<n.length;r++)if(t[r]>0||n[r]!==e[r])return!1;return!0}function $o(e,t){let n=e.length>0?e[e.length-1]:1;for(let a=0;a<e.length-1;a++)n+=e[a]*t[a];return n}function To(e,t,n){let a;const r=e.shape.length;let s;return a="number"==typeof t?[t,...new Array(r-1).fill(0)]:t.length<r?t.concat(new Array(r-t.length).fill(0)):t.slice(),a.forEach((e=>{i(-1!==e,(()=>"slice() does not support negative begin indexing."))})),s=null==n?new Array(r).fill(-1):"number"==typeof n?[n,...new Array(r-1).fill(-1)]:n.length<r?n.concat(new Array(r-n.length).fill(-1)):n,s=s.map(((t,n)=>t>=0?t:(i(-1===t,(()=>`Negative size values should be exactly -1 but got ${t} for the slice() size at index ${n}.`)),e.shape[n]-a[n]))),[a,s]}function Co(e,t,n,a,r,s,o,i,u){let l=t.slice(),c=n.slice(),d=a;null==a&&(d=new Array(l.length));const p=ho(o);if(p.length>1)throw new Error("Multiple ellipses in slice is not allowed.");if(0!==o&&0!==i)throw new Error("Using both ellipsisMask and newAxisMask is not yet supported.");if(0!==o&&0!==u)throw new Error("Using both ellipsisMask and shrinkAxisMask is not yet supported.");const h=e.length-l.length,f=ho(i),m=e.slice();f.forEach((e=>{l[e]=0,c[e]=1,m.splice(e,0,1)}));const{begin:g,end:y,strides:b}=bo(m,p,h,l,c,d,r,s,o);l=g,c=y,d=b;const x=ho(u);x.forEach((e=>{c[e]=l[e]+1,d[e]=1}));const v=fo(l,c,d),k=v.filter(((e,t)=>-1===x.indexOf(t)));return{nonStrided:d.every((e=>1===e)),$begin:l,$end:c,$strides:d,size:v,newShape:m,outShape:k}}var Eo=Object.freeze({__proto__:null,assertParamsValid:po,maskToAxes:ho,computeOutShape:fo,stridesWithElidedDims:mo,getNormalizedAxes:bo,startIndicesWithElidedDims:xo,stopIndicesWithElidedDims:vo,stridesForAxis:ko,startForAxis:wo,stopForAxis:Io,isSliceContinous:No,computeFlatOffset:$o,parseSliceParams:To,sliceInfo:Co});class So{getClassName(){return this.constructor.className}static fromConfig(e,t){return new e(t)}}class Ro{constructor(){this.classNameMap={}}static getMap(){return null==Ro.instance&&(Ro.instance=new Ro),Ro.instance}static register(e){Ro.getMap().classNameMap[e.className]=[e,e.fromConfig]}}function Ao(e){i(null!=e.className,(()=>"Class being registered does not have the static className property defined.")),i("string"==typeof e.className,(()=>"className is required to be a string, but got type "+typeof e.className)),i(e.className.length>0,(()=>"Class being registered has an empty-string as its className, which is disallowed.")),Ro.register(e)}var _o=Object.freeze({__proto__:null,Serializable:So,SerializationMap:Ro,registerClass:Ao});function Fo(){return 32===Er.backend.floatPrecision()?.001:.1}function Oo(e,t,n){let a=!0;if(($(e)||$(t))&&(a=!1),$(e)&&$(t)&&(a=!0),a){const n=e.constructor.name,a=t.constructor.name;if(n!==a)throw new Error(`Arrays are of different type. Actual: ${n}. Expected: ${a}`)}if(Array.isArray(e)&&Array.isArray(t)){const n=Or(e),a=Or(t);if(!p(n,a))throw new Error(`Arrays have different shapes. Actual: [${n}]. Expected: [${a}]`)}const r=$(e)?e:c(e),s=$(t)?t:c(t);if(r.length!==s.length)throw new Error(`Arrays have different lengths actual: ${r.length} vs expected: ${s.length}.\nActual:   ${r}.\nExpected: ${s}.`);for(let e=0;e<s.length;++e){const t=r[e],a=s[e];if(!n(t,a))throw new Error(`Arrays differ: actual[${e}] = ${t}, expected[${e}] = ${a}.\nActual:   ${r}.\nExpected: ${s}.`)}}function Do(e,t,n){if(null==n&&(n=Fo()),!Mo(e,t,n))throw new Error(`Numbers differ: actual === ${e}, expected === ${t}`)}function Mo(e,t,n){return!isFinite(e)&&!isFinite(t)||!(isNaN(e)||isNaN(t)||Math.abs(e-t)>n)}var Lo=Object.freeze({__proto__:null,TEST_EPSILON_FLOAT16:.1,expectArraysClose:function(e,t,n){return null==n&&(n=Fo()),Oo(e,t,((e,t)=>Mo(e,t,n)))},testEpsilon:Fo,expectPromiseToFail:function(e,t){e().then((()=>t.fail()),(()=>t()))},expectArraysEqual:function(e,t){const n="string"==typeof t||"number"==typeof t||"boolean"==typeof t?[t]:t;return E(e)||E(e[0])||E(t)||E(t[0])?Oo(e,n,((e,t)=>e==t)):Oo(e,t,((e,t)=>Mo(e,t,0)))},expectNumbersClose:Do,expectValuesInRange:function(e,t,n){for(let a=0;a<e.length;a++)if(e[a]<t||e[a]>n)throw new Error(`Value out of range:${e[a]} low: ${t}, high: ${n}`)},expectArrayBuffersEqual:function(e,t){expect(new Float32Array(e)).toEqual(new Float32Array(t))},encodeStrings:function e(t){for(let n=0;n<t.length;n++){const a=t[n];Array.isArray(a)?e(a):t[n]=Ka(a)}return t}});function Po(e){q().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(e+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")}function Bo(){return Er}function Wo(e,t){return Er.tidy(e,t)}function Vo(e){kr(e).forEach((e=>e.dispose()))}function zo(e){return Er.keep(e)}function Uo(){return Er.backendName}function Go(e,t,n=1){return Er.registerBackend(e,t,n)}ur=Po;const Ho=Wr({add_:function(e,t){let n=Lr(e,"a","add"),a=Lr(t,"b","add");[n,a]=xr(n,a);const r={a:n,b:a};return Er.runKernel(te,r)}});const jo=Wr({floorDiv_:function(e,t){let n=Lr(e,"a","floorDiv"),a=Lr(t,"b","floorDiv");[n,a]=xr(n,a);const r={a:n,b:a};return Er.runKernel(at,r)}});const qo=Wr({div_:function(e,t){let n=Lr(e,"a","div"),a=Lr(t,"b","div");if([n,a]=xr(n,a),"int32"===n.dtype&&"int32"===a.dtype)return jo(n,a);const r={a:n,b:a};return Er.runKernel(Ge,r,{})}});const Ko=Wr({mul_:function(e,t){let n=Lr(e,"a","mul"),a=Lr(t,"b","mul");[n,a]=xr(n,a);const r={a:n,b:a};return Er.runKernel(Bt,r)}});const Xo=Wr({abs_:function(e){const t=Lr(e,"x","abs");if("complex64"===t.dtype){const e={x:t};return Er.runKernel(Ie,e)}{const e={x:t};return Er.runKernel(Z,e)}}});const Yo=Wr({acos_:function(e){const t={x:Lr(e,"x","acos")};return Er.runKernel(J,t)}});const Qo=Wr({acosh_:function(e){const t={x:Lr(e,"x","acosh")};return Er.runKernel(ee,t)}});const Zo=Wr({addN_:function(e){i(Array.isArray(e),(()=>"The argument passed to tf.addN() must be a list of tensors")),i(e.length>=1,(()=>`Must pass at least one tensor to tf.addN(), but got ${e.length}`));const t=e.map(((e,t)=>Lr(e,`tensors${t}`,"addN"))),n=t[0];t.forEach((e=>{if(e.dtype!==n.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")})),t.forEach((e=>{if(!p(e.shape,n.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")}));const a=t;return Er.runKernel(ne,a)}});const Jo=Wr({all_:function(e,t=null,n=!1){const a={x:Lr(e,"x","all","bool")},r={axis:t,keepDims:n};return Er.runKernel(ae,a,r)}});const ei=Wr({any_:function(e,t=null,n=!1){const a={x:Lr(e,"x","any","bool")},r={axis:t,keepDims:n};return Er.runKernel(re,a,r)}});const ti=Wr({argMax_:function(e,t=0){const n={x:Lr(e,"x","argMax")},a={axis:t};return Er.runKernel(se,n,a)}});const ni=Wr({argMin_:function(e,t=0){const n={x:Lr(e,"x","argMin")},a={axis:t};return Er.runKernel(oe,n,a)}});const ai=Wr({asin_:function(e){const t={x:Lr(e,"x","asin")};return Er.runKernel(ie,t)}});const ri=Wr({asinh_:function(e){const t={x:Lr(e,"x","asinh")};return Er.runKernel(ue,t)}});const si=Wr({atan_:function(e){const t={x:Lr(e,"x","atan")};return Er.runKernel(le,t)}});const oi=Wr({atan2_:function(e,t){let n=Lr(e,"a","atan2"),a=Lr(t,"b","atan2");[n,a]=xr(n,a);const r={a:n,b:a};return Er.runKernel(de,r)}});const ii=Wr({atanh_:function(e){const t={x:Lr(e,"x","atanh")};return Er.runKernel(ce,t)}});function ui(e,t,n,a,r="NHWC",s){return di(e,[...t,e[3]],n,s,a,null,null,vi(r))}function li(e,t,n,a,r,s,o="channelsLast"){const[i,u]=fi(t);let l;if("channelsLast"===o)l=[i,u,e[3],e[3]];else{if("channelsFirst"!==o)throw new Error(`Unknown dataFormat ${o}`);l=[i,u,e[1],e[1]]}return di(e,l,n,a,r,s,!1,o)}function ci(e,t,n,a,r,s,o="NDHWC"){const[i,u,l]=mi(t);let c,d;if("NDHWC"===o)d="channelsLast",c=[i,u,l,e[4],e[4]];else{if("NCDHW"!==o)throw new Error(`Unknown dataFormat ${o}`);d="channelsFirst",c=[i,u,l,e[1],e[1]]}return pi(e,c,n,a,r,!1,d,s)}function di(e,t,n,a,r,s,o=!1,i="channelsLast"){let[u,l,c,d]=[-1,-1,-1,-1];if("channelsLast"===i)[u,l,c,d]=e;else{if("channelsFirst"!==i)throw new Error(`Unknown dataFormat ${i}`);[u,d,l,c]=e}const[p,h,,f]=t,[m,g]=fi(n),[y,b]=fi(a),x=gi(p,y),v=gi(h,b),{padInfo:k,outHeight:w,outWidth:I}=function(e,t,n,a,r,s,o,i,u){let l,c,d;if("number"==typeof e){l={top:e,bottom:e,left:e,right:e,type:0===e?"VALID":"NUMBER"};const r=function(e,t,n,a,r){null==a&&(a=hi(e,t,n));const s=e[0],o=e[1],i=yi((s-t+2*a)/n+1,r),u=yi((o-t+2*a)/n+1,r);return[i,u]}([t,n],s,a,e,i);c=r[0],d=r[1]}else if("same"===e){c=Math.ceil(t/a),d=Math.ceil(n/r);const e=Math.max(0,(c-1)*a+s-t),i=Math.max(0,(d-1)*r+o-n),u=Math.floor(e/2),p=e-u,h=Math.floor(i/2);l={top:u,bottom:p,left:h,right:i-h,type:"SAME"}}else if("valid"===e)l={top:0,bottom:0,left:0,right:0,type:"VALID"},c=Math.ceil((t-s+1)/a),d=Math.ceil((n-o+1)/r);else{if("object"!=typeof e)throw Error(`Unknown padding parameter: ${e}`);{const p="channelsLast"===u?e[1][0]:e[2][0],h="channelsLast"===u?e[1][1]:e[2][1],f="channelsLast"===u?e[2][0]:e[3][0],m="channelsLast"===u?e[2][1]:e[3][1];l={top:p,bottom:h,left:f,right:m,type:0===p&&0===h&&0===f&&0===m?"VALID":"EXPLICIT"},c=yi((t-s+p+h)/a+1,i),d=yi((n-o+f+m)/r+1,i)}}return{padInfo:l,outHeight:c,outWidth:d}}(r,l,c,m,g,x,v,s,i),N=o?f*d:f;let $;return"channelsFirst"===i?$=[u,N,w,I]:"channelsLast"===i&&($=[u,w,I,N]),{batchSize:u,dataFormat:i,inHeight:l,inWidth:c,inChannels:d,outHeight:w,outWidth:I,outChannels:N,padInfo:k,strideHeight:m,strideWidth:g,filterHeight:p,filterWidth:h,effectiveFilterHeight:x,effectiveFilterWidth:v,dilationHeight:y,dilationWidth:b,inShape:e,outShape:$,filterShape:t}}function pi(e,t,n,a,r,s=!1,o="channelsLast",i){let[u,l,c,d,p]=[-1,-1,-1,-1,-1];if("channelsLast"===o)[u,l,c,d,p]=e;else{if("channelsFirst"!==o)throw new Error(`Unknown dataFormat ${o}`);[u,p,l,c,d]=e}const[h,f,m,,g]=t,[y,b,x]=mi(n),[v,k,w]=mi(a),I=gi(h,v),N=gi(f,k),$=gi(m,w),{padInfo:T,outDepth:C,outHeight:E,outWidth:S}=function(e,t,n,a,r,s,o,i,u,l,c){let d,p,h,f;if("number"==typeof e){d={top:e,bottom:e,left:e,right:e,front:e,back:e,type:0===e?"VALID":"NUMBER"};const s=function(e,t,n,a,r,s){null==r&&(r=hi(e,t,a));const o=e[0],i=e[1],u=e[2],l=yi((o-t+2*r)/a+1,s),c=yi((i-t+2*r)/a+1,s),d=yi((u-t+2*r)/a+1,s);return[l,c,d,n]}([t,n,a,1],i,1,r,e,c);p=s[0],h=s[1],f=s[2]}else if("same"===e){p=Math.ceil(t/r),h=Math.ceil(n/s),f=Math.ceil(a/o);const e=(p-1)*r+i-t,c=(h-1)*s+u-n,m=(f-1)*o+l-a,g=Math.floor(e/2),y=e-g,b=Math.floor(c/2),x=c-b,v=Math.floor(m/2);d={top:b,bottom:x,left:v,right:m-v,front:g,back:y,type:"SAME"}}else{if("valid"!==e)throw Error(`Unknown padding parameter: ${e}`);d={top:0,bottom:0,left:0,right:0,front:0,back:0,type:"VALID"},p=Math.ceil((t-i+1)/r),h=Math.ceil((n-u+1)/s),f=Math.ceil((a-l+1)/o)}return{padInfo:d,outDepth:p,outHeight:h,outWidth:f}}(r,l,c,d,y,b,x,I,N,$,i),R=s?g*p:g;let A;return"channelsFirst"===o?A=[u,R,C,E,S]:"channelsLast"===o&&(A=[u,C,E,S,R]),{batchSize:u,dataFormat:o,inDepth:l,inHeight:c,inWidth:d,inChannels:p,outDepth:C,outHeight:E,outWidth:S,outChannels:R,padInfo:T,strideDepth:y,strideHeight:b,strideWidth:x,filterDepth:h,filterHeight:f,filterWidth:m,effectiveFilterDepth:I,effectiveFilterHeight:N,effectiveFilterWidth:$,dilationDepth:v,dilationHeight:k,dilationWidth:w,inShape:e,outShape:A,filterShape:t}}function hi(e,t,n,a=1){const r=gi(t,a);return Math.floor((e[0]*(n-1)-n+r)/2)}function fi(e){return"number"==typeof e?[e,e,e]:2===e.length?[e[0],e[1],1]:e}function mi(e){return"number"==typeof e?[e,e,e]:e}function gi(e,t){return t<=1?e:e+(e-1)*(t-1)}function yi(e,t){if(!t)return Math.trunc(e);switch(t){case"round":return Math.round(e);case"ceil":return Math.ceil(e);case"floor":return Math.floor(e);default:throw new Error(`Unknown roundingMode ${t}`)}}function bi(e){const[t,n,a]=fi(e);return 1===t&&1===n&&1===a}function xi(e,t){return bi(e)||bi(t)}function vi(e){if("NHWC"===e)return"channelsLast";if("NCHW"===e)return"channelsFirst";throw new Error(`Unknown dataFormat ${e}`)}const ki=Wr({reshape_:function(e,t){const n={x:Lr(e,"x","reshape","string_or_numeric")},a={shape:t};return Er.runKernel(nn,n,a)}});const wi=Wr({avgPool_:function(e,t,n,a,r){const s=Lr(e,"x","avgPool","float32");i(xi(n,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`));let o=s,u=!1;3===s.rank&&(u=!0,o=ki(s,[1,s.shape[0],s.shape[1],s.shape[2]])),i(4===o.rank,(()=>`Error in avgPool: x must be rank 4 but got rank ${o.rank}.`)),null!=r&&i(h(a),(()=>`Error in avgPool: pad must be an integer when using, dimRoundingMode ${r} but got pad ${a}.`));const l={x:o},c={filterSize:t,strides:n,pad:a,dimRoundingMode:r};let d=Er.runKernel(pe,l,c);return d=As(d,s.dtype),u?ki(d,[d.shape[1],d.shape[2],d.shape[3]]):d}});const Ii=Wr({avgPool3d_:function(e,t,n,a,r,s="NDHWC"){const o=Lr(e,"x","avgPool3d","float32");let u=o,l=!1;4===o.rank&&(l=!0,u=ki(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),i(5===u.rank,(()=>`Error in avgPool3d: x must be rank 5 but got rank ${u.rank}.`)),i("NDHWC"===s,(()=>`Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${s}`)),null!=r&&i(h(a),(()=>`Error in avgPool3d: pad must be an integer when using, dimRoundingMode ${r} but got pad ${a}.`));const c={x:u},d={filterSize:t,strides:n,pad:a,dimRoundingMode:r,dataFormat:s};let p=Er.runKernel(fe,c,d);return p=As(p,u.dtype),l?ki(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}});const Ni=Wr({concat_:function(e,t=0){i(e.length>=1,(()=>"Pass at least one tensor to concat"));const n=Pr(e,"tensors","concat","string_or_numeric");if("complex64"===n[0].dtype&&n.forEach((e=>{if("complex64"!==e.dtype)throw new Error(`Cannot concatenate complex64 tensors with a tensor\n          with dtype ${e.dtype}. `)})),1===n.length)return _s(n[0]);const a=n,r={axis:t};return Er.runKernel(Ne,a,r)}});const $i=Wr({sigmoid_:function(e){const t={x:Lr(e,"x","sigmoid")};return Er.runKernel(xn,t)}});const Ti=Wr({slice_:function(e,t,n){const a=Lr(e,"x","slice","string_or_numeric");if(0===a.rank)throw new Error("Slicing scalar is not possible");const r={x:a},s={begin:t,size:n};return Er.runKernel(mn,r,s)}});const Ci=Wr({tanh_:function(e){const t={x:Lr(e,"x","tanh")};return Er.runKernel(Bn,t)}});const Ei=Wr({basicLSTMCell_:function(e,t,n,a,r,s){const o=Lr(e,"forgetBias","basicLSTMCell"),i=Lr(t,"lstmKernel","basicLSTMCell"),u=Lr(n,"lstmBias","basicLSTMCell"),l=Lr(a,"data","basicLSTMCell"),c=Lr(r,"c","basicLSTMCell"),d=Lr(s,"h","basicLSTMCell"),p=Ni([l,d],1),h=Ks(p,i),f=Ho(h,u),m=f.shape[0],g=f.shape[1]/4,y=[m,g],b=Ti(f,[0,0],y),x=Ti(f,[0,g],y),v=Ti(f,[0,2*g],y),k=Ti(f,[0,3*g],y),w=Ho(Ko($i(b),Ci(x)),Ko(c,$i(Ho(o,v))));return[w,Ko(Ci(w),$i(k))]}});const Si=Wr({batchToSpaceND_:function(e,t,n){const a=Lr(e,"x","batchToSpaceND"),r=t.reduce(((e,t)=>e*t));i(a.rank>=1+t.length,(()=>`input rank is ${a.rank} but should be > than blockShape.length ${t.length}`)),i(n.length===t.length,(()=>`crops.length is ${n.length} but should be equal to blockShape.length  ${t.length}`)),i(a.shape[0]%r==0,(()=>`input tensor batch is ${a.shape[0]} but is not divisible by the product of the elements of blockShape ${t.join(" * ")} === ${r}`));const s={x:a},o={blockShape:t,crops:n};return Er.runKernel(ye,s,o)}});const Ri=Wr({batchNorm_:function(e,t,n,a,r,s){null==s&&(s=.001);const o=Lr(e,"x","batchNorm"),u=Lr(t,"mean","batchNorm"),l=Lr(n,"variance","batchNorm");let c,d;null!=r&&(c=Lr(r,"scale","batchNorm")),null!=a&&(d=Lr(a,"offset","batchNorm")),i(u.rank===l.rank,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),i(null==d||u.rank===d.rank,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),i(null==c||u.rank===c.rank,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));const p={x:function(e){let t;return t=0===e.rank||1===e.rank?ki(e,[1,1,1,e.size]):2===e.rank?ki(e,[1,1,e.shape[0],e.shape[1]]):3===e.rank?ki(e,[1,e.shape[0],e.shape[1],e.shape[2]]):e,t}(o),scale:c,offset:d,mean:u,variance:l},h={varianceEpsilon:s},f=Er.runKernel(rt,p,h);return ki(f,o.shape)}});const Ai=Wr({batchNorm2d_:function(e,t,n,a,r,s){const o=Lr(e,"x","batchNorm"),u=Lr(t,"mean","batchNorm"),l=Lr(n,"variance","batchNorm");let c,d;return null!=r&&(c=Lr(r,"scale","batchNorm")),null!=a&&(d=Lr(a,"offset","batchNorm")),i(2===o.rank,(()=>`Error in batchNorm2D: x must be rank 2 but got rank ${o.rank}.`)),i(2===u.rank||1===u.rank,(()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${u.rank}.`)),i(2===l.rank||1===l.rank,(()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${l.rank}.`)),null!=c&&i(2===c.rank||1===c.rank,(()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${c.rank}.`)),null!=d&&i(2===d.rank||1===d.rank,(()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${d.rank}.`)),Ri(o,u,l,d,c,s)}});const _i=Wr({batchNorm3d_:function(e,t,n,a,r,s){const o=Lr(e,"x","batchNorm"),u=Lr(t,"mean","batchNorm"),l=Lr(n,"variance","batchNorm");let c,d;return null!=r&&(c=Lr(r,"scale","batchNorm")),null!=a&&(d=Lr(a,"offset","batchNorm")),i(3===o.rank,(()=>`Error in batchNorm3D: x must be rank 3 but got rank ${o.rank}.`)),i(3===u.rank||1===u.rank,(()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${u.rank}.`)),i(3===l.rank||1===l.rank,(()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${l.rank}.`)),null!=c&&i(3===c.rank||1===c.rank,(()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${c.rank}.`)),null!=d&&i(3===d.rank||1===d.rank,(()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${d.rank}.`)),Ri(o,u,l,d,c,s)}});const Fi=Wr({batchNorm4d_:function(e,t,n,a,r,s){const o=Lr(e,"x","batchNorm"),u=Lr(t,"mean","batchNorm"),l=Lr(n,"variance","batchNorm");let c,d;return null!=r&&(c=Lr(r,"scale","batchNorm")),null!=a&&(d=Lr(a,"offset","batchNorm")),i(4===o.rank,(()=>`Error in batchNorm4D: x must be rank 4 but got rank ${o.rank}.`)),i(4===u.rank||1===u.rank,(()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${u.rank}.`)),i(4===l.rank||1===l.rank,(()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${l.rank}.`)),null!=c&&i(4===c.rank||1===c.rank,(()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${c.rank}.`)),null!=d&&i(4===d.rank||1===d.rank,(()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${d.rank}.`)),Ri(o,u,l,d,c,s)}});const Oi=Wr({bincount_:function(e,t,n){const a=Lr(e,"x","bincount"),r=Lr(t,"weights","bincount");i("int32"===a.dtype,(()=>`Error in bincount: input dtype must be int32, but got ${a.dtype}`)),i(n>=0,(()=>`size must be non-negative, but got ${n}.`)),i(r.size===a.size||0===r.size,(()=>`Error in bincount: weights must have the same size as input or0-length, but got input shape: ${a.shape}, weights shape: ${r.shape}.`));const s={x:a,weights:r},o={size:n};return Er.runKernel(be,s,o)}});const Di=Wr({broadcastTo_:function(e,t){let n=Lr(e,"broadcastTo","x");const a=n.shape;if(t.some((e=>!(e>0)||e%1!=0)))throw new Error(`broadcastTo(): Invalid broadcast shape [${t}].`);if(t.length<n.rank)throw new Error(`broadcastTo(): shape.length=${t.length} < input.rank=${n.rank}.`);if(t.length>n.rank){const e=n.shape.slice();for(;e.length<t.length;)e.unshift(1);n=ki(n,e)}const r=n.shape,s=Array.from(t);for(let e=t.length-1;e>=0;e--)if(r[e]===t[e])s[e]=1;else if(1!==n.shape[e])throw new Error(`broadcastTo(): [${a}] cannot be broadcast to [${t}].`);if(0===s.map(((e,t)=>e>1?t:-1)).filter((e=>e>=0)).length)return _s(n);const o={x:n},i={reps:s};return Er.runKernel(Wn,o,i)}});const Mi=Wr({ceil_:function(e){const t={x:Lr(e,"x","ceil")};return Er.runKernel(ve,t)}});const Li=Wr({clipByValue_:function(e,t,n){const a=Lr(e,"x","clipByValue");i(t<=n,(()=>`Error in clip: min (${t}) must be less than or equal to max (${n}).`));const r={x:a},s={clipValueMin:t,clipValueMax:n};return Er.runKernel(ke,r,s)}});const Pi=Wr({concat1d_:function(e){return Ni(e,0)}});const Bi=Wr({concat2d_:function(e,t){return Ni(e,t)}});const Wi=Wr({concat3d_:function(e,t){return Ni(e,t)}});const Vi=Wr({concat4d_:function(e,t){return Ni(e,t)}});const zi=Wr({conv2d_:function(e,t,n,a,r="NHWC",s=[1,1],o){const u=Lr(e,"x","conv2d"),l=Lr(t,"filter","conv2d");let c=u,d=!1;3===u.rank&&(d=!0,c=ki(u,[1,u.shape[0],u.shape[1],u.shape[2]])),i(4===c.rank,(()=>`Error in conv2d: input must be rank 4, but got rank ${c.rank}.`)),i(4===l.rank,(()=>`Error in conv2d: filter must be rank 4, but got rank ${l.rank}.`)),null!=o&&i(h(a),(()=>`Error in conv2d: pad must be an integer when using, dimRoundingMode ${o} but got pad ${a}.`));const p="NHWC"===r?c.shape[3]:c.shape[1];i(p===l.shape[2],(()=>`Error in conv2d: depth of input (${p}) must match input depth for filter ${l.shape[2]}.`)),i(xi(n,s),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${s}'`));const f={x:c,filter:l},m={strides:n,pad:a,dataFormat:r,dilations:s,dimRoundingMode:o},g=Er.runKernel($e,f,m);return d?ki(g,[g.shape[1],g.shape[2],g.shape[3]]):g}});const Ui=Wr({conv1d_:function(e,t,n,a,r="NWC",s=1,o){const u=Lr(e,"x","conv1d"),l=Lr(t,"filter","conv1d");let c=u,d=!1;2===u.rank&&(d=!0,c=ki(u,[1,u.shape[0],u.shape[1]])),i(3===c.rank,(()=>`Error in conv1d: input must be rank 3, but got rank ${c.rank}.`)),i(3===l.rank,(()=>`Error in conv1d: filter must be rank 3, but got rank ${l.rank}.`)),null!=o&&i(h(a),(()=>`Error in conv1d: pad must be an integer when using, dimRoundingMode ${o} but got pad ${a}.`)),i(c.shape[2]===l.shape[1],(()=>`Error in conv1d: depth of input (${c.shape[2]}) must match input depth for filter ${l.shape[1]}.`)),i(xi(n,s),(()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${n} and dilation '${s}'`)),i("NWC"===r,(()=>`Error in conv1d: got dataFormat of ${r} but only NWC is currently supported.`));const p=ki(l,[1,l.shape[0],l.shape[1],l.shape[2]]),f=ki(c,[c.shape[0],1,c.shape[1],c.shape[2]]),m=zi(f,p,[1,n],a,"NHWC",[1,s],o);return ki(m,d?[m.shape[2],m.shape[3]]:[m.shape[0],m.shape[2],m.shape[3]])}});const Gi=Wr({conv2DBackpropInput_:function(e,t,n,a,r,s="NHWC",o){i(e.length===t.rank,(()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`));let u=e,l=t,c=!1;3===t.rank&&(c=!0,l=ki(t,[1,t.shape[0],t.shape[1],t.shape[2]]),u=[1,e[0],e[1],e[2]]),i(4===u.length,(()=>`Error in conv2dDerInput: inShape must be length 4, but got length ${u.length}.`)),i(4===l.rank,(()=>`Error in conv2dDerInput: dy must be rank 4, but got rank ${l.rank}`)),i(4===n.rank,(()=>`Error in conv2dDerInput: filter must be rank 4, but got rank ${n.rank}`));const d="NHWC"===s?u[3]:u[1],p="NHWC"===s?l.shape[3]:l.shape[1];i(d===n.shape[2],(()=>`Error in conv2dDerInput: depth of input (${d}) must match input depth for filter ${n.shape[2]}.`)),i(p===n.shape[3],(()=>`Error in conv2dDerInput: depth of output (${p}) must match output depth for filter ${n.shape[3]}.`)),null!=o&&i(h(r),(()=>`Error in conv2dDerInput: pad must be an integer when using, dimRoundingMode ${o} but got pad ${r}.`));const f={dy:l,filter:n},m={strides:a,pad:r,dataFormat:s,dimRoundingMode:o,inputShape:u},g=Er.runKernel(Ce,f,m);return c?ki(g,[g.shape[1],g.shape[2],g.shape[3]]):g}});const Hi=Wr({conv2dTranspose_:function(e,t,n,a,r,s){const o=Lr(e,"x","conv2dTranspose"),i=Lr(t,"filter","conv2dTranspose");return Gi(n,o,i,a,r,"NHWC",s)}});const ji=Wr({conv3d_:function(e,t,n,a,r="NDHWC",s=[1,1,1]){const o=Lr(e,"x","conv3d"),u=Lr(t,"filter","conv3d");let l=o,c=!1;4===o.rank&&(c=!0,l=ki(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),i(5===l.rank,(()=>`Error in conv3d: input must be rank 5, but got rank ${l.rank}.`)),i(5===u.rank,(()=>`Error in conv3d: filter must be rank 5, but got rank ${u.rank}.`)),i(l.shape[4]===u.shape[3],(()=>`Error in conv3d: depth of input (${l.shape[4]}) must match input depth for filter ${u.shape[3]}.`)),i(xi(n,s),(()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${n} and dilations '${s}'`)),i("NDHWC"===r,(()=>`Error in conv3d: got dataFormat of ${r} but only NDHWC is currently supported.`));const d={x:l,filter:u},p={strides:n,pad:a,dataFormat:r,dilations:s},h=Er.runKernel(Ee,d,p);return c?ki(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}});const qi=Wr({conv3DBackpropInput_:function(e,t,n,a,r){i(e.length===t.rank,(()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`));let s=e,o=t,u=!1;4===t.rank&&(u=!0,o=ki(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]),s=[1,e[0],e[1],e[2],e[3]]);const l=s[4],c=o.shape[4];i(5===s.length,(()=>`Error in conv3dDerInput: inShape must be length 5, but got length ${s.length}.`)),i(5===o.rank,(()=>`Error in conv3dDerInput: dy must be rank 5, but got rank ${o.rank}`)),i(5===n.rank,(()=>`Error in conv3dDerInput: filter must be rank 5, but got rank ${n.rank}`)),i(l===n.shape[3],(()=>`Error in conv3dDerInput: depth of input (${l}) must match input depth for filter ${n.shape[3]}.`)),i(c===n.shape[4],(()=>`Error in conv3dDerInput: depth of output (${c}) must match output depth for filter ${n.shape[4]}.`));const d={dy:o,filter:n},p={pad:r,strides:a,inputShape:s},h=Er.runKernel(Re,d,p);return u?ki(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}});const Ki=Wr({conv3dTranspose_:function(e,t,n,a,r){const s=Lr(e,"x","conv3dTranspose"),o=Lr(t,"filter","conv3dTranspose");return qi(n,s,o,a,r)}});const Xi=Wr({cos_:function(e){const t={x:Lr(e,"x","cos")};return Er.runKernel(Ae,t)}});const Yi=Wr({cosh_:function(e){const t={x:Lr(e,"x","cosh")};return Er.runKernel(_e,t)}});const Qi=Wr({cumsum_:function(e,t=0,n=!1,a=!1){const r={x:Lr(e,"x","cumsum")},s={axis:t,exclusive:n,reverse:a};return Er.runKernel(Fe,r,s)}});const Zi=Wr({denseBincount_:function(e,t,n,a=!1){const r=Lr(e,"x","denseBincount"),s=Lr(t,"weights","denseBincount");i("int32"===r.dtype,(()=>`Error in denseBincount: input dtype must be int32, but got ${r.dtype}`)),i(r.rank<=2,(()=>`Error in denseBincount: input must be at most rank 2, but got rank ${r.rank}.`)),i(n>=0,(()=>`size must be non-negative, but got ${n}.`)),i(s.size===r.size||0===s.size,(()=>`Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${r.shape}, weights shape: ${s.shape}.`));const o={x:r,weights:s},u={size:n,binaryOutput:a};return Er.runKernel(De,o,u)}});const Ji=Wr({depthToSpace_:function(e,t,n="NHWC"){const a=Lr(e,"x","depthToSpace"),r="NHWC"===n?a.shape[1]:a.shape[2],s="NHWC"===n?a.shape[2]:a.shape[3],o="NHWC"===n?a.shape[3]:a.shape[1];i(r*t>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${r} and ${t}  for depthToSpace with input shape\n    ${a.shape}`)),i(s*t>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${s} and ${t} for depthToSpace with input shape\n        ${a.shape}`)),i(o%(t*t)==0,(()=>`Dimension size must be evenly divisible by ${t*t} but is ${o} for depthToSpace with input shape ${a.shape}`));const u={x:a},l={blockSize:t,dataFormat:n};return Er.runKernel(Me,u,l)}});const eu=Wr({depthwiseConv2d_:function(e,t,n,a,r="NHWC",s=[1,1],o){const u=Lr(e,"x","depthwiseConv2d"),l=Lr(t,"filter","depthwiseConv2d");let c=u,d=!1;3===u.rank&&(d=!0,c=ki(u,[1,u.shape[0],u.shape[1],u.shape[2]])),i(4===c.rank,(()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${c.rank}.`)),i(4===l.rank,(()=>`Error in depthwiseConv2d: filter must be rank 4, but got rank ${l.rank}.`)),i(c.shape[3]===l.shape[2],(()=>`Error in depthwiseConv2d: number of input channels (${c.shape[3]}) must match the inChannels dimension in filter ${l.shape[2]}.`)),null!=o&&i(h(a),(()=>`Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode ${o} but got pad ${a}.`));const p={x:c,filter:l},f={strides:n,pad:a,dataFormat:r,dilations:s,dimRoundingMode:o},m=Er.runKernel(Le,p,f);return d?ki(m,[m.shape[1],m.shape[2],m.shape[3]]):m}});const tu=Wr({diag_:function(e){const t={x:Lr(e,"x","diag")};return Er.runKernel(We,t)}});const nu=Wr({dilation2d_:function(e,t,n,a,r=[1,1],s="NHWC"){const o=Lr(e,"x","dilation2d"),u=Lr(t,"filter","dilation2d");i(3===o.rank||4===o.rank,(()=>`Error in dilation2d: input must be rank 3 or 4, but got rank ${o.rank}.`)),i(3===u.rank,(()=>`Error in dilation2d: filter must be rank 3, but got rank ${u.rank}.`)),i("NHWC"===s,(()=>`Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${s}`));let l=o,c=!1;3===o.rank&&(l=ki(o,[1,o.shape[0],o.shape[1],o.shape[2]]),c=!0);const d={x:l,filter:u},p={strides:n,pad:a,dilations:r},h=Er.runKernel(Ve,d,p);return c?ki(h,[h.shape[1],h.shape[2],h.shape[3]]):h}});function au(e,t){const n=e.length,a=[];for(let r=0;r<n;r++){const s=n-1-r,o=e[s]||1;(t[t.length-1-r]||1)>1&&1===o&&a.unshift(s)}return a}function ru(e,t){const n=[];for(let a=0;a<t.length;a++){const r=e[e.length-a-1],s=t.length-a-1,o=t[s];(null==r||1===r&&o>1)&&n.unshift(s)}return n}function su(e,t){const n=[],a=Math.max(e.length,t.length);for(let r=0;r<a;r++){let a=e[e.length-r-1];null==a&&(a=1);let s=t[t.length-r-1];if(null==s&&(s=1),1===a)n.unshift(s);else if(1===s)n.unshift(a);else{if(a!==s){throw Error(`Operands could not be broadcast together with shapes ${e} and ${t}.`)}n.unshift(a)}}return n}const ou=Wr({equal_:function(e,t){let n=Lr(e,"a","equal","string_or_numeric"),a=Lr(t,"b","equal","string_or_numeric");[n,a]=xr(n,a),su(n.shape,a.shape);const r={a:n,b:a};return Er.runKernel(Xe,r)}});const iu=Wr({where_:function(e,t,n){const a=Lr(t,"a","where"),r=Lr(n,"b","where"),s=Lr(e,"condition","where","bool"),o=su(su(s.shape,a.shape),r.shape),i={condition:Di(s,o),t:Di(a,o),e:Di(r,o)};return Er.runKernel(hn,i)}});const uu=Wr({zerosLike_:function(e){const t={x:Lr(e,"x","zerosLike")};return Er.runKernel(qn,t)}});const lu=Wr({divNoNan_:function(e,t){let n=Lr(e,"a","div"),a=Lr(t,"b","div");[n,a]=xr(n,a);const r=qo(n,a),s=uu(r),o=ou(a,s);return iu(o,s,r)}});const cu=Wr({dot_:function(e,t){const n=Lr(e,"t1","dot"),a=Lr(t,"t2","dot");i(!(1!==n.rank&&2!==n.rank||1!==a.rank&&2!==a.rank),(()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${n.rank} and ${a.rank}.`));const r=1===n.rank?n.size:n.shape[1],s=1===a.rank?a.size:a.shape[0];if(i(r===s,(()=>`Error in dot: inner dimensions of inputs must match, but got ${r} and ${s}.`)),1===n.rank&&1===a.rank){const e=ki(n,[1,-1]),t=ki(a,[-1,1]),r=Ks(e,t);return ki(r,[])}if(1===n.rank&&2===a.rank){const e=ki(n,[1,-1]),t=ki(a,[a.shape[0],a.shape[1]]),r=Ks(e,t);return ki(r,[r.size])}if(2===n.rank&&1===a.rank){const e=ki(a,[-1,1]),t=Ks(n,e);return ki(t,[t.size])}{const e=ki(a,[a.shape[0],a.shape[1]]);return Ks(n,e)}}});const du=Wr({einsum_:function(e,...t){const n=t.map(((e,t)=>Lr(e,`tensors${t}`,"einsum"))),a={equation:e};return Er.runKernel(He,n,a)}});const pu=Wr({elu_:function(e){const t={x:Lr(e,"x","elu")};return Er.runKernel(je,t)}});const hu=Wr({erf_:function(e){let t=Lr(e,"x","erf");i("int32"===t.dtype||"float32"===t.dtype,(()=>"Input dtype must be `int32` or `float32`.")),"int32"===t.dtype&&(t=As(t,"float32"));const n={x:t};return Er.runKernel(Ke,n)}});const fu=Wr({exp_:function(e){const t={x:Lr(e,"x","exp")};return Er.runKernel(Ye,t)}});const mu=Wr({expandDims_:function(e,t=0){const n=Lr(e,"x","expandDims","string_or_numeric");i(t<=n.rank,(()=>"Axis must be <= rank of the tensor"));const a={input:n},r={dim:t};return Er.runKernel(Qe,a,r)}});const gu=Wr({expm1_:function(e){const t={x:Lr(e,"x","expm1")};return Er.runKernel(Ze,t)}});const yu=Wr({tile_:function(e,t){const n=Lr(e,"x","tile","string_or_numeric");i(n.rank===t.length,(()=>`Error in transpose: rank of input ${n.rank} must match length of reps ${t}.`));const a={x:n},r={reps:t};return Er.runKernel(Wn,a,r)}});const bu=Wr({eye_:function(e,t,n,a="float32"){null==t&&(t=e);const r=Rs([e,t],a),s=e<=t?e:t;for(let e=0;e<s;++e)r.set(1,e,e);const o=ki(r.toTensor(),[e,t]);if(null==n)return o;if(1===n.length)return yu(mu(o,0),[n[0],1,1]);if(2===n.length)return yu(mu(mu(o,0),0),[n[0],n[1],1,1]);if(3===n.length)return yu(mu(mu(mu(o,0),0),0),[n[0],n[1],n[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${n.length}D.`)}});function xu(e,t,n){const a={shape:e,value:t,dtype:n};return Er.runKernel(et,{},a)}const vu=Wr({floor_:function(e){const t={x:Lr(e,"x","floor")};return Er.runKernel(nt,t)}});const ku=Wr({gather_:function(e,t,n=0,a=0){const r={x:Lr(e,"x","gather"),indices:Lr(t,"indices","gather","int32")},s={axis:n,batchDims:a};return Er.runKernel(st,r,s)}});const wu=Wr({greater_:function(e,t){let n=Lr(e,"a","greater","string_or_numeric"),a=Lr(t,"b","greater","string_or_numeric");[n,a]=xr(n,a),su(n.shape,a.shape);const r={a:n,b:a};return Er.runKernel(it,r)}});const Iu=Wr({greaterEqual_:function(e,t){let n=Lr(e,"a","greaterEqual","string_or_numeric"),a=Lr(t,"b","greaterEqual","string_or_numeric");[n,a]=xr(n,a),su(n.shape,a.shape);const r={a:n,b:a};return Er.runKernel(ut,r)}});const Nu=Wr({imag_:function(e){const t={input:Lr(e,"input","imag")};return Er.runKernel(dt,t)}});const $u=Wr({isFinite_:function(e){const t={x:Lr(e,"x","isFinite")};return Er.runKernel(pt,t)}});const Tu=Wr({isInf_:function(e){const t={x:Lr(e,"x","isInf")};return Er.runKernel(ht,t)}});const Cu=Wr({isNaN_:function(e){const t={x:Lr(e,"x","isNaN")};return Er.runKernel(ft,t)}});const Eu=Wr({leakyRelu_:function(e,t=.2){const n={x:Lr(e,"x","leakyRelu")},a={alpha:t};return Er.runKernel(mt,n,a)}});const Su=Wr({less_:function(e,t){let n=Lr(e,"a","less","string_or_numeric"),a=Lr(t,"b","less","string_or_numeric");[n,a]=xr(n,a),su(n.shape,a.shape);const r={a:n,b:a};return Er.runKernel(gt,r)}});const Ru=Wr({lessEqual_:function(e,t){let n=Lr(e,"a","lessEqual","string_or_numeric"),a=Lr(t,"b","lessEqual","string_or_numeric");[n,a]=xr(n,a),su(n.shape,a.shape);const r={a:n,b:a};return Er.runKernel(yt,r)}});function Au(e,t,n){if(n<=0)throw new Error("The number of values should be positive.");const a={start:e,stop:t,num:n};return Er.runKernel(bt,{},a)}const _u=Wr({localResponseNormalization_:function(e,t=5,n=1,a=1,r=.5){const s=Lr(e,"x","localResponseNormalization");i(4===s.rank||3===s.rank,(()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${s.rank}.`)),i(h(t),(()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${t}.`));let o=s,u=!1;3===s.rank&&(u=!0,o=ki(s,[1,s.shape[0],s.shape[1],s.shape[2]]));const l={x:o},c={depthRadius:t,bias:n,alpha:a,beta:r},d=Er.runKernel(Nt,l,c);return u?ki(d,[d.shape[1],d.shape[2],d.shape[3]]):d}});const Fu=Wr({log_:function(e){const t={x:Lr(e,"x","log")};return Er.runKernel(xt,t)}});const Ou=Wr({log1p_:function(e){const t={x:Lr(e,"x","log1p")};return Er.runKernel(vt,t)}});function Du(e,t){i(_(e),(()=>"The f passed in variableGrads(f) must be a function")),i(null==t||Array.isArray(t)&&t.every((e=>e instanceof cr)),(()=>"The varList passed in variableGrads(f, varList) must be an array of variables"));const n=null!=t;if(!n){t=[];for(const e in Er.registeredVariables)t.push(Er.registeredVariables[e])}const a=n?t.filter((e=>!e.trainable)):null,r=t.length;i((t=t.filter((e=>e.trainable))).length>0,(()=>`variableGrads() expects at least one of the input variables to be trainable, but none of the ${r} variables is trainable.`));const{value:s,grads:o}=Er.gradients(e,t,null,!0);i(o.some((e=>null!=e)),(()=>"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize().")),i(0===s.rank,(()=>`The f passed in variableGrads(f) must return a scalar, but it returned a rank-${s.rank} tensor`));const u={};return t.forEach(((e,t)=>{null!=o[t]&&(u[e.name]=o[t])})),null!=a&&a.forEach((e=>u[e.name]=null)),{value:s,grads:u}}function Mu(e){return Er.customGrad(e)}function Lu(e){if(e.filter((e=>null==e)).length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that\n    the f you passed encloses all operations that lead from x to y.")}const Pu=Wr({neg_:function(e){const t={x:Lr(e,"x","neg")};return Er.runKernel(Wt,t)}});const Bu=Wr({softplus_:function(e){const t={x:Lr(e,"x","softplus")};return Er.runKernel(vn,t)}});const Wu=Wr({logSigmoid_:function(e){const t=Lr(e,"x","logSigmoid");return Mu((e=>({value:Pu(Bu(Pu(e))),gradFunc:t=>Ko(t,$i(Pu(e)))})))(t)}});const Vu=Wr({max_:function(e,t=null,n=!1){const a={x:Lr(e,"x","max")},r={reductionIndices:t,keepDims:n};return Er.runKernel(Tt,a,r)}});const zu=Wr({sub_:function(e,t){let n=Lr(e,"a","sub"),a=Lr(t,"b","sub");[n,a]=xr(n,a);const r={a:n,b:a};return Er.runKernel(Ln,r)}});const Uu=Wr({sum_:function(e,t=null,n=!1){let a=Lr(e,"x","sum");"bool"===a.dtype&&(a=As(a,"int32"));const r={x:a},s={axis:t,keepDims:n};return Er.runKernel(wn,r,s)}});const Gu=Wr({logSoftmax_:function(e,t=-1){const n=Lr(e,"logits","logSoftmax");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and axis was ${t}`);return Mu(((e,n)=>{const a=Vu(e,t,!0),r=zu(e,a),s=zu(As(r,"float32"),Fu(Uu(fu(r),t,!0)));n([s]);return{value:s,gradFunc:(e,n)=>{const[a]=n,r=fu(a);return zu(e,Ko(Uu(e,t,!0),r))}}}))(n)}});function Hu(e,t){for(let n=0;n<e.length;++n)if(e[e.length-n-1]!==t-1-n)return!1;return!0}function ju(e,t,n){const a=e.length+t.length,r=[];let s=0,o=0;for(let i=0;i<a;i++)-1===n.indexOf(i)?r.push(e[s++]):r.push(t[o++]);return r}function qu(e,t){const n=[],a=e.length;for(let r=0;r<a;r++)-1===t.indexOf(r)&&n.push(e[r]);return[n,t.map((t=>e[t]))]}function Ku(e,t){return ju(e,t.map((e=>1)),t)}function Xu(e,t,n){i(Hu(t,n),(()=>`${e} supports only inner-most axes for now. Got axes ${t} and rank-${n} input.`))}function Yu(e,t){if(Hu(e,t))return null;const n=[];for(let a=0;a<t;++a)-1===e.indexOf(a)&&n.push(a);return e.forEach((e=>n.push(e))),n}function Qu(e){return e.map(((e,t)=>[t,e])).sort(((e,t)=>e[1]-t[1])).map((e=>e[0]))}function Zu(e,t){const n=[];for(let a=t-e;a<t;++a)n.push(a);return n}const Ju=Wr({logSumExp_:function(e,t=null,n=!1){const a=Lr(e,"x","logSumExp"),r=b(t,a.shape),s=Vu(a,r,!0),o=zu(a,s),i=fu(o),u=Uu(i,r),l=Fu(u),c=Ho(ki(s,l.shape),l);if(n){const e=Ku(c.shape,r);return ki(c,e)}return c}});const el=Wr({logicalAnd_:function(e,t){const n=Lr(e,"a","logicalAnd","bool"),a=Lr(t,"b","logicalAnd","bool");su(n.shape,a.shape);const r={a:n,b:a};return Er.runKernel(kt,r)}});const tl=Wr({logicalNot_:function(e){const t={x:Lr(e,"x","logicalNot","bool")};return Er.runKernel(wt,t)}});const nl=Wr({logicalOr_:function(e,t){const n=Lr(e,"a","logicalOr","bool"),a=Lr(t,"b","logicalOr","bool");su(n.shape,a.shape);const r={a:n,b:a};return Er.runKernel(It,r)}});const al=Wr({logicalXor_:function(e,t){const n=Lr(e,"a","logicalXor","bool"),a=Lr(t,"b","logicalXor","bool");return su(n.shape,a.shape),el(nl(e,t),tl(el(e,t)))}});const rl=Wr({maxPool_:function(e,t,n,a,r){const s=Lr(e,"x","maxPool");let o=s,u=!1;3===s.rank&&(u=!0,o=ki(s,[1,s.shape[0],s.shape[1],s.shape[2]])),i(4===o.rank,(()=>`Error in maxPool: input must be rank 4 but got rank ${o.rank}.`)),i(xi(n,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`)),null!=r&&i(h(a),(()=>`Error in maxPool: pad must be an integer when using, dimRoundingMode ${r} but got pad ${a}.`));const l={x:o},c={filterSize:t,strides:n,pad:a,dimRoundingMode:r},d=Er.runKernel(Et,l,c);return u?ki(d,[d.shape[1],d.shape[2],d.shape[3]]):d}});const sl=Wr({maxPool3d_:function(e,t=[1,1,1],n,a,r,s="NDHWC"){const o=Lr(e,"x","maxPool3d");let u=o,l=!1;4===o.rank&&(l=!0,u=ki(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),i(5===u.rank,(()=>`Error in maxPool3d: x must be rank 5 but got rank ${u.rank}.`)),i("NDHWC"===s,(()=>`Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${s}`)),null!=r&&i(h(a),(()=>`Error in maxPool3d: pad must be an integer when using, dimRoundingMode ${r} but got pad ${a}.`));const c={x:u},d={filterSize:t,strides:n,pad:a,dimRoundingMode:r,dataFormat:s},p=Er.runKernel(Rt,c,d);return l?ki(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}});const ol=Wr({maxPoolWithArgmax_:function(e,t,n,a,r=!1){const s={x:Lr(e,"x","maxPoolWithArgmax")},o={filterSize:t,strides:n,pad:a,includeBatchInIndex:r},i=Er.runKernel(_t,s,o);return{result:i[0],indexes:i[1]}}});const il=Wr({maximum_:function(e,t){let n=Lr(e,"a","maximum"),a=Lr(t,"b","maximum");[n,a]=xr(n,a),"bool"===n.dtype&&(n=As(n,"int32"),a=As(a,"int32")),su(n.shape,a.shape);const r={a:n,b:a};return Er.runKernel(Ct,r)}});const ul=Wr({mean_:function(e,t=null,n=!1){const a={x:Lr(e,"x","mean")},r={axis:t,keepDims:n};return Er.runKernel(Ft,a,r)}});function ll(e,t="float32"){if("complex64"===t){const t=ll(e,"float32"),n=ll(e,"float32");return Vr(t,n)}const n=P(d(e),t);return Er.makeTensor(n,e,t)}function cl(e,t="float32"){if("complex64"===t){const t=cl(e,"float32"),n=ll(e,"float32");return Vr(t,n)}const n=L(d(e),t);return Er.makeTensor(n,e,t)}const dl=Wr({min_:function(e,t=null,n=!1){const a={x:Lr(e,"x","min")},r={axis:t,keepDims:n};return Er.runKernel(Ot,a,r)}});const pl=Wr({minimum_:function(e,t){let n=Lr(e,"a","minimum"),a=Lr(t,"b","minimum");[n,a]=xr(n,a),"bool"===n.dtype&&(n=As(n,"int32"),a=As(a,"int32")),su(n.shape,a.shape);const r={a:n,b:a};return Er.runKernel(Dt,r)}});const hl=Wr({mirrorPad_:function(e,t,n){i("reflect"===n||"symmetric"===n,(()=>`Invalid mode. Mode must be either reflect or symmetric. Got ${n}.`));const a=Lr(e,"x","mirrorPad");if(0===a.rank)throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");i(t.length===a.rank,(()=>`Padding doesn't match input. Must be ${a.rank}. Got ${t.length}.`));const r="reflect"===n?1:0;for(let e=0;e<a.rank;e++)i(2===t[e].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),i(t[e][0]>=0&&t[e][0]<=a.shape[e]-r&&t[e][1]>=0&&t[e][1]<=a.shape[e]-r,(()=>`Padding in dimension ${e} cannot be greater than or equal to ${a.shape[e]-r} or less than 0 for input of shape ${a.shape}`));const s={paddings:t,mode:n},o={x:a};return Er.runKernel(Mt,o,s)}});const fl=Wr({mod_:function(e,t){let n=Lr(e,"a","mod"),a=Lr(t,"b","mod");[n,a]=xr(n,a);const r={a:n,b:a};return Er.runKernel(Lt,r)}});const ml=Wr({square_:function(e){const t=Lr(e,"x","square");return Er.runKernel("Square",{x:t},{})}});const gl=Wr({moments_:function(e,t=null,n=!1){const a=b(t,(e=Lr(e,"x","moments")).shape),r=ul(e,a,n);let s=r.shape;n||(s=Ku(r.shape,a));const o=ml(zu(As(e,"float32"),ki(r,s)));return{mean:r,variance:ul(o,a,n)}}});const yl=Wr({multiRNNCell_:function(e,t,n,a){const r=Lr(t,"data","multiRNNCell"),s=Pr(n,"c","multiRNNCell"),o=Pr(a,"h","multiRNNCell");let i=r;const u=[];for(let t=0;t<e.length;t++){const n=e[t](i,s[t],o[t]);u.push(n[0]),u.push(n[1]),i=n[1]}const l=[],c=[];for(let e=0;e<u.length;e+=2)l.push(u[e]),c.push(u[e+1]);return[l,c]}});const bl=Wr({multinomial_:function(e,t,n,a=!1){const r=Lr(e,"logits","multinomial"),s=r.size,o=r.rank;if(s<2)throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ${s}.`);if(o>2)throw new Error(`Rank of probabilities must be 1 or 2, but is ${o}`);n=n||Math.random();const i={logits:1===o?ki(r,[1,-1]):r},u={numSamples:t,seed:n,normalized:a},l=Er.runKernel(Pt,i,u);return 1===o?ki(l,[l.size]):l}});const xl=Wr({notEqual_:function(e,t){let n=Lr(e,"a","notEqual","string_or_numeric"),a=Lr(t,"b","notEqual","string_or_numeric");[n,a]=xr(n,a),su(n.shape,a.shape);const r={a:n,b:a};return Er.runKernel(Vt,r)}});const vl=Wr({onesLike_:function(e){const t={x:Lr(e,"x","onesLike")};return Er.runKernel(Ht,t)}});const kl=Wr({outerProduct_:function(e,t){const n=Lr(e,"v1","outerProduct"),a=Lr(t,"v2","outerProduct");i(1===n.rank&&1===a.rank,(()=>`Error in outerProduct: inputs must be rank 1, but got ranks ${n.rank} and ${a.rank}.`));const r=ki(n,[-1,1]),s=ki(a,[1,-1]);return Ks(r,s)}});const wl=Wr({pad_:function(e,t,n=0){const a=Lr(e,"x","pad");if(0===a.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");const r={paddings:t,constantValue:n},s={x:a};return Er.runKernel(Kt,s,r)}});const Il=Wr({pad1d_:function(e,t,n=0){return i(2===t.length,(()=>"Invalid number of paddings. Must be length of 2.")),wl(e,[t],n)}});const Nl=Wr({pad2d_:function(e,t,n=0){return i(2===t.length&&2===t[0].length&&2===t[1].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),wl(e,t,n)}});const $l=Wr({pad3d_:function(e,t,n=0){return i(3===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),wl(e,t,n)}});const Tl=Wr({pad4d_:function(e,t,n=0){return i(4===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length&&2===t[3].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),wl(e,t,n)}});const Cl=Wr({spaceToBatchND_:function(e,t,n){const a=Lr(e,"x","spaceToBatchND");i(a.rank>=1+t.length,(()=>`input rank ${a.rank} should be > than [blockShape] ${t.length}`)),i(n.length===t.length,(()=>`paddings.shape[0] ${n.length} must be equal to [blockShape] ${t.length}`)),i(a.shape.reduce(((e,a,r)=>r>0&&r<=t.length?e&&(a+n[r-1][0]+n[r-1][1])%t[r-1]==0:e),!0),(()=>`input spatial dimensions ${a.shape.slice(1)} with paddings ${n.toString()} must be divisible by blockShapes ${t.toString()}`));const r={x:a},s={blockShape:t,paddings:n};return Er.runKernel(In,r,s)}});const El=Wr({pool_:function(e,t,n,a,r,s){null==r&&(r=[1,1]),null==s&&(s=1),0===a&&(a="valid");const o=Lr(e,"x","maxPool");let u=o,l=!1;3===o.rank&&(l=!0,u=ki(o,[1,o.shape[0],o.shape[1],o.shape[2]])),i(xi(s,r),(()=>`Error in pool: Either strides or dilations must be 1. Got strides ${s} and dilations '${r}'`));const c=li(u.shape,t,s,r,a),d=[c.dilationHeight,c.dilationWidth];let p;p="same"===a?function(e,t){const n=e.map(((e,n)=>e+(e-1)*(t[n]-1))).map((e=>e-1)),a=n.map((e=>Math.floor(e/2))),r=n.map(((e,t)=>e-a[t]));return n.map(((e,t)=>[a[t],r[t]]))}([c.filterHeight,c.filterWidth],d):[[0,0],[0,0]];const h=1===d[0]&&1===d[1],[f,m]=function(e,t,n){const a=n.map((e=>e[0])),r=n.map((e=>e[1])),s=e.concat(a,r),o=t.map(((e,t)=>(e-s[t]%e)%e)),i=r.map(((e,t)=>e+o[t])),u=t.map(((e,t)=>[a[t],i[t]])),l=t.map(((e,t)=>[0,o[t]]));return[u,l]}([c.inHeight,c.inWidth],d,p),g=h?a:"valid",y=h?u:Cl(u,d,f),b=("avg"===n?()=>wi(y,t,s,g):()=>rl(y,t,s,g))(),x=h?b:Si(b,d,m);return l?ki(x,[x.shape[1],x.shape[2],x.shape[3]]):x}});const Sl=Wr({pow_:function(e,t){let n=Lr(e,"base","pow"),a=Lr(t,"exp","pow");[n,a]=xr(n,a);const r={a:n,b:a};return Er.runKernel(Xt,r)}});const Rl=Wr({prelu_:function(e,t){const n={x:Lr(e,"x","prelu"),alpha:Lr(t,"alpha","prelu")};return Er.runKernel(Yt,n)}});const Al=Wr({prod_:function(e,t=null,n=!1){let a=Lr(e,"x","prod");"bool"===a.dtype&&(a=As(a,"int32"));const r={x:a},s={axis:t,keepDims:n};return Er.runKernel(Qt,r,s)}});const _l=Wr({rand_:function(e,t,n){const a=d(e);let r=null;if(null==n||"float32"===n)r=new Float32Array(a);else if("int32"===n)r=new Int32Array(a);else{if("bool"!==n)throw new Error(`Unknown data type ${n}`);r=new Uint8Array(a)}for(let e=0;e<a;e++)r[e]=t();return Er.makeTensor(r,e,n)}});"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self&&self;function Fl(e){if(e.__esModule)return e;var t=Object.defineProperty({},"__esModule",{value:!0});return Object.keys(e).forEach((function(n){var a=Object.getOwnPropertyDescriptor(e,n);Object.defineProperty(t,n,a.get?a:{enumerable:!0,get:function(){return e[n]}})})),t}function Ol(e){var t={exports:{}};return e(t,t.exports),t.exports}var Dl=Ol((function(e){!function(e,t,n){function a(e){var t,n=this,a=(t=4022871197,function(e){e=e.toString();for(var n=0;n<e.length;n++){var a=.02519603282416938*(t+=e.charCodeAt(n));a-=t=a>>>0,t=(a*=t)>>>0,t+=4294967296*(a-=t)}return 2.3283064365386963e-10*(t>>>0)});n.next=function(){var e=2091639*n.s0+2.3283064365386963e-10*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=e-(n.c=0|e)},n.c=1,n.s0=a(" "),n.s1=a(" "),n.s2=a(" "),n.s0-=a(e),n.s0<0&&(n.s0+=1),n.s1-=a(e),n.s1<0&&(n.s1+=1),n.s2-=a(e),n.s2<0&&(n.s2+=1),a=null}function r(e,t){return t.c=e.c,t.s0=e.s0,t.s1=e.s1,t.s2=e.s2,t}function s(e,t){var n=new a(e),s=t&&t.state,o=n.next;return o.int32=function(){return 4294967296*n.next()|0},o.double=function(){return o()+11102230246251565e-32*(2097152*o()|0)},o.quick=o,s&&("object"==typeof s&&r(s,n),o.state=function(){return r(n,{})}),o}t&&t.exports?t.exports=s:n&&n.amd?n((function(){return s})):this.alea=s}(0,e,!1)})),Ml=Ol((function(e){!function(e,t,n){function a(e){var t=this,n="";t.x=0,t.y=0,t.z=0,t.w=0,t.next=function(){var e=t.x^t.x<<11;return t.x=t.y,t.y=t.z,t.z=t.w,t.w^=t.w>>>19^e^e>>>8},e===(0|e)?t.x=e:n+=e;for(var a=0;a<n.length+64;a++)t.x^=0|n.charCodeAt(a),t.next()}function r(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t}function s(e,t){var n=new a(e),s=t&&t.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},o.int32=n.next,o.quick=o,s&&("object"==typeof s&&r(s,n),o.state=function(){return r(n,{})}),o}t&&t.exports?t.exports=s:n&&n.amd?n((function(){return s})):this.xor128=s}(0,e,!1)})),Ll=Ol((function(e){!function(e,t,n){function a(e){var t=this,n="";t.next=function(){var e=t.x^t.x>>>2;return t.x=t.y,t.y=t.z,t.z=t.w,t.w=t.v,(t.d=t.d+362437|0)+(t.v=t.v^t.v<<4^e^e<<1)|0},t.x=0,t.y=0,t.z=0,t.w=0,t.v=0,e===(0|e)?t.x=e:n+=e;for(var a=0;a<n.length+64;a++)t.x^=0|n.charCodeAt(a),a==n.length&&(t.d=t.x<<10^t.x>>>4),t.next()}function r(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t.v=e.v,t.d=e.d,t}function s(e,t){var n=new a(e),s=t&&t.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},o.int32=n.next,o.quick=o,s&&("object"==typeof s&&r(s,n),o.state=function(){return r(n,{})}),o}t&&t.exports?t.exports=s:n&&n.amd?n((function(){return s})):this.xorwow=s}(0,e,!1)})),Pl=Ol((function(e){!function(e,t,n){function a(e){var t=this;t.next=function(){var e,n,a=t.x,r=t.i;return e=a[r],n=(e^=e>>>7)^e<<24,n^=(e=a[r+1&7])^e>>>10,n^=(e=a[r+3&7])^e>>>3,n^=(e=a[r+4&7])^e<<7,e=a[r+7&7],n^=(e^=e<<13)^e<<9,a[r]=n,t.i=r+1&7,n},function(e,t){var n,a=[];if(t===(0|t))a[0]=t;else for(t=""+t,n=0;n<t.length;++n)a[7&n]=a[7&n]<<15^t.charCodeAt(n)+a[n+1&7]<<13;for(;a.length<8;)a.push(0);for(n=0;n<8&&0===a[n];++n);for(8==n?a[7]=-1:a[n],e.x=a,e.i=0,n=256;n>0;--n)e.next()}(t,e)}function r(e,t){return t.x=e.x.slice(),t.i=e.i,t}function s(e,t){null==e&&(e=+new Date);var n=new a(e),s=t&&t.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},o.int32=n.next,o.quick=o,s&&(s.x&&r(s,n),o.state=function(){return r(n,{})}),o}t&&t.exports?t.exports=s:n&&n.amd?n((function(){return s})):this.xorshift7=s}(0,e,!1)})),Bl=Ol((function(e){!function(e,t,n){function a(e){var t=this;t.next=function(){var e,n,a=t.w,r=t.X,s=t.i;return t.w=a=a+1640531527|0,n=r[s+34&127],e=r[s=s+1&127],n^=n<<13,e^=e<<17,n^=n>>>15,e^=e>>>12,n=r[s]=n^e,t.i=s,n+(a^a>>>16)|0},function(e,t){var n,a,r,s,o,i=[],u=128;for(t===(0|t)?(a=t,t=null):(t+="\0",a=0,u=Math.max(u,t.length)),r=0,s=-32;s<u;++s)t&&(a^=t.charCodeAt((s+32)%t.length)),0===s&&(o=a),a^=a<<10,a^=a>>>15,a^=a<<4,a^=a>>>13,s>=0&&(o=o+1640531527|0,r=0==(n=i[127&s]^=a+o)?r+1:0);for(r>=128&&(i[127&(t&&t.length||0)]=-1),r=127,s=512;s>0;--s)a=i[r+34&127],n=i[r=r+1&127],a^=a<<13,n^=n<<17,a^=a>>>15,n^=n>>>12,i[r]=a^n;e.w=o,e.X=i,e.i=r}(t,e)}function r(e,t){return t.i=e.i,t.w=e.w,t.X=e.X.slice(),t}function s(e,t){null==e&&(e=+new Date);var n=new a(e),s=t&&t.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},o.int32=n.next,o.quick=o,s&&(s.X&&r(s,n),o.state=function(){return r(n,{})}),o}t&&t.exports?t.exports=s:n&&n.amd?n((function(){return s})):this.xor4096=s}(0,e,!1)})),Wl=Ol((function(e){!function(e,t,n){function a(e){var t=this,n="";t.next=function(){var e=t.b,n=t.c,a=t.d,r=t.a;return e=e<<25^e>>>7^n,n=n-a|0,a=a<<24^a>>>8^r,r=r-e|0,t.b=e=e<<20^e>>>12^n,t.c=n=n-a|0,t.d=a<<16^n>>>16^r,t.a=r-e|0},t.a=0,t.b=0,t.c=-1640531527,t.d=1367130551,e===Math.floor(e)?(t.a=e/4294967296|0,t.b=0|e):n+=e;for(var a=0;a<n.length+20;a++)t.b^=0|n.charCodeAt(a),t.next()}function r(e,t){return t.a=e.a,t.b=e.b,t.c=e.c,t.d=e.d,t}function s(e,t){var n=new a(e),s=t&&t.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},o.int32=n.next,o.quick=o,s&&("object"==typeof s&&r(s,n),o.state=function(){return r(n,{})}),o}t&&t.exports?t.exports=s:n&&n.amd?n((function(){return s})):this.tychei=s}(0,e,!1)})),Vl=Fl(Object.freeze({__proto__:null,default:{}})),zl=Ol((function(e){!function(t,n){var a,r=this,s=256,o=n.pow(s,6),i=n.pow(2,52),u=2*i,l=255;function c(e,l,c){var g=[],y=f(h((l=1==l?{entropy:!0}:l||{}).entropy?[e,m(t)]:null==e?function(){try{var e;return a&&(e=a.randomBytes)?e=e(s):(e=new Uint8Array(s),(r.crypto||r.msCrypto).getRandomValues(e)),m(e)}catch(e){var n=r.navigator,o=n&&n.plugins;return[+new Date,r,o,r.screen,m(t)]}}():e,3),g),b=new d(g),x=function(){for(var e=b.g(6),t=o,n=0;e<i;)e=(e+n)*s,t*=s,n=b.g(1);for(;e>=u;)e/=2,t/=2,n>>>=1;return(e+n)/t};return x.int32=function(){return 0|b.g(4)},x.quick=function(){return b.g(4)/4294967296},x.double=x,f(m(b.S),t),(l.pass||c||function(e,t,a,r){return r&&(r.S&&p(r,b),e.state=function(){return p(b,{})}),a?(n.random=e,t):e})(x,y,"global"in l?l.global:this==n,l.state)}function d(e){var t,n=e.length,a=this,r=0,o=a.i=a.j=0,i=a.S=[];for(n||(e=[n++]);r<s;)i[r]=r++;for(r=0;r<s;r++)i[r]=i[o=l&o+e[r%n]+(t=i[r])],i[o]=t;(a.g=function(e){for(var t,n=0,r=a.i,o=a.j,i=a.S;e--;)t=i[r=l&r+1],n=n*s+i[l&(i[r]=i[o=l&o+t])+(i[o]=t)];return a.i=r,a.j=o,n})(s)}function p(e,t){return t.i=e.i,t.j=e.j,t.S=e.S.slice(),t}function h(e,t){var n,a=[],r=typeof e;if(t&&"object"==r)for(n in e)try{a.push(h(e[n],t-1))}catch(e){}return a.length?a:"string"==r?e:e+"\0"}function f(e,t){for(var n,a=e+"",r=0;r<a.length;)t[l&r]=l&(n^=19*t[l&r])+a.charCodeAt(r++);return m(t)}function m(e){return String.fromCharCode.apply(0,e)}if(n.seedrandom=c,f(n.random(),t),e.exports){e.exports=c;try{a=Vl}catch(e){}}else 0}([],Math)}));zl.alea=Dl,zl.xor128=Ml,zl.xorwow=Ll,zl.xorshift7=Pl,zl.xor4096=Bl,zl.tychei=Wl;var Ul=zl;class Gl{constructor(e,t,n,a,r){this.mean=e,this.stdDev=t,this.dtype=n,this.nextVal=NaN,this.truncated=a,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);const s=r||Math.random();this.random=Ul.alea(s.toString())}nextValue(){if(!isNaN(this.nextVal)){const e=this.nextVal;return this.nextVal=NaN,e}let e,t,n=!1;for(;!n;){let a,r,s;do{a=2*this.random()-1,r=2*this.random()-1,s=a*a+r*r}while(s>=1||0===s);const o=Math.sqrt(-2*Math.log(s)/s);e=this.mean+this.stdDev*a*o,t=this.mean+this.stdDev*r*o,this.truncated&&!this.isValidTruncated(e)||(n=!0)}return this.truncated&&!this.isValidTruncated(t)||(this.nextVal=this.convertValue(t)),this.convertValue(e)}convertValue(e){return null==this.dtype||"float32"===this.dtype?e:Math.round(e)}isValidTruncated(e){return e<=this.upper&&e>=this.lower}}class Hl{constructor(e,t,n,a){this.alpha=e,this.beta=1/t,this.dtype=n;const r=a||Math.random();this.randu=Ul.alea(r.toString()),this.randn=new Gl(0,1,n,!1,this.randu()),this.d=e<1?e+2/3:e-1/3,this.c=1/Math.sqrt(9*this.d)}nextValue(){let e,t,n,a,r,s;for(;;){do{a=this.randn.nextValue(),s=1+this.c*a}while(s<=0);if(s*=s*s,e=a*a,t=1-.331*e*e,n=.5*e+this.d*(1-s+Math.log(s)),r=this.randu(),r<t||Math.log(r)<n)break}return s=1/this.beta*this.d*s,this.alpha<1&&(s*=Math.pow(this.randu(),1/this.alpha)),this.convertValue(s)}convertValue(e){return"float32"===this.dtype?e:Math.round(e)}}class jl{constructor(e=0,t=1,n,a){if(this.canReturnFloat=()=>null==this.dtype||"float32"===this.dtype,this.min=e,this.range=t-e,this.dtype=n,null==a&&(a=Math.random()),"number"==typeof a&&(a=a.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${e} - ${t} <= 1 and dtype is not float`);this.random=Ul.alea(a)}convertValue(e){return this.canReturnFloat()?e:Math.round(e)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}const ql=Wr({randomGamma_:function(e,t,n=1,a="float32",r){if(null==n&&(n=1),null==a&&(a="float32"),"float32"!==a&&"int32"!==a)throw new Error(`Unsupported data type ${a}`);const s=new Hl(t,n,a,r),o=Rs(e,a);for(let e=0;e<o.values.length;e++)o.values[e]=s.nextValue();return o.toTensor()}});const Kl=Wr({randomNormal_:function(e,t=0,n=1,a,r){if(null!=a&&"bool"===a)throw new Error(`Unsupported data type ${a}`);const s=new Gl(t,n,a,!1,r),o=Rs(e,a);for(let e=0;e<o.values.length;e++)o.values[e]=s.nextValue();return o.toTensor()}});const Xl=Wr({randomUniform_:function(e,t=0,n=1,a="float32",r){const s=Rs(e,a),o=new jl(t,n,null,r);for(let e=0;e<s.values.length;e++)s.values[e]=o.nextValue();return s.toTensor()}});function Yl(e,t,n=1,a="float32"){if(0===n)throw new Error("Cannot have a step of zero");const r={start:e,stop:t,step:n,dtype:a};return Er.runKernel(Zt,{},r)}const Ql=Wr({real_:function(e){const t={input:Lr(e,"input","real")};return Er.runKernel(Jt,t)}});const Zl=Wr({reciprocal_:function(e){const t={x:Lr(e,"x","reciprocal")};return Er.runKernel(en,t)}});const Jl=Wr({relu_:function(e){const t={x:Lr(e,"x","relu")};return Er.runKernel(tn,t)}});const ec=Wr({relu6_:function(e){const t={x:Lr(e,"x","relu6")};return Er.runKernel(un,t)}});const tc=Wr({reverse_:function(e,t){const n={x:Lr(e,"x","reverse")},a={dims:t};return Er.runKernel(ln,n,a)}});const nc=Wr({reverse1d_:function(e){const t=Lr(e,"x","reverse");return i(1===t.rank,(()=>`Error in reverse1D: x must be rank 1 but got rank ${t.rank}.`)),tc(t,0)}});const ac=Wr({reverse2d_:function(e,t){const n=Lr(e,"x","reverse");return i(2===n.rank,(()=>`Error in reverse2D: x must be rank 2 but got rank ${n.rank}.`)),tc(n,t)}});const rc=Wr({reverse3d_:function(e,t){const n=Lr(e,"x","reverse");return i(3===n.rank,(()=>`Error in reverse3D: x must be rank 3 but got rank ${n.rank}.`)),tc(n,t)}});const sc=Wr({reverse4d_:function(e,t){const n=Lr(e,"x","reverse");return i(4===n.rank,(()=>`Error in reverse4D: x must be rank 4 but got rank ${n.rank}.`)),tc(n,t)}});const oc=Wr({round_:function(e){const t={x:Lr(e,"x","round")};return Er.runKernel(cn,t)}});const ic=Wr({rsqrt_:function(e){const t={x:Lr(e,"x","rsqrt")};return Er.runKernel(dn,t)}});function uc(e,t){if(($(e)&&"string"!==t||Array.isArray(e))&&"complex64"!==t)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===t&&$(e)&&!(e instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return zr(e,[],[],t)}const lc=Wr({selu_:function(e){const t={x:Lr(e,"x","selu")};return Er.runKernel(fn,t)}});const cc=Wr({separableConv2d_:function(e,t,n,a,r,s=[1,1],o="NHWC"){const u=Lr(e,"x","separableConv2d"),l=Lr(t,"depthwiseFilter","separableConv2d"),c=Lr(n,"pointwiseFilter","separableConv2d");let d=u,p=!1;if(3===u.rank&&(p=!0,d=ki(u,[1,u.shape[0],u.shape[1],u.shape[2]])),"NCHW"===o)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");i(4===d.rank,(()=>`Error in separableConv2d: input must be rank 4, but got rank ${d.rank}.`)),i(4===l.rank,(()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${l.rank}.`)),i(4===c.rank,(()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${l.rank}.`)),i(1===c.shape[0],(()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${c.shape[0]}.`)),i(1===c.shape[1],(()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${c.shape[1]}.`));const h=l.shape[2],f=l.shape[3];i(c.shape[2]===h*f,(()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${h*f}, but got ${c.shape[2]}.`));const m=eu(d,l,a,r,o,s),g=zi(m,c,1,"valid",o);return p?ki(g,[g.shape[1],g.shape[2],g.shape[3]]):g}});const dc=async function(e,t){const n=Lr(e,"x","setdiff1d"),a=Lr(t,"y","setdiff1d");i(n.dtype===a.dtype,(()=>`x and y should have the same dtype, but got x (${n.dtype}) and y (${a.dtype}).`)),i(1===n.rank,(()=>`x should be 1D tensor, but got x (${n.shape}).`)),i(1===a.rank,(()=>`y should be 1D tensor, but got y (${a.shape}).`));const r=await n.data(),s=await a.data(),o=new Set(s);let u=0;for(let e=0;e<r.length;e++)o.has(r[e])||u++;const l=new sr([u],n.dtype),c=new sr([u],"int32");for(let e=0,t=0;e<r.length;e++)o.has(r[e])||(l.values[t]=r[e],c.values[t]=e,t++);return[l.toTensor(),c.toTensor()]};const pc=Wr({sign_:function(e){const t={x:Lr(e,"x","sign")};return Er.runKernel(bn,t)}});const hc=Wr({sin_:function(e){const t={x:Lr(e,"x","sin")};return Er.runKernel(gn,t)}});const fc=Wr({sinh_:function(e){const t={x:Lr(e,"x","sinh")};return Er.runKernel(yn,t)}});const mc=Wr({slice1d_:function(e,t,n){const a=Lr(e,"x","slice1d");return i(1===a.rank,(()=>`slice1d expects a rank-1 tensor, but got a rank-${a.rank} tensor`)),Ti(a,[t],[n])}});const gc=Wr({slice2d_:function(e,t,n){const a=Lr(e,"x","slice2d");return i(2===a.rank,(()=>`slice2d expects a rank-2 tensor, but got a rank-${a.rank} tensor`)),Ti(a,t,n)}});const yc=Wr({slice3d_:function(e,t,n){const a=Lr(e,"x","slice3d");return i(3===a.rank,(()=>`slice3d expects a rank-3 tensor, but got a rank-${a.rank} tensor`)),Ti(a,t,n)}});const bc=Wr({slice4d_:function(e,t,n){const a=Lr(e,"x","slice4d");return i(4===a.rank,(()=>`slice4d expects a rank-4 tensor, but got a rank-${a.rank} tensor`)),Ti(a,t,n)}});const xc=Wr({softmax_:function(e,t=-1){const n=Lr(e,"logits","softmax","float32");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and dim was ${t}`);const a={logits:n},r={dim:t};return Er.runKernel($n,a,r)}});const vc=Wr({fft_:function(e){i("complex64"===e.dtype,(()=>`The dtype for tf.spectral.fft() must be complex64 but got ${e.dtype}.`));const t={input:e};return Er.runKernel(Je,t)}});const kc=Wr({ifft_:function(e){i("complex64"===e.dtype,(()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${e.dtype}.`));const t={input:e};return Er.runKernel(ct,t)}});const wc=Wr({irfft_:function(e){const t=e.shape[e.shape.length-1],n=e.size/t;let a;if(t<=2){const r=ki(e,[n,t]);a=kc(r)}else{const r=[n,2*(t-1)],s=ki(Ql(e),[n,t]),o=ki(Nu(e),[n,t]),i=tc(Ti(s,[0,1],[n,t-2]),1),u=Ko(tc(Ti(o,[0,1],[n,t-2]),1),uc(-1)),l=Ni([s,i],1),c=Ni([o,u],1),d=ki(Vr(l,c),[r[0],r[1]]);a=kc(d)}if(a=Ql(a),3===e.rank&&0!==e.shape[0]){const t=a,n=e.shape[0];a=ki(a,[n,a.shape[0]/n,a.shape[1]]),t.dispose()}return a}});const Ic=Wr({split_:function(e,t,n=0){const a={x:Lr(e,"x","split")},r={numOrSizeSplits:t,axis:n};return Er.runKernel(Nn,a,r)}});const Nc=Wr({rfft_:function(e,t){i("float32"===e.dtype,(()=>`The dtype for rfft() must be real value but got ${e.dtype}`));let n=e.shape[e.shape.length-1];const a=e.size/n;let r;if(null!=t&&t<n){const a=e.shape.map((e=>0)),s=e.shape.map((e=>e));s[e.shape.length-1]=t,r=Ti(e,a,s),n=t}else if(null!=t&&t>n){const a=e.shape.map((e=>e));a[e.shape.length-1]=t-n,r=Ni([e,ll(a)],e.shape.length-1),n=t}else r=e;const s=uu(r),o=ki(Vr(r,s),[a,n]),u=vc(o),l=Math.floor(n/2)+1,c=Ql(u),d=Nu(u),p=Ic(c,[l,n-l],c.shape.length-1),h=Ic(d,[l,n-l],d.shape.length-1),f=r.shape.slice();return f[r.shape.length-1]=l,ki(Vr(p[0],h[0]),f)}});const $c=Wr({sqrt_:function(e){const t={x:Lr(e,"x","sqrt")};return Er.runKernel(kn,t)}});const Tc=Wr({squaredDifference_:function(e,t){let n=Lr(e,"a","squaredDifference"),a=Lr(t,"b","squaredDifference");[n,a]=xr(n,a),su(n.shape,a.shape);const r={a:n,b:a};return Er.runKernel(An,r,{})}});const Cc=Wr({squeeze_:function(e,t){const n=Lr(e,"x","squeeze");return ki(n,x(n.shape,t).newShape)}});const Ec=Wr({stack_:function(e,t=0){const n=Pr(e,"tensors","stack","string_or_numeric");i(n.length>=1,(()=>"Pass at least one tensor to tf.stack")),n.length>0&&i(t<=n[0].rank,(()=>"Axis must be <= rank of the tensor"));const a=n,r={axis:t};return Er.runKernel(qt,a,r)}});const Sc=Wr({step_:function(e,t=0){const n={x:Lr(e,"x","step")},a={alpha:t};return Er.runKernel(Kn,n,a)}});const Rc=Wr({stridedSlice_:function(e,t,n,a,r=0,s=0,o=0,i=0,u=0){const l={x:Lr(e,"x","stridedSlice","string_or_numeric")},c={begin:t,end:n,strides:a,beginMask:r,endMask:s,ellipsisMask:o,newAxisMask:i,shrinkAxisMask:u};return Er.runKernel(Fn,l,c)}});const Ac=Wr({tan_:function(e){const t={x:Lr(e,"x","tan")};return Er.runKernel(Pn,t)}});function _c(e,t){l(e);const n=Or(e,t);if(1!==n.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return zr(e,null,n,t)}function Fc(e,t,n){if(l(e),null!=t&&2!==t.length)throw new Error("tensor2d() requires shape to have two numbers");const a=Or(e,n);if(2!==a.length&&1!==a.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===a.length&&null==t)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return zr(e,t,a,n)}const Oc=Wr({topk_:function(e,t=1,n=!0){const a=Lr(e,"x","topk");if(0===a.rank)throw new Error("topk() expects the input to be of rank 1 or higher");const r=a.shape[a.shape.length-1];if(t>r)throw new Error(`'k' passed to topk() must be <= the last dimension (${r}) but got ${t}`);const s={x:a},o={k:t,sorted:n},[i,u]=Er.runKernel(Vn,s,o);return{values:i,indices:u}}});const Dc=Wr({truncatedNormal_:function(e,t=0,n=1,a,r){if(null!=a&&"bool"===a)throw new Error("Unsupported data type $ { dtype }");const s=new Gl(t,n,a,!0,r),o=Rs(e,a);for(let e=0;e<o.values.length;e++)o.values[e]=s.nextValue();return o.toTensor()}});const Mc=Wr({unique_:function(e,t=0){const n=Lr(e,"x","unique","string_or_numeric");i(n.rank>0,(()=>"The input tensor must be at least 1D"));const a={x:n},r={axis:t},[s,o]=Er.runKernel(Gn,a,r);return{values:s,indices:o}}});const Lc=Wr({unsortedSegmentSum_:function(e,t,n){const a=Lr(e,"x","unsortedSegmentSum"),r=Lr(t,"segmentIds","unsortedSegmentSum","int32");i(h(n),(()=>"numSegments must be of dtype int"));const s={x:a,segmentIds:r},o={numSegments:n};return Er.runKernel(jn,s,o)}});const Pc=Wr({unstack_:function(e,t=0){const n=Lr(e,"x","unstack","string_or_numeric");i(t>=-n.shape.length&&t<n.shape.length,(()=>`Axis = ${t} is not in [-${n.shape.length}, ${n.shape.length})`));const a={value:n},r={axis:t};return Er.runKernel(Hn,a,r)}});function Bc(e,t){const n=[];for(let e=0;e<t.length;e++)t[e]&&n.push(e);const a=Rs(e,"int32"),r=Rs([n.length,e.length],"int32");for(let t=0;t<n.length;t++){const s=a.indexToLoc(n[t]),o=t*e.length;r.values.set(s,o)}return r.toTensor()}const Wc=async function(e){const t=Lr(e,"condition","whereAsync","bool"),n=await t.data(),a=Bc(t.shape,n);return e!==t&&t.dispose(),a};const Vc=async function(e,t,n){const a=Lr(e,"tensor","boolMask"),r=Lr(t,"mask","boolMask","bool"),s=null==n?0:n,o=r.rank,l=a.shape;i(o>0,(()=>"mask cannot be scalar")),u(l.slice(s,s+o),r.shape,"mask's shape must match the first K dimensions of tensor's shape,");let c=1;for(let e=s;e<s+o;e++)c*=l[e];const d=l.slice(0,s).concat([c],l.slice(s+o)),p=ki(a,d),h=ki(r,[-1]),f=await Wc(h),m=Cc(f,[1]),g=ku(p,m,s);return e!==a&&a.dispose(),t!==r&&r.dispose(),m.dispose(),p.dispose(),h.dispose(),f.dispose(),g};function zc(e,t,n=null){if(0===e.rank)return Xo(e);if(1!==e.rank&&null===n)return zc(ki(e,[-1]),t,n);if(1===e.rank||"number"==typeof n||Array.isArray(n)&&1===n.length){if(1===t)return Uu(Xo(e),n);if(t===1/0)return Vu(Xo(e),n);if(t===-1/0)return dl(Xo(e),n);if("euclidean"===t||2===t)return $c(Uu(Sl(Xo(e),uc(2,"int32")),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}if(Array.isArray(n)&&2===n.length){if(1===t)return Vu(Uu(Xo(e),n[0]),n[1]-1);if(t===1/0)return Vu(Uu(Xo(e),n[1]),n[0]);if(t===-1/0)return dl(Uu(Xo(e),n[1]),n[0]);if("fro"===t||"euclidean"===t)return $c(Uu(ml(e),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}throw new Error(`Error in norm: invalid axis: ${n}`)}const Uc=Wr({norm_:function(e,t="euclidean",n=null,a=!1){const r=zc(e=Lr(e,"x","norm"),t,n);let s=r.shape;if(a){const t=b(n,e.shape);s=Ku(r.shape,t)}return ki(r,s)}});const Gc=Wr({movingAverage_:function(e,t,n,a,r=!0){const s=Lr(e,"v","movingAverage"),o=Lr(t,"x","movingAverage"),u=Lr(n,"decay","movingAverage");vr(s,o),i(p(s.shape,o.shape),(()=>"Shape mismatch in v and x"));const l=uc(1),c=zu(l,u);let d=Ko(zu(o,s),c);if(r){i(null!=a,(()=>"When using zeroDebias: true, step is required."));const e=Lr(a,"step","movingAverage");d=qo(d,zu(l,Sl(u,e)))}return Ho(s,d)}});const Hc=Wr({scatterND_:function(e,t,n){const a=Lr(e,"indices","scatterND","int32"),r=Lr(t,"updates","scatterND");uo(r,a,n);const s={indices:a,updates:r},o={shape:n};return Er.runKernel(pn,s,o)}});const jc=Wr({sparseToDense_:function(e,t,n,a=0){const r=Lr(e,"sparseIndices","sparseToDense","int32"),s=Lr(t,"sparseValues","sparseToDense"),o=Lr(a,"defaultValue","sparseToDense",s.dtype);!function(e,t,n,a){if("int32"!==e.dtype)throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${e.dtype}.`);if(e.rank>2)throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${e.shape}.`);const r=e.rank>0?e.shape[0]:1,s=e.rank>1?e.shape[1]:1;if(n.length!==s)throw new Error(`outputShape has incorrect number of elements:, ${n.length}, should be: ${s}.`);const o=t.size;if(0!==t.rank&&(1!==t.rank||o!==r))throw new Error(`sparseValues has incorrect shape ${t.shape}, should be [] or [${r}]`);if(t.dtype!==a.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}(r,s,n,o);const i={sparseIndices:r,sparseValues:s,defaultValue:o},u={outputShape:n};return Er.runKernel(Rn,i,u)}});const qc=Wr({gatherND_:function(e,t){const n=Lr(t,"indices","gatherND","int32"),a={params:Lr(e,"x","gatherND","string_or_numeric"),indices:n};return Er.runKernel(ot,a)}});const Kc=Wr({dropout_:function(e,t,n,a){const r=Lr(e,"x","dropout");if(i("float32"===r.dtype,(()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${r.dtype} tensor instead.`)),i(t>=0&&t<1,(()=>`rate must be a float in the range [0, 1), but got ${t}.`)),0===t)return e instanceof lr?r.clone():r;const s=function(e,t){if(null==t)return e.shape.slice();if(p(e.shape,t))return t;if(e.shape.length===t.length){const n=[];for(let a=0;a<e.shape.length;a++)null==t[a]&&null!=e.shape[a]?n.push(e.shape[a]):n.push(t[a]);return n}return t}(r,n),o=1-t,u=qo(vu(Ho(Xl(s,0,1,"float32",a),o)),o);return Ko(r,u)}});function Xc(e){return Math.floor(Math.pow(2,Math.ceil(Math.log(e)/Math.log(2))))}function Yc(e,t,n){const a=1-e%2,r=new Float32Array(e);for(let s=0;s<e;++s){const o=2*Math.PI*s/(e+a-1);r[s]=t-n*Math.cos(o)}return _c(r,"float32")}const Qc=async function(e,t,n=1){const a=Lr(e,"predictions","inTopK"),r=Lr(t,"targets","inTopK");i(a.rank>1,(()=>`inTopK() expects the predictions to be of rank 2 or higher, but got ${a.rank}`)),i(a.rank-1===r.rank,(()=>`predictions rank should be 1 larger than targets rank, but got predictions rank ${a.rank} and targets rank ${r.rank}`)),u(a.shape.slice(0,a.shape.length-1),r.shape,"predictions's shape should be align with the targets' shape, except the last dimension.");const s=a.shape[a.shape.length-1];i(n>0&&n<=s,(()=>`'k' passed to inTopK() must be > 0 && <= the predictions last dimension (${s}), but got ${n}`));const o=await a.data(),l=await r.data(),[c,d]=[o.length/s,s],p=v("bool",c);for(let e=0;e<c;e++){const t=e*d,a=o.subarray(t,t+d),r=[];for(let e=0;e<a.length;e++)r.push({value:a[e],index:e});r.sort(((e,t)=>t.value-e.value)),p[e]=0;for(let t=0;t<n;t++)if(r[t].index===l[e]){p[e]=1;break}}return e!==a&&a.dispose(),t!==r&&r.dispose(),Ur(p,r.shape,"bool")};const Zc=Wr({conv2DBackpropFilter_:function(e,t,n,a,r,s="NHWC",o){let u=e;3===e.rank&&(u=ki(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let l=t;3===l.rank&&(l=ki(t,[1,t.shape[0],t.shape[1],t.shape[2]])),i(4===u.rank,(()=>`Error in conv2dDerFilter: input must be rank 4, but got shape ${u.shape}.`)),i(4===l.rank,(()=>`Error in conv2dDerFilter: dy must be rank 4, but got shape ${l.shape}.`)),i(4===n.length,(()=>`Error in conv2dDerFilter: filterShape must be length 4, but got ${n}.`));const c="NHWC"===s?u.shape[3]:u.shape[1],d="NHWC"===s?l.shape[3]:l.shape[1];i(c===n[2],(()=>`Error in conv2dDerFilter: depth of input ${c}) must match input depth in filter (${n[2]}.`)),i(d===n[3],(()=>`Error in conv2dDerFilter: depth of dy (${d}) must match output depth for filter (${n[3]}).`)),null!=o&&i(h(r),(()=>`Error in conv2dDerFilter: pad must be an integer when using, dimRoundingMode ${o} but got pad ${r}.`));const p={x:u,dy:l},f={strides:a,pad:r,dataFormat:s,dimRoundingMode:o,filterShape:n};return Er.runKernel(Te,p,f)}});function Jc(e,t,n){if(null==n||"linear"===n)return e;if("relu"===n)return Ko(e,Sc(t));throw new Error(`Cannot compute gradient for fused activation ${n}.`)}function ed(e,t){let n=t;const a=ru(e.shape,t.shape);return a.length>0&&(n=Uu(n,a)),ki(n,e.shape)}function td(e,t,n,a){if("linear"===t)return e;if("relu"===t)return Jl(e);if("elu"===t)return pu(e);if("relu6"===t)return ec(e);if("prelu"===t)return Rl(e,n);if("leakyrelu"===t)return Eu(e,a);if("sigmoid"===t)return $i(e);throw new Error(`Unknown fused activation ${t}.`)}const nd=(e,t)=>!(e>0)||"linear"===t;const ad=Wr({fusedConv2d_:function({x:e,filter:t,strides:n,pad:a,dataFormat:r="NHWC",dilations:s=[1,1],dimRoundingMode:o,bias:u,activation:l="linear",preluActivationWeights:c,leakyreluAlpha:d}){if(l=l||"linear",!1===nd(Er.state.gradientDepth,l)){let i=zi(e,t,n,a,r,s,o);return null!=u&&(i=Ho(i,u)),td(i,l,c,d)}const p=Lr(e,"x","conv2d"),f=Lr(t,"filter","conv2d");let m=p,g=!1;3===p.rank&&(g=!0,m=ki(p,[1,p.shape[0],p.shape[1],p.shape[2]])),i(4===m.rank,(()=>`Error in fused conv2d: input must be rank 4, but got rank ${m.rank}.`)),i(4===f.rank,(()=>`Error in fused conv2d: filter must be rank 4, but got rank ${f.rank}.`)),null!=o&&i(h(a),(()=>`Error in fused conv2d: pad must be an integer when using, dimRoundingMode ${o} but got pad ${a}.`)),i(m.shape[3]===f.shape[2],(()=>`Error in conv2d: depth of input (${m.shape[3]}) must match input depth for filter ${f.shape[2]}.`)),i(xi(n,s),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${s}'`)),i("NHWC"===r,(()=>`Error in conv2d: got dataFormat of ${r} but only NHWC is currently supported.`));const y=di(m.shape,f.shape,n,s,a,o);let b,x;null!=u&&(b=Lr(u,"bias","fused conv2d"),[b]=xr(b,p),su(y.outShape,b.shape)),null!=c&&(x=Lr(c,"prelu weights","fused conv2d"));const v=(e,t)=>{const[r,o,u,c]=t,d=Jc(e,u,l);i(bi(s),(()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${s}'`));const p=[Gi(o.shape,d,r,n,a),Zc(o,d,r.shape,n,a)];if(null!=c){const e=ed(c,d);p.push(e)}return p},k={x:m,filter:f,bias:b,preluActivationWeights:x},w={strides:n,pad:a,dataFormat:r,dilations:s,dimRoundingMode:o,activation:l,leakyreluAlpha:d};if(null==u){return Mu(((e,t,n)=>{let a=Er.runKernel(Zn,k,w);return n([t,e,a]),g&&(a=ki(a,[a.shape[1],a.shape[2],a.shape[3]])),{value:a,gradFunc:v}}))(m,f)}return Mu(((e,t,n,a)=>{let r=Er.runKernel(Zn,k,w);return a([t,e,r,n]),g&&(r=ki(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:v}}))(m,f,b)}});const rd=Wr({depthwiseConv2dNativeBackpropFilter_:function(e,t,n,a,r,s=[1,1],o){let i=e;3===e.rank&&(i=ki(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let u=t;3===u.rank&&(u=ki(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const l={x:i,dy:u},c={strides:a,pad:r,dimRoundingMode:o,dilations:s,filterShape:n};return Er.runKernel(Pe,l,c)}});const sd=Wr({depthwiseConv2dNativeBackpropInput_:function(e,t,n,a,r,s=[1,1],o){let i=t,u=!1;3===t.rank&&(u=!0,i=ki(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const l={dy:i,filter:n},c={strides:a,pad:r,dimRoundingMode:o,dilations:s,inputShape:e},d=Er.runKernel(Be,l,c);return u?ki(d,[d.shape[1],d.shape[2],d.shape[3]]):d}});const od=Wr({fusedDepthwiseConv2d_:function({x:e,filter:t,strides:n,pad:a,dataFormat:r="NHWC",dilations:s=[1,1],dimRoundingMode:o,bias:u,activation:l="linear",preluActivationWeights:c,leakyreluAlpha:d}){if(!1===nd(Er.state.gradientDepth,l)){let i=eu(e,t,n,a,r,s,o);return null!=u&&(i=Ho(i,u)),td(i,l,c,d)}const p=Lr(e,"x","depthwiseConv2d"),f=Lr(t,"filter","depthwiseConv2d");let m=p,g=!1;3===p.rank&&(g=!0,m=ki(p,[1,p.shape[0],p.shape[1],p.shape[2]])),i(4===m.rank,(()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${m.rank}.`)),i(4===f.rank,(()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${f.rank}.`)),i(m.shape[3]===f.shape[2],(()=>`Error in fused depthwiseConv2d: number of input channels (${m.shape[3]}) must match the inChannels dimension in filter ${f.shape[2]}.`)),null==s&&(s=[1,1]),i(xi(n,s),(()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${n} and dilations '${s}'`)),null!=o&&i(h(a),(()=>`Error in fused depthwiseConv2d: pad must be an integer when using dimRoundingMode ${o} but got pad ${a}.`));const y=di(m.shape,f.shape,n,s,a,o,!0);let b,x;null!=u&&(b=Lr(u,"bias","fused conv2d"),[b]=xr(b,p),su(y.outShape,b.shape)),null!=c&&(x=Lr(c,"prelu weights","fused depthwiseConv2d"));const v=(e,t)=>{i(bi(s),(()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${s}'`));const[r,u,c,d]=t,p=Jc(e,c,l),h=sd(u.shape,p,r,n,a,s,o),f=rd(u,p,r.shape,n,a,s,o);if(null!=d){return[h,f,ed(b,p)]}return[h,f]},k={x:m,filter:f,bias:b,preluActivationWeights:x},w={strides:n,pad:a,dataFormat:r,dilations:s,dimRoundingMode:o,activation:l,leakyreluAlpha:d};if(null==u){return Mu(((e,t,n)=>{let a=Er.runKernel(Jn,k,w);return n([t,e,a]),g&&(a=ki(a,[a.shape[1],a.shape[2],a.shape[3]])),{value:a,gradFunc:v}}))(m,f)}return Mu(((e,t,n,a)=>{let r=Er.runKernel(Jn,k,w);return a([t,e,r,n]),g&&(r=ki(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:v}}))(m,f,b)}});const id=Wr({fusedMatMul_:function({a:e,b:t,transposeA:n=!1,transposeB:a=!1,bias:r,activation:s="linear",preluActivationWeights:o,leakyreluAlpha:u}){if(!1===nd(Er.state.gradientDepth,s)){let i=Ks(e,t,n,a);return null!=r&&(i=Ho(i,r)),td(i,s,o,u)}let l=Lr(e,"a","fused matMul"),c=Lr(t,"b","fused matMul");[l,c]=xr(l,c);const h=n?l.shape[l.rank-2]:l.shape[l.rank-1],f=a?c.shape[c.rank-1]:c.shape[c.rank-2],m=n?l.shape[l.rank-1]:l.shape[l.rank-2],g=a?c.shape[c.rank-2]:c.shape[c.rank-1],y=l.shape.slice(0,-2),b=c.shape.slice(0,-2),x=d(y),v=d(b);i(l.rank>=2&&c.rank>=2&&l.rank===c.rank,(()=>`Error in fused matMul: inputs must have the same rank of at least 2, got ranks ${l.rank} and ${c.rank}.`)),i(p(y,b),(()=>`Error in fused matMul: outer dimensions (${y}) and (${b}) of Tensors with shapes ${l.shape} and ${c.shape} must match.`)),i(h===f,(()=>`Error in fused matMul: inner shapes (${h}) and (${f}) of Tensors with shapes ${l.shape} and ${c.shape} and transposeA=${n} and transposeB=${a} must match.`));const k=l.shape.slice(0,-2).concat([m,g]),w=ki(l,n?[x,h,m]:[x,m,h]),I=ki(c,a?[v,g,f]:[v,f,g]);let N,$;null!=r&&(N=Lr(r,"bias","fused matMul"),[N]=xr(N,l),su(k,N.shape)),null!=o&&($=Lr(o,"prelu weights","fused matMul"));const T=(e,t)=>{const[o,i,u,l]=t,c=Jc(ki(e,u.shape),u,s);let d,p;if(n||a?!n&&a?(d=Ks(c,i,!1,!1),p=Ks(c,o,!0,!1)):n&&!a?(d=Ks(i,c,!1,!0),p=Ks(o,c,!1,!1)):(d=Ks(i,c,!0,!0),p=Ks(c,o,!0,!0)):(d=Ks(c,i,!1,!0),p=Ks(o,c,!0,!1)),null!=r){return[d,p,ed(l,c)]}return[d,p]},C={a:w,b:I,bias:N,preluActivationWeights:$},E={transposeA:n,transposeB:a,activation:s,leakyreluAlpha:u};if(null==r){return Mu(((e,t,n)=>{const a=Er.runKernel(Qn,C,E);return n([e,t,a]),{value:ki(a,k),gradFunc:T}}))(w,I)}return Mu(((e,t,n,a)=>{const r=Er.runKernel(Qn,C,E);return a([e,t,r,n]),{value:ki(r,k),gradFunc:T}}))(w,I,N)}});var ud=Object.freeze({__proto__:null,conv2d:ad,depthwiseConv2d:od,matMul:id});const ld=Wr({hammingWindow_:function(e){return Yc(e,.54,.46)}});const cd=Wr({hannWindow_:function(e){return Yc(e,.5,.5)}});const dd=Wr({frame_:function(e,t,n,a=!1,r=0){let s=0;const o=[];for(;s+t<=e.size;)o.push(Ti(e,s,t)),s+=n;if(a)for(;s<e.size;){const a=s+t-e.size,i=Ni([Ti(e,s,t-a),xu([a],r)]);o.push(i),s+=n}return 0===o.length?Fc([],[0,t]):ki(Ni(o),[o.length,t])}});const pd=Wr({stft_:function(e,t,n,a,r=cd){null==a&&(a=Xc(t));const s=dd(e,t,n),o=Ko(s,r(t));return Nc(o,a)}});const hd=Wr({cropAndResize_:function(e,t,n,a,r="bilinear",s=0){const o=Lr(e,"image","cropAndResize"),u=Lr(t,"boxes","cropAndResize","float32"),l=Lr(n,"boxInd","cropAndResize","int32"),c=u.shape[0];i(4===o.rank,(()=>`Error in cropAndResize: image must be rank 4,but got rank ${o.rank}.`)),i(2===u.rank&&4===u.shape[1],(()=>`Error in cropAndResize: boxes must be have size [${c},4] but had shape ${u.shape}.`)),i(1===l.rank&&l.shape[0]===c,(()=>`Error in cropAndResize: boxInd must be have size [${c}] but had shape ${u.shape}.`)),i(2===a.length,(()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${a.length}.`)),i(a[0]>=1&&a[1]>=1,(()=>`cropSize must be atleast [1,1], but was ${a}`)),i("bilinear"===r||"nearest"===r,(()=>`method must be bilinear or nearest, but was ${r}`));const d={image:o,boxes:u,boxInd:l},p={method:r,extrapolationValue:s,cropSize:a};return Er.runKernel(Oe,d,p)}});const fd=Wr({flipLeftRight_:function(e){const t=Lr(e,"image","flipLeftRight","float32");i(4===t.rank,(()=>`Error in flipLeftRight: image must be rank 4,but got rank ${t.rank}.`));const n={image:t};return Er.runKernel(tt,n,{})}});const md=Wr({rotateWithOffset_:function(e,t,n=0,a=.5){const r=Lr(e,"image","rotateWithOffset","float32");i(4===r.rank,(()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${r.rank}.`));const s={image:r},o={radians:t,fillValue:n,center:a};return Er.runKernel(Yn,s,o)}});function gd(e,t,n,a,r,s){null==a&&(a=.5),null==r&&(r=Number.NEGATIVE_INFINITY),null==s&&(s=0);const o=e.shape[0];return n=Math.min(n,o),i(0<=a&&a<=1,(()=>`iouThreshold must be in [0, 1], but was '${a}'`)),i(2===e.rank,(()=>`boxes must be a 2D tensor, but was of rank '${e.rank}'`)),i(4===e.shape[1],(()=>`boxes must have 4 columns, but 2nd dimension was ${e.shape[1]}`)),i(1===t.rank,(()=>"scores must be a 1D tensor")),i(t.shape[0]===o,(()=>`scores has incompatible shape with boxes. Expected ${o}, but was ${t.shape[0]}`)),i(0<=s&&s<=1,(()=>`softNmsSigma must be in [0, 1], but was '${s}'`)),{maxOutputSize:n,iouThreshold:a,scoreThreshold:r,softNmsSigma:s}}const yd=Wr({nonMaxSuppression_:function(e,t,n,a=.5,r=Number.NEGATIVE_INFINITY){const s=Lr(e,"boxes","nonMaxSuppression"),o=Lr(t,"scores","nonMaxSuppression"),i=gd(s,o,n,a,r),u={maxOutputSize:n=i.maxOutputSize,iouThreshold:a=i.iouThreshold,scoreThreshold:r=i.scoreThreshold};return Er.runKernel(zt,{boxes:s,scores:o},u)}});function bd(e,t,n){const a=function(e,t,n){return function(e,t,n){let a=0,r=e.length,s=0,o=!1;for(;a<r;){s=a+(r-a>>>1);const i=n(t,e[s]);i>0?a=s+1:(r=s,o=!i)}return o?a:-a-1}(e,t,n||xd)}(e,t,n),r=a<0?-(a+1):a;e.splice(r,0,t)}function xd(e,t){return e>t?1:e<t?-1:0}function vd(e,t,n,a,r){return Id(e,t,n,a,r,0)}function kd(e,t,n,a,r,s){return Id(e,t,n,a,r,0,!1,s,!0)}function wd(e,t,n,a,r,s){return Id(e,t,n,a,r,s,!0)}function Id(e,t,n,a,r,s,o=!1,i=!1,u=!1){const l=[];for(let e=0;e<t.length;e++)t[e]>r&&l.push({score:t[e],boxIndex:e,suppressBeginIndex:0});l.sort(Td);const c=s>0?-.5/s:0,d=[],p=[];for(;d.length<n&&l.length>0;){const t=l.pop(),{score:n,boxIndex:s,suppressBeginIndex:o}=t;if(n<r)break;let i=!1;for(let n=d.length-1;n>=o;--n){const o=Nd(e,s,d[n]);if(o>=a){i=!0;break}if(t.score=t.score*$d(a,c,o),t.score<=r)break}t.suppressBeginIndex=d.length,i||(t.score===n?(d.push(s),p.push(t.score)):t.score>r&&bd(l,t,Td))}const h=d.length,f=n-h;i&&f>0&&(d.push(...new Array(f).fill(0)),p.push(...new Array(f).fill(0)));const m={selectedIndices:d};return o&&(m.selectedScores=p),u&&(m.validOutputs=h),m}function Nd(e,t,n){const a=e.subarray(4*t,4*t+4),r=e.subarray(4*n,4*n+4),s=Math.min(a[0],a[2]),o=Math.min(a[1],a[3]),i=Math.max(a[0],a[2]),u=Math.max(a[1],a[3]),l=Math.min(r[0],r[2]),c=Math.min(r[1],r[3]),d=Math.max(r[0],r[2]),p=Math.max(r[1],r[3]),h=(i-s)*(u-o),f=(d-l)*(p-c);if(h<=0||f<=0)return 0;const m=Math.max(s,l),g=Math.max(o,c),y=Math.min(i,d),b=Math.min(u,p),x=Math.max(y-m,0)*Math.max(b-g,0);return x/(h+f-x)}function $d(e,t,n){const a=Math.exp(t*n*n);return n<=e?a:0}function Td(e,t){return e.score-t.score||e.score===t.score&&t.boxIndex-e.boxIndex}const Cd=async function(e,t,n,a=.5,r=Number.NEGATIVE_INFINITY){const s=Lr(e,"boxes","nonMaxSuppressionAsync"),o=Lr(t,"scores","nonMaxSuppressionAsync"),i=gd(s,o,n,a,r);n=i.maxOutputSize,a=i.iouThreshold,r=i.scoreThreshold;const u=await Promise.all([s.data(),o.data()]),l=u[0],c=u[1],{selectedIndices:d}=vd(l,c,n,a,r);return s!==e&&s.dispose(),o!==t&&o.dispose(),_c(d,"int32")};const Ed=Wr({nonMaxSuppressionWithScore_:function(e,t,n,a=.5,r=Number.NEGATIVE_INFINITY,s=0){const o=Lr(e,"boxes","nonMaxSuppression"),i=Lr(t,"scores","nonMaxSuppression"),u=gd(o,i,n,a,r,s),l={boxes:o,scores:i},c={maxOutputSize:n=u.maxOutputSize,iouThreshold:a=u.iouThreshold,scoreThreshold:r=u.scoreThreshold,softNmsSigma:s=u.softNmsSigma},d=Er.runKernel(Gt,l,c);return{selectedIndices:d[0],selectedScores:d[1]}}});const Sd=async function(e,t,n,a=.5,r=Number.NEGATIVE_INFINITY,s=0){const o=Lr(e,"boxes","nonMaxSuppressionAsync"),i=Lr(t,"scores","nonMaxSuppressionAsync"),u=gd(o,i,n,a,r,s);n=u.maxOutputSize,a=u.iouThreshold,r=u.scoreThreshold,s=u.softNmsSigma;const l=await Promise.all([o.data(),i.data()]),c=l[0],d=l[1],{selectedIndices:p,selectedScores:h}=wd(c,d,n,a,r,s);return o!==e&&o.dispose(),i!==t&&i.dispose(),{selectedIndices:_c(p,"int32"),selectedScores:_c(h)}};const Rd=Wr({nonMaxSuppressionPadded_:function(e,t,n,a=.5,r=Number.NEGATIVE_INFINITY,s=!1){const o=Lr(e,"boxes","nonMaxSuppression"),i=Lr(t,"scores","nonMaxSuppression"),u=gd(o,i,n,a,r,null),l={boxes:o,scores:i},c={maxOutputSize:u.maxOutputSize,iouThreshold:u.iouThreshold,scoreThreshold:u.scoreThreshold,padToMaxOutputSize:s},d=Er.runKernel(Ut,l,c);return{selectedIndices:d[0],validOutputs:d[1]}}});const Ad=async function(e,t,n,a=.5,r=Number.NEGATIVE_INFINITY,s=!1){const o=Lr(e,"boxes","nonMaxSuppressionAsync"),i=Lr(t,"scores","nonMaxSuppressionAsync"),u=gd(o,i,n,a,r,null),l=u.maxOutputSize,c=u.iouThreshold,d=u.scoreThreshold,[p,h]=await Promise.all([o.data(),i.data()]),{selectedIndices:f,validOutputs:m}=kd(p,h,l,c,d,s);return o!==e&&o.dispose(),i!==t&&i.dispose(),{selectedIndices:_c(f,"int32"),validOutputs:uc(m,"int32")}};const _d=Wr({resizeBilinear_:function(e,t,n=!1,a=!1){const r=Lr(e,"images","resizeBilinear");i(3===r.rank||4===r.rank,(()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${r.rank}.`)),i(2===t.length,(()=>`Error in resizeBilinear: new shape must 2D, but got shape ${t}.`)),i(!1===a||!1===n,(()=>"Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false."));let s=r,o=!1;3===r.rank&&(o=!0,s=ki(r,[1,r.shape[0],r.shape[1],r.shape[2]]));const[]=t,u={images:s},l={alignCorners:n,halfPixelCenters:a,size:t},c=Er.runKernel(sn,u,l);return o?ki(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const Fd=Wr({resizeNearestNeighbor_:function(e,t,n=!1,a=!1){const r=Lr(e,"images","resizeNearestNeighbor");i(3===r.rank||4===r.rank,(()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${r.rank}.`)),i(2===t.length,(()=>`Error in resizeNearestNeighbor: new shape must 2D, but got shape ${t}.`)),i("float32"===r.dtype||"int32"===r.dtype,(()=>"`images` must have `int32` or `float32` as dtype")),i(!1===a||!1===n,(()=>"Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false."));let s=r,o=!1;3===r.rank&&(o=!0,s=ki(r,[1,r.shape[0],r.shape[1],r.shape[2]]));const[]=t,u={images:s},l={alignCorners:n,halfPixelCenters:a,size:t},c=Er.runKernel(an,u,l);return o?ki(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const Od=Wr({threshold_:function(e,t="binary",n=!1,a=.5){const r=Lr(e,"image","threshold"),s=r.shape[0]*r.shape[1];let o,u,l,c,d=Ko(_c([a]),255);if(i(3===r.rank,(()=>`Error in threshold: image must be rank 3,but got rank ${r.rank}.`)),i(3===r.shape[2]||1===r.shape[2],(()=>`Error in threshold: image color channel must be equal to 3 or 1but got ${r.shape[2]}.`)),i("int32"===r.dtype||"float32"===r.dtype,(()=>`Error in dtype: image dtype must be int32 or float32,but got dtype ${r.dtype}.`)),i("otsu"===t||"binary"===t,(()=>`Method must be binary or otsu, but was ${t}`)),3===r.shape[2]){[o,u,l]=Ic(r,[1,1,1],-1);const e=Ko(o,.2989),t=Ko(u,.587),n=Ko(l,.114);c=Ho(Ho(e,t),n)}else c=e;if("otsu"===t){d=function(e,t){let n,a,r,s,o,i,u=_c([-1]),l=_c([0]),c=_c([0]);for(let d=0;d<e.size-1;d++){n=Ti(e,0,d+1),a=Ti(e,d+1),o=qo(Uu(n),t),i=qo(Uu(a),t);const p=Uu(Ko(n,Yl(0,n.size)));r=qo(p,Uu(n));const h=xu(a.shape,n.size),f=Ho(Yl(0,a.size),h),m=Ko(a,f);s=qo(Uu(m),Uu(a));const g=zu(r,s),y=zu(r,s),b=Ko(o,i);c=Ko(Ko(b,g),y);const x=wu(c,l);l=iu(x,c,l),u=iu(x,_c([d]),u)}return u}(Oi(As(oc(c),"int32"),Ur([]),256),s)}const p=n?Ru(c,d):wu(c,d);return As(Ko(p,255),"int32")}});const Dd=Wr({transform_:function(e,t,n="nearest",a="constant",r=0,s){const o=Lr(e,"image","transform","float32"),u=Lr(t,"transforms","transform","float32");i(4===o.rank,(()=>`Error in transform: image must be rank 4,but got rank ${o.rank}.`)),i(2===u.rank&&(u.shape[0]===o.shape[0]||1===u.shape[0])&&8===u.shape[1],(()=>"Error in transform: Input transform should be batch x 8 or 1 x 8")),i(null==s||2===s.length,(()=>`Error in transform: outputShape must be [height, width] or null, but got ${s}.`));const l={image:o,transforms:u},c={interpolation:n,fillMode:a,fillValue:r,outputShape:s};return Er.runKernel(zn,l,c)}});const Md=Wr({bandPart_:function(e,t,n){i(t%1==0,(()=>`bandPart(): numLower must be an integer, got ${t}.`)),i(n%1==0,(()=>`bandPart(): numUpper must be an integer, got ${n}.`));const a=Lr(e,"a","bandPart");i(a.rank>=2,(()=>`bandPart(): Rank must be at least 2, got ${a.rank}.`));const r=a.shape,[s,o]=a.shape.slice(-2);if(!(t<=s))throw new Error(`bandPart(): numLower (${t}) must not be greater than the number of rows (${s}).`);if(!(n<=o))throw new Error(`bandPart(): numUpper (${n}) must not be greater than the number of columns (${o}).`);t<0&&(t=s),n<0&&(n=o);const u=ki(Yl(0,s,1,"int32"),[-1,1]),l=Yl(0,o,1,"int32"),c=zu(u,l),d=el(Ru(c,uc(+t,"int32")),Iu(c,uc(-n,"int32"))),p=ll([s,o],a.dtype);return ki(Ec(Pc(ki(a,[-1,s,o])).map((e=>iu(d,e,p)))),r)}});const Ld=Wr({gramSchmidt_:function(e){let t;if(Array.isArray(e)){t=!1,i(null!=e&&e.length>0,(()=>"Gram-Schmidt process: input must not be null, undefined, or empty"));const n=e[0].shape[0];for(let t=1;t<e.length;++t)i(e[t].shape[0]===n,(()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${e[t].shape[0]} vs. ${n})`))}else t=!0,e=Ic(e,e.shape[0],0).map((e=>Cc(e,[0])));i(e.length<=e[0].shape[0],(()=>`Gram-Schmidt: Number of vectors (${e.length}) exceeds number of dimensions (${e[0].shape[0]}).`));const n=[],a=e;for(let t=0;t<e.length;++t)n.push(Er.tidy((()=>{let e=a[t];if(t>0)for(let a=0;a<t;++a){const t=Ko(Uu(Ko(n[a],e)),n[a]);e=zu(e,t)}return qo(e,Uc(e,"euclidean"))})));return t?Ec(n,0):n}});function Pd(e,t=!1){return Er.tidy((()=>{i(2===e.shape.length,(()=>`qr2d() requires a 2D Tensor, but got a ${e.shape.length}D Tensor.`));const n=e.shape[0],a=e.shape[1];let r=bu(n),s=_s(e);const o=Fc([[1]],[1,1]);let u=_s(o);const l=n>=a?a:n;for(let e=0;e<l;++e){const t=s,i=u,l=r;[u,s,r]=Er.tidy((()=>{const t=Ti(s,[e,e],[n-e,1]),i=Uc(t),l=Ti(s,[e,e],[1,1]),c=iu(wu(l,0),Fc([[-1]]),Fc([[1]])),d=zu(l,Ko(c,i)),p=qo(t,d);u=1===p.shape[0]?_s(o):Ni([o,Ti(p,[1,0],[p.shape[0]-1,p.shape[1]])],0);const h=Pu(qo(Ks(c,d),i)),f=Ti(s,[e,0],[n-e,a]),m=Ko(h,u),g=Ys(u);if(0===e)s=zu(f,Ks(m,Ks(g,f)));else{const t=zu(f,Ks(m,Ks(g,f)));s=Ni([Ti(s,[0,0],[e,a]),t],0)}const y=Ys(m),b=Ti(r,[0,e],[n,r.shape[1]-e]);if(0===e)r=zu(b,Ks(Ks(b,u),y));else{const t=zu(b,Ks(Ks(b,u),y));r=Ni([Ti(r,[0,0],[n,e]),t],1)}return[u,s,r]})),Vo([t,i,l])}return!t&&n>a&&(r=Ti(r,[0,0],[n,a]),s=Ti(s,[0,0],[a,a])),[r,s]}))}const Bd=Wr({qr_:function(e,t=!1){if(i(e.rank>=2,(()=>`qr() requires input tensor to have a rank >= 2, but got rank ${e.rank}`)),2===e.rank)return Pd(e,t);{const n=e.shape.slice(0,e.shape.length-2).reduce(((e,t)=>e*t)),a=Pc(ki(e,[n,e.shape[e.shape.length-2],e.shape[e.shape.length-1]]),0),r=[],s=[];a.forEach((e=>{const[n,a]=Pd(e,t);r.push(n),s.push(a)}));return[ki(Ec(r,0),e.shape),ki(Ec(s,0),e.shape)]}}});var Wd;!function(e){e[e.NONE=0]="NONE",e[e.MEAN=1]="MEAN",e[e.SUM=2]="SUM",e[e.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS"}(Wd||(Wd={}));const Vd=Wr({computeWeightedLoss_:function(e,t,n=Wd.SUM_BY_NONZERO_WEIGHTS){const a=Lr(e,"losses","computeWeightedLoss");let r=null;null!=t&&(r=Lr(t,"weights","computeWeightedLoss"));const s=null==r?a:Ko(a,r);if(n===Wd.NONE)return s;if(n===Wd.SUM)return Uu(s);if(n===Wd.MEAN){if(null==r)return ul(s);{const e=a.size/r.size,t=qo(Uu(s),Uu(r));return e>1?qo(t,uc(e)):t}}if(n===Wd.SUM_BY_NONZERO_WEIGHTS){if(null==r)return qo(Uu(s),uc(a.size));{const e=Ko(r,cl(a.shape)),t=As(Uu(xl(e,uc(0))),"float32");return qo(Uu(s),t)}}throw Error(`Unknown reduction: ${n}`)}});const zd=Wr({absoluteDifference_:function(e,t,n,a=Wd.SUM_BY_NONZERO_WEIGHTS){const r=Lr(e,"labels","absoluteDifference"),s=Lr(t,"predictions","absoluteDifference");let o=null;null!=n&&(o=Lr(n,"weights","absoluteDifference")),u(r.shape,s.shape,"Error in absoluteDifference: ");const i=Xo(zu(r,s));return Vd(i,o,a)}});const Ud=Wr({cosineDistance_:function(e,t,n,a,r=Wd.SUM_BY_NONZERO_WEIGHTS){const s=Lr(e,"labels","cosineDistance"),o=Lr(t,"predictions","cosineDistance");let i=null;null!=a&&(i=Lr(a,"weights","cosineDistance")),u(s.shape,o.shape,"Error in cosineDistance: ");const l=uc(1),c=zu(l,Uu(Ko(s,o),n,!0));return Vd(c,i,r)}});const Gd=Wr({hingeLoss_:function(e,t,n,a=Wd.SUM_BY_NONZERO_WEIGHTS){let r=Lr(e,"labels","hingeLoss");const s=Lr(t,"predictions","hingeLoss");let o=null;null!=n&&(o=Lr(n,"weights","hingeLoss")),u(r.shape,s.shape,"Error in hingeLoss: ");const i=uc(1);r=zu(Ko(uc(2),r),i);const l=Jl(zu(i,Ko(r,s)));return Vd(l,o,a)}});const Hd=Wr({huberLoss_:function(e,t,n,a=1,r=Wd.SUM_BY_NONZERO_WEIGHTS){const s=Lr(e,"labels","huberLoss"),o=Lr(t,"predictions","huberLoss");let i=null;null!=n&&(i=Lr(n,"weights","huberLoss")),u(s.shape,o.shape,"Error in huberLoss: ");const l=uc(a),c=Xo(zu(o,s)),d=pl(c,l),p=zu(c,d),h=Ho(Ko(uc(.5),ml(d)),Ko(l,p));return Vd(h,i,r)}});const jd=Wr({logLoss_:function(e,t,n,a=1e-7,r=Wd.SUM_BY_NONZERO_WEIGHTS){const s=Lr(e,"labels","logLoss"),o=Lr(t,"predictions","logLoss");let i=null;null!=n&&(i=Lr(n,"weights","logLoss")),u(s.shape,o.shape,"Error in logLoss: ");const l=uc(1),c=uc(a),d=Pu(Ko(s,Fu(Ho(o,c)))),p=Ko(zu(l,s),Fu(Ho(zu(l,o),c))),h=zu(d,p);return Vd(h,i,r)}});const qd=Wr({meanSquaredError_:function(e,t,n,a=Wd.SUM_BY_NONZERO_WEIGHTS){const r=Lr(e,"labels","meanSquaredError"),s=Lr(t,"predictions","meanSquaredError");let o=null;null!=n&&(o=Lr(n,"weights","meanSquaredError")),u(r.shape,s.shape,"Error in meanSquaredError: ");const i=Tc(r,s);return Vd(i,o,a)}});const Kd=Wr({sigmoidCrossEntropy_:function(e,t,n,a=0,r=Wd.SUM_BY_NONZERO_WEIGHTS){let s=Lr(e,"multiClassLabels","sigmoidCrossEntropy");const o=Lr(t,"logits","sigmoidCrossEntropy");let i=null;if(null!=n&&(i=Lr(n,"weights","sigmoidCrossEntropy")),u(s.shape,o.shape,"Error in sigmoidCrossEntropy: "),a>0){const e=uc(a),t=uc(1),n=uc(.5);s=Ho(Ko(s,zu(t,e)),Ko(n,e))}const l=function(e,t){const n=Lr(e,"labels","sigmoidCrossEntropyWithLogits"),a=Lr(t,"logits","sigmoidCrossEntropyWithLogits");u(n.shape,a.shape,"Error in sigmoidCrossEntropyWithLogits: ");const r=Jl(a),s=Ko(a,n),o=Ou(fu(Pu(Xo(a))));return Ho(zu(r,s),o)}(s,o);return Vd(l,i,r)}});const Xd=Wr({softmaxCrossEntropy_:function(e,t,n,a=0,r=Wd.SUM_BY_NONZERO_WEIGHTS){let s=Lr(e,"onehotLabels","softmaxCrossEntropy");const o=Lr(t,"logits","softmaxCrossEntropy");let i=null;if(null!=n&&(i=Lr(n,"weights","softmaxCrossEntropy")),u(s.shape,o.shape,"Error in softmaxCrossEntropy: "),a>0){const e=uc(a),t=uc(1),n=uc(s.shape[1]);s=Ho(Ko(s,zu(t,e)),qo(e,n))}const l=function(e,t,n=-1){if(-1===n&&(n=t.rank-1),n!==t.rank-1)throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${t.rank} and dim was ${n}`);return Mu(((e,t,a)=>{const r=Ju(t,[n],!0),s=zu(As(t,"float32"),r);a([e,s]);const o=Pu(Ko(s,e));return{value:Uu(o,[n]),gradFunc:(e,t)=>{const[a,r]=t,s=Ku(e.shape,[n]);return[Ko(ki(e,s),zu(As(a,"float32"),fu(r))),Ko(ki(e,s),zu(fu(r),As(a,"float32")))]}}}))(e,t)}(s,o);return Vd(l,i,r)}});const Yd=Wr({sparseFillEmptyRows_:function(e,t,n,a){const r=Lr(e,"indices","sparseFillEmptyRows"),s=Lr(t,"values","sparseFillEmptyRows"),o=Lr(n,"denseShape","sparseFillEmptyRows"),i=Lr(a,"defaultValue","sparseFillEmptyRows",s.dtype);if(2!==r.rank)throw new Error(`Indices should be Tensor2D but received shape\n        ${r.shape}`);if(1!==s.rank)throw new Error(`Values should be Tensor1D but received shape ${s.shape}`);if(1!==o.rank)throw new Error(`Dense shape should be Tensor1D but received shape ${o.shape}`);if(0!==i.rank)throw new Error(`Default value should be a scalar but received shape ${i.shape}`);const u={indices:r,values:s,denseShape:o,defaultValue:i},l=Er.runKernel(Tn,u);return{outputIndices:l[0],outputValues:l[1],emptyRowIndicator:l[2],reverseIndexMap:l[3]}}});const Qd=Wr({sparseReshape_:function(e,t,n){const a=Lr(e,"inputIndices","sparseReshape"),r=Lr(t,"inputShape","sparseReshape"),s=Lr(n,"newShape","sparseReshape");if(2!==a.rank)throw new Error(`Input indices should be Tensor2D but received shape\n        ${a.shape}`);if(1!==r.rank)throw new Error(`Input shape should be Tensor1D but received shape ${r.shape}`);if(1!==s.rank)throw new Error(`New shape should be Tensor1D but received shape ${s.shape}`);const o={inputIndices:a,inputShape:r,newShape:s},i=Er.runKernel(Cn,o);return{outputIndices:i[0],outputShape:i[1]}}});const Zd=Wr({sparseSegmentMean_:function(e,t,n){const a=Lr(e,"data","sparseSegmentMean"),r=Lr(t,"indices","sparseSegmentMean"),s=Lr(n,"segmentIds","sparseSegmentMean");if(a.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.rank)throw new Error(`Indices should be Tensor1D but received shape\n          ${r.shape}`);if(1!==s.rank)throw new Error(`Segment ids should be Tensor1D but received shape\n          ${s.shape}`);const o={data:a,indices:r,segmentIds:s};return Er.runKernel(En,o)}});const Jd=Wr({sparseSegmentSum_:function(e,t,n){const a=Lr(e,"data","sparseSegmentSum"),r=Lr(t,"indices","sparseSegmentSum"),s=Lr(n,"segmentIds","sparseSegmentSum");if(a.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.rank)throw new Error(`Indices should be Tensor1D but received shape\n         ${r.shape}`);if(1!==s.rank)throw new Error(`Segment ids should be Tensor1D but received shape\n         ${s.shape}`);const o={data:a,indices:r,segmentIds:s};return Er.runKernel(Sn,o)}});const ep=Wr({stringNGrams_:function(e,t,n,a,r,s,o,i){const u=Lr(e,"data","stringNGrams","string");if("string"!==u.dtype)throw new Error("Data must be of datatype string");if(1!==u.shape.length)throw new Error(`Data must be a vector, saw: ${u.shape}`);const l=Lr(t,"dataSplits","stringNGrams");if("int32"!==l.dtype)throw new Error("Data splits must be of datatype int32");const c={separator:n,nGramWidths:a,leftPad:r,rightPad:s,padWidth:o,preserveShortSequences:i},d={data:u,dataSplits:l},p=Er.runKernel(On,d,c);return{nGrams:p[0],nGramsSplits:p[1]}}});const tp=Wr({stringSplit_:function(e,t,n=!0){const a=Lr(e,"input","stringSplit","string"),r=Lr(t,"delimiter","stringSplit","string");if(1!==a.rank)throw new Error(`Input should be Tensor1D but received shape ${a.shape}`);if(0!==r.rank)throw new Error(`Delimiter should be a scalar but received shape ${r.shape}`);const s={skipEmpty:n},o={input:a,delimiter:r},i=Er.runKernel(Dn,o,s);return{indices:i[0],values:i[1],shape:i[2]}}});const np=Wr({stringToHashBucketFast_:function(e,t){const n=Lr(e,"input","stringToHashBucketFast","string"),a={numBuckets:t};if(t<=0)throw new Error("Number of buckets must be at least 1");const r={input:n};return Er.runKernel(Mn,r,a)}}),ap={fft:vc,ifft:kc,rfft:Nc,irfft:wc},rp={hammingWindow:ld,hannWindow:cd,frame:dd,stft:pd},sp={flipLeftRight:fd,resizeNearestNeighbor:Fd,resizeBilinear:_d,rotateWithOffset:md,cropAndResize:hd,nonMaxSuppression:yd,nonMaxSuppressionAsync:Cd,nonMaxSuppressionWithScore:Ed,nonMaxSuppressionWithScoreAsync:Sd,nonMaxSuppressionPadded:Rd,nonMaxSuppressionPaddedAsync:Ad,threshold:Od,transform:Dd},op={bandPart:Md,gramSchmidt:Ld,qr:Bd},ip={absoluteDifference:zd,computeWeightedLoss:Vd,cosineDistance:Ud,hingeLoss:Gd,huberLoss:Hd,logLoss:jd,meanSquaredError:qd,sigmoidCrossEntropy:Kd,softmaxCrossEntropy:Xd},up={sparseFillEmptyRows:Yd,sparseReshape:Qd,sparseSegmentMean:Zd,sparseSegmentSum:Jd},lp={stringNGrams:ep,stringSplit:tp,stringToHashBucketFast:np};class cp extends So{minimize(e,t=!1,n){const{value:a,grads:r}=this.computeGradients(e,n);if(null!=n){const e=n.map((e=>({name:e.name,tensor:r[e.name]})));this.applyGradients(e)}else this.applyGradients(r);return Vo(r),t?a:(a.dispose(),null)}get iterations(){return null==this.iterations_&&(this.iterations_=0),this.iterations_}incrementIterations(){this.iterations_=this.iterations+1}computeGradients(e,t){return Du(e,t)}dispose(){null!=this.iterations_&&Vo(this.iterations_)}async saveIterations(){return null==this.iterations_&&(this.iterations_=0),{name:"iter",tensor:uc(this.iterations_,"int32")}}async getWeights(){throw new Error("getWeights() is not implemented for this optimizer yet.")}async setWeights(e){throw new Error(`setWeights() is not implemented for this optimizer class ${this.getClassName()}`)}async extractIterations(e){return this.iterations_=(await e[0].tensor.data())[0],e.slice(1)}}Object.defineProperty(cp,Symbol.hasInstance,{value:e=>null!=e.minimize&&null!=e.computeGradients&&null!=e.applyGradients});class dp extends cp{constructor(e,t,n=null){super(),this.learningRate=e,this.rho=t,this.epsilon=n,this.accumulatedGrads=[],this.accumulatedUpdates=[],null==n&&(this.epsilon=Er.backend.epsilon())}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const a=Er.registeredVariables[t];null==this.accumulatedGrads[n]&&(this.accumulatedGrads[n]={originalName:`${t}/accum_grad`,variable:Wo((()=>uu(a).variable(false)))}),null==this.accumulatedUpdates[n]&&(this.accumulatedUpdates[n]={originalName:`${t}/accum_var`,variable:Wo((()=>uu(a).variable(false)))});const r=Array.isArray(e)?e[n].tensor:e[t];if(null==r)return;const s=this.accumulatedGrads[n].variable,o=this.accumulatedUpdates[n].variable;Wo((()=>{const e=Ho(Ko(s,this.rho),Ko(ml(r),1-this.rho)),t=Ko(qo($c(Ho(o,this.epsilon)),$c(Ho(s,this.epsilon))),r),n=Ho(Ko(o,this.rho),Ko(ml(t),1-this.rho));s.assign(e),o.assign(n);const i=Ho(Ko(t,-this.learningRate),a);a.assign(i)}))})),this.incrementIterations()}dispose(){null!=this.accumulatedUpdates&&(Vo(this.accumulatedGrads.map((e=>e.variable))),Vo(this.accumulatedUpdates.map((e=>e.variable))))}async getWeights(){const e=[...this.accumulatedGrads,...this.accumulatedUpdates];return[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){const t=(e=await this.extractIterations(e)).length/2;this.accumulatedGrads=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(false)}))),this.accumulatedUpdates=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.rho,t.epsilon)}}dp.className="Adadelta",Ao(dp);class pp extends cp{constructor(e,t=.1){super(),this.learningRate=e,this.initialAccumulatorValue=t,this.accumulatedGrads=[]}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const a=Er.registeredVariables[t];if(null==this.accumulatedGrads[n]){const e=!1;this.accumulatedGrads[n]={originalName:`${t}/accumulator`,variable:Wo((()=>xu(a.shape,this.initialAccumulatorValue).variable(e)))}}const r=Array.isArray(e)?e[n].tensor:e[t];if(null==r)return;const s=this.accumulatedGrads[n].variable;Wo((()=>{const e=Ho(s,ml(r));s.assign(e);const t=Ho(Ko(qo(r,$c(Ho(e,Er.backend.epsilon()))),-this.learningRate),a);a.assign(t)}))})),this.incrementIterations()}dispose(){null!=this.accumulatedGrads&&Vo(this.accumulatedGrads.map((e=>e.variable)))}async getWeights(){return[await this.saveIterations()].concat(this.accumulatedGrads.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e);this.accumulatedGrads=e.map((e=>({originalName:e.name,variable:e.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}}static fromConfig(e,t){return new e(t.learningRate,t.initialAccumulatorValue)}}pp.className="Adagrad",Ao(pp);class hp extends cp{constructor(e,t,n,a=null){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=a,this.accumulatedFirstMoment=[],this.accumulatedSecondMoment=[],Wo((()=>{this.accBeta1=uc(t).variable(),this.accBeta2=uc(n).variable()})),null==a&&(this.epsilon=Er.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);Wo((()=>{const n=zu(1,this.accBeta1),a=zu(1,this.accBeta2);t.forEach(((t,r)=>{const s=Er.registeredVariables[t];null==this.accumulatedFirstMoment[r]&&(this.accumulatedFirstMoment[r]={originalName:`${t}/m`,variable:Wo((()=>uu(s).variable(false)))}),null==this.accumulatedSecondMoment[r]&&(this.accumulatedSecondMoment[r]={originalName:`${t}/v`,variable:Wo((()=>uu(s).variable(false)))});const o=Array.isArray(e)?e[r].tensor:e[t];if(null==o)return;const i=this.accumulatedFirstMoment[r].variable,u=this.accumulatedSecondMoment[r].variable,l=Ho(Ko(i,this.beta1),Ko(o,1-this.beta1)),c=Ho(Ko(u,this.beta2),Ko(ml(o),1-this.beta2)),d=qo(l,n),p=qo(c,a);i.assign(l),u.assign(c);const h=Ho(Ko(qo(d,Ho($c(p),this.epsilon)),-this.learningRate),s);s.assign(h)})),this.accBeta1.assign(Ko(this.accBeta1,this.beta1)),this.accBeta2.assign(Ko(this.accBeta2,this.beta2))})),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.accBeta2.dispose(),null!=this.accumulatedFirstMoment&&Vo(this.accumulatedFirstMoment.map((e=>e.variable))),null!=this.accumulatedSecondMoment&&Vo(this.accumulatedSecondMoment.map((e=>e.variable)))}async getWeights(){const e=[...this.accumulatedFirstMoment,...this.accumulatedSecondMoment];return[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e),Wo((()=>{this.accBeta1.assign(Sl(this.beta1,this.iterations_+1)),this.accBeta2.assign(Sl(this.beta2,this.iterations_+1))}));const t=e.length/2;this.accumulatedFirstMoment=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(false)}))),this.accumulatedSecondMoment=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon)}}hp.className="Adam",Ao(hp);class fp extends cp{constructor(e,t,n,a=null,r=0){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=a,this.decay=r,this.accumulatedFirstMoment=[],this.accumulatedWeightedInfNorm=[],Wo((()=>{this.iteration=uc(0).variable(),this.accBeta1=uc(t).variable()})),null==a&&(this.epsilon=Er.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);Wo((()=>{const n=zu(1,this.accBeta1),a=qo(-this.learningRate,Ho(Ko(this.iteration,this.decay),1));t.forEach(((t,r)=>{const s=Er.registeredVariables[t];null==this.accumulatedFirstMoment[r]&&(this.accumulatedFirstMoment[r]={originalName:`${t}/m`,variable:uu(s).variable(false)}),null==this.accumulatedWeightedInfNorm[r]&&(this.accumulatedWeightedInfNorm[r]={originalName:`${t}/v`,variable:uu(s).variable(false)});const o=Array.isArray(e)?e[r].tensor:e[t];if(null==o)return;const i=this.accumulatedFirstMoment[r].variable,u=this.accumulatedWeightedInfNorm[r].variable,l=Ho(Ko(i,this.beta1),Ko(o,1-this.beta1)),c=Ko(u,this.beta2),d=Xo(o),p=il(c,d);i.assign(l),u.assign(p);const h=Ho(Ko(qo(a,n),qo(l,Ho(p,this.epsilon))),s);s.assign(h)})),this.iteration.assign(Ho(this.iteration,1)),this.accBeta1.assign(Ko(this.accBeta1,this.beta1))})),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.iteration.dispose(),null!=this.accumulatedFirstMoment&&Vo(this.accumulatedFirstMoment.map((e=>e.variable))),null!=this.accumulatedWeightedInfNorm&&Vo(this.accumulatedWeightedInfNorm.map((e=>e.variable)))}async getWeights(){throw new Error("getWeights() is not implemented for Adamax yet.")}async setWeights(e){throw new Error("setWeights() is not implemented for Adamax yet.")}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon,t.decay)}}fp.className="Adamax",Ao(fp);class mp extends cp{constructor(e){super(),this.learningRate=e,this.setLearningRate(e)}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const a=Array.isArray(e)?e[n].tensor:e[t];if(null==a)return;const r=Er.registeredVariables[t];Wo((()=>{const e=Ho(Ko(this.c,a),r);r.assign(e)}))})),this.incrementIterations()}setLearningRate(e){this.learningRate=e,null!=this.c&&this.c.dispose(),this.c=zo(uc(-e))}dispose(){this.c.dispose()}async getWeights(){return[await this.saveIterations()]}async setWeights(e){if(0!==(e=await this.extractIterations(e)).length)throw new Error("SGD optimizer does not have settable weights.")}getConfig(){return{learningRate:this.learningRate}}static fromConfig(e,t){return new e(t.learningRate)}}mp.className="SGD",Ao(mp);class gp extends mp{constructor(e,t,n=!1){super(e),this.learningRate=e,this.momentum=t,this.useNesterov=n,this.accumulations=[],this.m=uc(this.momentum)}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const a=Er.registeredVariables[t];if(null==this.accumulations[n]){const e=!1;this.accumulations[n]={originalName:`${t}/momentum`,variable:Wo((()=>uu(a).variable(e)))}}const r=this.accumulations[n].variable,s=Array.isArray(e)?e[n].tensor:e[t];null!=s&&Wo((()=>{let e;const t=Ho(Ko(this.m,r),s);e=this.useNesterov?Ho(Ko(this.c,Ho(s,Ko(t,this.m))),a):Ho(Ko(this.c,t),a),r.assign(t),a.assign(e)}))})),this.incrementIterations()}dispose(){this.m.dispose(),null!=this.accumulations&&Vo(this.accumulations.map((e=>e.variable)))}setMomentum(e){this.momentum=e}async getWeights(){return[await this.saveIterations()].concat(this.accumulations.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e);this.accumulations=e.map((e=>({originalName:e.name,variable:e.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}}static fromConfig(e,t){return new e(t.learningRate,t.momentum,t.useNesterov)}}gp.className="Momentum",Ao(gp);class yp extends cp{constructor(e,t=.9,n=0,a=null,r=!1){if(super(),this.learningRate=e,this.decay=t,this.momentum=n,this.epsilon=a,this.accumulatedMeanSquares=[],this.accumulatedMoments=[],this.accumulatedMeanGrads=[],this.centered=r,null==a&&(this.epsilon=Er.backend.epsilon()),null==e)throw new Error("learningRate for RMSPropOptimizer must be defined.")}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const a=Er.registeredVariables[t],r=!1;null==this.accumulatedMeanSquares[n]&&(this.accumulatedMeanSquares[n]={originalName:`${t}/rms`,variable:Wo((()=>uu(a).variable(r)))}),null==this.accumulatedMoments[n]&&(this.accumulatedMoments[n]={originalName:`${t}/momentum`,variable:Wo((()=>uu(a).variable(r)))}),null==this.accumulatedMeanGrads[n]&&this.centered&&(this.accumulatedMeanGrads[n]={originalName:`${t}/mg`,variable:Wo((()=>uu(a).variable(r)))});const s=Array.isArray(e)?e[n].tensor:e[t];if(null==s)return;const o=this.accumulatedMeanSquares[n].variable,i=this.accumulatedMoments[n].variable;Wo((()=>{const e=Ho(Ko(o,this.decay),Ko(ml(s),1-this.decay));if(this.centered){const t=this.accumulatedMeanGrads[n].variable,r=Ho(Ko(t,this.decay),Ko(s,1-this.decay)),u=qo(Ko(s,this.learningRate),$c(zu(e,Ho(ml(r),this.epsilon)))),l=Ho(Ko(i,this.momentum),u);o.assign(e),t.assign(r),i.assign(l);const c=zu(a,l);a.assign(c)}else{const e=Ho(Ko(o,this.decay),Ko(ml(s),1-this.decay)),t=Ho(Ko(i,this.momentum),qo(Ko(s,this.learningRate),$c(Ho(e,this.epsilon))));o.assign(e),i.assign(t);const n=zu(a,t);a.assign(n)}}))})),this.incrementIterations()}dispose(){null!=this.accumulatedMeanSquares&&Vo(this.accumulatedMeanSquares.map((e=>e.variable))),null!=this.accumulatedMeanGrads&&this.centered&&Vo(this.accumulatedMeanGrads.map((e=>e.variable))),null!=this.accumulatedMoments&&Vo(this.accumulatedMoments.map((e=>e.variable)))}async getWeights(){const e=[...this.accumulatedMeanSquares,...this.accumulatedMoments];return this.centered&&e.push(...this.accumulatedMeanGrads),[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e);const t=this.centered?e.length/3:e.length/2,n=!1;this.accumulatedMeanSquares=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))),this.accumulatedMoments=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))),this.centered&&(this.accumulatedMeanGrads=e.slice(2*t,3*t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))))}getConfig(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}}static fromConfig(e,t){return new e(t.learningRate,t.decay,t.momentum,t.epsilon,t.centered)}}yp.className="RMSProp",Ao(yp);class bp{static sgd(e){return new mp(e)}static momentum(e,t,n=!1){return new gp(e,t,n)}static rmsprop(e,t=.9,n=0,a=null,r=!1){return new yp(e,t,n,a,r)}static adam(e=.001,t=.9,n=.999,a=null){return new hp(e,t,n,a)}static adadelta(e=.001,t=.95,n=null){return new dp(e,t,n)}static adamax(e=.002,t=.9,n=.999,a=null,r=0){return new fp(e,t,n,a,r)}static adagrad(e,t=.1){return new pp(e,t)}}const xp={sgd:bp.sgd,momentum:bp.momentum,adadelta:bp.adadelta,adagrad:bp.adagrad,rmsprop:bp.rmsprop,adamax:bp.adamax,adam:bp.adam},vp="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:"undefined"!=typeof setImmediate?setImmediate:e=>e();function kp(e,t){const n=e[0].length;e.forEach(((e,t)=>{i(e.length===n,(()=>`Error in concat${n}D: rank of tensors[${t}] must be the same as the rank of the rest (${n})`))})),i(t>=0&&t<n,(()=>`Error in concat${n}D: axis must be between 0 and ${n-1}.`));const a=e[0];e.forEach(((e,r)=>{for(let s=0;s<n;s++)i(s===t||e[s]===a[s],(()=>`Error in concat${n}D: Shape of tensors[${r}] (${e}) does not match the shape of the rest (${a}) along the non-concatenated axis ${r}.`))}))}function wp(e,t){const n=e[0].slice();for(let a=1;a<e.length;a++)n[t]+=e[a][t];return n}function Ip(e){return e<=30?e:F(e,Math.floor(Math.sqrt(e)))}function Np(e,t,n){return[n*("number"==typeof e?e:e[0]),t*("number"==typeof e?e:e[1])]}function $p(e,t,n,a=!0){let r=[];if(a)r=r.concat(t.slice(0)),r.push(e[0]/n),r=r.concat(e.slice(1));else{r=r.concat(e[0]);const n=t.length;for(let a=0;a<n;++a)r=r.concat([e[a+1]/t[a],t[a]]);r=r.concat(e.slice(n+1))}return r}function Tp(e,t,n=!0){const a=[];if(n){a.push(t);for(let n=t+1;n<e;++n)n<=2*t?(a.push(n),a.push(n-(t+1))):a.push(n)}else{const n=[],r=[];for(let a=1;a<e;++a)a>=2*t+1||a%2==1?r.push(a):n.push(a);a.push(...n),a.push(0),a.push(...r)}return a}function Cp(e,t,n,a=!0){const r=[];a?r.push(e[0]/n):r.push(e[0]*n);for(let n=1;n<e.length;++n)n<=t.length?a?r.push(t[n-1]*e[n]):r.push(e[n]/t[n-1]):r.push(e[n]);return r}function Ep(e,t){const n=[0];for(let a=0;a<t;++a)n.push(e[a][0]);return n}function Sp(e,t,n){const a=e.slice(0,1);for(let r=0;r<n;++r)a.push(e[r+1]-t[r][0]-t[r][1]);return a}const Rp=1.7580993408473768,Ap=1.0507009873554805,_p=.3275911,Fp=.254829592,Op=-.284496736,Dp=1.421413741,Mp=-1.453152027,Lp=1.061405429;function Pp(...e){q().getBool("IS_TEST")||console.warn(...e)}function Bp(e,t){if(e.length!==t.length)throw new Error(`Cannot merge real and imag arrays of different lengths. real:${e.length}, imag: ${t.length}.`);const n=new Float32Array(2*e.length);for(let a=0;a<n.length;a+=2)n[a]=e[a/2],n[a+1]=t[a/2];return n}function Wp(e){const t=new Float32Array(e.length/2),n=new Float32Array(e.length/2);for(let a=0;a<e.length;a+=2)t[a/2]=e[a],n[a/2]=e[a+1];return{real:t,imag:n}}function Vp(e){const t=Math.ceil(e.length/4),n=new Float32Array(t),a=new Float32Array(t);for(let t=0;t<e.length;t+=4)n[Math.floor(t/4)]=e[t],a[Math.floor(t/4)]=e[t+1];return{real:n,imag:a}}function zp(e){const t=Math.floor(e.length/4),n=new Float32Array(t),a=new Float32Array(t);for(let t=2;t<e.length;t+=4)n[Math.floor(t/4)]=e[t],a[Math.floor(t/4)]=e[t+1];return{real:n,imag:a}}function Up(e,t){return{real:e[2*t],imag:e[2*t+1]}}function Gp(e,t,n,a){e[2*a]=t,e[2*a+1]=n}function Hp(e,t){const n=new Float32Array(e/2),a=new Float32Array(e/2);for(let r=0;r<Math.ceil(e/2);r++){const s=(t?2:-2)*Math.PI*(r/e);n[r]=Math.cos(s),a[r]=Math.sin(s)}return{real:n,imag:a}}function jp(e,t,n){const a=(n?2:-2)*Math.PI*(e/t);return{real:Math.cos(a),imag:Math.sin(a)}}const qp="->",Kp=/->/g;function Xp(e,t){const n=((e=e.replace(/\s/g,"")).length-e.replace(Kp,"").length)/qp.length;if(n<1)throw new Error("Equations without an arrow are not supported.");if(n>1)throw new Error('Equation must contain exactly one arrow ("->").');const[a,r]=e.split(qp);i(-1===a.indexOf("..."),(()=>'The ellipsis notation ("...") is not supported yet.'));const s=a.split(","),o=s.length;if(t!==o)throw new Error(`Expected ${o} input tensors, received ${t}`);if(o>2)throw new Error("Support for more than 2 input tensors is not implemented yet.");const u=[];for(let e=0;e<r.length;++e){const t=r[e];if(!s.some((e=>-1!==e.indexOf(t))))throw new Error(`Output subscripts contain the label ${t} not present in the input subscripts.`);-1===u.indexOf(t)&&u.push(t)}for(let e=0;e<a.length;++e){const t=a[e];-1===u.indexOf(t)&&","!==t&&u.push(t)}const l=new Array(s.length);for(let e=0;e<o;++e){if(new Set(s[e].split("")).size!==s[e].length)throw new Error(`Found duplicate axes in input component ${s[e]}. Support for duplicate axes in input is not implemented yet.`);l[e]=[];for(let t=0;t<s[e].length;++t)l[e].push(u.indexOf(s[e][t]))}const c=u.length,d=[];for(let e=r.length;e<c;++e)d.push(e);return{allDims:u,summedDims:d,idDims:l}}function Yp(e,t){let n=new Array(e);n.fill(-1);for(let e=0;e<t.length;++e)n[t[e]]=e;const a=[];for(let t=0;t<e;++t)-1===n[t]&&a.push(t);return n=n.filter((e=>-1!==e)),{permutationIndices:n,expandDims:a}}function Qp(e,t,n){const a=new Array(e);for(let e=0;e<n.length;++e){const r=n[e].shape;for(let n=0;n<t[e].length;++n)void 0===a[t[e][n]]?a[t[e][n]]=r[n]:i(a[t[e][n]]===r[n],(()=>`Expected dimension ${a[t[e][n]]} at axis ${n} of input shaped ${JSON.stringify(r)}, but got dimension ${r[n]}`))}}function Zp(e,t){const n=e,a=[];let r=0;0===e.length&&n.push(-1),r=e.length+1;for(let e=0;e<r;++e)a.push([]);const s=[];for(let e=0;e<n.length;++e){const r=eh(t,n[e]);for(const t of r)-1===s.indexOf(t)&&(a[e].push(t),s.push(t))}return{path:n,steps:a}}function Jp(e){return e.every(((e,t)=>e===t))}function eh(e,t){const n=[];for(let a=0;a<e.length;++a)0!==e[a].length&&-1===e[a].indexOf(t)&&-1!==t||n.push(a);return n}function th(e,t,n=0){let a=[];if("number"==typeof t)i(e.shape[n]%t==0,(()=>"Number of splits must evenly divide the axis.")),a=new Array(t).fill(e.shape[n]/t);else{i(t.reduce(((e,t)=>(-1===t&&(e+=1),e)),0)<=1,(()=>"There should be only one negative value in split array."));const r=t.indexOf(-1);if(-1!==r){const a=t.reduce(((e,t)=>t>0?e+t:e));t[r]=e.shape[n]-a}i(e.shape[n]===t.reduce(((e,t)=>e+t)),(()=>"The sum of sizes must match the size of the axis dimension.")),a=t}return a}function nh(e,t){let n,a=!1;for(e<=30?(n=e,a=!0):n=F(e,Math.floor(Math.sqrt(e)));!a;)n>t||n===e?a=!0:n=F(e,n+1);return n}function ah(e,t,n){const a=[],r=e.length;for(let s=0;s<r;s++)s!==t?a.push(e[s]):a.push(n);return a}function rh(e,t,n,a){const r=t.shape.length,s=e.shape.length;if(0!==a&&(a<-r||a>r))throw new Error(`Expect batchDims in the range of [-${r}, ${r}], but got ${a}`);if(a<0&&(a+=r),a>s)throw new Error(`batchDims (${a}) must be less than rank(x) (\n    ${s}).`);if(n<a)throw new Error(`batchDims (${a}) must be less than or equal to axis (${n}).`);for(let n=0;n<a;++n)if(e.shape[n]!==t.shape[n])throw new Error(`x.shape[${n}]: ${e.shape[n]} should be equal to indices.shape[${n}]: ${t.shape[n]}.`);const o=e.shape[n],i=[];let u=1,l=1,c=1;for(let t=0;t<a;++t)i.push(e.shape[t]),u*=e.shape[t];for(let t=a;t<n;t++)i.push(e.shape[t]),l*=e.shape[t];for(let e=a;e<r;e++)i.push(t.shape[e]);for(let t=n+1;t<s;t++)i.push(e.shape[t]),c*=e.shape[t];return{batchSize:u,sliceSize:c,outerSize:l,dimSize:o,outputShape:i}}var sh=Object.freeze({__proto__:null,segOpComputeOptimalWindowSize:nh,computeOutShape:ah,collectGatherOpShapeInfo:rh});function oh(e){try{return e.map((e=>Xa(e)))}catch(e){throw new Error(`Failed to decode encoded string bytes into utf-8, error: ${e}`)}}function ih(e){return e.map((e=>Ka(e)))}var uh=Object.freeze({__proto__:null,slice_util:Eo,segment_util:sh,fromUint8ToStringArray:oh,fromStringArrayToUint8:ih,upcastType:yr,axesAreInnerMostDims:Hu,combineLocations:ju,computeOutAndReduceShapes:qu,expandShapeToKeepDim:Ku,assertAxesAreInnerMostDims:Xu,getAxesPermutation:Yu,getUndoAxesPermutation:Qu,getInnerMostAxes:Zu,getBroadcastDims:au,getReductionAxes:ru,assertAndGetBroadcastShape:su,assertParamsConsistent:kp,computeOutShape:wp,computeDilation2DInfo:ui,computePool2DInfo:li,computePool3DInfo:ci,computeConv2DInfo:di,computeConv3DInfo:pi,computeDefaultPad:hi,tupleValuesAreOne:bi,eitherStridesOrDilationsAreOne:xi,convertConv2DDataFormat:vi,getFusedDyActivation:Jc,getFusedBiasGradient:ed,applyActivation:td,shouldFuse:nd,PARALLELIZE_THRESHOLD:30,computeOptimalWindowSize:Ip,getImageCenter:Np,getReshaped:$p,getPermuted:Tp,getReshapedPermuted:Cp,getSliceBeginCoords:Ep,getSliceSize:Sp,prepareAndValidate:so,validateUpdateShape:io,validateInput:uo,calculateShapes:lo,SELU_SCALEALPHA:Rp,SELU_SCALE:Ap,ERF_P:_p,ERF_A1:Fp,ERF_A2:Op,ERF_A3:Dp,ERF_A4:Mp,ERF_A5:Lp,warn:Pp,log:function(...e){q().getBool("IS_TEST")||console.log(...e)},mergeRealAndImagArrays:Bp,splitRealAndImagArrays:Wp,complexWithEvenIndex:Vp,complexWithOddIndex:zp,getComplexWithIndex:Up,assignToTypedArray:Gp,exponents:Hp,exponent:jp,decodeEinsumEquation:Xp,getEinsumPermutation:Yp,checkEinsumDimSizes:Qp,getEinsumComputePath:Zp,isIdentityPermutation:Jp,prepareSplitSize:th}),lh=Object.freeze({__proto__:null,nonMaxSuppressionV3Impl:vd,nonMaxSuppressionV4Impl:kd,nonMaxSuppressionV5Impl:wd,whereImpl:Bc}),ch=Object.freeze({__proto__:null,AdadeltaOptimizer:dp,AdagradOptimizer:pp,AdamOptimizer:hp,AdamaxOptimizer:fp,MomentumOptimizer:gp,Optimizer:cp,RMSPropOptimizer:yp,SGDOptimizer:mp,Tensor:lr,TensorBuffer:sr,Variable:cr,get Rank(){return dr},sumOutType:br,upcastType:yr,get Reduction(){return Wd},customGrad:Mu,grad:function(e){return i(_(e),(()=>"The f passed in grad(f) must be a function")),(t,n)=>{const a=Lr(t,"x","tf.grad","string_or_numeric"),r=null!=n?Lr(n,"dy","tf.grad"):null;return Er.tidy((()=>{const{value:t,grads:n}=Er.gradients((()=>e(a)),[a],r);return null!=r&&u(t.shape,r.shape,"The shape of dy passed in grad(f)(x, dy) must match the shape returned by f(x)"),Lu(n),n[0]}))}},grads:function(e){return i(_(e),(()=>"The f passed in grads(f) must be a function")),(t,n)=>{i(Array.isArray(t),(()=>"The args passed in grads(f)(args) must be an array of `Tensor`s or `TensorLike`s"));const a=Pr(t,"args","tf.grads","string_or_numeric"),r=null!=n?Lr(n,"dy","tf.grads"):null;return Er.tidy((()=>{const{value:t,grads:n}=Er.gradients((()=>e(...a)),a,r);return null!=r&&u(t.shape,r.shape,"The shape of dy passed in grads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),Lu(n),n}))}},valueAndGrad:function(e){return i(_(e),(()=>"The f passed in valueAndGrad(f) must be a function")),(t,n)=>{i(t instanceof lr,(()=>"The x passed in valueAndGrad(f)(x) must be a tensor")),i(null==n||n instanceof lr,(()=>"The dy passed in valueAndGrad(f)(x, dy) must be a tensor"));const{grads:a,value:r}=Er.gradients((()=>e(t)),[t],n);return Lu(a),{grad:a[0],value:r}}},valueAndGrads:function(e){return i(_(e),(()=>"The f passed in valueAndGrads(f) must be a function")),(t,n)=>{i(Array.isArray(t)&&t.every((e=>e instanceof lr)),(()=>"The args passed in valueAndGrads(f)(args) must be array of tensors")),i(null==n||n instanceof lr,(()=>"The dy passed in valueAndGrads(f)(args, dy) must be a tensor"));const a=Er.gradients((()=>e(...t)),t,n);return null!=n&&u(a.value.shape,n.shape,"The shape of dy passed in valueAndGrads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),Lu(a.grads),a}},variableGrads:Du,Environment:H,env:q,get ENV(){return X},nextFrame:function(){return new Promise((e=>vp((()=>e()))))},KernelBackend:t,DataStorage:e,abs:Xo,acos:Yo,acosh:Qo,add:Ho,addN:Zo,all:Jo,any:ei,argMax:ti,argMin:ni,asin:ai,asinh:ri,atan:si,atan2:oi,atanh:ii,avgPool:wi,avgPool3d:Ii,basicLSTMCell:Ei,batchToSpaceND:Si,batchNorm:Ri,batchNorm2d:Ai,batchNorm3d:_i,batchNorm4d:Fi,bincount:Oi,broadcastTo:Di,buffer:Rs,cast:As,ceil:Mi,clipByValue:Li,clone:_s,complex:Vr,concat:Ni,concat1d:Pi,concat2d:Bi,concat3d:Wi,concat4d:Vi,conv1d:Ui,conv2d:zi,conv2dTranspose:Hi,conv3d:ji,conv3dTranspose:Ki,cos:Xi,cosh:Yi,cumsum:Qi,denseBincount:Zi,depthToSpace:Ji,depthwiseConv2d:eu,diag:tu,dilation2d:nu,div:qo,divNoNan:lu,dot:cu,einsum:du,elu:pu,equal:ou,erf:hu,exp:fu,expandDims:mu,expm1:gu,eye:bu,fill:xu,floor:vu,floorDiv:jo,gather:ku,greater:wu,greaterEqual:Iu,imag:Nu,isFinite:$u,isInf:Tu,isNaN:Cu,leakyRelu:Eu,less:Su,lessEqual:Ru,linspace:Au,localResponseNormalization:_u,log:Fu,log1p:Ou,logSigmoid:Wu,logSoftmax:Gu,logSumExp:Ju,logicalAnd:el,logicalNot:tl,logicalOr:nl,logicalXor:al,matMul:Ks,max:Vu,maxPool:rl,maxPool3d:sl,maxPoolWithArgmax:ol,maximum:il,mean:ul,meshgrid:function(e,t,{indexing:n="xy"}={}){if("xy"!==n&&"ij"!==n)throw new TypeError(`${n} is not a valid third argument to meshgrid`);if(void 0===e)return[];let a=Lr(e,"x","meshgrid",e instanceof lr?e.dtype:"float32");if(void 0===t)return[a];let r=Lr(t,"y","meshgrid",t instanceof lr?t.dtype:"float32");const s=d(a.shape),o=d(r.shape);return"xy"===n?(a=ki(a,[1,-1]),r=ki(r,[-1,1]),[Ks(cl([o,1],a.dtype),a),Ks(r,cl([1,s],r.dtype))]):(a=ki(a,[-1,1]),r=ki(r,[1,-1]),[Ks(a,cl([1,o],a.dtype)),Ks(cl([s,1],r.dtype),r)])},min:dl,minimum:pl,mirrorPad:hl,mod:fl,moments:gl,mul:Ko,multiRNNCell:yl,multinomial:bl,neg:Pu,notEqual:xl,oneHot:Xs,ones:cl,onesLike:vl,outerProduct:kl,pad:wl,pad1d:Il,pad2d:Nl,pad3d:$l,pad4d:Tl,pool:El,pow:Sl,prelu:Rl,print:Fs,prod:Al,rand:_l,randomGamma:ql,randomNormal:Kl,randomUniform:Xl,range:Yl,real:Ql,reciprocal:Zl,relu:Jl,relu6:ec,reshape:ki,reverse:tc,reverse1d:nc,reverse2d:ac,reverse3d:rc,reverse4d:sc,round:oc,rsqrt:ic,scalar:uc,selu:lc,separableConv2d:cc,setdiff1dAsync:dc,sigmoid:$i,sign:pc,sin:hc,sinh:fc,slice:Ti,slice1d:mc,slice2d:gc,slice3d:yc,slice4d:bc,softmax:xc,softplus:Bu,spaceToBatchND:Cl,fft:vc,ifft:kc,irfft:wc,rfft:Nc,split:Ic,sqrt:$c,square:ml,squaredDifference:Tc,squeeze:Cc,stack:Ec,step:Sc,stridedSlice:Rc,sub:zu,sum:Uu,tan:Ac,tanh:Ci,tensor:Ur,tensor1d:_c,tensor2d:Fc,tensor3d:Js,tensor4d:function(e,t,n){if(l(e),null!=t&&4!==t.length)throw new Error("tensor4d() requires shape to have four numbers");const a=Or(e,n);if(4!==a.length&&1!==a.length)throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(1===a.length&&null==t)throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");return zr(e,t,a,n)},tensor5d:function(e,t,n){if(l(e),null!=t&&5!==t.length)throw new Error("tensor5d() requires shape to have five numbers");const a=Or(e,n);if(5!==a.length&&1!==a.length)throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");if(1===a.length&&null==t)throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");return zr(e,t,a,n)},tensor6d:function(e,t,n){if(l(e),null!=t&&6!==t.length)throw new Error("tensor6d() requires shape to have six numbers");const a=Or(e,n);if(6!==a.length&&1!==a.length)throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");if(1===a.length&&null==t)throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");return zr(e,t=t||a,a,n)},tile:yu,topk:Oc,truncatedNormal:Dc,unique:Mc,unsortedSegmentSum:Lc,unstack:Pc,variable:function(e,t=!0,n,a){return Er.makeVariable(e,t,n,a)},where:iu,whereAsync:Wc,zeros:ll,zerosLike:uu,op:Wr,OP_SCOPE_SUFFIX:Br,booleanMaskAsync:Vc,transpose:Ys,norm:Uc,movingAverage:Gc,scatterND:Hc,sparseToDense:jc,gatherND:qc,dropout:Kc,enclosingPowerOfTwo:Xc,cosineWindow:Yc,inTopKAsync:Qc,image:sp,linalg:op,losses:ip,spectral:ap,fused:ud,signal:rp,sparse:up,string:lp,train:xp,enableProdMode:function(){q().set("PROD",!0)},enableDebugMode:function(){q().set("DEBUG",!0)},disableDeprecationWarnings:function(){q().set("DEPRECATION_WARNINGS_ENABLED",!1),console.warn("TensorFlow.js deprecation warnings have been disabled.")},deprecationWarn:Po,disposeVariables:function(){Er.disposeVariables()},engine:Bo,memory:function(){return Er.memory()},profile:function(e){return Er.profile(e)},tidy:Wo,dispose:Vo,keep:zo,time:function(e){return Er.time(e)},setBackend:function(e){return Er.setBackend(e)},ready:function(){return Er.ready()},getBackend:Uo,removeBackend:function(e){Er.removeBackend(e)},findBackend:function(e){return Er.findBackend(e)},findBackendFactory:function(e){return Er.findBackendFactory(e)},registerBackend:Go,backend:function(){return Er.backend},setPlatform:function(e,t){q().setPlatform(e,t)},getKernel:na,getGradient:aa,getKernelsForBackend:ra,registerKernel:sa,registerGradient:function(e){const{kernelName:t}=e;ta.has(t)&&q().getBool("DEBUG")&&console.warn(`Overriding the gradient for '${t}'`),ta.set(t,e)},unregisterKernel:function(e,t){const n=oa(e,t);if(!ea.has(n))throw new Error(`The kernel '${e}' for backend '${t}' is not registered`);ea.delete(n)},unregisterGradient:function(e){if(!ta.has(e))throw new Error(`The gradient '${e}' for backend is not registered`);ta.delete(e)},copyRegisteredKernels:function(e,t){ra(e).forEach((e=>{sa(Object.assign({},e,{backendName:t}))}))},Abs:Z,Acos:J,Acosh:ee,Add:te,AddN:ne,All:ae,Any:re,ArgMax:se,ArgMin:oe,Asin:ie,Asinh:ue,Atan:le,Atanh:ce,Atan2:de,AvgPool:pe,AvgPoolGrad:he,AvgPool3D:fe,AvgPool3DGrad:me,BatchMatMul:ge,BatchToSpaceND:ye,Bincount:be,BroadcastTo:"BroadcastTo",Cast:xe,Ceil:ve,ClipByValue:ke,Complex:we,ComplexAbs:Ie,Concat:Ne,Conv2D:$e,Conv2DBackpropFilter:Te,Conv2DBackpropInput:Ce,Conv3D:Ee,Conv3DBackpropFilterV2:Se,Conv3DBackpropInputV2:Re,Cos:Ae,Cosh:_e,Cumsum:Fe,CropAndResize:Oe,DenseBincount:De,DepthToSpace:Me,DepthwiseConv2dNative:Le,DepthwiseConv2dNativeBackpropFilter:Pe,DepthwiseConv2dNativeBackpropInput:Be,Diag:We,Dilation2D:Ve,Dilation2DBackpropInput:ze,Dilation2DBackpropFilter:Ue,RealDiv:Ge,Einsum:He,Elu:je,EluGrad:qe,Erf:Ke,Equal:Xe,Exp:Ye,ExpandDims:Qe,Expm1:Ze,FFT:Je,Fill:et,FlipLeftRight:tt,Floor:nt,FloorDiv:at,FusedBatchNorm:rt,GatherV2:st,GatherNd:ot,Greater:it,GreaterEqual:ut,Identity:lt,IFFT:ct,Imag:dt,IsFinite:pt,IsInf:ht,IsNan:ft,LeakyRelu:mt,Less:gt,LessEqual:yt,LinSpace:bt,Log:xt,Log1p:vt,LogicalAnd:kt,LogicalNot:wt,LogicalOr:It,LogSoftmax:"LogSoftmax",LRN:Nt,LRNGrad:$t,Max:Tt,Maximum:Ct,MaxPool:Et,MaxPoolGrad:St,MaxPool3D:Rt,MaxPool3DGrad:At,MaxPoolWithArgmax:_t,Mean:Ft,Min:Ot,Minimum:Dt,MirrorPad:Mt,Mod:Lt,Multinomial:Pt,Multiply:Bt,Neg:Wt,NotEqual:Vt,NonMaxSuppressionV3:zt,NonMaxSuppressionV4:Ut,NonMaxSuppressionV5:Gt,OnesLike:Ht,OneHot:jt,Pack:qt,PadV2:Kt,Pool:"Pool",Pow:Xt,Prelu:Yt,Prod:Qt,Range:Zt,Real:Jt,Reciprocal:en,Relu:tn,Reshape:nn,ResizeNearestNeighbor:an,ResizeNearestNeighborGrad:rn,ResizeBilinear:sn,ResizeBilinearGrad:on,Relu6:un,Reverse:ln,Round:cn,Rsqrt:dn,ScatterNd:pn,Select:hn,Selu:fn,Slice:mn,Sin:gn,Sinh:yn,Sign:bn,Sigmoid:xn,Softplus:vn,Sqrt:kn,Sum:wn,SpaceToBatchND:In,SplitV:Nn,Softmax:$n,SparseFillEmptyRows:Tn,SparseReshape:Cn,SparseSegmentMean:En,SparseSegmentSum:Sn,SparseToDense:Rn,SquaredDifference:An,Square:_n,StridedSlice:Fn,StringNGrams:On,StringSplit:Dn,StringToHashBucketFast:Mn,Sub:Ln,Tan:Pn,Tanh:Bn,Tile:Wn,TopK:Vn,Transform:zn,Transpose:Un,Unique:Gn,Unpack:Hn,UnsortedSegmentSum:jn,ZerosLike:qn,Step:Kn,FromPixels:Xn,RotateWithOffset:Yn,_FusedMatMul:Qn,FusedConv2D:Zn,FusedDepthwiseConv2D:Jn,version_core:"3.7.0",browser:ro,io:qs,math:Zs,serialization:_o,test_util:Lo,util:Ya,backend_util:uh,tensor_util:Ir,slice_util:Eo,gather_util:oo,scatter_util:co,device_util:_r,kernel_impls:lh});const dh={},ph={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function hh(e){if(!(e in dh)){const t=function(e){if(1!==e&&2!==e)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");const t=function(e){if("undefined"!=typeof OffscreenCanvas&&2===e)return new OffscreenCanvas(300,150);if("undefined"!=typeof document)return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}(e);if(t.addEventListener("webglcontextlost",(t=>{t.preventDefault(),delete dh[e]}),!1),1===e)return t.getContext("webgl",ph)||t.getContext("experimental-webgl",ph);return t.getContext("webgl2",ph)}(e);if(null===t)return console.log("Could not get context for WebGL version",e),null;dh[e]=t}const t=dh[e];return t.isContextLost()?(delete dh[e],hh(e)):(t.disable(t.DEPTH_TEST),t.disable(t.STENCIL_TEST),t.disable(t.BLEND),t.disable(t.DITHER),t.disable(t.POLYGON_OFFSET_FILL),t.disable(t.SAMPLE_COVERAGE),t.enable(t.SCISSOR_TEST),t.enable(t.CULL_FACE),t.cullFace(t.BACK),dh[e])}var fh,mh,gh;function yh(e,t){return[t,e]}function bh(e){const t=d(e);return f(Math.ceil(t/4))}function xh(e,t){return[Math.max(1,Math.ceil(t/2)),Math.max(1,Math.ceil(e/2))]}function vh(e,t){const n=e;let a,r,s,o,i,u,l,c,d,p;return 2===q().getNumber("WEBGL_VERSION")?(a=n.R32F,r=n.R16F,s=n.RGBA16F,o=n.RGBA32F,i=n.RED,l=4,c=1,d=n.HALF_FLOAT,p=n.FLOAT):(a=e.RGBA,r=e.RGBA,s=e.RGBA,o=n.RGBA,i=e.RGBA,l=4,c=4,d=null!=t?t.HALF_FLOAT_OES:null,p=e.FLOAT),u=e.RGBA,{internalFormatFloat:a,internalFormatHalfFloat:r,internalFormatPackedHalfFloat:s,internalFormatPackedFloat:o,textureFormatFloat:i,downloadTextureFormat:u,downloadUnpackNumChannels:l,defaultNumChannels:c,textureTypeHalfFloat:d,textureTypeFloat:p}}function kh(e,t){const n=t();return q().getBool("DEBUG")&&function(e){const t=e.getError();if(t!==e.NO_ERROR)throw new Error("WebGL Error: "+function(e,t){switch(t){case e.NO_ERROR:return"NO_ERROR";case e.INVALID_ENUM:return"INVALID_ENUM";case e.INVALID_VALUE:return"INVALID_VALUE";case e.INVALID_OPERATION:return"INVALID_OPERATION";case e.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case e.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case e.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return`Unknown error code ${t}`}}(e,t))}(e),n}!function(e){e[e.DENSE=0]="DENSE",e[e.SHARED_BATCH=1]="SHARED_BATCH"}(fh||(fh={})),function(e){e[e.RENDER=0]="RENDER",e[e.UPLOAD=1]="UPLOAD",e[e.PIXELS=2]="PIXELS",e[e.DOWNLOAD=3]="DOWNLOAD"}(mh||(mh={})),function(e){e[e.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",e[e.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",e[e.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",e[e.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",e[e.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16"}(gh||(gh={}));function wh(e){return!!(q().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||0===e||5.96e-8<Math.abs(e)&&Math.abs(e)<65504)}function Ih(e,t){return _h(e,(()=>e.getExtension(t)),'Extension "'+t+'" not supported on this browser.')}function Nh(e,t){const n=_h(e,(()=>e.createShader(e.FRAGMENT_SHADER)),"Unable to create fragment WebGLShader.");if(kh(e,(()=>e.shaderSource(n,t))),kh(e,(()=>e.compileShader(n))),!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw function(e,t){const n=$h.exec(t);if(null==n)return console.log(`Couldn't parse line number in error: ${t}`),void console.log(e);const a=+n[1],r=e.split("\n"),s=r.length.toString().length+2,o=r.map(((e,t)=>m((t+1).toString(),s)+e));let i=0;for(let e=0;e<o.length;e++)i=Math.max(o[e].length,i);const u=o.slice(0,a-1),l=o.slice(a-1,a),c=o.slice(a);console.log(u.join("\n")),console.log(t.split("\n")[0]),console.log(`%c ${m(l[0],i)}`,"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(c.join("\n"))}(t,e.getShaderInfoLog(n)),new Error("Failed to compile fragment shader.");return n}const $h=/ERROR: [0-9]+:([0-9]+):/g;function Th(e,t){if(kh(e,(()=>e.validateProgram(t))),!1===e.getProgramParameter(t,e.VALIDATE_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Shader program validation failed.")}function Ch(e,t,n,a,r,s,o){const i=e.getAttribLocation(t,n);return-1!==i&&(kh(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,a))),kh(e,(()=>e.vertexAttribPointer(i,r,e.FLOAT,!1,s,o))),kh(e,(()=>e.enableVertexAttribArray(i))),!0)}function Eh(e,t,n,a){kh(e,(()=>function(e,t,n){Fh(e,n),kh(e,(()=>e.activeTexture(e.TEXTURE0+n))),kh(e,(()=>e.bindTexture(e.TEXTURE_2D,t)))}(e,t,a))),kh(e,(()=>e.uniform1i(n,a)))}function Sh(e,t,n){kh(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,n))),kh(e,(()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,t,0)))}function Rh(e,t){kh(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,t))),kh(e,(()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,null,0)))}function Ah(e){const t=e.checkFramebufferStatus(e.FRAMEBUFFER);if(t!==e.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+function(e,t){switch(t){case e.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case e.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return`unknown error ${t}`}}(e,t))}function _h(e,t,n){const a=kh(e,(()=>t()));if(null==a)throw new Error(n);return a}function Fh(e,t){const n=e.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,a=t+e.TEXTURE0;if(a<e.TEXTURE0||a>n){throw new Error(`textureUnit must be in ${`[gl.TEXTURE0, gl.TEXTURE${n}]`}.`)}}function Oh(e,t=2){return d(e.slice(0,e.length-t))}function Dh(e){if(0===e.length)throw Error("Cannot get rows and columns of an empty shape array.");return[e.length>1?e[e.length-2]:1,e[e.length-1]]}function Mh(e){let t=[1,1,1];return 0===e.length||1===e.length&&1===e[0]||(t=[Oh(e),...Dh(e)]),t}function Lh(e){return e%2==0}function Ph(e,t){if(p(e=e.slice(-2),t=t.slice(-2)))return!0;if(!e.length||!t.length)return!0;if(0===e[0]||0===e[1]||0===t[0]||0===t[1])return!0;if(e.length!==t.length){const n=e.slice(-1)[0],a=t.slice(-1)[0];if(n===a)return!0;if(Lh(n)&&Lh(a)&&(1===e[0]||1===t[0]))return!0}return e[1]===t[1]&&Lh(e[0])&&Lh(t[0])}let Bh,Wh;function Vh(e,t){return null!=e.getExtension(t)}function zh(e){try{if(null!=hh(e))return!0}catch(e){return console.log("Error when getting WebGL context: ",e),!1}return!1}function Uh(e){if(0===e)return!1;const t=hh(e);if(1!==e){if(Vh(t,"EXT_color_buffer_float"))return Gh(t);const e="EXT_color_buffer_half_float";if(Vh(t,e)){const n=t.getExtension(e);return function(e,t){const n=vh(e,t),a=e.createTexture();e.bindTexture(e.TEXTURE_2D,a);const r=1,s=1;e.texImage2D(e.TEXTURE_2D,0,n.internalFormatHalfFloat,r,s,0,n.textureFormatFloat,n.textureTypeHalfFloat,null);const o=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,o),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,a,0);const i=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(a),e.deleteFramebuffer(o),i}(t,n)}return!1}if(!Vh(t,"OES_texture_float"))return!1;if(!Vh(t,"WEBGL_color_buffer_float"))return!1;return Gh(t)}function Gh(e){const t=vh(e),n=e.createTexture();e.bindTexture(e.TEXTURE_2D,n);e.texImage2D(e.TEXTURE_2D,0,t.internalFormatFloat,1,1,0,t.textureFormatFloat,t.textureTypeFloat,null);const a=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,a),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,n,0);const r=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(n),e.deleteFramebuffer(a),r}function Hh(e,t){Array.isArray(e)||(e=[e]),e.forEach((e=>{null!=e&&i("complex64"!==e.dtype,(()=>`${t} does not support complex64 tensors in the WebGL backend.`))}))}const jh=q();function qh(){let e,t,n,a,r,s,o,i,u,l;return 2===q().getNumber("WEBGL_VERSION")?(e="#version 300 es",t="in",n="out",a="in",r="texture",s="outputColor",o="out vec4 outputColor;",i="\n      bool isnan_custom(float val) {\n        return (val > 0.0 || val < 0.0) ? false : val != 0.0;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ",u="",l="\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "):(e="",t="attribute",n="varying",a="varying",r="texture2D",s="gl_FragColor",o="",i="\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    ",u="\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    ",l="\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "),{version:e,attribute:t,varyingVs:n,varyingFs:a,texture2D:r,output:s,defineOutput:o,defineSpecialNaN:i,defineSpecialInf:u,defineRound:l}}function Kh(e,t,n="index"){const a=O(t);return a.map(((t,r)=>`${`int ${e[r]} = ${n} / ${t}`}; ${r===a.length-1?`int ${e[r+1]} = ${n} - ${e[r]} * ${t}`:`index -= ${e[r]} * ${t}`};`)).join("")}function Xh(e){const t=O(e).map((e=>e.toString()));return`\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${t[0]} + coords.y * ${t[1]} + coords.z;\n  }\n`}jh.registerFlag("HAS_WEBGL",(()=>jh.getNumber("WEBGL_VERSION")>0)),jh.registerFlag("WEBGL_VERSION",(()=>zh(2)?2:zh(1)?1:0)),jh.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS",(()=>!1)),jh.registerFlag("WEBGL_BUFFER_SUPPORTED",(()=>2===jh.get("WEBGL_VERSION"))),jh.registerFlag("WEBGL_CPU_FORWARD",(()=>!0)),jh.registerFlag("WEBGL_FORCE_F16_TEXTURES",(()=>!1)),jh.registerFlag("WEBGL_PACK",(()=>jh.getBool("HAS_WEBGL"))),jh.registerFlag("WEBGL_PACK_NORMALIZATION",(()=>jh.getBool("WEBGL_PACK"))),jh.registerFlag("WEBGL_PACK_CLIP",(()=>jh.getBool("WEBGL_PACK"))),jh.registerFlag("WEBGL_PACK_DEPTHWISECONV",(()=>jh.getBool("WEBGL_PACK"))),jh.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",(()=>jh.getBool("WEBGL_PACK"))),jh.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",(()=>jh.getBool("WEBGL_PACK"))),jh.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",(()=>jh.getBool("WEBGL_PACK"))),jh.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",(()=>jh.getBool("WEBGL_PACK"))),jh.registerFlag("WEBGL_PACK_REDUCE",(()=>jh.getBool("WEBGL_PACK"))),jh.registerFlag("WEBGL_LAZILY_UNPACK",(()=>jh.getBool("WEBGL_PACK"))),jh.registerFlag("WEBGL_CONV_IM2COL",(()=>jh.getBool("WEBGL_PACK"))),jh.registerFlag("WEBGL_MAX_TEXTURE_SIZE",(()=>function(e){if(null==Bh){const t=hh(e);Bh=t.getParameter(t.MAX_TEXTURE_SIZE)}return Bh}(jh.getNumber("WEBGL_VERSION")))),jh.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",(()=>function(e){if(null==Wh){const t=hh(e);Wh=t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,Wh)}(jh.getNumber("WEBGL_VERSION")))),jh.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",(()=>{const e=jh.getNumber("WEBGL_VERSION");return 0===e?0:function(e){if(0===e)return 0;let t;const n=hh(e);return t=Vh(n,"EXT_disjoint_timer_query_webgl2")&&2===e?2:Vh(n,"EXT_disjoint_timer_query")?1:0,t}(e)})),jh.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",(()=>jh.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!Rr())),jh.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",(()=>function(e){if(0===e)return!1;const t=hh(e);if(1===e){if(!Vh(t,"OES_texture_float"))return!1}else if(!Vh(t,"EXT_color_buffer_float"))return!1;return Gh(t)}(jh.getNumber("WEBGL_VERSION")))),jh.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",(()=>!jh.getBool("WEBGL_FORCE_F16_TEXTURES")&&jh.getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))),jh.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",(()=>Uh(jh.getNumber("WEBGL_VERSION")))),jh.registerFlag("WEBGL_FENCE_API_ENABLED",(()=>{return 2===(e=jh.getNumber("WEBGL_VERSION"))&&null!=hh(e).fenceSync;var e})),jh.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",(()=>jh.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0)),jh.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD",(()=>-1),(e=>{if(e<0&&-1!==e)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${e}.`)})),jh.registerFlag("WEBGL_FLUSH_THRESHOLD",(()=>Rr()&&jh.getBool("IS_CHROME")?1:-1),(e=>{if(e<0&&-1!==e)throw new Error(`WEBGL_FLUSH_THRESHOLD must be -1 (indicating never manual flush) or at least 0, but got ${e}.`)})),jh.registerFlag("CPU_HANDOFF_SIZE_THRESHOLD",(()=>128));const Yh="\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n";class Qh{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=fh.DENSE;const t=bh(e),n=qh();this.outputShape=e,this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${Kh(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${t[0]}, ${t[1]}));\n        int index = 4 * (resTexRC.x * ${t[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${n.output} = result;\n      }\n    `}}class Zh{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=fh.DENSE;const t=bh(e),n=qh();this.outputShape=e,this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${Kh(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${t[0]}, ${t[1]}));\n        int index = 4 * (resTexRC.x * ${t[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${n.output} = result;\n      }\n    `}}class Jh{constructor(e){this.variableNames=["A"],this.outTexUsage=mh.DOWNLOAD;const t=qh();this.outputShape=e,this.userCode=`\n      ${Yh}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${t.output} = encode_float(x);\n      }\n    `}}class ef{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=mh.DOWNLOAD;const t=qh();this.outputShape=e,this.userCode=`\n      ${Yh}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${t.output} = encode_float(x);\n      }\n    `}}class tf{constructor(e,t,n=!1){this.variableNames=["A"];const a=qh(),[r,s]=t;this.outputShape=e;let o="result";n&&(o="floor(result * 255. + 0.5)"),this.userCode=`\n      ${Xh(e)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        int flatIndex = getFlatIndex(coords);\n        int offset = imod(flatIndex, 4);\n\n        flatIndex = idiv(flatIndex, 4, 1.);\n\n        int r = flatIndex / ${s};\n        int c = imod(flatIndex, ${s});\n        vec2 uv = (vec2(c, r) + halfCR) / vec2(${s}.0, ${r}.0);\n        vec4 values = ${a.texture2D}(A, uv);\n\n        float result;\n\n        if(offset == 0) {\n          result = values[0];\n        } else if(offset == 1) {\n          result = values[1];\n        } else if(offset == 2) {\n          result = values[2];\n        } else {\n          result = values[3];\n        }\n\n        ${a.output} = vec4(${o}, 0., 0., 0.);\n      }\n    `}}class nf{constructor(e,t,n=!1){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const a=qh(),[r,s]=t;this.outputShape=e;let o="",i="result";n&&(i="floor(result * 255. + 0.5)");for(let t=0;t<=1;t++)for(let n=0;n<=1;n++){const i=2*t+n;o+=`\n          localCoords = coords;\n          if(localCoords[2] + ${n} < ${e[2]}) {\n            localCoords[2] += ${n};\n            if(localCoords[1] + ${t} < ${e[1]}) {\n              localCoords[1] += ${t};\n\n              flatIndex = getFlatIndex(localCoords);\n              offset = imod(flatIndex, 4);\n\n              flatIndex = idiv(flatIndex, 4, 1.);\n\n              r = flatIndex / ${s};\n              c = imod(flatIndex, ${s});\n              uv = (vec2(c, r) + halfCR) / vec2(${s}.0, ${r}.0);\n              values = ${a.texture2D}(A, uv);\n\n              if(offset == 0) {\n                result[${i}] = values[0];\n              } else if(offset == 1) {\n                result[${i}] = values[1];\n              } else if(offset == 2) {\n                result[${i}] = values[2];\n              } else {\n                result[${i}] = values[3];\n              }\n            }\n          }\n        `}this.userCode=`\n      ${Xh(e)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        vec4 result = vec4(0.);\n        int flatIndex, r, c, offset;\n        ivec3 localCoords;\n        vec2 uv;\n        vec4 values;\n\n        ${o}\n\n        ${a.output} = ${i};\n      }\n    `}}function af(e){const t=qh();return function(e,t){const n=_h(e,(()=>e.createShader(e.VERTEX_SHADER)),"Unable to create vertex WebGLShader.");if(kh(e,(()=>e.shaderSource(n,t))),kh(e,(()=>e.compileShader(n))),!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw console.log(e.getShaderInfoLog(n)),new Error("Failed to compile vertex shader.");return n}(e,`${t.version}\n    precision highp float;\n    ${t.attribute} vec3 clipSpacePos;\n    ${t.attribute} vec2 uv;\n    ${t.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`)}function rf(e){return function(e,t){const n=_h(e,(()=>e.createBuffer()),"Unable to create WebGLBuffer");return kh(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,n))),kh(e,(()=>e.bufferData(e.ARRAY_BUFFER,t,e.STATIC_DRAW))),n}(e,new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]))}function sf(e){return function(e,t){const n=_h(e,(()=>e.createBuffer()),"Unable to create WebGLBuffer");return kh(e,(()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,n))),kh(e,(()=>e.bufferData(e.ELEMENT_ARRAY_BUFFER,t,e.STATIC_DRAW))),n}(e,new Uint16Array([0,1,2,2,1,3]))}function of(e,t,n,a,r,s){!function(e,t){const n=q().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(e<=0||t<=0)throw new Error(`Requested texture size [${e}x${t}] is invalid.`);if(e>n||t>n)throw new Error(`Requested texture size [${e}x${t}] greater than WebGL maximum on this browser / GPU [${n}x${n}].`)}(t,n);const o=function(e){return _h(e,(()=>e.createTexture()),"Unable to create WebGLTexture.")}(e),i=e.TEXTURE_2D;return kh(e,(()=>e.bindTexture(i,o))),kh(e,(()=>e.texParameteri(i,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE))),kh(e,(()=>e.texParameteri(i,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE))),kh(e,(()=>e.texParameteri(i,e.TEXTURE_MIN_FILTER,e.NEAREST))),kh(e,(()=>e.texParameteri(i,e.TEXTURE_MAG_FILTER,e.NEAREST))),kh(e,(()=>e.texImage2D(i,0,a,t,n,0,r,s,null))),kh(e,(()=>e.bindTexture(e.TEXTURE_2D,null))),o}function uf(e){return e.internalFormatFloat}function lf(e){return e.internalFormatHalfFloat}function cf(e){return e.downloadTextureFormat}function df(e){return e.internalFormatPackedFloat}function pf(e){return e.internalFormatPackedHalfFloat}function hf(e,t,n,a,r,s,o,i){const u=e,l=new Float32Array(function(e,t){const[n,a]=xh(e,t);return n*a*4}(s,o));return u.bindBuffer(u.PIXEL_PACK_BUFFER,t),u.getBufferSubData(u.PIXEL_PACK_BUFFER,0,l),u.bindBuffer(u.PIXEL_PACK_BUFFER,null),l}class ff{constructor(e){this.outputTexture=null,this.program=null,this.disposed=!1,this.vertexAttrsAreBound=!1,this.itemsToPoll=[];const t=q().getNumber("WEBGL_VERSION");null!=e?(this.gl=e,function(e,t){dh[e]=t}(t,e)):this.gl=hh(t);let n="WEBGL_color_buffer_float";const a="EXT_color_buffer_half_float";if(1===q().getNumber("WEBGL_VERSION")){const e="OES_texture_float",t="OES_texture_half_float";if(this.textureFloatExtension=Ih(this.gl,e),Vh(this.gl,t))this.textureHalfFloatExtension=Ih(this.gl,t);else if(q().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(n),Vh(this.gl,a))this.colorBufferHalfFloatExtension=Ih(this.gl,a);else if(q().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(n="EXT_color_buffer_float",Vh(this.gl,n))this.colorBufferFloatExtension=this.gl.getExtension(n);else{if(!Vh(this.gl,a))throw new Error("GL context does not support color renderable floats");this.colorBufferHalfFloatExtension=this.gl.getExtension(a)}this.vertexBuffer=rf(this.gl),this.indexBuffer=sf(this.gl),this.framebuffer=function(e){return _h(e,(()=>e.createFramebuffer()),"Unable to create WebGLFramebuffer.")}(this.gl),this.textureConfig=vh(this.gl,this.textureHalfFloatExtension)}get debug(){return q().getBool("DEBUG")}dispose(){if(this.disposed)return;null!=this.program&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),null!=this.outputTexture&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");const e=this.gl;kh(e,(()=>e.finish())),kh(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,null))),kh(e,(()=>e.deleteFramebuffer(this.framebuffer))),kh(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,null))),kh(e,(()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null))),kh(e,(()=>e.deleteBuffer(this.indexBuffer))),this.disposed=!0}createFloat32MatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,a){const[r,s]=yh(t,n);return of(e,r,s,uf(a),a.textureFormatFloat,e.FLOAT)}(this.gl,e,t,this.textureConfig)}createFloat16MatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,a){const[r,s]=yh(t,n);return of(e,r,s,lf(a),a.textureFormatFloat,a.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}createUnsignedBytesMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,a){const[r,s]=yh(t,n);return of(e,r,s,cf(a),e.RGBA,e.UNSIGNED_BYTE)}(this.gl,e,t,this.textureConfig)}uploadPixelDataToTexture(e,t){this.throwIfDisposed(),function(e,t,n){kh(e,(()=>e.bindTexture(e.TEXTURE_2D,t))),n.data instanceof Uint8Array?kh(e,(()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,n.width,n.height,0,e.RGBA,e.UNSIGNED_BYTE,n.data))):kh(e,(()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,n))),kh(e,(()=>e.bindTexture(e.TEXTURE_2D,null)))}(this.gl,e,t)}uploadDenseMatrixToTexture(e,t,n,a){this.throwIfDisposed(),function(e,t,n,a,r,s){let o,i,u;kh(e,(()=>e.bindTexture(e.TEXTURE_2D,t))),r instanceof Uint8Array?(o=new Uint8Array(n*a*4),i=e.UNSIGNED_BYTE,u=e.RGBA):(o=new Float32Array(n*a*4),i=e.FLOAT,u=s.internalFormatPackedFloat),o.set(r),kh(e,(()=>e.texImage2D(e.TEXTURE_2D,0,u,n,a,0,e.RGBA,i,o))),kh(e,(()=>e.bindTexture(e.TEXTURE_2D,null)))}(this.gl,e,t,n,a,this.textureConfig)}createFloat16PackedMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,a){const[r,s]=xh(t,n);return of(e,r,s,pf(a),e.RGBA,a.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}createPackedMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,a){const[r,s]=xh(t,n);return of(e,r,s,df(a),e.RGBA,e.FLOAT)}(this.gl,e,t,this.textureConfig)}deleteMatrixTexture(e){this.throwIfDisposed(),this.outputTexture===e&&(Rh(this.gl,this.framebuffer),this.outputTexture=null),kh(this.gl,(()=>this.gl.deleteTexture(e)))}downloadByteEncodedFloatMatrixFromOutputTexture(e,t,n){return this.downloadMatrixDriver(e,(()=>function(e,t,n,a){const[r,s]=yh(t,n),o=new Uint8Array(t*n*4);return kh(e,(()=>e.readPixels(0,0,r,s,a.downloadTextureFormat,e.UNSIGNED_BYTE,o))),new Float32Array(o.buffer)}(this.gl,t,n,this.textureConfig)))}downloadPackedMatrixFromBuffer(e,t,n,a,r,s){return hf(this.gl,e,0,0,0,r,s,this.textureConfig)}downloadFloat32MatrixFromBuffer(e,t){return function(e,t,n){const a=e,r=new Float32Array(n);return a.bindBuffer(a.PIXEL_PACK_BUFFER,t),a.getBufferSubData(a.PIXEL_PACK_BUFFER,0,r),a.bindBuffer(a.PIXEL_PACK_BUFFER,null),r}(this.gl,e,t)}createBufferFromTexture(e,t,n){this.bindTextureToFrameBuffer(e);const a=function(e,t,n,a){const r=e.createBuffer();kh(e,(()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,r)));const s=16*t*n;return kh(e,(()=>e.bufferData(e.PIXEL_PACK_BUFFER,s,e.STREAM_READ))),kh(e,(()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,0))),kh(e,(()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,null))),r}(this.gl,t,n,this.textureConfig);return this.unbindTextureToFrameBuffer(),a}createAndWaitForFence(){const e=this.createFence(this.gl);return this.pollFence(e)}createFence(e){let t,n;if(q().getBool("WEBGL_FENCE_API_ENABLED")){const a=e,r=a.fenceSync(a.SYNC_GPU_COMMANDS_COMPLETE,0);e.flush(),n=()=>{const e=a.clientWaitSync(r,0,0);return e===a.ALREADY_SIGNALED||e===a.CONDITION_SATISFIED},t=r}else q().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(t=this.beginQuery(),this.endQuery(),n=()=>this.isQueryAvailable(t,q().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):n=()=>!0;return{query:t,isFencePassed:n}}downloadMatrixFromPackedTexture(e,t,n){return this.downloadMatrixDriver(e,(()=>function(e,t,n){const a=new Float32Array(t*n*4);return kh(e,(()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,a))),a}(this.gl,t,n)))}createProgram(e){this.throwIfDisposed();const t=this.gl,n=Nh(t,e);null==this.vertexShader&&(this.vertexShader=af(t));const a=function(e){return _h(e,(()=>e.createProgram()),"Unable to create WebGLProgram.")}(t);return kh(t,(()=>t.attachShader(a,this.vertexShader))),kh(t,(()=>t.attachShader(a,n))),function(e,t){if(kh(e,(()=>e.linkProgram(t))),!1===e.getProgramParameter(t,e.LINK_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Failed to link vertex and fragment shaders.")}(t,a),this.debug&&Th(t,a),this.vertexAttrsAreBound||(this.setProgram(a),this.vertexAttrsAreBound=function(e,t,n){return kh(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,n))),Ch(e,t,"clipSpacePos",n,3,20,0)&&Ch(e,t,"uv",n,2,20,12)}(t,this.program,this.vertexBuffer)),a}deleteProgram(e){this.throwIfDisposed(),e===this.program&&(this.program=null),null!=e&&kh(this.gl,(()=>this.gl.deleteProgram(e)))}setProgram(e){this.throwIfDisposed(),this.program=e,null!=this.program&&this.debug&&Th(this.gl,this.program),kh(this.gl,(()=>this.gl.useProgram(e)))}getUniformLocation(e,t,n=!0){return this.throwIfDisposed(),n?function(e,t,n){return _h(e,(()=>e.getUniformLocation(t,n)),'uniform "'+n+'" not present in program.')}(this.gl,e,t):function(e,t,n){return e.getUniformLocation(t,n)}(this.gl,e,t)}getAttributeLocation(e,t){return this.throwIfDisposed(),kh(this.gl,(()=>this.gl.getAttribLocation(e,t)))}getUniformLocationNoThrow(e,t){return this.throwIfDisposed(),this.gl.getUniformLocation(e,t)}setInputMatrixTexture(e,t,n){this.throwIfDisposed(),this.throwIfNoProgram(),Eh(this.gl,e,t,n)}setOutputMatrixTexture(e,t,n){this.setOutputMatrixTextureDriver(e,n,t)}setOutputPackedMatrixTexture(e,t,n){this.throwIfDisposed();const[a,r]=xh(t,n);this.setOutputMatrixTextureDriver(e,a,r)}setOutputMatrixWriteRegion(e,t,n,a){this.setOutputMatrixWriteRegionDriver(n,e,a,t)}setOutputPackedMatrixWriteRegion(e,t,n,a){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){null!=this.program&&Th(this.gl,this.program),Ah(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();const e=this.gl;this.debug&&this.debugValidate(),kh(e,(()=>e.drawElements(e.TRIANGLES,6,e.UNSIGNED_SHORT,0)))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),kh(this.gl,(()=>this.gl.finish()))}getQueryTimerExtension(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=Ih(this.gl,2===q().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(2===q().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2(),n=e.createQuery();return e.beginQuery(t.TIME_ELAPSED_EXT,n),n}const e=this.getQueryTimerExtensionWebGL1(),t=e.createQueryEXT();return e.beginQueryEXT(e.TIME_ELAPSED_EXT,t),t}endQuery(){if(2===q().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2();return void e.endQuery(t.TIME_ELAPSED_EXT)}const e=this.getQueryTimerExtensionWebGL1();e.endQueryEXT(e.TIME_ELAPSED_EXT)}async waitForQueryAndGetTime(e){return await g((()=>this.disposed||this.isQueryAvailable(e,q().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")))),this.getQueryTime(e,q().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}getQueryTime(e,t){if(0===t)return null;if(2===t){const t=this.gl;return t.getQueryParameter(e,t.QUERY_RESULT)/1e6}{const t=this.getQueryTimerExtensionWebGL1();return t.getQueryObjectEXT(e,t.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(e,t){if(0===t)return!0;if(2===t){const t=this.gl,n=this.getQueryTimerExtensionWebGL2(),a=t.getQueryParameter(e,t.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(n.GPU_DISJOINT_EXT)),a&&!this.disjoint}{const t=this.getQueryTimerExtensionWebGL1(),n=t.getQueryObjectEXT(e,t.QUERY_RESULT_AVAILABLE_EXT);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(t.GPU_DISJOINT_EXT)),n&&!this.disjoint}}pollFence(e){return new Promise((t=>{this.addItemToPoll((()=>e.isFencePassed()),(()=>t()))}))}pollItems(){const e=function(e){let t=0;for(;t<e.length;++t){if(!e[t]())break}return t-1}(this.itemsToPoll.map((e=>e.isDoneFn)));for(let t=0;t<=e;++t){const{resolveFn:e}=this.itemsToPoll[t];e()}this.itemsToPoll=this.itemsToPoll.slice(e+1)}addItemToPoll(e,t){this.itemsToPoll.push({isDoneFn:e,resolveFn:t}),this.itemsToPoll.length>1||g((()=>(this.pollItems(),0===this.itemsToPoll.length)))}bindTextureToFrameBuffer(e){this.throwIfDisposed(),Sh(this.gl,e,this.framebuffer),this.debug&&Ah(this.gl)}unbindTextureToFrameBuffer(){null!=this.outputTexture?(Sh(this.gl,this.outputTexture,this.framebuffer),this.debug&&Ah(this.gl)):Rh(this.gl,this.framebuffer)}downloadMatrixDriver(e,t){this.bindTextureToFrameBuffer(e);const n=t();return this.unbindTextureToFrameBuffer(),n}setOutputMatrixTextureDriver(e,t,n){this.throwIfDisposed();const a=this.gl;Sh(a,e,this.framebuffer),this.debug&&Ah(a),this.outputTexture=e,kh(a,(()=>a.viewport(0,0,t,n))),kh(a,(()=>a.scissor(0,0,t,n)))}setOutputMatrixWriteRegionDriver(e,t,n,a){this.throwIfDisposed(),kh(this.gl,(()=>this.gl.scissor(e,t,n,a)))}throwIfDisposed(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(null==this.program)throw new Error("No GPU program is currently set.")}}const{getBroadcastDims:mf}=uh;function gf(e,t,n,a){const r=[];e.forEach((e=>{const t=d(e.shapeInfo.logicalShape);e.shapeInfo.isUniform?r.push(`uniform float ${e.name}${t>1?`[${t}]`:""};`):(r.push(`uniform sampler2D ${e.name};`),r.push(`uniform int offset${e.name};`))}));const s=r.join("\n"),o=e.map((e=>function(e,t,n=!1){let a="";a+=n?bf(e):yf(e);const r=e.shapeInfo.logicalShape,s=t.logicalShape;r.length<=s.length&&(a+=n?function(e,t){const n=e.name,a=n.charAt(0).toUpperCase()+n.slice(1),r="get"+a+"AtOutCoords",s=e.shapeInfo.logicalShape.length,o=t.logicalShape.length,i=mf(e.shapeInfo.logicalShape,t.logicalShape),u=Tf(o),l=o-s;let c;const p=["x","y","z","w","u","v"];c=0===s?"":o<2&&i.length>=1?"coords = 0;":i.map((e=>`coords.${p[e+l]} = 0;`)).join("\n");let h="";h=o<2&&s>0?"coords":e.shapeInfo.logicalShape.map(((e,t)=>`coords.${p[t+l]}`)).join(", ");let f="return outputValue;";const m=1===d(e.shapeInfo.logicalShape),g=1===d(t.logicalShape);if(1!==s||m||g){if(m&&!g)f=1===o?"\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      ":"\n        return vec4(outputValue.x);\n      ";else if(i.length){const e=s-2,t=s-1;i.indexOf(e)>-1&&i.indexOf(t)>-1?f="return vec4(outputValue.x);":i.indexOf(e)>-1?f="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":i.indexOf(t)>-1&&(f="return vec4(outputValue.xx, outputValue.zz);")}}else f="\n      return vec4(outputValue.xy, outputValue.xy);\n    ";return`\n    vec4 ${r}() {\n      ${u} coords = getOutputCoords();\n      ${c}\n      vec4 outputValue = get${a}(${h});\n      ${f}\n    }\n  `}(e,t):function(e,t){const n=e.name,a=n.charAt(0).toUpperCase()+n.slice(1),r="get"+a+"AtOutCoords",s=t.texShape,o=e.shapeInfo.texShape,i=e.shapeInfo.logicalShape.length,u=t.logicalShape.length;if(!e.shapeInfo.isUniform&&i===u&&null==e.shapeInfo.flatOffset&&p(o,s))return`\n      float ${r}() {\n        return sampleTexture(${n}, resultUV);\n      }\n    `;const l=Tf(u),c=mf(e.shapeInfo.logicalShape,t.logicalShape),d=u-i;let h;const f=["x","y","z","w","u","v"];h=0===i?"":u<2&&c.length>=1?"coords = 0;":c.map((e=>`coords.${f[e+d]} = 0;`)).join("\n");let m="";m=u<2&&i>0?"coords":e.shapeInfo.logicalShape.map(((e,t)=>`coords.${f[t+d]}`)).join(", ");return`\n    float ${r}() {\n      ${l} coords = getOutputCoords();\n      ${h}\n      return get${a}(${m});\n    }\n  `}(e,t));return a}(e,t,a))).join("\n"),i=t.texShape,u=qh(),l=function(e){return`\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${e.texture2D}(textureSampler, uv).r;\n    }\n  `}(u);let c,h,f=function(e){return`${e.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${e.varyingFs} vec2 resultUV;\n    ${e.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${e.defineSpecialNaN}\n    ${e.defineSpecialInf}\n    ${e.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${xf}\n    ${vf}\n    ${kf}\n  `}(u);t.isPacked?(c=function(e,t){switch(e.length){case 0:return If();case 1:return function(e,t){const n=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if(1===n[0])return`\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${n[1]}.0);\n      }\n    `;if(1===n[1])return`\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${n[0]}.0);\n      }\n    `;return`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      return 2 * (resTexRC.x * ${n[1]} + resTexRC.y);\n    }\n  `}(0,t);case 2:return function(e,t){const n=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if(p(e,t))return`\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${n[0]}, ${n[1]}));\n      }\n    `;const a=Math.ceil(e[1]/2);return`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n      int r = 2 * (index / ${a});\n      int c = imod(index, ${a}) * 2;\n\n      return ivec2(r, c);\n    }\n  `}(e,t);case 3:return function(e,t){const n=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],a=Math.ceil(e[2]/2),r=a*Math.ceil(e[1]/2);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n\n      int b = index / ${r};\n      index -= b * ${r};\n\n      int r = 2 * (index / ${a});\n      int c = imod(index, ${a}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `}(e,t);default:return function(e,t){const n=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],a=Math.ceil(e[e.length-1]/2),r=a*Math.ceil(e[e.length-2]/2);let s=r,o="",i="b, r, c";for(let t=2;t<e.length-1;t++)s*=e[e.length-t-1],o=`\n      int b${t} = index / ${s};\n      index -= b${t} * ${s};\n    `+o,i=`b${t}, `+i;return`\n    ivec${e.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n\n      ${o}\n\n      int b = index / ${r};\n      index -= b * ${r};\n\n      int r = 2 * (index / ${a});\n      int c = imod(index, ${a}) * 2;\n\n      return ivec${e.length}(${i});\n    }\n  `}(e,t)}}(t.logicalShape,i),h=function(e){return`\n    void setOutput(vec4 val) {\n      ${e.output} = val;\n    }\n  `}(u)):(c=function(e,t){switch(e.length){case 0:return If();case 1:return function(e,t){if(1===t[0])return`\n      int getOutputCoords() {\n        return int(resultUV.x * ${t[1]}.0);\n      }\n    `;if(1===t[1])return`\n      int getOutputCoords() {\n        return int(resultUV.y * ${t[0]}.0);\n      }\n    `;return`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      return resTexRC.x * ${t[1]} + resTexRC.y;\n    }\n  `}(0,t);case 2:return function(e,t){if(p(e,t))return`\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${t[0]}, ${t[1]}));\n      }\n    `;if(1===e[1])return`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;if(1===e[0])return`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;return`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      int r = index / ${e[1]};\n      int c = index - r * ${e[1]};\n      return ivec2(r, c);\n    }\n  `}(e,t);case 3:return function(e,t){const n=Kh(["r","c","d"],e);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${n}\n      return ivec3(r, c, d);\n    }\n  `}(e,t);case 4:return function(e,t){const n=Kh(["r","c","d","d2"],e);return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${n}\n      return ivec4(r, c, d, d2);\n    }\n  `}(e,t);case 5:return function(e,t){const n=Kh(["r","c","d","d2","d3"],e);return`\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${t[0]},\n                             ${t[1]}));\n\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `}(e,t);case 6:return function(e,t){const n=Kh(["r","c","d","d2","d3","d4"],e);return`\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `}(e,t);default:throw new Error(`${e.length}-D output sampling is not yet supported`)}}(t.logicalShape,i),h=function(e){return`\n    void setOutput(float val) {\n      ${e.output} = vec4(val, 0, 0, 0);\n    }\n  `}(u)),a&&(f+=wf);return[f,l,h,s,c,o,n].join("\n")}function yf(e){const t=e.shapeInfo.logicalShape;switch(t.length){case 0:return function(e){const t=e.name,n="get"+t.charAt(0).toUpperCase()+t.slice(1);if(e.shapeInfo.isUniform)return`float ${n}() {return ${t};}`;const[a,r]=e.shapeInfo.texShape;if(1===a&&1===r)return`\n      float ${n}() {\n        return sampleTexture(${t}, halfCR);\n      }\n    `;const[s,o]=e.shapeInfo.texShape,i=Nf(t);return`\n    float ${n}() {\n      vec2 uv = uvFromFlat(${s}, ${o}, ${i});\n      return sampleTexture(${t}, uv);\n    }\n  `}(e);case 1:return function(e){const t=e.name,n="get"+t.charAt(0).toUpperCase()+t.slice(1);if(e.shapeInfo.isUniform)return`\n      float ${n}(int index) {\n        ${$f(e)}\n      }\n    `;const a=e.shapeInfo.texShape,r=a[0],s=a[1];if(1===s&&1===r)return`\n      float ${n}(int index) {\n        return sampleTexture(${t}, halfCR);\n      }\n    `;const o=Nf(t);if(1===s)return`\n      float ${n}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${o}) + 0.5) / ${r}.0);\n        return sampleTexture(${t}, uv);\n      }\n    `;if(1===r)return`\n      float ${n}(int index) {\n        vec2 uv = vec2((float(index + ${o}) + 0.5) / ${s}.0, 0.5);\n        return sampleTexture(${t}, uv);\n      }\n    `;return`\n    float ${n}(int index) {\n      vec2 uv = uvFromFlat(${r}, ${s}, index + ${o});\n      return sampleTexture(${t}, uv);\n    }\n  `}(e);case 2:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,a="get"+n.charAt(0).toUpperCase()+n.slice(1),r=e.shapeInfo.texShape;if(null!=r&&p(t,r)){const e=r[0];return`\n    float ${a}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${r[1]}.0, ${e}.0);\n      return sampleTexture(${n}, uv);\n    }\n  `}const{newShape:s,keptDims:o}=x(t),i=s;if(i.length<t.length){const t=["row","col"];return`\n      ${yf(Cf(e,i))}\n      float ${a}(int row, int col) {\n        return ${a}(${Ef(t,o)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${a}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${t[1]}, 1)));\n        ${$f(e)}\n      }\n    `;const u=r[0],l=r[1],c=Nf(n);if(1===l)return`\n    float ${a}(int row, int col) {\n      float index = dot(vec3(row, col, ${c}), vec3(${t[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${u}.0);\n      return sampleTexture(${n}, uv);\n    }\n  `;if(1===u)return`\n    float ${a}(int row, int col) {\n      float index = dot(vec3(row, col, ${c}), vec3(${t[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${l}.0, 0.5);\n      return sampleTexture(${n}, uv);\n    }\n  `;return`\n  float ${a}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${t[1]} + col + ${c};\n    vec2 uv = uvFromFlat(${u}, ${l}, index);\n    return sampleTexture(${n}, uv);\n  }\n`}(e);case 3:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,a="get"+n.charAt(0).toUpperCase()+n.slice(1),r=t[1]*t[2],s=t[2],{newShape:o,keptDims:i}=x(t),u=o;if(u.length<t.length){const t=["row","col","depth"];return`\n        ${yf(Cf(e,u))}\n        float ${a}(int row, int col, int depth) {\n          return ${a}(${Ef(t,i)});\n        }\n      `}if(e.shapeInfo.isUniform)return`\n      float ${a}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${r}, ${s}, 1)));\n        ${$f(e)}\n      }\n    `;const l=e.shapeInfo.texShape,c=l[0],d=l[1],p=e.shapeInfo.flatOffset;if(d===r&&null==p)return`\n        float ${a}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${s}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${d}.0, ${c}.0);\n          return sampleTexture(${n}, uv);\n        }\n      `;if(d===s&&null==p)return`\n    float ${a}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${t[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${d}.0, ${c}.0);\n      return sampleTexture(${n}, uv);\n    }\n  `;const h=Nf(n);return`\n      float ${a}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${r} + col * ${s} + depth + ${h};\n        vec2 uv = uvFromFlat(${c}, ${d}, index);\n        return sampleTexture(${n}, uv);\n      }\n  `}(e);case 4:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,a="get"+n.charAt(0).toUpperCase()+n.slice(1),r=t[3],s=t[2]*r,o=t[1]*s,{newShape:i,keptDims:u}=x(t);if(i.length<t.length){const t=["row","col","depth","depth2"];return`\n      ${yf(Cf(e,i))}\n      float ${a}(int row, int col, int depth, int depth2) {\n        return ${a}(${Ef(t,u)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${a}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${o}, ${s}, ${r}, 1)));\n        ${$f(e)}\n      }\n    `;const l=e.shapeInfo.flatOffset,c=e.shapeInfo.texShape,d=c[0],p=c[1];if(p===o&&null==l)return`\n      float ${a}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${s}, ${r}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${p}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(p===r&&null==l)return`\n      float ${a}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${t[1]*t[2]}, ${t[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${p}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;const h=Nf(n);return`\n    float ${a}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${o} + col * ${s} +\n          depth * ${r} + depth2;\n      vec2 uv = uvFromFlat(${d}, ${p}, index + ${h});\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);case 5:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,a="get"+n.charAt(0).toUpperCase()+n.slice(1),r=t[4],s=t[3]*r,o=t[2]*s,i=t[1]*o,{newShape:u,keptDims:l}=x(t);if(u.length<t.length){const t=["row","col","depth","depth2","depth3"];return`\n      ${yf(Cf(e,u))}\n      float ${a}(int row, int col, int depth, int depth2, int depth3) {\n        return ${a}(${Ef(t,l)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${a}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${i}, ${o}, ${s}, ${r})) +\n          depth3;\n        ${$f(e)}\n      }\n    `;const c=e.shapeInfo.flatOffset,d=e.shapeInfo.texShape,p=d[0],h=d[1];if(h===i&&null==c)return`\n      float ${a}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${o}, ${s}, ${r}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${h}.0, ${p}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(h===r&&null==c)return`\n      float ${a}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]},\n               ${t[2]*t[3]}, ${t[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${h}.0, ${p}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;const f=Nf(n);return`\n    float ${a}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${i} + col * ${o} + depth * ${s} +\n          depth2 * ${r} + depth3 + ${f};\n      vec2 uv = uvFromFlat(${p}, ${h}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);case 6:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,a="get"+n.charAt(0).toUpperCase()+n.slice(1),{newShape:r,keptDims:s}=x(t);if(r.length<t.length){const t=["row","col","depth","depth2","depth3","depth4"];return`\n      ${yf(Cf(e,r))}\n      float ${a}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${a}(${Ef(t,s)});\n      }\n    `}const o=t[5],i=t[4]*o,u=t[3]*i,l=t[2]*u,c=t[1]*l;if(e.shapeInfo.isUniform)return`\n      float ${a}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${c}, ${l}, ${u}, ${i})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${o}, 1)));\n        ${$f(e)}\n      }\n    `;const d=e.shapeInfo.flatOffset,p=e.shapeInfo.texShape,h=p[0],f=p[1];if(f===c&&null==d)return`\n      float ${a}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${l}, ${u}, ${i}, ${o})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${f}.0, ${h}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(f===o&&null==d)return`\n      float ${a}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]*t[4]},\n               ${t[2]*t[3]*t[4]},\n               ${t[3]*t[4]},\n               ${t[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${f}.0, ${h}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;const m=Nf(n);return`\n    float ${a}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${c} + col * ${l} + depth * ${u} +\n          depth2 * ${i} + depth3 * ${o} + depth4 + ${m};\n      vec2 uv = uvFromFlat(${h}, ${f}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);default:throw new Error(`${t.length}-D input sampling is not yet supported`)}}function bf(e){switch(e.shapeInfo.logicalShape.length){case 0:return function(e){const t=e.name,n="get"+t.charAt(0).toUpperCase()+t.slice(1),a=qh();return`\n    vec4 ${n}() {\n      return ${a.texture2D}(${t}, halfCR);\n    }\n  `}(e);case 1:return function(e){const t=e.name,n="get"+t.charAt(0).toUpperCase()+t.slice(1),a=e.shapeInfo.texShape,r=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)],s=qh();return`\n    vec4 ${n}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${r[0]}, ${r[1]}, index);\n      return ${s.texture2D}(${t}, uv);\n    }\n  `}(e);case 2:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,a="get"+n.charAt(0).toUpperCase()+n.slice(1),r=e.shapeInfo.texShape,s=r[0],o=r[1],i=qh();if(null!=r&&p(t,r))return`\n      vec4 ${a}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${o}.0, ${s}.0);\n\n        return ${i.texture2D}(${n}, uv);\n      }\n    `;const u=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)],l=Math.ceil(t[1]/2);return`\n    vec4 ${a}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${l}, ${u[0]}, ${u[1]}, row, col);\n      return ${i.texture2D}(${n}, uv);\n    }\n  `}(e);case 3:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,a="get"+n.charAt(0).toUpperCase()+n.slice(1),r=e.shapeInfo.texShape,s=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)];if(1===t[0]){const n=[1,2],r=["b","row","col"];return`\n        ${bf(Cf(e,t.slice(1)))}\n        vec4 ${a}(int b, int row, int col) {\n          return ${a}(${Ef(r,n)});\n        }\n      `}const o=s[0],i=s[1],u=Math.ceil(t[2]/2),l=u*Math.ceil(t[1]/2),c=qh();return`\n    vec4 ${a}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${o}, ${i}, ${l}, ${u}, b, row, col);\n      return ${c.texture2D}(${n}, uv);\n    }\n  `}(e);default:return function(e){const t=e.shapeInfo.logicalShape,n=t.length,a=e.name,r="get"+a.charAt(0).toUpperCase()+a.slice(1),s=e.shapeInfo.texShape,o=[Math.ceil(s[0]/2),Math.ceil(s[1]/2)],i=o[0],u=o[1],l=Math.ceil(t[n-1]/2);let c=l*Math.ceil(t[n-2]/2),d="int b, int row, int col",p=`b * ${c} + (row / 2) * ${l} + (col / 2)`;for(let e=2;e<n-1;e++)d=`int b${e}, `+d,c*=t[n-e-1],p=`b${e} * ${c} + `+p;const h=qh();return`\n    vec4 ${r}(${d}) {\n      int index = ${p};\n      int texR = index / ${u};\n      int texC = index - texR * ${u};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${u}, ${i});\n      return ${h.texture2D}(${a}, uv);\n    }\n  `}(e)}}const xf="\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",vf="\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",kf="\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",wf="\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";function If(){return"\n    int getOutputCoords() {\n      return 0;\n    }\n  "}function Nf(e){return`offset${e}`}function $f(e){const t=e.name,n=d(e.shapeInfo.logicalShape);return n<2?`return ${t};`:`\n    for (int i = 0; i < ${n}; i++) {\n      if (i == index) {\n        return ${t}[i];\n      }\n    }\n  `}function Tf(e){if(e<=1)return"int";if(2===e)return"ivec2";if(3===e)return"ivec3";if(4===e)return"ivec4";if(5===e)return"ivec5";if(6===e)return"ivec6";throw Error(`GPU for rank ${e} is not yet supported`)}function Cf(e,t){const n=JSON.parse(JSON.stringify(e));return n.shapeInfo.logicalShape=t,n}function Ef(e,t){return t.map((t=>e[t])).join(", ")}function Sf(e,t){if(e.length!==t.length)throw Error(`Binary was compiled with ${e.length} inputs, but was executed with ${t.length} inputs`);e.forEach(((e,n)=>{const a=e.logicalShape,r=t[n],s=r.shape;if(!p(a,s))throw Error(`Binary was compiled with different shapes than the current args. Shapes ${a} and ${s} must match`);if(e.isUniform&&r.isUniform)return;const o=e.texShape,i=r.isUniform?null:r.texData.texShape;if(!p(o,i))throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${o} and ${i} must match`)}))}function Rf(e,t){Array.isArray(e)||(e=[e]),e.forEach((e=>{null!=e&&i("complex64"!==e.dtype,(()=>`${t} does not support complex64 tensors in the CPU backend.`))}))}function Af(e){const t=new Float32Array(e.length);for(let n=0;n<e.length;++n)t[n]=Math.abs(e[n]);return t}const _f={kernelName:Z,backendName:"cpu",kernelFunc:e=>{const{x:t}=e.inputs,n=e.backend;Rf(t,"abs");let a=new Float32Array(d(t.shape));return a=Af(n.data.get(t.dataId).values),n.makeOutput(a,t.shape,"float32")}};function Ff(e){return(t,n,a,r,s)=>{const o=su(t,n),i=o.length,u=O(o),l=v(s,d(o)),c=t.length,p=n.length,h=O(t),f=O(n),m=au(t,o),g=au(n,o);if(m.length+g.length===0)for(let t=0;t<l.length;++t)l[t]=e(a[t%a.length],r[t%r.length]);else for(let t=0;t<l.length;++t){const n=z(t,i,u),s=n.slice(-c);m.forEach((e=>s[e]=0));const o=V(s,c,h),d=n.slice(-p);g.forEach((e=>d[e]=0));const y=V(d,p,f);l[t]=e(a[o],r[y])}return[l,o]}}function Of(e){const{inputs:t,backend:n}=e,{real:a,imag:r}=t,s=n.data.get(a.dataId).values,o=n.data.get(r.dataId).values,i=n.makeTensorInfo(a.shape,"complex64");return n.data.get(i.dataId).complexTensorInfos={real:n.makeTensorInfo(a.shape,"float32",s),imag:n.makeTensorInfo(r.shape,"float32",o)},i}const Df={kernelName:we,backendName:"cpu",kernelFunc:Of};function Mf(e,t,n="float32"){if("complex64"===n){return Of({inputs:{real:Mf(e,t,"float32"),imag:Mf(e,t,"float32")},backend:e})}const a=P(d(t),n);return e.makeTensorInfo(t,n,a)}function Lf(e){const{inputs:t,backend:n}=e,{x:a}=t;return n.incRef(a.dataId),{dataId:a.dataId,shape:a.shape,dtype:a.dtype}}const Pf={kernelName:lt,backendName:"cpu",kernelFunc:Lf};function Bf(e){const{inputs:t,backend:n}=e,{input:a}=t,r=n.data.get(a.dataId).complexTensorInfos.real,s=n.data.get(r.dataId).values;return n.makeTensorInfo(r.shape,r.dtype,s)}const Wf={kernelName:Jt,backendName:"cpu",kernelFunc:Bf};function Vf(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{dtype:s}=a;if("complex64"===s){if("complex64"===r.dtype)return Lf({inputs:{x:r},backend:n});const e=Mf(n,r.shape,r.dtype),t=Vf({inputs:{x:r},backend:n,attrs:{dtype:"float32"}}),a=Of({inputs:{real:t,imag:e},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),a}if("complex64"===r.dtype){const e=Bf({inputs:{input:r},backend:n}),t=Vf({inputs:{x:e},backend:n,attrs:{dtype:s}});return n.disposeIntermediateTensorInfo(e),t}if(!N(r.dtype,s)){const e=Lf({inputs:{x:r},backend:n});return{dataId:e.dataId,shape:e.shape,dtype:s}}if("int32"===s){const e=n.data.get(r.dataId).values,t=Int32Array.from(e);return n.makeTensorInfo(r.shape,"int32",t)}if("bool"===s){const e=n.data.get(r.dataId).values,t=ja([0],r.dtype),[a,s]=Ff(((e,t)=>e!==t?1:0))(r.shape,[],e,t,"bool");return n.makeTensorInfo(s,"bool",a)}throw new Error(`Error in Cast: failed to cast ${r.dtype} to ${s}`)}const zf={kernelName:xe,backendName:"cpu",kernelFunc:Vf};function Uf(e,t,n,a){return null==n?({inputs:n,backend:r})=>{const{a:s,b:o}=n,i=r;Rf([s,o],e);const u=i.data.get(s.dataId).values,l=i.data.get(o.dataId).values,c="string"===s.dtype?oh(u):u,d="string"===s.dtype?oh(l):l,p=a||s.dtype,[h,f]=t(s.shape,o.shape,c,d,p);return i.makeTensorInfo(f,p,h)}:({inputs:e,backend:r})=>{const{a:s,b:o}=e,i=r;if("complex64"===s.dtype||"complex64"===o.dtype){const e=Vf({inputs:{x:s},backend:i,attrs:{dtype:"complex64"}}),t=i.data.get(e.dataId),a=t.complexTensorInfos.real,r=t.complexTensorInfos.imag,u=i.data.get(a.dataId).values,l=i.data.get(r.dataId).values,c=Vf({inputs:{x:o},backend:i,attrs:{dtype:"complex64"}}),d=i.data.get(c.dataId),p=d.complexTensorInfos.real,h=d.complexTensorInfos.imag,f=i.data.get(p.dataId).values,m=i.data.get(h.dataId).values,[g,y,b]=n(s.shape,o.shape,u,l,f,m),x=i.makeTensorInfo(b,"float32",g),v=i.makeTensorInfo(b,"float32",y),k=Of({inputs:{real:x,imag:v},backend:i});return i.disposeIntermediateTensorInfo(e),i.disposeIntermediateTensorInfo(c),i.disposeIntermediateTensorInfo(x),i.disposeIntermediateTensorInfo(v),k}{const e=i.data.get(s.dataId).values,n=i.data.get(o.dataId).values,r=a||s.dtype,[u,l]=t(s.shape,o.shape,e,n,r);return i.makeTensorInfo(l,r,u)}}}function Gf(e){return(t,n,a,r,s,o)=>{const i=su(t,n),u=d(i),l=i.length,c=O(i),p=v("float32",u),h=v("float32",u),f=au(t,i),m=au(n,i),g=Bp(a,r),y=Bp(s,o),b=t.length,x=O(t),k=n.length,w=O(n);if(f.length+m.length===0)for(let t=0;t<p.length;t++){const n=t%g.length,a=t%y.length,r=e(g[2*n],g[2*n+1],y[2*a],y[2*a+1]);p[t]=r.real,h[t]=r.imag}else for(let t=0;t<p.length;t++){const n=z(t,l,c),a=n.slice(-b);f.forEach((e=>a[e]=0));const r=V(a,b,x),s=n.slice(-k);m.forEach((e=>s[e]=0));const o=V(s,k,w),i=e(g[2*r],g[2*r+1],y[2*o],y[2*o+1]);p[t]=i.real,h[t]=i.imag}return[p,h,i]}}const Hf=Ff(((e,t)=>e+t)),jf=Gf(((e,t,n,a)=>({real:e+n,imag:t+a}))),qf=Uf(te,Hf,jf),Kf={kernelName:te,backendName:"cpu",kernelFunc:qf};function Xf(e,t,n,a,r){const s=d(a),o=P(r,n);for(let n=0;n<e.length;n++){const a=e[n];if(a<0)throw new Error("Input x must be non-negative!");a>=r||(o[a]+=s>0?t[n]:1)}return o}function Yf(e,t,n,a=!1){const r=e.shape[0],s=e.shape[1],o=Rs([r,n],t.dtype);for(let i=0;i<r;i++)for(let r=0;r<s;r++){const s=e.get(i,r);if(s<0)throw new Error("Input x must be non-negative!");s>=n||(a?o.set(1,i,s):t.size>0?o.set(o.get(i,s)+t.get(i,r),i,s):o.set(o.get(i,s)+1,i,s))}return o}function Qf(e){return(t,n,a)=>{const r=v(n,t.length);for(let n=0;n<t.length;++n)r[n]=e(t[n],a);return r}}function Zf(e,t,n){return({inputs:a,attrs:r,backend:s})=>{const{x:o}=a;if(Rf(o,e),"string"===o.dtype||"string"===n)throw new Error("unaryKernelFunc does not support string input/output");const i=s,u=i.data.get(o.dataId).values,l=d(o.shape),c=n||o.dtype,p=k(c,l);for(let e=0;e<l;++e)p[e]=t(u[e],r);return i.makeTensorInfo(o.shape,c,p)}}function Jf(e,t,n){return({inputs:a,attrs:r,backend:s})=>{const{x:o}=a;if(Rf(o,e),"string"===o.dtype||"string"===n)throw new Error("unaryKernelFunc does not support string input/output");const i=s,u=i.data.get(o.dataId).values,l=n||o.dtype,c=t(u,l,r);return i.makeTensorInfo(o.shape,l,c)}}const em=Qf((e=>Math.ceil(e))),tm=Jf(ve,em),nm={kernelName:ve,backendName:"cpu",kernelFunc:tm};function am(e,t,n,a){const r=k(n,d(t));if(a&&"string"!==n){let t=0;e.forEach((e=>{const n=d(e.shape);r.set(e.vals,t),t+=n}))}else{let a=0;e.forEach((e=>{const s="string"===n?oh(e.vals):e.vals;let o=0;for(let n=0;n<e.shape[0];++n){const i=n*t[1]+a;for(let t=0;t<e.shape[1];++t)r[i+t]=s[o++]}a+=e.shape[1]}))}return r}const rm=Ff(((e,t)=>e===t?1:0)),sm=Uf(Xe,rm,null,"bool"),om={kernelName:Xe,backendName:"cpu",kernelFunc:sm},im=Qf((e=>Math.exp(e))),um=Jf(Ye,im),lm={kernelName:Ye,backendName:"cpu",kernelFunc:um},cm=Qf((e=>Math.expm1(e))),dm=Jf(Ze,cm),pm={kernelName:Ze,backendName:"cpu",kernelFunc:dm},hm=Qf((e=>Math.floor(e))),fm=Jf(nt,hm),mm={kernelName:nt,backendName:"cpu",kernelFunc:fm};function gm(e,t,n,a,r,s,o,i,u){const l=Rs([a,s],n);for(let n=0;n<a;n++){const a=[];let c=0;for(let t=0;t<r;t++){const s=e[n*r+t];c+=s*o[t],a.push(s)}if(c<0||c>=u/s)throw new Error(`Invalid indices: ${a} does not index into ${i}`);for(let e=0;e<s;e++)l.values[n*s+e]=t.get(...t.indexToLoc(c*s+e))}return l}function ym(e,t,n){const a=Rs(n,e.dtype);for(let n=0;n<a.size;++n){const r=a.indexToLoc(n).slice(),s=r[0],o=r[2],i=t.locToIndex([s,o]);r[2]=t.values[i];const u=e.locToIndex(r);a.values[n]=e.values[u]}return a}const bm=Ff(((e,t)=>e>t?1:0)),xm=Uf(it,bm,null,"bool"),vm={kernelName:it,backendName:"cpu",kernelFunc:xm},km=Ff(((e,t)=>e>=t?1:0)),wm=Uf(ut,km,null,"bool"),Im={kernelName:ut,backendName:"cpu",kernelFunc:wm},Nm=Ff(((e,t)=>e<t?1:0)),$m=Uf(gt,Nm,null,"bool"),Tm={kernelName:gt,backendName:"cpu",kernelFunc:$m},Cm=Ff(((e,t)=>e<=t?1:0)),Em=Uf(yt,Cm,null,"bool"),Sm={kernelName:yt,backendName:"cpu",kernelFunc:Em};function Rm(e,t,n){const a=(t-e)/(n-1),r=P(n,"float32");r[0]=e;for(let e=1;e<r.length;e++)r[e]=r[e-1]+a;return r}const Am=Qf((e=>Math.log(e))),_m=Jf(xt,Am),Fm={kernelName:xt,backendName:"cpu",kernelFunc:_m};function Om(e,t,n,a){const r=v(a,d(n));for(let n=0;n<r.length;++n){const a=n*t;let s=e[a];for(let n=0;n<t;++n){const t=e[a+n];(Number.isNaN(t)||t>s)&&(s=t)}r[n]=s}return r}const Dm=Ff(((e,t)=>Math.max(e,t))),Mm=Uf(Ct,Dm),Lm={kernelName:Ct,backendName:"cpu",kernelFunc:Mm},Pm=Ff(((e,t)=>Math.min(e,t))),Bm=Uf(Dt,Pm),Wm={kernelName:Dt,backendName:"cpu",kernelFunc:Bm},Vm=Ff(((e,t)=>e*t)),zm=Gf(((e,t,n,a)=>({real:e*n-t*a,imag:e*a+t*n}))),Um=Uf(Bt,Vm,zm),Gm={kernelName:Bt,backendName:"cpu",kernelFunc:Um};function Hm(e,t,n){const a=Ha(-1,n);return Vm([],t,a,e,n)}const jm={kernelName:Wt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:a}=t;Rf(a,"neg");const r=n.data.get(a.dataId).values,[s,o]=Hm(r,a.shape,a.dtype);return n.makeTensorInfo(o,a.dtype,s)}},qm=Ff(((e,t)=>e!==t?1:0)),Km=Uf(Vt,qm,null,"bool"),Xm={kernelName:Vt,backendName:"cpu",kernelFunc:Km};function Ym(e,t,n,a,r){const s=t.length,o=d(t),i=O(t),u=O(r),l=v(n,d(r));for(let t=0;t<o;++t){const n=z(t,s,i),r=new Array(n.length);for(let e=0;e<r.length;e++)r[e]=n[a[e]];l[V(r,s,u)]=e[t]}return l}function Qm(e){const{inputs:t,attrs:n,backend:a}=e,{x:r}=t,{perm:s}=n;Rf(r,"transpose");const o=r.shape.length,i=new Array(o);for(let e=0;e<i.length;e++)i[e]=r.shape[s[e]];const u=Ym(a.data.get(r.dataId).values,r.shape,r.dtype,s,i);return{dataId:a.write(u,i,r.dtype),shape:i,dtype:r.dtype}}const Zm={kernelName:Un,backendName:"cpu",kernelFunc:Qm};function Jm(e,t,n,a){const[r,s]=qu(e,a),o=yr(t,"int32"),i=P(d(r),o),u=d(s);for(let e=0;e<i.length;++e){const t=e*u;let a=1;for(let e=0;e<u;++e)a*=n[t+e];i[e]=a}return{outVals:i,outShape:r,outDtype:o}}const eg={kernelName:Qt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{axis:s,keepDims:o}=a;Rf(r,"prod");const i=r.shape.length,u=b(s,r.shape),l=Yu(u,i);let c=u,d=r;const p=[];null!=l&&(d=Qm({inputs:{x:r},backend:n,attrs:{perm:l}}),p.push(d),c=Zu(c.length,i));const h=n.data.get(d.dataId).values,{outVals:f,outShape:m,outDtype:g}=Jm(d.shape,d.dtype,h,c);let y=m;return o&&(y=Ku(m,u)),p.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(y,g,f)}};function tg(e,t,n,a){if(e===t||e<t&&n<0||t<e&&n>1)return P(0,a);const r=P(Math.abs(Math.ceil((t-e)/n)),a);t<e&&1===n&&(n=-1),r[0]=e;for(let e=1;e<r.length;e++)r[e]=r[e-1]+n;return r}const ng=Qf((e=>1/Math.sqrt(e))),ag=Jf(dn,ng),rg={kernelName:dn,backendName:"cpu",kernelFunc:ag};function sg(e,t,n,a,r){const s=No(a,t,n),o=d(n),i=O(a);if(s){const n=$o(t,i);return"string"===r?e.slice(n,n+o):e.subarray(n,n+o)}const u=Rs(a,r,"string"===r?oh(e):e),l=Rs(n,r);for(let e=0;e<l.size;++e){const n=l.indexToLoc(e),a=n.map(((e,n)=>e+t[n]));l.set(u.get(...a),...n)}return"string"===r?ih(l.values):l.values}function og(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{begin:s,size:o}=a;Rf(r,"slice");const[i,u]=To(r,s,o);po(r,i,u);const l=sg(n.data.get(r.dataId).values,i,u,r.shape,r.dtype);return n.makeTensorInfo(u,r.dtype,l)}const ig={kernelName:mn,backendName:"cpu",kernelFunc:og};function ug(e,t,n,a,r,s,o){const i=t[0],u=s[0],l=new Array(u),c=new Array(i),d=t[1];if(0===u){if(0!==i)throw new Error(`Received SparseTensor with denseShape[0] = 0 but\n         indices.shape[0] = ${i}`);return[k(n,0),[0,d],k(r,0),l,c]}let p=!0,h=0;const f=new Array(u).fill(0);for(let t=0;t<i;++t){const n=e[t*d];if(n<0)throw new Error(`indices(${t}, 0) is invalid: ${n} < 0`);if(n>=u)throw new Error(`indices(${t}, 0) is invalid: ${n} >= ${u}`);++f[n],p=p&&n>=h,h=n}let m=!0;for(let e=0;e<u;++e){const t=0===f[e];l[e]=t,m=m&&!t,f[e]=Math.max(f[e],1),e>0&&(f[e]+=f[e-1])}if(m&&p){const t=e,n=a;for(let e=0;e<i;++e)c[e]=e;return[t,[i,d],n,l,c]}{const t=f[u-1],s=k(n,t*d),p=k(r,t),h=new Array(u).fill(0);for(let t=0;t<i;++t){const n=e[t*d],r=h[n],o=(0===n?0:f[n-1])+r;h[n]++;for(let n=0;n<d;++n)s[o*d+n]=e[t*d+n];p[o]=a[t],c[t]=o}for(let e=0;e<u;++e){if(0===h[e]){const t=0===e?0:f[e-1];s[t*d+0]=e;for(let e=1;e<d;++e)s[t*d+e]=0;p[t]=o}}return[s,[t,d],p,l,c]}}function lg(e,t,n,a,r){const s=d(a),o=t[0],i=r.length,u=[];let l=1,c=-1;for(let e=0;e<i;++e){const t=r[e];if(-1===t){if(-1!==c)throw new Error(`only one output dimension may be -1, not both ${c} and ${e}`);c=e,u.push(1)}else{if(t<0)throw new Error(`size ${e} must be non-negative, not ${t}`);l*=t,u.push(t)}}if(-1!==c){if(l<=0)throw new Error("reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero");const e=Math.trunc(s/l);if(l*e!==s)throw new Error(`Input to reshape is a SparseTensor with ${s}\n          dense values, but the requested shape requires a multiple of ${l}. inputShape=${a} outputShape= ${u}`);u[c]=e}const p=d(u);if(p!==s)throw new Error(`Input to reshape is a tensor with ${s} dense values, but the requested shape has ${p}. inputShape=${a} outputShape=${u}`);const h=a.length,f=[];if(h>0){f[h-1]=1;for(let e=h-2;e>=0;--e)f[e]=f[e+1]*a[e+1]}const m=[];if(i>0){m[i-1]=1;for(let e=i-2;e>=0;--e)m[e]=m[e+1]*u[e+1]}const g=k(n,o*i);for(let t=0;t<o;++t){let n=0;for(let a=0;a<h;++a)n+=e[t*h+a]*f[a];for(let e=0;e<i;++e)g[t*i+e]=Math.trunc(n/m[e]),n%=m[e]}return[g,[o,i],u]}function cg(e,t,n,a,r,s=!1,o=0){const i=a.length;if(i!==r.length)throw new Error("segmentIds and indices should have same size.");const u=[t[0],e.length/t[0]],l=u[1],c=i>0?r[i-1]+1:0;if(c<0)throw new Error("segment ids must be >= 0");const d=t.slice();d[0]=c;const p=k(n,d.reduce(((e,t)=>e*t),1));if(0===i)return c>0&&p.fill(o),[p,d];if(c<=0)throw new Error("segment ids must be >= 0");let h=0,f=1,m=0,g=r[h];for(;;){let t=0;if(f<i){if(t=r[f],g===t){++f;continue}if(g>=t)throw new Error("segment ids are not increasing")}if(g<0||g>=c)throw new Error(`Segment id ${g} out of range [0, ${c}), possibly because segmentIds input is not sorted.`);g>m&&p.fill(o,m*l,g*l);for(let t=h;t<f;++t){const n=a[t];if(n<0||n>=u[0])throw new Error(`Bad: indices[${t}] == ${a[t]} out of range [0, ${u[0]})`);for(let t=0;t<l;t++)p[g*l+t]+=e[n*l+t]}if(s)for(let e=0;e<l;e++)p[g*l+e]/=f-h;if(h=f,++f,m=g+1,g=t,f>i)break}return m<c&&p.fill(o,m*l,c*l),[p,d]}const dg=Ff(((e,t)=>{const n=e-t;return n*n})),pg=Uf(An,dg),hg={kernelName:An,backendName:"cpu",kernelFunc:pg};function fg(e,t,n,a){const r=Rs(e,t.dtype);for(let e=0;e<r.size;e++){const s=r.indexToLoc(e),o=new Array(s.length);for(let e=0;e<o.length;e++)o[e]=s[e]*n[e]+a[e];r.set(t.get(...o),...s)}return r}class mg{constructor(e,t,n,a,r,s){this.separator=Ka(e),this.nGramWidths=t,this.leftPad=Ka(n),this.rightPad=Ka(a),this.padWidth=r,this.preserveShort=s}getPadWidth(e){return Math.min(this.padWidth<0?e-1:this.padWidth,e-1)}getNumNGrams(e,t){const n=this.getPadWidth(t);return Math.max(0,e+2*n-t+1)}createNGrams(e,t,n,a,r,s){for(let o=0;o<r;++o){const i=this.getPadWidth(s),u=Math.max(0,i-o),l=Math.max(0,i-(r-(o+1))),c=s-(u+l),d=t+(u>0?0:o-i);let p=0;p+=u*this.leftPad.length;for(let t=0;t<c;++t)p+=e[d+t].length;p+=l*this.rightPad.length;p+=(u+l+c-1)*this.separator.length,n[a+o]=new Uint8Array(p);const h=n[a+o];let f=0;const m=e=>e.forEach((e=>h[f++]=e));for(let e=0;e<u;++e)m(this.leftPad),m(this.separator);for(let t=0;t<c-1;++t)m(e[d+t]),m(this.separator);if(c>0){m(e[d+c-1]);for(let e=0;e<l;++e)m(this.separator),m(this.rightPad)}else{for(let e=0;e<l-1;++e)m(this.rightPad),m(this.separator);m(this.rightPad)}}}compute(e,t){const n=e.length,a=t.length;if(a>0){let e=t[0];if(0!==e)throw new Error(`First split value must be 0, got ${e}`);for(let r=1;r<a;++r){let a=t[r]>=e;if(a=a&&t[r]<=n,!a)throw new Error(`Invalid split value ${t[r]}, must be in [${e}, ${n}]`);e=t[r]}if(e!==n)throw new Error(`Last split value must be data size. Expected ${n}, got ${e}`)}const r=a-1,s=k("int32",a);if(0===n||0===a){const e=new Array(n);for(let e=0;e<=r;++e)s[e]=0;return[e,s]}s[0]=0;for(let e=1;e<=r;++e){const n=t[e]-t[e-1];let a=0;this.nGramWidths.forEach((e=>{a+=this.getNumNGrams(n,e)})),this.preserveShort&&n>0&&0===a&&(a=1),s[e]=s[e-1]+a}const o=new Array(s[r]);for(let n=0;n<r;++n){const a=t[n];let r=s[n];if(this.nGramWidths.forEach((s=>{const i=t[n+1]-t[n],u=this.getNumNGrams(i,s);this.createNGrams(e,a,o,r,u,s),r+=u})),this.preserveShort&&r===s[n]){const s=t[n+1]-t[n];if(0===s)continue;const i=s+2*this.padWidth,u=1;this.createNGrams(e,a,o,r,u,i)}}return[o,s]}}function gg(e,t,n,a,r,s,o,i){return new mg(n,a,r,s,o,i).compute(e,t)}function yg(e,t,n){if(!e.length)return[];if(0===t.length){const t=new Array(e.length);for(let n=0;n<e.length;++n)t[n]=e.subarray(n,n+1);return t}if(1===t.length){const a=t[0],r=[];let s=e.indexOf(a);for(;-1!==s;){const t=e.subarray(0,s);n&&0===t.length||r.push(t),s=(e=e.subarray(s+1)).indexOf(a)}return n&&0===e.length||r.push(e),r}const a=[];let r=0;for(let s=0;s<e.length+1;s++)if(s===e.length||-1!==t.indexOf(e[s])){const t=e.subarray(r,s);n&&0===t.length||a.push(t),r=s+1}return a}function bg(e,t,n){const a=e.length,r=[];let s=0,o=0;const i=new Array(a);for(let u=0;u<a;++u){const a=yg(e[u],t,n),l=a.length;i[u]=l,s+=l,o=Math.max(o,l),r.push(...a)}const u=k("int32",2*s),l=new Array(s),c=[a,o];let d=0;for(let e=0;e<a;++e)for(let t=0;t<i[e];++t)u[2*d]=e,u[2*d+1]=t,l[d]=r[d],++d;return[u,l,c]}function xg(e,t){const n=k("int32",e.length);for(let a=0;a<e.length;++a)n[a]=Ga(e[a]).modulo(t).getLowBitsUnsigned();return n}const vg=Ff(((e,t)=>e-t)),kg=Gf(((e,t,n,a)=>({real:e-n,imag:t-a}))),wg=Uf(Ln,vg,kg),Ig={kernelName:Ln,backendName:"cpu",kernelFunc:wg};function Ng(e,t){const n=new Array(e.rank);for(let a=0;a<n.length;a++)n[a]=e.shape[a]*t[a];const a=Rs(n,e.dtype);for(let t=0;t<a.values.length;++t){const n=a.indexToLoc(t),r=new Array(e.rank);for(let t=0;t<r.length;t++)r[t]=n[t]%e.shape[t];const s=e.locToIndex(r);a.values[t]=e.values[s]}return a}function $g(e,t,n,a,r){const s=t[t.length-1],[o,i]=[e.length/s,s],u=v(n,o*a),l=v("int32",o*a);for(let t=0;t<o;t++){const n=t*i,r=e.subarray(n,n+i),s=[];for(let e=0;e<r.length;e++)s.push({value:r[e],index:e});s.sort(((e,t)=>t.value-e.value));const o=t*a,c=u.subarray(o,o+a),d=l.subarray(o,o+a);for(let e=0;e<a;e++)c[e]=s[e].value,d[e]=s[e].index}const c=t.slice();return c[c.length-1]=a,[Rs(c,n,u),Rs(c,"int32",l)]}function Tg(e,t,n,a){const r=b(t,n)[0],s=[1,n[0],1];for(let e=0;e<r;e++)s[0]*=n[e];s[1]=n[r];for(let e=r+1;e<n.length;e++)s[2]*=n[e];const o={},i=new Int32Array(n[r]),u=new sr(s,a,e),l=[],c=1===s[0]&&1===s[2];for(let t=0;t<n[r];t++){let n;if(c)n=e[t].toString();else{const e=[];for(let n=0;n<s[0];n++)for(let a=0;a<s[2];a++)e.push(u.get(n,t,a));n=e.join(",")}if(void 0!==o[n])i[t]=o[n];else{const e=Object.keys(o).length;o[n]=e,i[t]=e,l.push(t)}}const d=s.slice();d[1]=Object.keys(o).length;const p=new sr(d,a);l.forEach(((e,t)=>{for(let n=0;n<s[0];n++)for(let a=0;a<s[2];a++)p.set(u.get(n,e,a),n,t,a)}));const h=n.slice();return h[r]=d[1],{outputValues:p.values,outputShape:h,indices:i}}var Cg=Object.freeze({__proto__:null,simpleAbsImpl:Af,addImpl:Hf,bincountImpl:Xf,bincountReduceImpl:Yf,ceilImpl:em,concatImpl:am,equalImpl:rm,expImpl:im,expm1Impl:cm,floorImpl:hm,gatherNdImpl:gm,gatherV2Impl:ym,greaterImpl:bm,greaterEqualImpl:km,lessImpl:Nm,lessEqualImpl:Cm,linSpaceImpl:Rm,logImpl:Am,maxImpl:Om,maximumImpl:Dm,minimumImpl:Pm,multiplyImpl:Vm,negImpl:Hm,notEqualImpl:qm,prodImpl:Jm,rangeImpl:tg,rsqrtImpl:ng,sliceImpl:sg,sparseFillEmptyRowsImpl:ug,sparseReshapeImpl:lg,sparseSegmentReductionImpl:cg,squaredDifferenceImpl:dg,stridedSliceImpl:fg,stringNGramsImpl:gg,stringSplitImpl:bg,stringToHashBucketFastImpl:xg,subImpl:vg,tileImpl:Ng,topKImpl:$g,transposeImpl:Ym,uniqueImpl:Tg});const{addImpl:Eg,bincountImpl:Sg,bincountReduceImpl:Rg,ceilImpl:Ag,concatImpl:_g,equalImpl:Fg,expImpl:Og,expm1Impl:Dg,floorImpl:Mg,gatherNdImpl:Lg,gatherV2Impl:Pg,greaterImpl:Bg,greaterEqualImpl:Wg,lessImpl:Vg,lessEqualImpl:zg,linSpaceImpl:Ug,logImpl:Gg,maxImpl:Hg,maximumImpl:jg,minimumImpl:qg,multiplyImpl:Kg,negImpl:Xg,notEqualImpl:Yg,prodImpl:Qg,rangeImpl:Zg,rsqrtImpl:Jg,simpleAbsImpl:ey,sliceImpl:ty,sparseFillEmptyRowsImpl:ny,sparseReshapeImpl:ay,sparseSegmentReductionImpl:ry,stridedSliceImpl:sy,stringNGramsImpl:oy,stringSplitImpl:iy,stringToHashBucketFastImpl:uy,subImpl:ly,tileImpl:cy,topKImpl:dy,transposeImpl:py,uniqueImpl:hy}=Cg;function fy(e,t){return["x","y","z","w","u","v"].slice(0,t).map((t=>`${e}.${t}`))}function my(e,t){return 1===t?[e]:fy(e,t)}class gy{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=e;const t=e.length;if(0===t)this.userCode="\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";else{const n=my("rc",t),a=Tf(t),r=function(e,t,n){if(1===e)return`rc > ${t[0]}`;let a="";for(let r=e-2;r<e;r++)a+=`${n[r]} >= ${t[r]}`,r<e-1&&(a+="||");return a}(t,e,n),s=function(e,t,n,a){if(1===e)return"";const r=a.slice(-2);return`\n    int r = ${r[0]};\n    int c = ${r[1]};\n    int rp1 = r + 1;\n    int cp1 = c + 1;\n\n    bool cEdge = cp1 >= ${t};\n    bool rEdge = rp1 >= ${n};\n  `}(t,e[e.length-1],e[e.length-2],n),o=function(e,t){const n=e.length,a=function(e,t){const n=[];for(let a=0;a<=1;a++)for(let r=0;r<=1;r++){let s=`${0===a?"r":"rp1"}, ${0===r?"c":"cp1"}`;for(let n=2;n<e;n++)s=`${t[t.length-1-n]},`+s;n.push(s)}return n}(n,t);if(1===n)return`getA(rc),\n            rc + 1 >= ${e[0]} ? 0. : getA(rc + 1),\n            0, 0`;return`getA(${a[0]}),\n          cEdge ? 0. : getA(${a[1]}),\n          rEdge ? 0. : getA(${a[2]}),\n          rEdge || cEdge ? 0. : getA(${a[3]})`}(e,n);this.userCode=`\n        void main() {\n          ${a} rc = getOutputCoords();\n\n          if(${r}) {\n            setOutput(vec4(0));\n          } else {\n            ${s}\n\n            setOutput(vec4(${o}));\n          }\n        }\n      `}}}class yy{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e;let n="";for(let e=0;e<4;e++){let t="thisRC = rc;";e%2==1&&(t+="thisRC.z += 1;"),e>1&&(t+="thisRC.y += 1;"),n+=`\n        ${t}\n        ${e>0?"if(thisRC.y < rows && thisRC.z < cols){":""}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${e}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${e>0?"}":""}\n      `}var a;this.userCode=`\n      ${a=t,`\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${Kh(["r","c","d"],a)}\n      return ivec3(r, c, d);\n    }\n  `}\n      ${Xh(e)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${e[1]};\n        int cols = ${e[2]};\n\n        ${n}\n\n        setOutput(result);\n      }\n    `}}class by{constructor(e){this.gpgpu=e,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.logEnabled=!1,this.usedTextures={}}acquireTexture(e,t,n){const a=vy(t,n),r=ky(e,a,n);r in this.freeTextures||(this.freeTextures[r]=[]),r in this.usedTextures||(this.usedTextures[r]=[]);const s=xy(e,a,this.gpgpu.gl,this.gpgpu.textureConfig,n);if(this.freeTextures[r].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=s,this.log();const e=this.freeTextures[r].shift();return this.usedTextures[r].push(e),e}let o;return a===gh.PACKED_2X2_FLOAT32?o=this.gpgpu.createPackedMatrixTexture(e[0],e[1]):a===gh.PACKED_2X2_FLOAT16?o=this.gpgpu.createFloat16PackedMatrixTexture(e[0],e[1]):a===gh.UNPACKED_FLOAT32?o=this.gpgpu.createFloat32MatrixTexture(e[0],e[1]):a===gh.UNPACKED_FLOAT16?o=this.gpgpu.createFloat16MatrixTexture(e[0],e[1]):a===gh.PACKED_4X1_UNSIGNED_BYTE&&(o=this.gpgpu.createUnsignedBytesMatrixTexture(e[0],e[1])),this.usedTextures[r].push(o),this.numUsedTextures++,this._numBytesAllocated+=s,this.log(),o}releaseTexture(e,t,n,a){if(null==this.freeTextures)return;const r=vy(n,a),s=ky(t,r,a);s in this.freeTextures||(this.freeTextures[s]=[]);const o=xy(t,r,this.gpgpu.gl,this.gpgpu.textureConfig,a),i=q().get("WEBGL_DELETE_TEXTURE_THRESHOLD");-1!==i&&this._numBytesAllocated>i?(this.gpgpu.deleteMatrixTexture(e),this._numBytesAllocated-=o):(this.freeTextures[s].push(e),this.numFreeTextures++,this._numBytesFree+=o),this.numUsedTextures--;const u=this.usedTextures[s],l=u.indexOf(e);if(l<0)throw new Error("Cannot release a texture that was never provided by this texture manager");u.splice(l,1),this.log()}log(){if(!this.logEnabled)return;const e=this.numFreeTextures+this.numUsedTextures;console.log("Free/Used",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${e})`);const t=this._numBytesFree/this._numBytesAllocated;console.log(`Bytes allocated: ${this._numBytesAllocated}`),console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100*t)}%)`)}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(null!=this.freeTextures){for(const e in this.freeTextures)this.freeTextures[e].forEach((e=>{this.gpgpu.deleteMatrixTexture(e)}));for(const e in this.usedTextures)this.usedTextures[e].forEach((e=>{this.gpgpu.deleteMatrixTexture(e)}));this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}}function xy(e,t,n,a,r){const s=function(e,t){switch(e){case gh.PACKED_2X2_FLOAT32:return df(t);case gh.PACKED_2X2_FLOAT16:return pf(t);case gh.UNPACKED_FLOAT32:return uf(t);case gh.UNPACKED_FLOAT16:return lf(t);case gh.PACKED_4X1_UNSIGNED_BYTE:return cf(t);default:throw new Error(`Unknown physical texture type ${e}`)}}(t,a);let o;if(r){const[t,n]=xh(e[0],e[1]);o=t*n}else{const[t,n]=yh(e[0],e[1]);o=t*n}return o*function(e,t){const n=e;if(t===n.R32F)return 4;if(t===n.R16F)return 2;if(t===n.RGBA32F)return 16;if(t===e.RGBA)return 16;if(t===n.RGBA16F)return 8;throw new Error(`Unknown internal format ${t}`)}(n,s)}function vy(e,t){if(e===mh.UPLOAD)return gh.PACKED_2X2_FLOAT32;if(e===mh.RENDER||null==e)return function(e){return q().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?e?gh.PACKED_2X2_FLOAT32:gh.UNPACKED_FLOAT32:e?gh.PACKED_2X2_FLOAT16:gh.UNPACKED_FLOAT16}(t);if(e===mh.DOWNLOAD||e===mh.PIXELS)return gh.PACKED_4X1_UNSIGNED_BYTE;throw new Error(`Unknown logical texture type ${e}`)}function ky(e,t,n){return`${e[0]}_${e[1]}_${t}_${n}`}class wy{constructor(e,t){this.variableNames=["A"],this.outputShape=e,this.userCode=`\n      float unaryOperation(float x) {\n        ${t}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}const Iy="return abs(x);";const Ny="return x;";class $y{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.userCode=`\n      vec4 unaryOperation(vec4 x) {\n        ${t}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}class Ty{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=e;const t=e.length,n=my("rc",t),a=Tf(t),r=function(e,t){if(1===e)return"rc";let n="";for(let a=0;a<e;a++)n+=t[a],a<e-1&&(n+=",");return n}(t,n),s=n.slice(-2),o=t<=1?"rc":`vec2(${s.join(",")})`;this.userCode=`\n      void main() {\n        ${a} rc = getOutputCoords();\n        vec4 packedInput = getA(${r});\n\n        setOutput(getChannel(packedInput, ${o}));\n      }\n    `}}const Cy=Bc,Ey={};const Sy=q().getNumber("CPU_HANDOFF_SIZE_THRESHOLD");class Ry extends t{constructor(t){if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.lastGlFlushTime=0,this.warnedAboutMemory=!1,this.pendingDeletes=0,this.disposed=!1,!q().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");if(null==t){const e=hh(q().getNumber("WEBGL_VERSION"));this.binaryCache=((n=q().getNumber("WEBGL_VERSION"))in Ey||(Ey[n]={}),Ey[n]),this.gpgpu=new ff(e),this.canvas=e.canvas,this.gpgpuCreatedLocally=!0}else this.gpgpu=t,this.binaryCache={},this.gpgpuCreatedLocally=!1,this.canvas=t.gl.canvas;var n;this.textureManager=new by(this.gpgpu),this.numMBBeforeWarning=null==q().global.screen?1024:q().global.screen.height*q().global.screen.width*window.devicePixelRatio*600/1024/1024,this.texData=new e(this,Bo())}nextDataId(){return Ry.nextDataId++}numDataIds(){return this.texData.numDataIds()-this.pendingDeletes}write(e,t,n){if((q().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS")||q().getBool("DEBUG"))&&this.checkNumericalProblems(e),"complex64"===n&&null!=e)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");const a={id:this.nextDataId()};return this.texData.set(a,{shape:t,dtype:n,values:e,usage:mh.UPLOAD,refCount:1}),a}refCount(e){if(this.texData.has(e)){return this.texData.get(e).refCount}return 0}incRef(e){this.texData.get(e).refCount++}decRef(e){if(this.texData.has(e)){this.texData.get(e).refCount--}}move(e,t,n,a,r){if(q().getBool("DEBUG")&&this.checkNumericalProblems(t),"complex64"===a)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(e,{shape:n,dtype:a,values:t,usage:mh.UPLOAD,refCount:r})}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}readSync(e){const t=this.texData.get(e),{values:n,dtype:a,complexTensorInfos:r,slice:s,shape:o,isPacked:i}=t;if(null!=s){let t;t=i?new $y(o,Ny):new wy(o,Ny);const n=this.runWebGLProgram(t,[{dataId:e,shape:o,dtype:a}],a),r=this.readSync(n.dataId);return this.disposeIntermediateTensorInfo(n),r}if(null!=n)return this.convertAndCacheOnCPU(e);if("string"===a)return n;const u=null!=this.activeTimers;let l,c;if(u&&(l=qa()),"complex64"===a){c=Bp(this.readSync(r.real.dataId),this.readSync(r.imag.dataId))}else c=this.getValuesFromTexture(e);return u&&(this.downloadWaitMs+=qa()-l),this.convertAndCacheOnCPU(e,c)}async read(e){if(this.pendingRead.has(e)){const t=this.pendingRead.get(e);return new Promise((e=>t.push(e)))}const t=this.texData.get(e),{values:n,shape:a,slice:r,dtype:s,complexTensorInfos:o,isPacked:i}=t;if(null!=r){let t;t=i?new $y(a,Ny):new wy(a,Ny);const n=this.runWebGLProgram(t,[{dataId:e,shape:a,dtype:s}],s),r=this.read(n.dataId);return this.disposeIntermediateTensorInfo(n),r}if(null!=n)return this.convertAndCacheOnCPU(e);if(!q().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&2===q().getNumber("WEBGL_VERSION"))throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let u,l,c=null;if("complex64"!==s&&q().get("WEBGL_BUFFER_SUPPORTED")){u=this.decode(e);const t=this.texData.get(u.dataId);c=this.gpgpu.createBufferFromTexture(t.texture,...bh(a))}if(this.pendingRead.set(e,[]),"complex64"!==s&&await this.gpgpu.createAndWaitForFence(),"complex64"===s){const e=await Promise.all([this.read(o.real.dataId),this.read(o.imag.dataId)]);l=Bp(e[0],e[1])}else if(null==c)l=this.getValuesFromTexture(e);else{const e=d(a);l=this.gpgpu.downloadFloat32MatrixFromBuffer(c,e)}null!=u&&this.disposeIntermediateTensorInfo(u);const p=this.convertAndCacheOnCPU(e,l),h=this.pendingRead.get(e);return this.pendingRead.delete(e),h.forEach((e=>e(p))),this.pendingDisposal.has(e)&&(this.pendingDisposal.delete(e),this.disposeData(e)&&Bo().removeDataId(e,this),this.pendingDeletes--),p}bufferSync(e){const t=this.readSync(e.dataId);let n=t;if("string"===e.dtype)try{n=t.map((e=>Xa(e)))}catch(e){throw new Error("Failed to decode encoded string bytes into utf-8")}return Rs(e.shape,e.dtype,n)}checkNumericalProblems(e){if(null!=e)for(let t=0;t<e.length;t++){const n=e[t];if(!wh(n)){if(q().getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))throw Error(`The value ${n} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);throw Error(`The value ${n} cannot be represented on this device.`)}}}getValuesFromTexture(e){const{shape:t,dtype:n,isPacked:a}=this.texData.get(e),r=d(t);if(q().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){const n=this.decode(e),a=this.texData.get(n.dataId),s=this.gpgpu.downloadMatrixFromPackedTexture(a.texture,...bh(t)).subarray(0,r);return this.disposeIntermediateTensorInfo(n),s}const s=q().getBool("WEBGL_PACK")&&!0===a,o=s?Mh(t):t,i=s?new ef(o):new Jh(o),u=this.runWebGLProgram(i,[{shape:o,dtype:n,dataId:e}],"float32"),l=this.texData.get(u.dataId),c=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(l.texture,l.texShape[0],l.texShape[1]).subarray(0,r);return this.disposeIntermediateTensorInfo(u),c}timerAvailable(){return q().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0}async time(e){const t=this.activeTimers,n=[];let a=!1;null==this.programTimersStack?(this.programTimersStack=n,a=!0):this.activeTimers.push(n),this.activeTimers=n,e();const r=c(this.activeTimers.map((e=>e.query))).filter((e=>null!=e)),s=c(this.activeTimers.map((e=>e.name))).filter((e=>null!=e));this.activeTimers=t,a&&(this.programTimersStack=null);const i={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null};if(q().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){const e=await Promise.all(r);i.kernelMs=o(e),i.getExtraProfileInfo=()=>e.map(((e,t)=>({name:s[t],ms:e}))).map((e=>`${e.name}: ${e.ms}`)).join(", ")}else i.kernelMs={error:"WebGL query timers are not supported in this environment."};return this.uploadWaitMs=0,this.downloadWaitMs=0,i}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}startTimer(){return q().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:qa(),endMs:null}}endTimer(e){return q().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),e):(e.endMs=qa(),e)}async getQueryTime(e){if(q().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0)return this.gpgpu.waitForQueryAndGetTime(e);const t=e;return t.endMs-t.startMs}disposeData(e,t=!1){if(this.pendingDisposal.has(e))return!1;if(!this.texData.has(e))return!0;if(t?this.texData.get(e).refCount=0:this.texData.get(e).refCount--,!t&&this.texData.get(e).refCount>0)return!1;if(this.pendingRead.has(e))return this.pendingDisposal.add(e),this.pendingDeletes++,!1;this.releaseGPUData(e);const{complexTensorInfos:n}=this.texData.get(e);return null!=n&&(this.disposeData(n.real.dataId,t),this.disposeData(n.imag.dataId,t)),this.texData.delete(e),!0}releaseGPUData(e){const{texture:t,dtype:n,texShape:a,usage:r,isPacked:s,slice:o}=this.texData.get(e),i=o&&o.origDataId||e,u=this.dataRefCount.get(i);u>1?this.dataRefCount.set(i,u-1):(this.dataRefCount.delete(i),null!=t&&(this.numBytesInGPU-=this.computeBytes(a,n),this.textureManager.releaseTexture(t,a,r,s)));const l=this.texData.get(e);l.texture=null,l.texShape=null,l.isPacked=!1,l.slice=null}getTexture(e){return this.uploadToGPU(e),this.texData.get(e).texture}getDataInfo(e){return this.texData.get(e)}shouldExecuteOnCPU(e,t=Sy){return q().getBool("WEBGL_CPU_FORWARD")&&e.every((e=>null==this.texData.get(e.dataId).texture&&d(e.shape)<t))}getGPGPUContext(){return this.gpgpu}where(e){Pp("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");const t=e.dataSync();return Cy(e.shape,t)}packedUnaryOp(e,t,n){const a=new $y(e.shape,t),r=this.compileAndRun(a,[e],n);return Bo().makeTensorFromDataId(r.dataId,r.shape,r.dtype)}abs(e){if(this.shouldExecuteOnCPU([e])&&"complex64"!==e.dtype){const t=ey(this.texData.get(e.dataId).values);return this.makeOutput(e.shape,e.dtype,t)}if(q().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,Iy,e.dtype);const t=new wy(e.shape,Iy),n=this.compileAndRun(t,[e]);return Bo().makeTensorFromDataId(n.dataId,n.shape,n.dtype)}makeTensorInfo(e,t,n){let a;if("string"===t&&null!=n&&n.length>0&&E(n[0])){const r=n.map((e=>Ka(e)));a=this.write(r,e,t)}else a=this.write(n,e,t);return this.texData.get(a).usage=null,{dataId:a,shape:e,dtype:t}}makeOutput(e,t,n){const{dataId:a}=this.makeTensorInfo(e,t,n);return Bo().makeTensorFromDataId(a,e,t,this)}unpackTensor(e){const t=new Ty(e.shape);return this.runWebGLProgram(t,[e],e.dtype)}packTensor(e){const t=new gy(e.shape);return this.runWebGLProgram(t,[e],e.dtype,null,!0)}packedReshape(e,t){const n=[Oh(e.shape),...Dh(e.shape)],a={dtype:e.dtype,shape:n,dataId:e.dataId},r=[Oh(t),...Dh(t)],s=new yy(r,n),o=this.runWebGLProgram(s,[a],e.dtype,null,!0);return{dataId:o.dataId,shape:t,dtype:o.dtype}}decode(e){const t=this.texData.get(e),{isPacked:n,shape:a,dtype:r}=t,s=Mh(a);let o;o=n?new Zh(s):new Qh(s);return{dtype:r,shape:a,dataId:this.runWebGLProgram(o,[{shape:s,dtype:r,dataId:e}],r,null,!0).dataId}}runWebGLProgram(e,t,n,a,r=!1){const s=this.makeTensorInfo(e.outputShape,n),o=this.texData.get(s.dataId);if(e.packedOutput&&(o.isPacked=!0),e.outPackingScheme===fh.DENSE){const t=bh(e.outputShape);o.texShape=t.map((e=>2*e))}if(null!=e.outTexUsage&&(o.usage=e.outTexUsage),0===d(s.shape))return o.values=v(s.dtype,0),s;const i=[],u=t.map((t=>{if("complex64"===t.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let n=this.texData.get(t.dataId);if(null==n.texture){if(!e.packedInputs&&d(t.shape)<=q().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:t.shape,texData:null,isUniform:!0,uniformValues:n.values};e.packedInputs&&(n.isPacked=!0,n.shape=t.shape)}else if(!!n.isPacked!=!!e.packedInputs)t=n.isPacked?this.unpackTensor(t):this.packTensor(t),i.push(t),n=this.texData.get(t.dataId);else if(n.isPacked&&!Ph(n.shape,t.shape)){const e=t,a=t.shape;t.shape=n.shape,t=this.packedReshape(t,a),i.push(t),n=this.texData.get(t.dataId),e.shape=a}return this.uploadToGPU(t.dataId),{shape:t.shape,texData:n,isUniform:!1}}));this.uploadToGPU(s.dataId);const l={shape:s.shape,texData:o,isUniform:!1},c=function(e,t,n){let a="";t.concat(n).forEach((e=>{const t=null!=e.texData&&null!=e.texData.slice&&e.texData.slice.flatOffset>0,n=e.isUniform?"uniform":e.texData.texShape;a+=`${e.shape}_${n}_${t}`}));const r=e.userCode;let s=e.constructor.name;return s+="_"+a+"_"+r,s}(e,u,l),p=this.getAndSaveBinary(c,(()=>function(e,t,n,a){const r=t.userCode,s=n.map(((e,n)=>{const a={logicalShape:e.shape,texShape:e.isUniform?null:e.texData.texShape,isUniform:e.isUniform,isPacked:!e.isUniform&&e.texData.isPacked,flatOffset:null};return null!=e.texData&&null!=e.texData.slice&&e.texData.slice.flatOffset>0&&(a.flatOffset=e.texData.slice.flatOffset),{name:t.variableNames[n],shapeInfo:a}})),o=s.map((e=>e.shapeInfo)),i={logicalShape:a.shape,texShape:a.texData.texShape,isUniform:!1,isPacked:a.texData.isPacked,flatOffset:null},u=gf(s,i,r,t.packedInputs),l=e.createProgram(u);let c=null;const d=e.getUniformLocation(l,"NAN",!1);1===q().getNumber("WEBGL_VERSION")&&(c=e.getUniformLocation(l,"INFINITY",!1));const p={};for(let n=0;n<t.variableNames.length;n++){const a=t.variableNames[n],r=!1;p[a]=e.getUniformLocation(l,a,r),p[`offset${a}`]=e.getUniformLocation(l,`offset${a}`,r)}return{program:t,source:u,webGLProgram:l,uniformLocations:p,inShapeInfos:o,outShapeInfo:i,infLoc:c,nanLoc:d}}(this.gpgpu,e,u,l))),h=null!=this.activeTimers;let f;h&&(f=this.startTimer()),function(e,t,n,a,r){Sf(t.inShapeInfos,n),Sf([t.outShapeInfo],[a]);const s=a.texData.texture,o=a.texData.texShape;a.texData.isPacked?e.setOutputPackedMatrixTexture(s,o[0],o[1]):e.setOutputMatrixTexture(s,o[0],o[1]),e.setProgram(t.webGLProgram),1===q().getNumber("WEBGL_VERSION")&&null!==t.infLoc&&e.gl.uniform1f(t.infLoc,1/0),null!==t.nanLoc&&e.gl.uniform1f(t.nanLoc,NaN),n.forEach(((n,a)=>{const r=t.program.variableNames[a],s=t.uniformLocations[r],o=t.uniformLocations[`offset${r}`];if(null!=s)if(n.isUniform)if(d(n.shape)<2)e.gl.uniform1f(s,n.uniformValues[0]);else{let t=n.uniformValues;t instanceof Float32Array||(t=new Float32Array(t)),e.gl.uniform1fv(s,t)}else null!=n.texData.slice&&null!=o&&e.gl.uniform1i(o,n.texData.slice.flatOffset),e.setInputMatrixTexture(n.texData.texture,s,a)})),null!=r&&r(e,t.webGLProgram),e.executeProgram()}(this.gpgpu,p,u,l,a),i.forEach((e=>this.disposeIntermediateTensorInfo(e))),h&&(f=this.endTimer(f),this.activeTimers.push({name:e.constructor.name,query:this.getQueryTime(f)}));const m=q().get("WEBGL_FLUSH_THRESHOLD");if(m>0){const e=qa();e-this.lastGlFlushTime>m&&(this.gpgpu.gl.flush(),this.lastGlFlushTime=e)}if(!q().getBool("WEBGL_LAZILY_UNPACK")&&o.isPacked&&!1===r){const e=this.unpackTensor(s);return this.disposeIntermediateTensorInfo(s),e}return s}compileAndRun(e,t,n,a,r=!1){n=n||t[0].dtype;return this.runWebGLProgram(e,t,n,a,r)}getAndSaveBinary(e,t){return e in this.binaryCache||(this.binaryCache[e]=t()),this.binaryCache[e]}getTextureManager(){return this.textureManager}dispose(){if(!this.disposed){if(!q().getBool("IS_TEST")){Object.keys(this.binaryCache).forEach((e=>{this.gpgpu.deleteProgram(this.binaryCache[e].webGLProgram),delete this.binaryCache[e]}))}this.textureManager.dispose(),null!=this.canvas&&"undefined"!=typeof HTMLCanvasElement&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0}}floatPrecision(){return null==this.floatPrecisionValue&&(this.floatPrecisionValue=Wo((()=>{if(!q().get("WEBGL_RENDER_FLOAT32_ENABLED")){const e=q().getBool("DEBUG");q().set("DEBUG",!1);const t=this.abs(uc(1e-8)).dataSync()[0];if(q().set("DEBUG",e),t>0)return 32}return 16}))),this.floatPrecisionValue}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}uploadToGPU(e){const t=this.texData.get(e),{shape:n,dtype:a,values:r,texture:o,usage:i,isPacked:u}=t;if(null!=o)return;const l=null!=this.activeTimers;let c;l&&(c=qa());let p=t.texShape;if(null==p&&(p=function(e,t=!1){let n=q().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(t&&(n*=2,1===(e=e.map(((t,n)=>n>=e.length-2?s(e[n]):e[n]))).length&&(e=[2,e[0]])),2!==e.length){const t=x(e);e=t.newShape}let a=d(e);if(e.length<=1&&a<=n)return[1,a];if(2===e.length&&e[0]<=n&&e[1]<=n)return e;if(3===e.length&&e[0]*e[1]<=n&&e[2]<=n)return[e[0]*e[1],e[2]];if(3===e.length&&e[0]<=n&&e[1]*e[2]<=n)return[e[0],e[1]*e[2]];if(4===e.length&&e[0]*e[1]*e[2]<=n&&e[3]<=n)return[e[0]*e[1]*e[2],e[3]];if(4===e.length&&e[0]<=n&&e[1]*e[2]*e[3]<=n)return[e[0],e[1]*e[2]*e[3]];if(t){const t=Oh(e);let n=2,r=2;return e.length&&([n,r]=Dh(e)),a=t*(n/2)*(r/2),f(a).map((e=>2*e))}return f(a)}(n,u),t.texShape=p),null!=r){const e=Mh(n);let s,o=p[1],i=p[0];const d=r instanceof Uint8Array;u?([o,i]=xh(p[0],p[1]),s=new nf(e,[i,o],d)):s=new tf(e,[i,o],d);const h=this.makeTensorInfo([i,o],a);this.texData.get(h.dataId).usage=d?mh.PIXELS:mh.UPLOAD,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(h.dataId),o,i,r);const f=!0,m=this.runWebGLProgram(s,[h],a,null,f),g=this.texData.get(m.dataId);t.texture=g.texture,t.texShape=g.texShape,t.isPacked=g.isPacked,t.usage=g.usage,this.disposeIntermediateTensorInfo(h),this.texData.delete(m.dataId),t.values=null,l&&(this.uploadWaitMs+=qa()-c)}else{const e=this.acquireTexture(p,i,a,u);t.texture=e}}convertAndCacheOnCPU(e,t){const n=this.texData.get(e),{dtype:a}=n;return this.releaseGPUData(e),null!=t&&(n.values=function(e,t){if("float32"===t||"complex64"===t)return e;if("int32"===t||"bool"===t){const n="int32"===t?new Int32Array(e.length):new Uint8Array(e.length);for(let t=0;t<n.length;++t)n[t]=Math.round(e[t]);return n}throw new Error(`Unknown dtype ${t}`)}(t,a)),n.values}acquireTexture(e,t,n,a){if(this.numBytesInGPU+=this.computeBytes(e,n),!this.warnedAboutMemory&&this.numBytesInGPU>1024*this.numMBBeforeWarning*1024){const e=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(`High memory usage in GPU: ${e} MB, most likely due to a memory leak`)}return this.textureManager.acquireTexture(e,t,a)}computeBytes(e,t){return e[0]*e[1]*T(t)}}Ry.nextDataId=0;Ar()&&Go("webgl",(()=>new Ry),2);class Ay{constructor(e,t,n){this.variableNames=["A","B"],this.outputShape=su(t,n),this.userCode=`\n      float binaryOperation(float a, float b) {\n        ${e}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `}}class _y{constructor(e,t,n,a=!1){this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=su(t,n);const r=this.outputShape.length;let s="";if(a)if(0===r||1===d(this.outputShape))s="\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        ";else{if(s=`\n          ${Tf(r)} coords = getOutputCoords();\n        `,1===r)s+=`\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;else{const e=my("coords",r);s+=`\n            bool nextRowOutOfBounds =\n              (${e[r-2]} + 1) >= ${this.outputShape[r-2]};\n            bool nextColOutOfBounds =\n              (${e[r-1]} + 1) >= ${this.outputShape[r-1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `}}this.userCode=`\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${e}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${s}\n\n        setOutput(result);\n      }\n    `}}function Fy(e){const{inputs:t,backend:n}=e,{x:a}=t;return n.incRef(a.dataId),{dataId:a.dataId,shape:a.shape,dtype:a.dtype}}const Oy={kernelName:lt,backendName:"webgl",kernelFunc:Fy};function Dy(e){const{inputs:t,backend:n}=e,{real:a,imag:r}=t,s=n.makeTensorInfo(a.shape,"complex64"),o=n.texData.get(s.dataId),i=Fy({inputs:{x:a},backend:n}),u=Fy({inputs:{x:r},backend:n});return o.complexTensorInfos={real:i,imag:u},s}const My={kernelName:we,backendName:"webgl",kernelFunc:Dy},Ly="return (a < 0.) ? b * a : a;",Py="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n";const By={kernelName:mt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{alpha:s}=a,o=n.makeTensorInfo([],"float32",Ha(s,"float32")),i=q().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new _y(Py,r.shape,o.shape):new Ay(Ly,r.shape,o.shape),u=n.runWebGLProgram(i,[r,o],r.dtype);return n.disposeIntermediateTensorInfo(o),u}},Wy="return (a < 0.) ? b * a : a;",Vy="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n";const zy={kernelName:Yt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:a,alpha:r}=t,s=q().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new _y(Vy,a.shape,r.shape):new Ay(Wy,a.shape,r.shape);return n.runWebGLProgram(s,[a,r],a.dtype)}};function Uy({opSnippet:e,packedOpSnippet:t,cpuKernelImpl:n,dtype:a}){return({inputs:r,backend:s})=>{const{x:o}=r,i=s,u=a||o.dtype;if(i.shouldExecuteOnCPU([o])&&null!=n){const e=i.texData.get(o.dataId),t=n(e.values,u);return i.makeTensorInfo(o.shape,u,t)}let l;return l=q().getBool("WEBGL_PACK_UNARY_OPERATIONS")&&null!=t?new $y(o.shape,t):new wy(o.shape,e),i.runWebGLProgram(l,[o],u)}}function Gy({opSnippet:e,packedOpSnippet:t,checkOutOfBounds:n=!1,supportsComplex:a=!1,cpuKernelImpl:r,dtype:s}){return({inputs:o,backend:i})=>{const{a:u,b:l}=o,c=i;if(a&&"complex64"===u.dtype){const t=c.texData.get(u.dataId),n=c.texData.get(l.dataId),[a,r]=[[t.complexTensorInfos.real,n.complexTensorInfos.real],[t.complexTensorInfos.imag,n.complexTensorInfos.imag]].map((t=>{const[n,a]=t,r={dataId:n.dataId,dtype:n.dtype,shape:u.shape},s={dataId:a.dataId,dtype:a.dtype,shape:l.shape},o=new Ay(e,u.shape,l.shape);return c.runWebGLProgram(o,[r,s],yr(n.dtype,a.dtype))})),s=Dy({inputs:{real:a,imag:r},backend:c});return c.disposeIntermediateTensorInfo(a),c.disposeIntermediateTensorInfo(r),s}const d=s||yr(u.dtype,l.dtype);if(("string"===u.dtype||"string"===l.dtype||c.shouldExecuteOnCPU([u,l]))&&null!=r){const e=c.texData.get(u.dataId).values,t=c.texData.get(l.dataId).values,n="string"===u.dtype?oh(e):e,a="string"===u.dtype?oh(t):t,[s,o]=r(u.shape,l.shape,n,a,d),i=c.makeTensorInfo(o,d);return c.texData.get(i.dataId).values=s,i}let p;return p=q().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&null!=t?new _y(t,u.shape,l.shape,n):new Ay(e,u.shape,l.shape),c.runWebGLProgram(p,[u,l],d)}}function Hy(e,t=!1){if("linear"===e)return"return x;";if("relu"===e)return t?"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n":"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : x;\n";if("elu"===e)return t?"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n":"return (x >= 0.0) ? x : (exp(x) - 1.0);";if("relu6"===e)return t?"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n":"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n";if("prelu"===e)return t?Vy:Wy;if("leakyrelu"===e)return t?Py:Ly;if("sigmoid"===e)return"return 1.0 / (1.0 + exp(-1.0 * x));";throw new Error(`Activation ${e} has not been implemented for the WebGL backend.`)}class jy{constructor(e,t,n,a=!1,r=!1,s=!1,o=null,i=!1,u=!1){this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=n;const l=a?e[1]:e[2],c=Math.ceil(l/2),d=a?"i * 2, rc.y":"rc.y, i * 2",p=r?"rc.z, i * 2":"i * 2, rc.z",h=a?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],f=r?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"];let m="",g="";o&&(m=i?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${o}\n        }`:u?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${o}\n        }`:`vec4 activation(vec4 x) {\n          ${o}\n        }`,g="result = activation(result);");const y=s?"result += getBiasAtOutCoords();":"";s&&this.variableNames.push("bias"),i&&this.variableNames.push("preluActivationWeights"),u&&this.variableNames.push("leakyreluAlpha");let b="rc.x",x="rc.x";e[0]<t[0]?b=`int(min(float(rc.x), ${e[0]-1}.))`:t[0]<e[0]&&(x=`int(min(float(rc.x), ${t[0]-1}.))`),this.userCode=`\n      ${m}\n\n      const float sharedDimension = ${c}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        for (int i = 0; i < ${c}; i++) {\n          int batchA = ${b};\n          int batchB = ${x};\n          vec4 a = getMatrixA(batchA, ${d});\n          vec4 b = getMatrixB(batchB, ${p});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${h[0]} * ${f[0]});\n          result += (${h[1]} * ${f[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${y}\n\n        ${g}\n\n        setOutput(result);\n      }\n    `}}const qy="return areal * breal - aimag * bimag;",Ky="return areal * bimag + aimag * breal;";class Xy{constructor(e,t,n){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=su(t,n),this.userCode=`\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${e}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `}}const Yy="return a * b;";function Qy(e){const{inputs:t,backend:n}=e,{a:a,b:r}=t,s=yr(a.dtype,r.dtype);if("complex64"===a.dtype){const e=n.texData.get(a.dataId),t=n.texData.get(r.dataId),s=new Xy(qy,a.shape,r.shape),o=new Xy(Ky,a.shape,r.shape),i=[{dataId:e.complexTensorInfos.real.dataId,dtype:e.complexTensorInfos.real.dtype,shape:a.shape},{dataId:e.complexTensorInfos.imag.dataId,dtype:e.complexTensorInfos.imag.dtype,shape:a.shape},{dataId:t.complexTensorInfos.real.dataId,dtype:t.complexTensorInfos.real.dtype,shape:r.shape},{dataId:t.complexTensorInfos.imag.dataId,dtype:t.complexTensorInfos.imag.dtype,shape:r.shape}],u=n.runWebGLProgram(s,i,"float32"),l=n.runWebGLProgram(o,i,"float32"),c=Dy({inputs:{real:u,imag:l},backend:n});return n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(l),c}if(n.shouldExecuteOnCPU([a,r])){const e=n.texData.get(a.dataId),t=n.texData.get(r.dataId),[o,i]=Kg(a.shape,r.shape,e.values,t.values,s),u=n.makeTensorInfo(i,s);return n.texData.get(u.dataId).values=o,u}let o;return o=q().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new _y(Yy,a.shape,r.shape):new Ay(Yy,a.shape,r.shape),n.runWebGLProgram(o,[a,r],s)}const Zy={kernelName:Bt,backendName:"webgl",kernelFunc:Qy};function Jy(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{shape:s}=a,o=n,u=d(r.shape),l=y(s,u),c=d(l);i(u===c,(()=>`The new shape (${l}) has ${c} elements and the old shape (${r.shape}) has ${u} elements. The new shape and old shape must have the same number of elements.`));const p=o.texData.get(r.dataId);return!p.isPacked||Ph(r.shape,l)||null!==p.texture&&Ph(p.shape,l)?(o.incRef(r.dataId),{dataId:r.dataId,shape:l,dtype:r.dtype}):function(e,t,n){const a=[Oh(e.shape),...Dh(e.shape)],r={dtype:e.dtype,shape:a,dataId:e.dataId},s=[Oh(t),...Dh(t)],o=new yy(s,a),i=n.runWebGLProgram(o,[r],e.dtype,null,!0);return{dataId:i.dataId,shape:t,dtype:i.dtype}}(r,l,o)}const eb={kernelName:nn,backendName:"webgl",kernelFunc:Jy};class tb{constructor(e,t){this.variableNames=["x"];const{windowSize:n,batchSize:a,inSize:r,outSize:s}=e;this.outputShape=[a,s];const o=4*Math.floor(n/4),i=n%4;let u="sumValue += dot(values, ones);";if(null!=t){const e=1/t;u=`sumValue += dot(values * ${h(e)?e.toPrecision(2):e}, ones);`}let l="";r%n>0&&(l=`\n        if (inIdx < 0 || inIdx >= ${r}) {\n          return 0.0;\n        }\n      `),this.userCode=`\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${l}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${o}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${u}\n        }\n\n        int inIdx = inOffset + ${o};\n        if (${1===i}) {\n          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);\n\n          ${u}\n        } else if (${2===i}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1), 0.0, 0.0);\n\n          ${u}\n        } else if (${3===i}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2), 0.0);\n\n          ${u}\n        }\n        setOutput(sumValue);\n      }\n    `}}class nb{constructor(e,t){this.variableNames=["x"];const{windowSize:n,batchSize:a,inSize:r,outSize:s}=e;this.outputShape=[a,s];let o="0.0",i="";"prod"===t?o="1.0":"min"===t?(o="1.0 / 1e-20",i="min"):"max"===t&&(o="-1.0 / 1e-20",i="max");let u=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"sum"===t?u="sumValue":"prod"===t?u="prodValue":"all"===t?u="allValue":"any"===t&&(u="anyValue");const l=4*Math.floor(n/4),c=n%4;let d=`\n      if (${"sum"===t}) {\n        sumValue += dot(values, ones);\n      } else if (${"prod"===t}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${i}(values, minMaxValue);\n        if (${"min"===t} || ${"max"===t}) {\n          minMaxValue = ${i}(values, minMaxValue);\n          bvec4 isNaN = isnan(values);\n          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {\n            minMaxValue = vec4(NAN);\n          }\n        }\n      }\n    `,p="vec4";"all"===t?(o="1.0",d="\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ",p="bvec4"):"any"===t&&(o="0.0",d="\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      ",p="bvec4");let h="";r%n>0&&(h=`\n        if (inIdx < 0 || inIdx >= ${r}) {\n          return initializationValue;\n        }\n      `),this.userCode=`\n      const float initializationValue = ${o};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${h}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        vec4 minMaxValue = vec4(${o});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${l}; i += 4) {\n          int inIdx = inOffset + i;\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${d}\n        }\n\n        int inIdx = inOffset + ${l};\n        if (${1===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${d}\n        } else if (${2===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${d}\n        } else if (${3===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${d}\n        }\n        setOutput(${u});\n      }\n    `}}function ab(e,t,n,a){const r=function(e){const t=[];for(;0===t.length||1!==t[t.length-1].outSize;){const n=t.length?t[t.length-1].outSize:e[1],a=Ip(n);t.push({inSize:n,windowSize:a,outSize:Math.ceil(n/a)})}return t}(e.shape);let s=e;for(let o=0;o<r.length;o++){const{inSize:i,windowSize:u,outSize:l}=r[o];let c,d;c="mean"===n?0===o?new tb({windowSize:u,inSize:i,batchSize:e.shape[0],outSize:l},i):new tb({windowSize:u,inSize:i,batchSize:e.shape[0],outSize:l}):new nb({windowSize:u,inSize:i,batchSize:e.shape[0],outSize:l},n),d=s,s=a.runWebGLProgram(c,[s],t),d.dataId!==e.dataId&&a.disposeIntermediateTensorInfo(d)}return s}class rb{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let a=0;a<n.length;a++)n[a]=e[t[a]];this.outputShape=n,this.rank=n.length;const a=Tf(this.rank),r=function(e){const t=e.length;if(t>6)throw Error(`Transpose for rank ${t} is not yet supported`);const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],a=new Array(t);for(let t=0;t<e.length;t++)a[e[t]]=n[t];return a.join()}(t);this.userCode=`\n    void main() {\n      ${a} resRC = getOutputCoords();\n      setOutput(getA(${r}));\n    }\n    `}}class sb{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;const n=new Array(e.length);for(let a=0;a<n.length;a++)n[a]=e[t[a]];if(this.outputShape=n,this.rank=n.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);const a=Tf(this.rank),r=fy("rc",this.rank),s=new Array(this.rank);for(let e=0;e<t.length;e++)s[t[e]]=r[e];const o=`vec2(${s.slice(-2).join()})`,i=`++${r[this.rank-1]} < ${n[this.rank-1]}`,u=`getChannel(getA(${s.join()}), ${o})`;this.userCode=`\n    void main() {\n      ${a} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${u};\n      if(${i}) {\n        result[1] = ${u};\n      }\n      --${r[this.rank-1]};\n      if(++${r[this.rank-2]} < ${n[this.rank-2]}) {\n        result[2] = ${u};\n        if(${i}) {\n          result[3] = ${u};\n        }\n      }\n      setOutput(result);\n    }\n    `}}function ob(e,t,n){const a=q().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new sb(e.shape,t):new rb(e.shape,t);return n.runWebGLProgram(a,[e],e.dtype)}function ib(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{axis:s,keepDims:o}=a;return function(e,t,n,a){const r=t,s=e.shape.length,o=b(r,e.shape);let i=o;const u=Yu(i,s),l=null!=u;let c=e;l&&(c=ob(e,u,a),i=Zu(i.length,s)),Xu("sum",i,s);const[p,h]=qu(c.shape,i);let f=p;n&&(f=Ku(p,o));const m=d(h),g=Jy({inputs:{x:c},attrs:{shape:[d(e.shape)/m,m]},backend:a}),y=ab(g,br(e.dtype),"sum",a),x=Jy({inputs:{x:y},attrs:{shape:f},backend:a});return a.disposeIntermediateTensorInfo(g),a.disposeIntermediateTensorInfo(y),l&&a.disposeIntermediateTensorInfo(c),x}(r,s,o,n)}const ub={kernelName:wn,backendName:"webgl",kernelFunc:ib};function lb(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{perm:s}=a,o=n,i=r.shape.length,u=new Array(i);for(let e=0;e<u.length;e++)u[e]=r.shape[s[e]];let l;if(o.shouldExecuteOnCPU([r])){const e=o.texData.get(r.dataId).values,t=py(e,r.shape,r.dtype,s,u);l=o.makeTensorInfo(u,r.dtype);o.texData.get(l.dataId).values=t}else l=ob(r,s,o);return l}const cb={kernelName:Un,backendName:"webgl",kernelFunc:lb};function db({a:e,b:t,transposeA:n,transposeB:a,backend:r,bias:s=null,preluActivationWeights:o=null,leakyreluAlpha:u=0,activation:l=null}){const c=e.shape.length,p=t.shape.length,h=n?e.shape[c-2]:e.shape[c-1],f=a?t.shape[p-1]:t.shape[p-2],m=n?e.shape[c-1]:e.shape[c-2],g=a?t.shape[p-2]:t.shape[p-1],y=e.shape.slice(0,-2),b=t.shape.slice(0,-2),x=d(y),v=d(b);i(c>=2&&p>=2&&(x===v||1===x||1===v),(()=>`Error in matMul: the input batch dimensions must either be the same or at least one input batch dimension must be 1. Got input batch dimensions of (${y}) and (${b}).`));const k=(x>v?e.shape.slice(0,-2):t.shape.slice(0,-2)).concat([m,g]);i(h===f,(()=>`Error in matMul: inner shapes (${h}) and (${f}) of Tensors with shapes ${e.shape} and ${t.shape} and transposeA=${n} and transposeB=${a} must match.`));const w=n?[x,h,m]:[x,m,h],I=a?[v,g,f]:[v,f,g],N=Jy({inputs:{x:e},backend:r,attrs:{shape:w}}),$=Jy({inputs:{x:t},backend:r,attrs:{shape:I}}),T=[N,$],C=Math.max(x,v),E=n?N.shape[1]:N.shape[2],S=null!=s,R=null!=o,A="leakyrelu"===l,_=null!=l?Hy(l,!0):null;let F;if((1===m||1===g)&&E>1e3&&!1===(S||R||A||null!=_)){let e=N,t=$;n&&(e=lb({inputs:{x:N},backend:r,attrs:{perm:[0,2,1]}}),T.push(e)),a&&(t=lb({inputs:{x:$},backend:r,attrs:{perm:[0,2,1]}}),T.push(t));const s=1===g;let o=e;1!==g&&(o=Jy({inputs:{x:e},backend:r,attrs:{shape:[C,E,1]}}),T.push(o));const i=1===g?2:1;let u=t;s&&(u=Jy({inputs:{x:t},backend:r,attrs:{shape:[C,1,E]}}),T.push(u));const l=Qy({inputs:{a:o,b:u},backend:r});F=ib({inputs:{x:l},backend:r,attrs:{axis:i,keepDims:!0}}),T.push(l)}else{const i=yr(e.dtype,t.dtype),l=new jy(w,I,[C,m,g],n,a,S,_,R,A),c=[N,$];if(null!=s&&c.push(s),R&&c.push(o),A){const e=r.makeTensorInfo([],"float32",Ha(u,"float32"));c.push(e),T.push(e)}F=r.runWebGLProgram(l,c,i)}const O=Jy({inputs:{x:F},backend:r,attrs:{shape:k}});T.push(F);for(const e of T)r.disposeIntermediateTensorInfo(e);return O}const pb={kernelName:Qn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{a:r,b:s,bias:o,preluActivationWeights:i}=t,{transposeA:u,transposeB:l,activation:c,leakyreluAlpha:d}=a;return db({a:r,b:s,transposeA:u,transposeB:l,backend:n,bias:o,preluActivationWeights:i,leakyreluAlpha:d,activation:c})}},hb="return abs(x);";const fb={kernelName:Z,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:a}=t;if(n.shouldExecuteOnCPU([a])&&"complex64"!==a.dtype){const e=n.texData.get(a.dataId),t=ey(e.values);return n.makeTensorInfo(a.shape,a.dtype,t)}let r;return r=q().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new $y(a.shape,hb):new wy(a.shape,hb),n.runWebGLProgram(r,[a],a.dtype)}},mb=Uy({opSnippet:"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n"}),gb={kernelName:J,backendName:"webgl",kernelFunc:mb},yb=Uy({opSnippet:"if (isnan(x)) return x;\n  if (x < 1.0) return NAN;\nreturn log(x + sqrt(x * x - 1.0));"}),bb={kernelName:ee,backendName:"webgl",kernelFunc:yb},xb="return a + b;",vb=Gy({opSnippet:xb,packedOpSnippet:xb,supportsComplex:!0,cpuKernelImpl:Eg}),kb={kernelName:te,backendName:"webgl",kernelFunc:vb};class wb{constructor(e,t){this.outputShape=[],this.outputShape=e,this.variableNames=t.map(((e,t)=>`T${t}`));const n=[];this.variableNames.forEach((e=>{n.push(`float v${e} = get${e}AtOutCoords();`)}));const a=this.variableNames.map((e=>`v${e}`)).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        float result = ${a};\n        setOutput(result);\n      }\n    `}}class Ib{constructor(e,t){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.variableNames=t.map(((e,t)=>`T${t}`));const n=[];this.variableNames.forEach((e=>{n.push(`vec4 v${e} = get${e}AtOutCoords();`)}));const a=this.variableNames.map((e=>`v${e}`)).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        vec4 result = ${a};\n        setOutput(result);\n      }\n    `}}const Nb={kernelName:ne,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:a}=t,r=n;if(1===r.length)return Fy({inputs:{x:r[0]},backend:a});if(r.length>q().get("WEBGL_MAX_TEXTURES_IN_SHADER")){const t=Math.floor(r.length/2),n=e({inputs:r.slice(0,t),backend:a}),s=e({inputs:r.slice(t),backend:a});return e({inputs:[n,s],backend:a})}const s=r.map((e=>e.dtype)).reduce(((e,t)=>yr(e,t))),o=r.map((e=>e.shape)),i=q().getBool("WEBGL_PACK")?new Ib(r[0].shape,o):new wb(r[0].shape,o);return a.runWebGLProgram(i,r,s)}};const $b={kernelName:ae,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{axis:s,keepDims:o}=a,i=r.shape.length,u=b(s,r.shape);let l=u;const c=Yu(l,i);let p=r;null!=c&&(p=lb({inputs:{x:r},backend:n,attrs:{perm:c}}),l=Zu(l.length,i)),Xu("all",l,i);const[h,f]=qu(p.shape,l),m=Jy({inputs:{x:p},backend:n,attrs:{shape:[-1,d(f)]}}),g=ab(m,m.dtype,"all",n);let y;if(o){y=Jy({inputs:{x:g},backend:n,attrs:{shape:Ku(h,u)}})}else y=Jy({inputs:{x:g},backend:n,attrs:{shape:h}});return n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(g),null!=c&&n.disposeIntermediateTensorInfo(p),y}};const Tb={kernelName:re,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{axis:s,keepDims:o}=a,i=r.shape.length,u=b(s,r.shape);let l=u;const c=Yu(l,i);let p=r;null!=c&&(p=lb({inputs:{x:r},backend:n,attrs:{perm:c}}),l=Zu(l.length,i)),Xu("any",l,i);const[h,f]=qu(p.shape,l),m=Jy({inputs:{x:p},backend:n,attrs:{shape:[-1,d(f)]}}),g=ab(m,m.dtype,"any",n);let y;if(o){y=Jy({inputs:{x:g},backend:n,attrs:{shape:Ku(h,u)}})}else y=Jy({inputs:{x:g},backend:n,attrs:{shape:h}});return n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(g),null!=c&&n.disposeIntermediateTensorInfo(p),y}};class Cb{constructor(e,t,n){this.variableNames=["A"];const{windowSize:a,batchSize:r,outSize:s}=e;n||this.variableNames.push("bestIndicesA"),this.outputShape=[r,s];const o="max"===t?">":"<",i=n?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));";this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${a};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${a}; i++) {\n          int inIdx = ${i};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${o} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `}}class Eb{constructor(e,t,n,a){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,i(e.length>2,(()=>`Packed arg${n.charAt(0).toUpperCase()+n.slice(1)} supports only inputs with rank above 2.`));const r=e[e.length-1],s=Math.ceil(r/t);this.outputShape=e.slice(0,-1),s>1&&this.outputShape.push(s),a||this.variableNames.push("bestIndicesA");const o=this.outputShape,u=o.length,l=Tf(u),c=my("coords",u);let d,p;if(1===s){p=u+1;const e=Tf(p);d=`\n        ${e} sourceLocR = ${e}(${c.join()}, 0);\n        ++${c[u-1]};\n        ${e} sourceLocG = ${e}(${c.join()}, 0);\n        ++${c[u-2]};\n        ${e} sourceLocA = ${e}(${c.join()}, 0);\n        --${c[u-1]};\n        ${e} sourceLocB = ${e}(${c.join()}, 0);\n        --${c[u-2]};`}else p=u,d=`\n        ${l} sourceLocR = coords;\n        ++${c[u-1]};\n        ${l} sourceLocG = coords;\n        ++${c[u-2]};\n        ${l} sourceLocA = coords;\n        --${c[u-1]};\n        ${l} sourceLocB = coords;\n        --${c[u-2]};`;const h=["x","y","z","w","u","v"].slice(0,p),f="."+h[p-1],m=h.map((e=>"int "+e)),g=my("sourceLocR",p-1).concat("inIdx.r"),y=my("sourceLocG",p-1).concat("inIdx.g"),b=my("sourceLocB",p-1).concat("inIdx.b"),x=my("sourceLocA",p-1).concat("inIdx.a"),v="max"===n?"greaterThan":"lessThan",k=a?"":`\n          inIdx = round(vec4(getBestIndicesAChannel(${g.join()}),\n                             getBestIndicesAChannel(${y.join()}),\n                             getBestIndicesAChannel(${b.join()}),\n                             getBestIndicesAChannel(${x.join()})));`,w=`vec4(\n            getAChannel(${g.join()}),\n            hasNextCol ? getAChannel(${y.join()}) : 0.,\n            hasNextRow ? getAChannel(${b.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${x.join()}) : 0.)`,I=a?"":`\n      float getBestIndicesAChannel(${m.join()}) {\n        return getChannel(getBestIndicesA(${h.join()}),\n                                          vec2(${h.slice(-2).join()}));\n      }`;this.userCode=`\n      float getAChannel(${m.join()}) {\n        return getChannel(getA(${h.join()}),\n                               vec2(${h.slice(-2).join()}));\n      }\n      ${I}\n      void main() {\n        ${l} coords = getOutputCoords();\n        bool hasNextCol = ${c[u-1]} < ${o[u-1]-1};\n        bool hasNextRow = ${c[u-2]} < ${o[u-2]-1};\n        ${d}\n        ivec4 srcIdx = ivec4(sourceLocR${f}, sourceLocG${f},\n          sourceLocB${f}, sourceLocA${f}) * ${t};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${w};\n\n        for (int i = 0; i < ${t}; i++) {\n          inIdx = srcIdx;\n          ${k}\n          vec4 candidate = ${w};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${v}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `}}function Sb(e,t,n,a=null){let r=t.shape[0],s=t.shape[1];null!=a&&(r=a.shape[0],s=a.shape[1]);const o=Ip(s),i={windowSize:o,inSize:s,batchSize:r,outSize:Math.ceil(s/o)},u=new Cb(i,n,null==a),l=[t];null!=a&&l.push(a);const c=e.runWebGLProgram(u,l,"int32");if(1===c.shape[1])return c;const d=Sb(e,t,n,c);return e.disposeIntermediateTensorInfo(c),d}function Rb(e,t,n,a=null){const r=null!=a?a.shape:t.shape,s=Ip(r[r.length-1]),o=new Eb(r,s,n,null==a),i=null==a?[t]:[t,a],u=e.runWebGLProgram(o,i,"int32");if(u.shape.length===t.shape.length){const a=Rb(e,t,n,u);return e.disposeIntermediateTensorInfo(u),a}return u}function Ab(e,t,n,a){const r=[n];if(Xu("arg"+a.charAt(0).toUpperCase()+a.slice(1),r,t.shape.length),!q().getBool("WEBGL_PACK_REDUCE")||t.shape.length<=2){const n=[],[s,o]=qu(t.shape,r),i=d(o),u=Jy({inputs:{x:t},backend:e,attrs:{shape:[-1,i]}});n.push(u);const l=Sb(e,u,a);n.push(l);const c=Jy({inputs:{x:l},backend:e,attrs:{shape:s}});return n.forEach((t=>e.disposeIntermediateTensorInfo(t))),c}return Rb(e,t,a)}const _b={kernelName:se,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{axis:s}=a;let o=b(s,r.shape);const i=Yu(o,r.shape.length);let u=r;const l=[];null!=i&&(u=lb({inputs:{x:r},backend:n,attrs:{perm:i}}),l.push(u),o=Zu(o.length,u.shape.length)),Xu("argMax",[o[0]],u.shape.length);const c=Ab(n,u,o[0],"max");return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}};const Fb={kernelName:oe,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{axis:s}=a;let o=b(s,r.shape);const i=Yu(o,r.shape.length);let u=r;const l=[];null!=i&&(u=lb({inputs:{x:r},backend:n,attrs:{perm:i}}),l.push(u),o=Zu(o.length,u.shape.length)),Xu("argMin",[o[0]],u.shape.length);const c=Ab(n,u,o[0],"min");return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}},Ob=Uy({opSnippet:"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n"}),Db={kernelName:ie,backendName:"webgl",kernelFunc:Ob},Mb=Uy({opSnippet:"if (isnan(x)) return x;return log(x + sqrt(x * x + 1.0));"}),Lb={kernelName:ue,backendName:"webgl",kernelFunc:Mb},Pb=Uy({opSnippet:"if (isnan(x)) return x;\n  return atan(x);\n"}),Bb={kernelName:le,backendName:"webgl",kernelFunc:Pb},Wb=Gy({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return atan(a, b);\n",packedOpSnippet:"\n  vec4 result = atan(a, b);\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n"}),Vb={kernelName:de,backendName:"webgl",kernelFunc:Wb},zb=Uy({opSnippet:"if (isnan(x)) return x;\n  if ((x < -1.0) || (x > 1.0)) return NAN;\nreturn (log(1.0 + x) - log(1.0 - x)) / 2.0;"}),Ub={kernelName:ce,backendName:"webgl",kernelFunc:zb};class Gb{constructor(e,t,n,a=!1,r=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const s=e.filterWidth,o=e.strideHeight,i=e.strideWidth,u=e.dilationHeight,l=e.dilationWidth,c=e.effectiveFilterHeight,d=e.effectiveFilterWidth,p=e.padInfo.top,h=e.padInfo.left;this.outputShape=e.outShape;const f="avg"===t,m=`((batch  * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + d`,g=`(xR * ${e.inWidth} + xC) * ${e.inChannels} + d`;let y="0.0";if(f||(y="-1.0 / 1e-20"),n){const t=">=";return void(this.userCode=`\n        const ivec2 strides = ivec2(${o}, ${i});\n        const ivec2 pads = ivec2(${p}, ${h});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${c};\n              wR += ${u}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${d};\n                wC += ${l}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value ${t} currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${a?r?m:g:`wR * ${d} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let b=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(b="avgValue / count");const x=4*Math.floor(s/4),v=s%4,k=`\n      if (${f}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec2 strides = ivec2(${o}, ${i});\n      const ivec2 pads = ivec2(${p}, ${h});\n      const float initializationValue = ${y};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${y});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${c};\n            wR += ${u}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${x}; wC += 4) {\n            int xC = xCCorner + wC * ${l};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${l}, d),\n              getValue(batch, xR, xC + 2 * ${l}, d),\n              getValue(batch, xR, xC + 3 * ${l}, d)\n            );\n\n            ${k}\n          }\n\n          int xC = xCCorner + ${x};\n          if (${1===v}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${k}\n          } else if (${2===v}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${l}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${k}\n          } else if (${3===v}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${l}, d),\n              getValue(batch, xR, xC + 2 * ${l}, d),\n              initializationValue\n            );\n\n            ${k}\n          }\n        }\n        setOutput(${b});\n      }\n    `}}class Hb{constructor(e,t,n,a=!1,r=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const s=e.filterWidth,o=e.strideDepth,i=e.strideHeight,u=e.strideWidth,l=e.dilationDepth,c=e.dilationHeight,d=e.dilationWidth,p=e.effectiveFilterDepth,h=e.effectiveFilterHeight,f=e.effectiveFilterWidth,m=e.padInfo.front,g=e.padInfo.top,y=e.padInfo.left;this.outputShape=e.outShape;const b="avg"===t;let x="0.0";if(b||(x="-1.0 / 1e-20"),n){const t=">=";return void(this.userCode=`\n        const ivec3 strides =\n            ivec3(${o}, ${i}, ${u});\n        const ivec3 pads = ivec3(${m}, ${g}, ${y});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${p};\n              wD += ${l}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${h};\n                wR += ${c}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${f};\n                  wC += ${d}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value ${t} currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${a?r?`(((batch * ${e.inDepth} + xD) * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`((xD * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`wD * ${h} * ${f} +\n                      wR * ${f} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let v=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(v="avgValue / count");const k=4*Math.floor(s/4),w=s%4,I=`\n      if (${b}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec3 strides =\n        ivec3(${o}, ${i}, ${u});\n      const ivec3 pads = ivec3(${m}, ${g}, ${y});\n      const float initializationValue = ${x};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${x});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${p};\n            wD += ${l}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${h};\n            wR += ${c}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${k}; wC += 4) {\n              int xC = xCCorner + wC * ${d};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${d}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${d}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${d}, ch)\n              );\n\n              ${I}\n            }\n\n            int xC = xCCorner + ${k};\n            if (${1===w}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${I}\n            } else if (${2===w}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${d}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${I}\n            } else if (${3===w}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${d}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${d}, ch),\n                initializationValue\n              );\n\n              ${I}\n            }\n          }\n          setOutput(${v});\n        }\n      }\n    `}}const jb={kernelName:pe,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t;Hh(r,"avgPool");const{filterSize:s,strides:o,pad:u,dimRoundingMode:l}=a;i(xi(o,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${o} and dilations '1'`));const c=li(r.shape,s,o,1,u,l);if(1===c.filterWidth&&1===c.filterHeight&&p(c.inShape,c.outShape))return Fy({inputs:{x:r},backend:n});const d=new Gb(c,"avg",!1);return n.runWebGLProgram(d,[r],"float32")}};const qb={kernelName:fe,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{filterSize:s,strides:o,pad:i,dimRoundingMode:u,dataFormat:l}=a,c=ci(r.shape,s,o,[1,1,1],i,u,l),d=new Hb(c,"avg",!1);return n.runWebGLProgram(d,[r],"float32")}};class Kb{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,a=e.strideHeight,r=e.strideWidth,s=e.dilationHeight,o=e.dilationWidth,i=e.effectiveFilterHeight,u=e.effectiveFilterWidth,l=i-1-e.padInfo.top,c=u-1-e.padInfo.left,d=1/(t*n);this.userCode=`\n      const ivec2 pads = ivec2(${l}, ${c});\n      const float avgMultiplier = float(${d});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${i};\n            wR += ${s}) {\n          float dyR = float(dyRCorner + wR) / ${a}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${u};\n            wC+= ${o}) {\n            float dyC = float(dyCCorner + wC) / ${r}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Xb{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.filterDepth,n=e.filterHeight,a=e.filterWidth,r=e.strideDepth,s=e.strideHeight,o=e.strideWidth,i=e.dilationDepth,u=e.dilationHeight,l=e.dilationWidth,c=e.effectiveFilterDepth,d=e.effectiveFilterHeight,p=e.effectiveFilterWidth,h=c-1-e.padInfo.front,f=d-1-e.padInfo.top,m=p-1-e.padInfo.left,g=1/(t*n*a);this.userCode=`\n      const ivec3 pads = ivec3(${h}, ${f}, ${m});\n      const float avgMultiplier = float(${g});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${c};\n            wD += ${i}) {\n          float dyD = float(dyDCorner + wD) / ${r}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${d};\n              wR += ${u}) {\n            float dyR = float(dyRCorner + wR) / ${s}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${p};\n                wC += ${l}) {\n              float dyC = float(dyCCorner + wC) / ${o}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const Yb={kernelName:me,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{dy:r,input:s}=t,o=s,{filterSize:i,strides:u,pad:l,dimRoundingMode:c}=a,d=ci(o.shape,i,u,[1,1,1],l,c),p=new Xb(d);return n.runWebGLProgram(p,[r],o.dtype)}};const Qb={kernelName:he,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{dy:r,input:s}=t,o=s;Hh([r,s],"avgPoolGrad");const{filterSize:i,strides:u,pad:l}=a,c=li(o.shape,i,u,1,l),d=new Kb(c);return n.runWebGLProgram(d,[r],o.dtype)}};const Zb={kernelName:ge,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{a:r,b:s}=t,{transposeA:o,transposeB:i}=a;return db({a:r,b:s,transposeA:o,transposeB:i,backend:n})}};class Jb{constructor(e,t,n,a,r,s){this.outputShape=[],this.variableNames=["x","mean","variance"],su(e,t),su(e,n);let o="0.0";null!=a&&(su(e,a),this.variableNames.push("offset"),o="getOffsetAtOutCoords()");let i="1.0";null!=r&&(su(e,r),this.variableNames.push("scale"),i="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${o};\n        float scale = ${i};\n        float inv = scale * inversesqrt(variance + float(${s}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `}}class ex{constructor(e,t,n,a,r,s){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],su(e,t),su(e,n);let o="vec4(0.0)";null!=a&&(su(e,a),this.variableNames.push("offset"),o="getOffsetAtOutCoords()");let i="vec4(1.0)";null!=r&&(su(e,r),this.variableNames.push("scale"),i="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        vec4 offset = ${o};\n        vec4 scale = ${i};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${s}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `}}const tx={kernelName:rt,backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:a,mean:r,variance:s,offset:o,scale:u}=e;i(r.shape.length===s.shape.length,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),i(null==o||r.shape.length===o.shape.length,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),i(null==u||r.shape.length===u.shape.length,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));let{varianceEpsilon:l}=n;null==l&&(l=.001);const c=[a,r,s];let d=null;null!=o&&(d=o.shape,c.push(o));let p=null;null!=u&&(p=u.shape,c.push(u));const h=q().getBool("WEBGL_PACK_NORMALIZATION")?new ex(a.shape,r.shape,s.shape,d,p,l):new Jb(a.shape,r.shape,s.shape,d,p,l);return t.runWebGLProgram(h,c,c[0].dtype)}};class nx{constructor(e){this.variableNames=["source"],this.outputShape=e,this.rank=e.length;const t=Tf(this.rank),n=`uniform int start[${this.rank}];`,a=function(e){if(1===e)return"sourceLoc";if(e<=6)return ax.slice(0,e).map((e=>"sourceLoc."+e)).join(",");throw Error(`Slicing for rank ${e} is not yet supported`)}(this.rank);let r;r=`\n        ${t} sourceLoc;\n        ${t} coords = getOutputCoords();\n        ${e.map(((e,t)=>`sourceLoc.${ax[t]} = start[${t}] + coords.${ax[t]};`)).join("\n")}\n      `,this.userCode=`\n      ${n}\n      void main() {\n        ${r}\n        setOutput(getSource(${a}));\n      }\n    `}getCustomSetupFunc(e){if(e.length!==this.rank)throw Error(`The rank (${this.rank}) of the program must match the length of start (${e.length})`);return(t,n)=>{null==this.startLoc&&(this.startLoc=t.getUniformLocationNoThrow(n,"start"),null==this.startLoc)||t.gl.uniform1iv(this.startLoc,e)}}}const ax=["x","y","z","w","u","v"];class rx{constructor(e){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.rank=e.length;const t=Tf(this.rank),n=my("coords",this.rank),a=my("sourceLoc",this.rank),r=1===this.rank?"sourceLoc":`vec2(${a.slice(-2).join()})`,s=`getChannel(getSource(${a.join()}), ${r})`,o=`\n      result.x = ${s};\n      if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n        ++${a[this.rank-1]};\n        result.y = ${s};\n        --${a[this.rank-1]};\n      }\n    `,i=1===this.rank?"":`\n      --${n[this.rank-1]};\n      if (++${n[this.rank-2]} < ${e[this.rank-2]}) {\n        ++${a[this.rank-2]};\n        result.z = ${s};\n        if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n          ++${a[this.rank-1]};\n          result.w = ${s};\n        }\n      }\n    `,u=this.rank<=4?`sourceLoc = coords +\n            ${t}(${e.map(((e,t)=>`start[${t}]`)).join()});`:e.map(((e,t)=>`${a[t]} = ${n[t]} + start[${t}];`)).join("\n");this.userCode=`\n      uniform int start[${this.rank}];\n      void main() {\n        ${t} coords = getOutputCoords();\n        ${t} sourceLoc;\n        ${u}\n        vec4 result = vec4(0.);\n        ${o}\n        ${i}\n        setOutput(result);\n      }\n    `}getCustomSetupFunc(e){if(e.length!==this.rank)throw Error(`The rank (${this.rank}) of the program must match the length of start (${e.length})`);return(t,n)=>{null==this.startLoc&&(this.startLoc=t.getUniformLocationNoThrow(n,"start"),null==this.startLoc)||t.gl.uniform1iv(this.startLoc,e)}}}function sx(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{begin:s,size:o}=a,[i,u]=To(r,s,o);if(po(r,i,u),0===d(u))return n.makeTensorInfo(u,r.dtype,[]);if(n.shouldExecuteOnCPU([r])||"string"===r.dtype){const e=n.texData.get(r.dataId),t=ty(e.values,i,u,r.shape,r.dtype);return n.makeTensorInfo(u,r.dtype,t)}const{isPacked:l}=n.texData.get(r.dataId),c=No(r.shape,i,u);if(l||!c){const e=q().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new rx(u):new nx(u),t=e.getCustomSetupFunc(i);return n.runWebGLProgram(e,[r],r.dtype,t)}return n.uploadToGPU(r.dataId),function(e,t,n,a){const r=a.texData.get(e.dataId),s=a.makeTensorInfo(n,e.dtype),o=a.texData.get(s.dataId);Object.assign(o,r),o.refCount=1,o.shape=n,o.dtype=e.dtype;let i=$o(t,O(e.shape));r.slice&&(i+=r.slice.flatOffset),o.slice={flatOffset:i,origDataId:r.slice&&r.slice.origDataId||e.dataId};const u=a.dataRefCount.get(o.slice.origDataId)||1;return a.dataRefCount.set(o.slice.origDataId,u+1),s}(r,i,u,n)}const ox={kernelName:mn,backendName:"webgl",kernelFunc:sx},ix={kernelName:ye,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{blockShape:s,crops:o}=a;i(r.shape.length<=4,(()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet"));const u=s.reduce(((e,t)=>e*t)),l=$p(r.shape,s,u),c=Tp(l.length,s.length),d=Cp(r.shape,s,u),p=Ep(o,s.length),h=Sp(d,o,s.length),f=[],m=Jy({inputs:{x:r},backend:n,attrs:{shape:l}}),g=lb({inputs:{x:m},backend:n,attrs:{perm:c}}),y=Jy({inputs:{x:g},backend:n,attrs:{shape:d}}),b=sx({inputs:{x:y},backend:n,attrs:{begin:p,size:h}});return f.push(m),f.push(g),f.push(y),f.forEach((e=>n.disposeIntermediateTensorInfo(e))),b}};const ux={kernelName:be,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r,weights:s}=t,{size:o}=a,i=n.readSync(r.dataId),u=n.readSync(s.dataId),l=Sg(i,u,s.dtype,s.shape,o);return n.makeTensorInfo([o],s.dtype,l)}},lx=Gy({opSnippet:"return float(a != b);",cpuKernelImpl:Yg,dtype:"bool"}),cx={kernelName:Vt,backendName:"webgl",kernelFunc:lx};function dx(e){const{inputs:t,backend:n}=e,{input:a}=t;return Fy({inputs:{x:n.texData.get(a.dataId).complexTensorInfos.real},backend:n})}const px={kernelName:Jt,backendName:"webgl",kernelFunc:dx};const hx={kernelName:xe,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:a,attrs:r}=t,{x:s}=n,{dtype:o}=r;if("complex64"===o){if("complex64"===s.dtype)return Fy({inputs:{x:s},backend:a});const t=ll(s.shape),n=e({inputs:{x:s},backend:a,attrs:{dtype:"float32"}}),r=Dy({inputs:{real:n,imag:t},backend:a});return t.dispose(),a.disposeIntermediateTensorInfo(n),r}if("complex64"===s.dtype){const t=dx({inputs:{input:s},backend:a}),n=e({inputs:{x:t},backend:a,attrs:{dtype:o}});return a.disposeIntermediateTensorInfo(t),n}if(!N(s.dtype,o)){const e=Fy({inputs:{x:s},backend:a});return{dataId:e.dataId,shape:e.shape,dtype:o}}if("int32"===o)return function(e,t){const n=new wy(e.shape,"return float(int(x));"),a=t.runWebGLProgram(n,[e],"int32");return{dataId:a.dataId,shape:a.shape,dtype:a.dtype}}(s,a);if("bool"===o){const e=a.makeTensorInfo([],"bool",v("bool",1)),t=lx({inputs:{a:s,b:e},backend:a});return a.disposeIntermediateTensorInfo(e),t}throw new Error(`Error in Cast: failed to cast ${s.dtype} to ${o}`)}},fx="return ceil(x);",mx=Uy({opSnippet:fx,packedOpSnippet:fx,cpuKernelImpl:Ag}),gx={kernelName:ve,backendName:"webgl",kernelFunc:mx};class yx{constructor(e){this.variableNames=["A"],this.outputShape=e,this.userCode="\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    "}getCustomSetupFunc(e,t){return(n,a)=>{null==this.minLoc&&(this.minLoc=n.getUniformLocationNoThrow(a,"minVal"),this.maxLoc=n.getUniformLocationNoThrow(a,"maxVal")),n.gl.uniform1f(this.minLoc,e),n.gl.uniform1f(this.maxLoc,t)}}}class bx{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.userCode="\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    "}getCustomSetupFunc(e,t){return(n,a)=>{null==this.minLoc&&(this.minLoc=n.getUniformLocationNoThrow(a,"minVal"),this.maxLoc=n.getUniformLocationNoThrow(a,"maxVal")),n.gl.uniform1f(this.minLoc,e),n.gl.uniform1f(this.maxLoc,t)}}}const xx={kernelName:ke,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{clipValueMin:s,clipValueMax:o}=a;let i;i=q().getBool("WEBGL_PACK_CLIP")?new bx(r.shape):new yx(r.shape);const u=i.getCustomSetupFunc(s,o);return n.runWebGLProgram(i,[r],r.dtype,u)}};class vx{constructor(e){this.variableNames=["real","imag"],this.outputShape=e,this.userCode="\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    "}}function kx(e,t){return{dataId:t.dataId,dtype:t.dtype,shape:e.shape}}const wx={kernelName:Ie,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:a}=t,r=n.texData.get(a.dataId),s=new vx(a.shape),o=[kx(a,r.complexTensorInfos.real),kx(a,r.complexTensorInfos.imag)];return n.runWebGLProgram(s,o,o[0].dtype)}};class Ix{constructor(e){this.outputShape=[],this.outputShape=wp(e,1),this.variableNames=e.map(((e,t)=>`T${t}`));const t=new Array(e.length-1);t[0]=e[0][1];for(let n=1;n<t.length;n++)t[n]=t[n-1]+e[n][1];const n=[`if (yC < ${t[0]}) setOutput(getT0(yR, yC));`];for(let e=1;e<t.length;e++){const a=t[e-1];n.push(`else if (yC < ${t[e]}) setOutput(getT${e}(yR, yC-${a}));`)}const a=t.length,r=t[t.length-1];n.push(`else setOutput(getT${a}(yR, yC-${r}));`),this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${n.join("\n        ")}\n      }\n    `}}class Nx{constructor(e,t){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=wp(e,t);const n=this.outputShape,a=n.length,r=Tf(a),s=my("coords",a),o=["x","y","z","w","u","v"].slice(0,a);this.variableNames=e.map(((e,t)=>`T${t}`));const i=new Array(e.length-1);i[0]=e[0][t];for(let n=1;n<i.length;n++)i[n]=i[n-1]+e[n][t];const u=o[t],l=o.slice(-2),c=o.join();let d=`if (${u} < ${i[0]}) {\n        return getChannel(\n            getT0(${c}), vec2(${l.join()}));\n        }`;for(let e=1;e<i.length;e++){const t=i[e-1];d+=`\n        if (${u} < ${i[e]}  && ${u} >= ${i[e-1]}) {\n          return getChannel(\n            getT${e}(${$x(o,u,t)}),\n            vec2(${$x(l,u,t)}));\n        }`}const p=i.length,h=i[i.length-1];d+=`\n        return getChannel(\n          getT${p}(${$x(o,u,h)}),\n          vec2(${$x(l,u,h)}));`,this.userCode=`\n      float getValue(${o.map((e=>"int "+e))}) {\n        ${d}\n      }\n\n      void main() {\n        ${r} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${s}), 0., 0., 0.);\n\n        ${s[a-1]} = ${s[a-1]} + 1;\n        if (${s[a-1]} < ${n[a-1]}) {\n          result.g = getValue(${s});\n        }\n\n        ${s[a-2]} = ${s[a-2]} + 1;\n        if (${s[a-2]} < ${n[a-2]}) {\n          result.a = getValue(${s});\n        }\n\n        ${s[a-1]} = ${s[a-1]} - 1;\n        if (${s[a-2]} < ${n[a-2]} &&\n            ${s[a-1]} < ${n[a-1]}) {\n          result.b = getValue(${s});\n        }\n        setOutput(result);\n      }\n    `}}function $x(e,t,n){const a=e.indexOf(t);return e.map(((e,t)=>t===a?`${e} - ${n}`:e)).join()}function Tx(e){const{inputs:t,backend:n}=e,{input:a}=t;return Fy({inputs:{x:n.texData.get(a.dataId).complexTensorInfos.imag},backend:n})}const Cx={kernelName:dt,backendName:"webgl",kernelFunc:Tx};function Ex(e,t,n){const a=e[0].dtype;if("complex64"===a){const a=e.map((e=>dx({inputs:{input:e},backend:n}))),r=e.map((e=>Tx({inputs:{input:e},backend:n}))),s=Ex(a,t,n),o=Ex(r,t,n),i=Dy({inputs:{real:s,imag:o},backend:n});return a.forEach((e=>n.disposeIntermediateTensorInfo(e))),r.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(o),i}let r=n.shouldExecuteOnCPU(e);if("string"===a&&(r=!0),r){const r=e.map((e=>{const a=d(e.shape.slice(t));return Jy({inputs:{x:e},backend:n,attrs:{shape:[-1,a]}})})),s=r.map((e=>({vals:n.readSync(e.dataId),shape:e.shape}))),o=wp(r.map((e=>e.shape)),1),i=1===r[0].shape[0],u=_g(s,o,a,i),l=wp(e.map((e=>e.shape)),t),c=n.makeTensorInfo(l,a,u);return r.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}if(e.length>q().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER")){const a=Math.floor(e.length/2),r=Ex(e.slice(0,a),t,n),s=Ex(e.slice(a),t,n),o=Ex([r,s],t,n);return n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(s),o}if(q().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&e[0].shape.length>1){const r=new Nx(e.map((e=>e.shape)),t);return n.runWebGLProgram(r,e,a)}const{tensors2D:s,outShape:o}=function(e,t,n){const a=wp(e.map((e=>e.shape)),t);return{tensors2D:e.map((e=>Jy({inputs:{x:e},attrs:{shape:[-1,d(e.shape.slice(t))]},backend:n}))),outShape:a}}(e,t,n),i=new Ix(s.map((e=>e.shape))),u=n.runWebGLProgram(i,s,a);s.forEach((e=>n.disposeIntermediateTensorInfo(e)));const l=Jy({inputs:{x:u},attrs:{shape:o},backend:n});return n.disposeIntermediateTensorInfo(u),l}function Sx(e){const{inputs:t,backend:n,attrs:a}=e,{axis:r}=a,s=b(r,t[0].shape)[0],o=wp(t.map((e=>e.shape)),s);if(0===d(o))return n.makeTensorInfo(o,t[0].dtype,[]);const i=t.filter((e=>d(e.shape)>0));if(1===i.length)return Fy({inputs:{x:i[0]},backend:n});return kp(i.map((e=>e.shape)),s),Ex(i,s,n)}const Rx={kernelName:Ne,backendName:"webgl",kernelFunc:Sx};class Ax{constructor(e,t=!1,n=null,a=!1,r=!1){this.variableNames=["x","W"],this.outputShape=e.outShape;const s=e.padInfo.top,o=e.padInfo.left,i=e.strideHeight,u=e.strideWidth,l=e.dilationHeight,c=e.dilationWidth,d=e.filterHeight,p=e.filterWidth,h=4*Math.floor(e.inChannels/4),f=e.inChannels%4,m="channelsLast"===e.dataFormat,g=m?1:2,y=m?2:3,b=m?3:1;let x="",v="";n&&(x=a?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:r?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,v="result = activation(result);");const k=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),a&&this.variableNames.push("preluActivationWeights"),r&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${x}\n\n      const ivec2 strides = ivec2(${i}, ${u});\n      const ivec2 pads = ivec2(${s}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${b}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${g}], coords[${y}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${d}; wR++) {\n          int xR = xRCorner + wR * ${l};\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${p}; wC++) {\n            int xC = xCCorner + wC * ${c};\n\n            if (xC < 0 || xC >= ${e.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${h}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${m}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${1===f}) {\n\n              if (${m}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${h}) *\n                    getW(wR, wC, ${h}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${h}, xR, xC) *\n                    getW(wR, wC, ${h}, d2);\n              }\n\n            } else if (${2===f}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${h}, d2),\n                getW(wR, wC, ${h} + 1, d2)\n              );\n\n              if (${m}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${h}),\n                  getX(batch, xR, xC, ${h} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${h}, xR, xC),\n                  getX(batch, ${h} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${3===f}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${h}, d2),\n                getW(wR, wC, ${h} + 1, d2),\n                getW(wR, wC, ${h} + 2, d2)\n              );\n\n              if (${m}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${h}),\n                  getX(batch, xR, xC, ${h} + 1),\n                  getX(batch, xR, xC, ${h} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${h}, xR, xC),\n                  getX(batch, ${h} + 1, xR, xC),\n                  getX(batch, ${h} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${k}\n        ${v}\n        setOutput(result);\n      }\n    `}}class _x{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const t=e.padInfo.front,n=e.padInfo.top,a=e.padInfo.left,r=e.strideDepth,s=e.strideHeight,o=e.strideWidth,i=e.dilationDepth,u=e.dilationHeight,l=e.dilationWidth,c=e.filterDepth,d=e.filterHeight,p=e.filterWidth,h=4*Math.floor(e.inChannels/4),f=e.inChannels%4;this.userCode=`\n      const ivec3 strides = ivec3(${r}, ${s}, ${o});\n      const ivec3 pads = ivec3(${t}, ${n}, ${a});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${c}; wF++) {\n          int xF = xFCorner + wF * ${i};\n\n          if (xF < 0 || xF >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${d}; wR++) {\n            int xR = xRCorner + wR * ${u};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${p}; wC++) {\n              int xC = xCCorner + wC * ${l};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${h}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${1===f}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${h}) *\n                  getW(wF, wR, wC, ${h}, d2);\n              } else if (${2===f}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${h}),\n                  getX(batch, xF, xR, xC, ${h} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${h}, d2),\n                  getW(wF, wR, wC, ${h} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${3===f}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${h}),\n                  getX(batch, xF, xR, xC, ${h} + 1),\n                  getX(batch, xF, xR, xC, ${h} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${h}, d2),\n                  getW(wF, wR, wC, ${h} + 1, d2),\n                  getW(wF, wR, wC, ${h} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Fx{constructor(e,t,n){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e;const{filterWidth:a,inChannels:r,strideWidth:s,strideHeight:o,padInfo:i,outWidth:u,dilationWidth:l,dilationHeight:c,dataFormat:d}=n,{left:p,top:h}=i,f=r*a,m=qh(),g="channelsLast"===d,y=g?0:1,b=g?1:2;let x="";for(let n=0;n<=1;n++)for(let a=0;a<=1;a++)x+=`\n          blockIndex = rc.y + ${a};\n          pos = rc.x + ${n};\n\n          if(blockIndex < ${e[1]} && pos < ${e[0]}) {\n            offsetY = int(blockIndex / (${u})) * ${o} - ${h};\n            d0 = offsetY + ${c} * (pos / ${f});\n\n            if(d0 < ${t[y]} && d0 >= 0) {\n\n              offsetX = int(mod(float(blockIndex), ${u}.) * ${s}. - ${p}.);\n              d1 = offsetX + ${l} * (int(mod(float(pos), ${f}.) / ${r}.));\n\n              if(d1 < ${t[b]} && d1 >= 0) {\n\n                ch = int(mod(float(pos), ${r}.));\n\n                if (${g}) {\n                  innerDims = vec2(d1, ch);\n                  result[${2*n+a}] = getChannel(\n                    getA(d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${2*n+a}] = getChannel(\n                    getA(ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;this.userCode=`\n      void main() {\n        ivec2 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${x}\n\n        ${m.output} = result;\n      }\n    `}}function Ox({x:e,filter:t,convInfo:n,backend:a,bias:r=null,preluActivationWeights:s=null,leakyreluAlpha:o=0,activation:u=null}){const l=e.shape,c=a.texData.get(e.dataId),d=n.inChannels,p=l[0]*l[1]*l[2],h=n.outChannels,f="channelsLast"===n.dataFormat;let m;const g=[],y=(1===p||1===h)&&d>1e3,b=l[2]%2!=0&&!!c.isPacked;if(!y&&q().getBool("WEBGL_LAZILY_UNPACK")&&q().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&b){const d=f?l[0]*l[1]*(l[2]+1):l[0]*l[2]*(l[3]+1),p={dataId:e.dataId,shape:[1,d,n.inChannels],dtype:e.dtype},h=c.shape;c.shape=c.shape.slice(),c.shape[c.shape.length-2]++,i(Ph(c.shape,p.shape),(()=>`packed reshape ${c.shape} to ${p.shape} isn't free`));const y=Jy({inputs:{x:t},backend:a,attrs:{shape:[1,n.inChannels,n.outChannels]}});g.push(y);const b=db({a:p,b:y,backend:a,transposeA:false,transposeB:false,bias:r,activation:u,preluActivationWeights:s,leakyreluAlpha:o}),x=a.texData.get(b.dataId);i(x.isPacked,(()=>"batchMatMul result is expected to be packed")),c.shape=h,x.shape=n.outShape,m=Fy({inputs:{x:b},backend:a}),m.shape=n.outShape,g.push(b)}else{const i=Jy({inputs:{x:e},backend:a,attrs:{shape:[1,f?l[0]*l[1]*l[2]:l[0]*l[2]*l[3],n.inChannels]}}),c=Jy({inputs:{x:t},backend:a,attrs:{shape:[1,n.inChannels,n.outChannels]}}),d=db({a:i,b:c,transposeA:false,transposeB:false,backend:a,bias:r,activation:u,preluActivationWeights:s,leakyreluAlpha:o});m=Jy({inputs:{x:d},backend:a,attrs:{shape:n.outShape}}),g.push(i),g.push(c),g.push(d)}for(const e of g)a.disposeIntermediateTensorInfo(e);return m}function Dx({x:e,filter:t,convInfo:n,backend:a,bias:r=null,preluActivationWeights:s=null,leakyreluAlpha:o=0,activation:i=null}){const{filterWidth:u,filterHeight:l,inChannels:c,outWidth:p,outHeight:h,dataFormat:f}=n,m="channelsLast"===f,g=u*l*c,y=h*p,b=[g,y],x=[],v=Jy({inputs:{x:e},backend:a,attrs:{shape:e.shape.slice(1)}}),k=Jy({inputs:{x:t},backend:a,attrs:{shape:[1,g,d(t.shape)/g]}});x.push(v),x.push(k);const w=new Fx(b,v.shape,n),I=a.runWebGLProgram(w,[v],"float32"),N=Jy({inputs:{x:I},backend:a,attrs:{shape:[1,b[0],b[1]]}});x.push(I),x.push(N);const $=null!=r,T=null!=s,C="leakyrelu"===i,E=i?Hy(i,!0):null,S=new jy(N.shape,k.shape,[1,y,n.outChannels],!0,!1,$,E,T,C),R=[N,k];if(r&&R.push(r),T&&R.push(s),C){const e=a.makeTensorInfo([],"float32",Ha(o,"float32"));R.push(e),x.push(e)}const A=a.runWebGLProgram(S,R,"float32"),_=Jy({inputs:{x:A},backend:a,attrs:{shape:m?[1,h,p,n.outChannels]:[1,n.outChannels,h,p]}});x.push(A);for(const e of x)a.disposeIntermediateTensorInfo(e);return _}const Mx={kernelName:$e,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r,filter:s}=t,{strides:o,pad:i,dataFormat:u,dilations:l,dimRoundingMode:c}=a,d=vi(u),p=di(r.shape,s.shape,o,l,i,c,!1,d);let h;if(1!==p.filterHeight||1!==p.filterWidth||1!==p.dilationHeight||1!==p.dilationWidth||1!==p.strideHeight||1!==p.strideWidth||"SAME"!==p.padInfo.type&&"VALID"!==p.padInfo.type)if(q().getBool("WEBGL_CONV_IM2COL")&&1===r.shape[0])h=Dx({x:r,filter:s,convInfo:p,backend:n});else{const e=new Ax(p);h=n.runWebGLProgram(e,[r,s],"float32")}else h=Ox({x:r,filter:s,convInfo:p,backend:n});const f=Jy({inputs:{x:h},backend:n,attrs:{shape:p.outShape}});return n.disposeIntermediateTensorInfo(h),f}};class Lx{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideHeight,n=e.strideWidth,a=e.padInfo.top,r=e.padInfo.left,s="channelsLast"===e.dataFormat;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${t} - ${a};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${r};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              if (${s}) {\n                float dyValue = getDy(b, yR, yC, d2);\n                float xValue = getX(b, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              } else {\n                float dyValue = getDy(b, d2, yR, yC);\n                float xValue = getX(b, d1, xR, xC);\n                dotProd += (xValue * dyValue);\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Px{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,a=e.strideHeight,r=e.strideWidth,s="channelsLast"===e.dataFormat,o=t-1-e.padInfo.top,i=n-1-e.padInfo.left,u=s?1:2,l=s?2:3,c=s?3:1;this.userCode=`\n      const ivec2 pads = ivec2(${o}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${c}];\n\n        ivec2 dyCorner = ivec2(coords[${u}], coords[${l}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${a}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${r}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n\n              if (${s}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Bx{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideDepth,n=e.strideHeight,a=e.strideWidth,r=e.padInfo.front,s=e.padInfo.top,o=e.padInfo.left;this.userCode=`\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yF = 0; yF < ${e.outDepth}; yF++) {\n            int xF = wF + yF * ${t} - ${r};\n\n            if (xF < 0 || xF >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${e.outHeight}; yR++) {\n              int xR = wR + yR * ${n} - ${s};\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${e.outWidth}; yC++) {\n                int xC = wC + yC * ${a} - ${o};\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Wx{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterDepth,n=e.filterHeight,a=e.filterWidth,r=e.strideDepth,s=e.strideHeight,o=e.strideWidth,i=t-1-e.padInfo.front,u=n-1-e.padInfo.top,l=a-1-e.padInfo.left;this.userCode=`\n      const ivec3 pads = ivec3(${i}, ${u}, ${l});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${t}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${r}.0;\n\n          if (dyF < 0.0 || dyF >= ${e.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${t} - 1 - wF;\n\n          for (int wR = 0; wR < ${n}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${s}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${n} - 1 - wR;\n\n            for (int wC = 0; wC < ${a}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${o}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${a} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const Vx={kernelName:Te,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r,dy:s}=t,{strides:o,pad:i,dataFormat:u,dimRoundingMode:l,filterShape:c}=a,d=vi(u),p=di(r.shape,c,o,1,i,l,!1,d),h=new Lx(p);return n.runWebGLProgram(h,[r,s],"float32")}};const zx={kernelName:Ce,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{dy:r,filter:s}=t,{inputShape:o,strides:i,pad:u,dataFormat:l,dimRoundingMode:c}=a,d=vi(l),p=di(o,s.shape,i,1,u,c,!1,d),h=new Px(p);return n.runWebGLProgram(h,[r,s],"float32")}};const Ux={kernelName:Ee,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r,filter:s}=t,{strides:o,pad:i,dilations:u}=a,l=pi(r.shape,s.shape,o,u,i),c=new _x(l);return n.runWebGLProgram(c,[r,s],"float32")}};const Gx={kernelName:Se,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r,dy:s}=t,{strides:o,pad:i,filterShape:u}=a,l=pi(r.shape,u,o,1,i),c=new Bx(l);return n.runWebGLProgram(c,[r,s],"float32")}};const Hx={kernelName:Re,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{dy:r,filter:s}=t,{pad:o,strides:i,inputShape:u}=a,l=pi(u,s.shape,i,1,o),c=new Wx(l);return n.runWebGLProgram(c,[r,s],"float32")}},jx=Uy({opSnippet:"if (isnan(x)) return x;\n  return cos(x);\n"}),qx={kernelName:Ae,backendName:"webgl",kernelFunc:jx},Kx=Uy({opSnippet:"\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n"}),Xx={kernelName:_e,backendName:"webgl",kernelFunc:Kx};class Yx{constructor(e,t,n,a,r){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];const[s,o,i,u]=e,[l]=t,[c,d]=n;this.outputShape=[l,c,d,u];const p="bilinear"===a?1:0,[h,f]=[o-1+".0",i-1+".0"],[m,g,y]=c>1?[""+(o-1)/(c-1),"(y2-y1) * height_ratio",`y1*${h} + float(y)*(height_scale)`]:["0.0","0.0",`0.5 * (y1+y2) * ${h}`],[b,x,v]=d>1?[""+(i-1)/(d-1),"(x2-x1) * width_ratio",`x1*${f} + float(x)*(width_scale)`]:["0.0","0.0",`0.5 * (x1+x2) * ${f}`];this.userCode=`\n      const float height_ratio = float(${m});\n      const float width_ratio = float(${b});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${s}) {\n          return;\n        }\n\n        float height_scale = ${g};\n        float width_scale = ${x};\n\n        float in_y = ${y};\n        if( in_y < 0.0 || in_y > ${h} ) {\n          setOutput(float(${r}));\n          return;\n        }\n        float in_x = ${v};\n        if( in_x < 0.0 || in_x > ${f} ) {\n          setOutput(float(${r}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${p} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `}}const Qx={kernelName:Oe,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:a}=e,{image:r,boxes:s,boxInd:o}=t,{cropSize:i,method:u,extrapolationValue:l}=a,c=new Yx(r.shape,s.shape,i,u,l);return n.runWebGLProgram(c,[r,s,o],"float32")}};class Zx{constructor(e,t,n){this.variableNames=["x"],this.outputShape=e;const a=e.length,r=t?"0.0":`getX(${Jx(a,"coords")})`,s=e[e.length-1];let o="",i="";t?(o=n?"end != "+(s-1):"end != 0",i=n?"end + 1":"end - 1"):(o=n?`end + pow2 < ${s}`:"end >= pow2",i=n?"end + pow2":"end - pow2"),this.userCode=`\n      uniform float index;\n      void main() {\n        ${Tf(a)} coords = getOutputCoords();\n        int end = ${ev(a,"coords")};\n        float val = ${r};\n        int pow2 = int(pow(2.0, index));\n        if (${o}) {\n          int idx = ${i};\n          ${ev(a,"coords")} = idx;\n          val += getX(${Jx(a,"coords")});\n        }\n        setOutput(val);\n      }\n    `}getCustomSetupFunc(e){return(t,n)=>{null==this.index&&(this.index=t.getUniformLocation(n,"index")),t.gl.uniform1f(this.index,e)}}}function Jx(e,t){if(1===e)return`${t}`;if(2===e)return`${t}.x, ${t}.y`;if(3===e)return`${t}.x, ${t}.y, ${t}.z`;if(4===e)return`${t}.x, ${t}.y, ${t}.z, ${t}.w`;throw Error(`Cumulative sum for rank ${e} is not yet supported`)}function ev(e,t){if(1===e)return`${t}`;if(2===e)return`${t}.y`;if(3===e)return`${t}.z`;if(4===e)return`${t}.w`;throw Error(`Cumulative sum for rank ${e} is not yet supported`)}const tv={kernelName:Fe,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{axis:s,exclusive:o,reverse:i}=a,u=r.shape.length,l=Yu([s],u);let c=r;null!=l&&(c=lb({inputs:{x:r},backend:n,attrs:{perm:l}}));const d=Zu(1,u)[0];if(d!==u-1)throw new Error(`WebGL cumsum shader expects an inner-most axis=${r.shape.length-1} but got axis=${s}`);const p=c.shape[d];let h=Fy({inputs:{x:c},backend:n});for(let e=0;e<=Math.ceil(Math.log2(p))-1;e++){const t=new Zx(c.shape,!1,i),a=t.getCustomSetupFunc(e),r=h;h=n.runWebGLProgram(t,[h],h.dtype,a),n.disposeIntermediateTensorInfo(r)}if(o){const e=new Zx(c.shape,o,i),t=h;h=n.runWebGLProgram(e,[h],h.dtype),n.disposeIntermediateTensorInfo(t)}if(null!=l){const e=lb({inputs:{x:h},backend:n,attrs:{perm:Qu(l)}});return n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(c),e}return h}};const nv={kernelName:De,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r,weights:s}=t,{size:o,binaryOutput:i}=a;if(1===r.shape.length){const e=n.readSync(r.dataId),t=n.readSync(s.dataId),a=Sg(e,t,s.dtype,s.shape,o);return n.makeTensorInfo([o],s.dtype,a)}if(2===r.shape.length){const e=n.bufferSync(r),t=n.bufferSync(s),a=Rg(e,t,o,i);return n.makeTensorInfo(a.shape,s.dtype,a.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${r.shape.length}.`)}};class av{constructor(e,t,n){this.variableNames=["x"],this.outputShape=[],this.outputShape=e,this.blockSize=t,this.dataFormat=n,this.userCode=`\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${t};\n      int offset_h = imod(h, ${t});\n      int in_w = w / ${t};\n      int offset_w = imod(w, ${t});\n      int offset_d = (offset_h * ${t} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `}getHeightCoordString(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"}getWidthCoordString(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"}getDepthCoordString(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"}getOutputDepthSize(){return"NHWC"===this.dataFormat?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}}const rv={kernelName:Me,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{blockSize:s,dataFormat:o}=a;i(s>1,(()=>`blockSize should be > 1 for depthToSpace, but was: ${s}`));const u=r.shape[0],l="NHWC"===o?r.shape[1]:r.shape[2],c="NHWC"===o?r.shape[2]:r.shape[3],d="NHWC"===o?r.shape[3]:r.shape[1],p=l*s,h=c*s,f=d/(s*s),m=new av("NHWC"===o?[u,p,h,f]:[u,f,p,h],s,o);return n.runWebGLProgram(m,[r],r.dtype)}};class sv{constructor(e,t=!1,n=null,a=!1,r=!1){this.variableNames=["x","W"],this.outputShape=e.outShape;const s=e.inHeight,o=e.inWidth,i=e.padInfo.top,u=e.padInfo.left,l=e.strideHeight,c=e.strideWidth,d=e.dilationHeight,p=e.dilationWidth,h=e.filterHeight,f=e.filterWidth,m=e.outChannels/e.inChannels;let g="",y="";n&&(g=a?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:r?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,y="result = activation(result);");const b=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),a&&this.variableNames.push("preluActivationWeights"),r&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${g}\n\n      const ivec2 strides = ivec2(${l}, ${c});\n      const ivec2 pads = ivec2(${i}, ${u});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${m};\n        int q = d2 - d1 * ${m};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${h}; wR++) {\n          int xR = xRCorner + wR * ${d};\n\n          if (xR < 0 || xR >= ${s}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${f}; wC++) {\n            int xC = xCCorner + wC * ${p};\n\n            if (xC < 0 || xC >= ${o}) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${b}\n        ${y}\n        setOutput(result);\n      }\n    `}}class ov{constructor(e,t=!1,n=null,a=!1,r=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e.outShape;const o=e.outChannels/e.inChannels,i=e.inHeight,u=e.inWidth,l=e.padInfo.top,c=e.padInfo.left,d=e.strideHeight,p=e.strideWidth,h=e.dilationHeight,f=e.dilationWidth,m=e.filterHeight,g=e.filterWidth,y=g;let b="\n      int xR; int xC; int xCOffset;\n      vec4 wTexel; vec4 previous; vec4 final;";for(let e=0;e<g;e++)b+=`\n          vec4 xTexelC${2*e};\n          int xTexelC${2*e}Ready;\n          vec4 xC${e};`;for(let e=0;e<m;e++){for(let e=0;e<g;e++)b+=`\n          xTexelC${2*e} = vec4(0.0);\n          xTexelC${2*e}Ready = 0;\n          xC${e} = vec4(0.0);`;b+=`\n        xR = xRCorner + ${e*h};\n        if (xR >=0 && xR < ${i}) {\n      `;for(let t=0;t<(y+1)/2;t++){const n=2*t,a=n*f;if(b+=`\n          xC = xCCorner + ${a};\n          `,1===p){if(n<g&&(c%2==1?(b+=`\n                xCOffset = xC + 1;\n                if (xCOffset >= 0 && xCOffset < ${u} && xTexelC${a}Ready == 0) {\n                  xTexelC${a} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= ${u}) {\n                    xTexelC${a}.zw = vec2(0.0);\n                  }\n                  xTexelC${a}Ready = 1;\n                }\n              `,b+=1===f&&a>0?`\n                xC${n} = vec4(xTexelC${a-2}.zw, xTexelC${a}.xy);\n                `:`\n                  xCOffset = xC + 1 - 2;\n\n                  if (xCOffset >= 0 && xCOffset < ${u}) {\n                    previous = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= ${u}) {\n                      previous.zw = vec2(0.0);\n                    }\n\n                    xC${n} = vec4(previous.zw, xTexelC${a}.xy);\n                  } else {\n                    xC${n} = vec4(0.0, 0.0, xTexelC${a}.xy);\n                  }\n                  `):b+=`\n                if (xC >= 0 && xC < ${u} && xTexelC${a}Ready == 0) {\n                  xTexelC${a} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= ${u}) {\n                    xTexelC${a}.zw = vec2(0.0);\n                  }\n                  xTexelC${a}Ready = 1;\n                }\n\n                xC${n} = xTexelC${a};\n                `,a+1<g)){const e=c%2==0?s(f):f;f%2==0&&c%2==1||f%2!=0&&c%2!=1?(b+=`\n                  xCOffset = xC + ${c%2} + ${e};\n\n                  if (xCOffset >= 0 && xCOffset < ${u} && xTexelC${a+2}Ready == 0) {\n                    xTexelC${a+2} = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= ${u}) {\n                      xTexelC${a+2}.zw = vec2(0.0);\n                    }\n                    xTexelC${a+2}Ready = 1;\n                  }\n                  `,f>1&&(b+=`\n                    xCOffset -= 2;\n                    if (xCOffset >= 0 && xCOffset < ${u} && xTexelC${a}Ready == 0) {\n                      xTexelC${a} = getX(batch, xR, xCOffset, d1);\n                      xTexelC${a}Ready = 1;\n                    }\n                    `),b+=`\n                  xC${n+1} = vec4(xTexelC${a}.zw, xTexelC${a+2}.xy);\n                  `):b+=1===e?`\n                    xC${n+1} = xTexelC${a};\n                    `:`\n                    xCOffset = xC + ${e};\n\n                    if (xCOffset >= 0 && xCOffset < ${u} && xTexelC${a+2}Ready == 0) {\n                      xTexelC${a+2} = getX(batch, xR, xCOffset, d1);\n                      if (xCOffset + 1 >= ${u}) {\n                        xTexelC${a+2}.zw = vec2(0.0);\n                      }\n                      xTexelC${a+2}Ready = 1;\n                    }\n\n                    xC${n+1} = xTexelC${a+2};\n                    `}}else a<g&&(c%2==1?(b+=`\n                xCOffset = xC + 1 - ${p};\n                if(xCOffset >= 0 && xCOffset < ${u} && xTexelC${a}Ready == 0) {\n                  xTexelC${a} = getX(batch, xR, xCOffset, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= ${u}) {\n                    xTexelC${a}.zw = vec2(0.0);\n                  }\n                  xTexelC${a}Ready = 1;\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < ${u} && xTexelC${a+2}Ready == 0) {\n                  xTexelC${a+2} = getX(batch, xR, xC + 1, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xC + 2 >= ${u}) {\n                    xTexelC${a+2}.zw = vec2(0.0);\n                  }\n                  xTexelC${a+2}Ready = 1;\n                }\n\n                xC${n} = vec4(xTexelC${a}.zw, xTexelC${a+2}.zw);\n              `,a+1<g&&(b+=`\n                  final = vec4(0.0);\n                  xCOffset = xC + 1 + ${p};\n                  if(xCOffset >= 0 && xCOffset < ${u}) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xC${n+1} = vec4(xTexelC${a+2}.xy, final.xy);\n                `)):(b+=`\n                if(xC >= 0 && xC < ${u} && xTexelC${a}Ready == 0) {\n                  xTexelC${a} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= ${u}) {\n                    xTexelC${a}.zw = vec2(0.0);\n                  }\n                  xTexelC${a}Ready = 1;\n                }\n\n                xCOffset = xC + ${p};\n                if(xCOffset >= 0 && xCOffset < ${u} && xTexelC${a+2}Ready == 0) {\n                  xTexelC${a+2} = getX(batch, xR, xCOffset, d1);\n                  if (xCOffset + 1 >= ${u}) {\n                    xTexelC${a+2}.zw = vec2(0.);\n                  }\n                  xTexelC${a+2}Ready = 1;\n                }\n\n                xC${n} = vec4(\n                  xTexelC${a}.xy, xTexelC${a+2}.xy);\n              `,a+1<g&&(b+=`\n                  xC${n+1} = vec4(xTexelC${a}.zw, xTexelC${a+2}.zw);\n                `)));n<g&&(b+=`\n            wTexel = getW(${e}, ${a}, d1, q);\n            dotProd += xC${n} * vec4(wTexel.xz, wTexel.xz);\n          `,a+1<g&&(b+=`\n              wTexel = getW(${e}, ${a+1}, d1, q);\n              dotProd += xC${n+1} * vec4(wTexel.xz, wTexel.xz);\n            `))}b+="\n        }\n      "}let x="",v="";n&&(x=a?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:r?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`vec4 activation(vec4 x) {\n          ${n}\n        }`,v="result = activation(result);");const k=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),a&&this.variableNames.push("preluActivationWeights"),r&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${x}\n\n      const ivec2 strides = ivec2(${d}, ${p});\n      const ivec2 pads = ivec2(${l}, ${c});\n\n      void main() {\n\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${o};\n        int q = d2 - d1 * ${o};\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n        vec4 dotProd = vec4(0.000000000000001);\n\n        ${b}\n\n        vec4 result = dotProd - vec4(0.000000000000001);\n        ${k}\n        ${v}\n        setOutput(result);\n      }\n    `}}const iv={kernelName:Le,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r,filter:s}=t,{strides:o,pad:u,dilations:l,dimRoundingMode:c}=a;let d=l;null==d&&(d=[1,1]),i(xi(o,d),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${o} and dilations '${d}'`));const p=di(r.shape,s.shape,o,d,u,c,!0);let h;return h=q().getBool("WEBGL_PACK_DEPTHWISECONV")&&p.strideWidth<=2&&p.outChannels/p.inChannels==1?new ov(p):new sv(p),n.runWebGLProgram(h,[r,s],"float32")}};class uv{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideHeight,n=e.strideWidth,a=e.padInfo.top,r=e.padInfo.left,s=e.outChannels/e.inChannels;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${s} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${t} - ${a};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${r};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class lv{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,a=e.strideHeight,r=e.strideWidth,s=t-1-e.padInfo.top,o=n-1-e.padInfo.left,i=e.outChannels/e.inChannels;this.userCode=`\n      const ivec2 pads = ivec2(${s}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${a}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${r}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${i}; dm++) {\n              int d2 = d1 * ${i} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const cv={kernelName:Pe,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r,dy:s}=t,{strides:o,dilations:i,pad:u,dimRoundingMode:l,filterShape:c}=a,d=di(r.shape,c,o,i,u,l,!0),p=new uv(d);return n.runWebGLProgram(p,[r,s],"float32")}};const dv={kernelName:Be,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{dy:r,filter:s}=t,{strides:o,dilations:i,pad:u,dimRoundingMode:l,inputShape:c}=a,d=di(c,s.shape,o,i,u,l,!0),p=new lv(d);return n.runWebGLProgram(p,[r,s],"float32")}};class pv{constructor(e){this.variableNames=["X"],this.outputShape=[e,e],this.userCode="\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    "}}const hv={kernelName:We,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:a}=t,r=[...a.shape,...a.shape],s=d(a.shape),o=Jy({inputs:{x:a},backend:n,attrs:{shape:[s]}}),i=new pv(s),u=n.runWebGLProgram(i,[o],o.dtype),l=Jy({inputs:{x:u},backend:n,attrs:{shape:r}});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(u),l}};class fv{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const{inHeight:t,inWidth:n,padInfo:a,strideHeight:r,strideWidth:s,filterHeight:o,filterWidth:i,dilationHeight:u,dilationWidth:l}=e,{top:c,left:d}=a;this.userCode=`\n      const ivec2 strides = ivec2(${r}, ${s});\n      const ivec2 pads = ivec2(${c}, ${d});\n      const float neg_infinity = -3.4e38;\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.w;\n        ivec2 outTopLeftCorner =\n            coords.yz * strides - pads;\n        int hBeg = outTopLeftCorner.x;\n        int wBeg = outTopLeftCorner.y;\n\n        float curVal = neg_infinity;\n        for (int h = 0; h < ${o}; h++) {\n          int hIn = hBeg + h * ${u};\n\n          if (hIn >= 0 && hIn < ${t}) {\n            for (int w = 0; w < ${i}; w++) {\n              int wIn = wBeg + w * ${l};\n\n              if (wIn >= 0 && wIn < ${n}) {\n                float xVal = getX(batch, hIn, wIn, d1);\n                float wVal = getW(h, w, d1);\n\n                float val = xVal + wVal;\n                if (val > curVal) {\n                  curVal = val;\n                }\n              }\n            }\n          }\n        }\n\n        float result = curVal;\n        setOutput(result);\n      }\n    `}}const mv={kernelName:Ve,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r,filter:s}=t,{strides:o,pad:i,dilations:u}=a,l=ui(r.shape,s.shape,o,i,"NHWC",u);let c;const d=new fv(l);c=n.runWebGLProgram(d,[r,s],"float32");const p=Jy({inputs:{x:c},backend:n,attrs:{shape:l.outShape}});return n.disposeIntermediateTensorInfo(c),p}};const gv={kernelName:He,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{equation:r}=a,s=t,{allDims:o,summedDims:i,idDims:u}=Xp(r,s.length);Qp(o.length,u,s);const{path:l,steps:c}=Zp(i,u),d=c.length;let h=null,f=o.length;const m=[];for(let e=0;e<d;++e){for(const t of c[e]){const{permutationIndices:e,expandDims:a}=Yp(f,u[t]);let r;Jp(e)?r=s[t]:(r=lb({inputs:{x:s[t]},backend:n,attrs:{perm:e}}),m.push(r));const o=r.shape.slice();for(let e=0;e<a.length;++e)o.splice(a[e],0,1);p(r.shape,o)||(r=Jy({inputs:{x:r},backend:n,attrs:{shape:o}}),m.push(r)),null===h?h=r:(h=Qy({inputs:{a:r,b:h},backend:n}),m.push(h))}e<d-1&&(l[e]>=0&&(h=ib({inputs:{x:h},backend:n,attrs:{axis:l[e]-(o.length-f),keepDims:!1}}),m.push(h)),f--)}for(const e of m)e!==h&&n.disposeIntermediateTensorInfo(e);return h}},yv=Uy({opSnippet:"return (x >= 0.0) ? x : (exp(x) - 1.0);",packedOpSnippet:"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n"}),bv={kernelName:je,backendName:"webgl",kernelFunc:yv},xv={kernelName:qe,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n}=e,{dy:a,y:r}=t,s=q().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new _y("\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n",a.shape,r.shape):new Ay("return (b >= 1.0) ? a : a * (b + 1.0);",a.shape,r.shape);return n.runWebGLProgram(s,[a,r],a.dtype)}},vv=Gy({opSnippet:"return float(a == b);",packedOpSnippet:"\n  return vec4(equal(a, b));\n",dtype:"bool",cpuKernelImpl:Fg}),kv={kernelName:Xe,backendName:"webgl",kernelFunc:vv},wv=Uy({opSnippet:`\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = ${_p};\n  float a1 = ${Fp};\n  float a2 = ${Op};\n  float a3 = ${Dp};\n  float a4 = ${Mp};\n  float a5 = ${Lp};\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n`}),Iv={kernelName:Ke,backendName:"webgl",kernelFunc:wv},Nv="return exp(x);",$v=Uy({opSnippet:Nv,packedOpSnippet:Nv,cpuKernelImpl:Og}),Tv={kernelName:Ye,backendName:"webgl",kernelFunc:$v};function Cv(e){const{inputs:t,attrs:n,backend:a}=e,{dim:r}=n,{input:s}=t,o=s.shape.length,u=s.shape.slice();let l=r;return r<0&&(i(-(o+1)<=r,(()=>`Axis must be in the interval [${-(o+1)}, ${o}]`)),l=o+r+1),u.splice(l,0,1),Jy({inputs:{x:s},backend:a,attrs:{shape:u}})}const Ev={kernelName:Qe,backendName:"webgl",kernelFunc:Cv},Sv="return exp(x) - 1.0;",Rv=Uy({opSnippet:Sv,packedOpSnippet:Sv,cpuKernelImpl:Dg}),Av={kernelName:Ze,backendName:"webgl",kernelFunc:Rv};class _v{constructor(e,t,n){this.variableNames=["real","imag"];const a=t[1];this.outputShape=t;const r=n?`2.0 * ${Math.PI}`:`-2.0 * ${Math.PI}`,s=n?`${a}.0`:"1.0";let o;if("real"===e)o="return real * expR - imag * expI;";else{if("imag"!==e)throw new Error(`FFT component must be either "real" or "imag", got ${e}.`);o="return real * expI + imag * expR;"}this.userCode=`\n      const float exponentMultiplier = ${r};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${o}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${a});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${a}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${s};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `}}function Fv(e,t,n){const a=n.texData.get(e.dataId),r=d(e.shape),s=e.shape[e.shape.length-1],o=Jy({inputs:{x:e},backend:n,attrs:{shape:[r/s,s]}}),i=o.shape,u=new _v("real",i,t),l=new _v("imag",i,t),c=[{dataId:a.complexTensorInfos.real.dataId,dtype:a.complexTensorInfos.real.dtype,shape:i},{dataId:a.complexTensorInfos.imag.dataId,dtype:a.complexTensorInfos.imag.dtype,shape:i}],p=n.runWebGLProgram(u,c,"float32"),h=n.runWebGLProgram(l,c,"float32"),f=Dy({inputs:{real:p,imag:h},backend:n});n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(h);const m=Jy({inputs:{x:f},backend:n,attrs:{shape:e.shape}});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(f),m}const Ov={kernelName:Je,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:a}=t;return Fv(a,!1,n)}};class Dv{constructor(e,t){this.outputShape=[],this.variableNames=["x"],this.outputShape=e,this.userCode="\n      uniform float value;\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    "}getCustomSetupFunc(e){return(t,n)=>{null==this.valueLoc&&(this.valueLoc=t.getUniformLocationNoThrow(n,"value")),t.gl.uniform1f(this.valueLoc,e)}}}function Mv(e){const{backend:t,attrs:n}=e,{shape:a,value:r}=n;let{dtype:s}=n;if(s=s||A(r),"string"===s){const e=k(s,d(a));return e.fill(r),t.makeTensorInfo(a,s,e)}{const e=new Dv(a,r),n=e.getCustomSetupFunc(r);return t.runWebGLProgram(e,[],s,n)}}const Lv={kernelName:et,backendName:"webgl",kernelFunc:Mv};class Pv{constructor(e){this.variableNames=["Image"],this.outputShape=[];const t=e[2];this.outputShape=e,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n\n          int coordX = ${t} - x;\n          float outputValue;\n          if(coordX >= 0 && coordX < ${t}) {\n            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);\n          } else {\n            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const Bv={kernelName:tt,backendName:"webgl",kernelFunc:({inputs:e,backend:t})=>{const{image:n}=e,a=t,r=new Pv(n.shape);return a.runWebGLProgram(r,[n],n.dtype)}},Wv="return floor(x);",Vv=Uy({opSnippet:Wv,packedOpSnippet:Wv,cpuKernelImpl:Mg}),zv={kernelName:nt,backendName:"webgl",kernelFunc:Vv},Uv=Gy({opSnippet:"\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n",packedOpSnippet:"\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n",dtype:"int32"}),Gv={kernelName:at,backendName:"webgl",kernelFunc:Uv};class Hv{constructor(e){this.variableNames=["A"];const t=qh(),[n,a]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${a}.0, ${n}.0);\n\n        vec4 values = ${t.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `}}class jv{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const t=qh(),[n,a]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${a}.0, ${n}.0);\n            vec4 values = ${t.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${t.output} = result;\n      }\n    `}}const qv={kernelName:Xn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e;let{pixels:r}=t;const{numChannels:s}=a,o="undefined"!=typeof HTMLVideoElement&&r instanceof HTMLVideoElement,i="undefined"!=typeof HTMLImageElement&&r instanceof HTMLImageElement,[u,l]=o?[r.videoWidth,r.videoHeight]:[r.width,r.height],c=[l,u],d=[l,u,s];(i||o)&&(null==Kv&&(Kv=document.createElement("canvas").getContext("2d")),Kv.canvas.width=u,Kv.canvas.height=l,Kv.drawImage(r,0,0,u,l),r=Kv.canvas);const p=n.makeTensorInfo(c,"int32");n.texData.get(p.dataId).usage=mh.PIXELS,n.gpgpu.uploadPixelDataToTexture(n.getTexture(p.dataId),r);const h=q().getBool("WEBGL_PACK")?new jv(d):new Hv(d),f=n.runWebGLProgram(h,[p],"int32");return n.disposeData(p.dataId),f}};let Kv;const Xv={kernelName:Zn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r,filter:s,bias:o,preluActivationWeights:i}=t,{strides:u,pad:l,dataFormat:c,dilations:d,dimRoundingMode:p,activation:h,leakyreluAlpha:f}=a,m=vi(c),g=di(r.shape,s.shape,u,d,l,p,!1,m);let y;const b=[];if(1!==g.filterHeight||1!==g.filterWidth||1!==g.dilationHeight||1!==g.dilationWidth||1!==g.strideHeight||1!==g.strideWidth||"SAME"!==g.padInfo.type&&"VALID"!==g.padInfo.type)if(q().getBool("WEBGL_CONV_IM2COL")&&1===r.shape[0])y=Dx({x:r,filter:s,convInfo:g,backend:n,bias:o,activation:h,preluActivationWeights:i,leakyreluAlpha:f});else{const e=null!=o,t=null!=i,a="leakyrelu"===h,u=h?Hy(h,!1):null,l=new Ax(g,e,u,t,a),c=[r,s];if(o&&c.push(o),i&&c.push(i),a){const e=n.makeTensorInfo([],"float32",Ha(f,"float32"));c.push(e),b.push(e)}y=n.runWebGLProgram(l,c,"float32")}else y=Ox({x:r,filter:s,convInfo:g,backend:n,bias:o,activation:h,preluActivationWeights:i,leakyreluAlpha:f});const x=Jy({inputs:{x:y},backend:n,attrs:{shape:g.outShape}});return b.push(y),b.forEach((e=>n.disposeIntermediateTensorInfo(e))),x}};const Yv={kernelName:Jn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r,filter:s,bias:o,preluActivationWeights:u}=t,{strides:l,pad:c,dilations:d,dimRoundingMode:p,activation:h,leakyreluAlpha:f}=a,m=[];let g=d;null==g&&(g=[1,1]),i(xi(l,g),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${l} and dilations '${g}'`));const y=di(r.shape,s.shape,l,g,c,p,!0),b=q().getBool("WEBGL_PACK_DEPTHWISECONV")&&y.strideWidth<=2&&y.outChannels/y.inChannels==1,x=h?Hy(h,b):null,v=[r,s],k=null!=o,w=null!=u,I="leakyrelu"===h;if(k&&v.push(o),w&&v.push(u),I){const e=n.makeTensorInfo([],"float32",Ha(f,"float32"));v.push(e),m.push(e)}let N;N=b?new ov(y,k,x,w,I):new sv(y,k,x,w,I);const $=n.runWebGLProgram(N,v,"float32");return m.forEach((e=>n.disposeIntermediateTensorInfo(e))),$}};class Qv{constructor(e,t,n){this.sliceDim=e,this.strides=t,this.variableNames=["x","indices"],this.outputShape=n;const a=Tf(t.length),r=Tf(n.length),s=this.sliceDim>1?"strides[j]":"strides";this.userCode=`\n        ${a} strides = ${a}(${this.strides});\n         void main() {\n          ${r} coords = getOutputCoords();\n          int flattenIndex = 0;\n          for (int j = 0; j < ${this.sliceDim}; j++) {\n            int index = round(getIndices(coords[0], j));\n            flattenIndex += index * ${s};\n          }\n          setOutput(getX(flattenIndex, coords[1]));\n        }\n      `}}const Zv={kernelName:ot,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{params:a,indices:r}=t,s=r.shape,o=s[s.length-1],i=d(a.shape),[u,l,c,p]=so(a,r),h=Jy({inputs:{x:r},backend:n,attrs:{shape:[l,o]}}),f=Jy({inputs:{x:a},backend:n,attrs:{shape:[d(a.shape)/c,c]}});if(n.shouldExecuteOnCPU([a,r])||"string"===a.dtype){const e=n.readSync(r.dataId),t=n.bufferSync(a),s=Lg(e,t,a.dtype,l,o,c,p,a.shape,i);return n.makeTensorInfo(u,a.dtype,s.values)}const m=new Qv(o,p,[l,c]),g=n.runWebGLProgram(m,[f,h],f.dtype),y=Jy({inputs:{x:g},backend:n,attrs:{shape:u}});return n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(g),y}};class Jv{constructor(e,t){this.variableNames=["A","indices"],this.outputShape=t,this.rank=t.length;const n=Tf(this.rank),a=function(e,t){const n=["resRC.x","resRC.y","resRC.z","resRC.w"],a=[];for(let t=0;t<e.length;t++)2===t?a.push("int(getIndices(resRC.x, resRC.z))"):a.push(`${n[t]}`);return a.join()}(e);this.userCode=`\n      void main() {\n        ${n} resRC = getOutputCoords();\n        setOutput(getA(${a}));\n      }\n    `}}const ek={kernelName:st,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r,indices:s}=t,{axis:o,batchDims:i}=a,u=rh(r,s,b(o,r.shape)[0],i),l=d(s.shape),c=[],p=Jy({inputs:{x:r},backend:n,attrs:{shape:[u.batchSize,u.outerSize,u.dimSize,u.sliceSize]}}),h=Jy({inputs:{x:s},backend:n,attrs:{shape:[u.batchSize,l/u.batchSize]}});c.push(p),c.push(h);const f=[u.batchSize,u.outerSize,l/u.batchSize,u.sliceSize];if(n.shouldExecuteOnCPU([r,s])||"string"===r.dtype){const e=n.bufferSync(h),t=n.bufferSync(p),a=Pg(t,e,f);return c.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(u.outputShape,a.dtype,a.values)}const m=new Jv(p.shape,f),g=n.runWebGLProgram(m,[p,h],p.dtype);c.push(g);const y=Jy({inputs:{x:g},backend:n,attrs:{shape:u.outputShape}});return c.forEach((e=>n.disposeIntermediateTensorInfo(e))),y}},tk=Gy({opSnippet:"return float(a > b);",packedOpSnippet:"\n  return vec4(greaterThan(a, b));\n",cpuKernelImpl:Bg,dtype:"bool"}),nk={kernelName:it,backendName:"webgl",kernelFunc:tk},ak=Gy({opSnippet:"return float(a >= b);",packedOpSnippet:"\n  return vec4(greaterThanEqual(a, b));\n",dtype:"bool",cpuKernelImpl:Wg}),rk={kernelName:ut,backendName:"webgl",kernelFunc:ak};const sk={kernelName:ct,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:a}=t;return Fv(a,!0,n)}},ok=Uy({opSnippet:"return float(!isnan(x) && !isinf(x));",dtype:"bool"}),ik={kernelName:pt,backendName:"webgl",kernelFunc:ok},uk=Uy({opSnippet:"return float(isinf(x));",dtype:"bool"}),lk={kernelName:ht,backendName:"webgl",kernelFunc:uk},ck=Uy({opSnippet:"return float(isnan(x));",dtype:"bool"}),dk={kernelName:ft,backendName:"webgl",kernelFunc:ck},pk=Gy({opSnippet:"return float(a < b);",packedOpSnippet:"\n  return vec4(lessThan(a, b));\n",cpuKernelImpl:Vg,dtype:"bool"}),hk={kernelName:gt,backendName:"webgl",kernelFunc:pk},fk=Gy({opSnippet:"return float(a <= b);",packedOpSnippet:"\n  return vec4(lessThanEqual(a, b));\n",cpuKernelImpl:zg,dtype:"bool"}),mk={kernelName:yt,backendName:"webgl",kernelFunc:fk};const gk={kernelName:bt,backendName:"webgl",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:a,stop:r,num:s}=n,o=Ug(a,r,s);return t.makeTensorInfo([o.length],"float32",o)}},yk=Uy({opSnippet:"if (x < 0.0) return NAN;\n  return log(x);",packedOpSnippet:"\n  vec4 result = log(x);\n  vec4 isNaN = vec4(lessThan(x, vec4(0.0)));\n  result.r = isNaN.r == 1.0 ? NAN : result.r;\n  result.g = isNaN.g == 1.0 ? NAN : result.g;\n  result.b = isNaN.b == 1.0 ? NAN : result.b;\n  result.a = isNaN.a == 1.0 ? NAN : result.a;\n\n  return result;\n",cpuKernelImpl:Gg}),bk={kernelName:xt,backendName:"webgl",kernelFunc:yk},xk=Uy({opSnippet:"return log(1.0 + x);"}),vk={kernelName:vt,backendName:"webgl",kernelFunc:xk},kk=Gy({opSnippet:"return float(a >= 1.0 && b >= 1.0);",packedOpSnippet:"\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n",dtype:"bool"}),wk={kernelName:kt,backendName:"webgl",kernelFunc:kk},Ik=Uy({opSnippet:"return float(!(x >= 1.0));"}),Nk={kernelName:wt,backendName:"webgl",kernelFunc:Ik},$k=Gy({opSnippet:"return float(a >= 1.0 || b >= 1.0);",packedOpSnippet:"\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n",dtype:"bool"}),Tk={kernelName:It,backendName:"webgl",kernelFunc:$k};class Ck{constructor(e,t,n,a,r){this.variableNames=["x"],this.outputShape=[];const s=t,o=e[3]-1;let i;this.outputShape=e;const u=`float(${n}) + float(${a}) * sum`;i=.5===r?`inversesqrt(${u})`:1===r?`1.0/(${u})`:`exp(log(${u}) * float(-${r}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${s}; j <= ${s}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${o}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${i};\n        setOutput(val);\n      }\n    `}}class Ek{constructor(e,t,n,a,r){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;const s=t,o=e[3]-1;let i;this.outputShape=e;const u=`float(${n}) + float(${a}) * sum`;i=.5===r?`inversesqrt(${u})`:1===r?`1.0/(${u})`:`exp(log(${u}) * float(-${r}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${s};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${s}; j <= ${s}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${o}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${i};\n        setOutput(result);\n      }\n    `}}const Sk={kernelName:Nt,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{depthRadius:s,bias:o,alpha:i,beta:u}=a,l=q().getBool("WEBGL_PACK_NORMALIZATION")?new Ek(r.shape,s,o,i,u):new Ck(r.shape,s,o,i,u);return n.runWebGLProgram(l,[r],r.dtype)}};class Rk{constructor(e,t,n,a,r){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=e,this.depth=e[3],this.depthRadius=t,this.bias=n,this.alpha=a,this.beta=r,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${t})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${t} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${a}) * norm + float(${n});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${a})\n                * float(${r})\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${r});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `}}const Ak={kernelName:$t,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:a}=e,{x:r,y:s,dy:o}=t,{depthRadius:i,bias:u,alpha:l,beta:c}=a,d=new Rk(r.shape,i,u,l,c);return n.runWebGLProgram(d,[r,s,o],r.dtype)}};function _k(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{reductionIndices:s,keepDims:o}=a,i=r.shape.length,u=b(s,r.shape);let l=u;const c=Yu(l,i),p=null!=c,h=n.shouldExecuteOnCPU([r]);let f=r;if(p){if(h){const e=n.texData.get(f.dataId).values,t=new Array(i);for(let e=0;e<t.length;e++)t[e]=r.shape[c[e]];const a=py(e,r.shape,r.dtype,c,t);f=n.makeTensorInfo(t,r.dtype);n.texData.get(f.dataId).values=a}else f=ob(r,c,n);l=Zu(l.length,i)}Xu("max",l,i);const[m,g]=qu(f.shape,l);let y,x=m;if(o&&(x=Ku(m,u)),h){const e=n.texData.get(f.dataId).values,t=Hg(e,d(g),x,r.dtype);y=n.makeTensorInfo(x,r.dtype);n.texData.get(y.dataId).values=t}else y=function(e,t,n,a){const r=d(t),s=Jy({inputs:{x:e},attrs:{shape:[d(e.shape)/r,r]},backend:a}),o=ab(s,e.dtype,"max",a),i=Jy({inputs:{x:o},attrs:{shape:n},backend:a});return a.disposeIntermediateTensorInfo(s),a.disposeIntermediateTensorInfo(o),i}(f,g,x,n);return p&&n.disposeIntermediateTensorInfo(f),y}const Fk={kernelName:Tt,backendName:"webgl",kernelFunc:_k},Ok=Gy({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return max(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(max(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",cpuKernelImpl:jg}),Dk={kernelName:Ct,backendName:"webgl",kernelFunc:Ok};const Mk={kernelName:Et,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t;Hh(r,"maxPool");const{filterSize:s,strides:o,pad:u,dimRoundingMode:l}=a;i(xi(o,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${o} and dilations '1'`));const c=li(r.shape,s,o,1,u,l);if(1===c.filterWidth&&1===c.filterHeight&&p(c.inShape,c.outShape))return Fy({inputs:{x:r},backend:n});const d=new Gb(c,"max",!1);return n.runWebGLProgram(d,[r],r.dtype)}};const Lk={kernelName:Rt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{filterSize:s,strides:o,pad:i,dataFormat:u,dimRoundingMode:l}=a,c=ci(r.shape,s,o,[1,1,1],i,l,u),d=new Hb(c,"max",!1);return n.runWebGLProgram(d,[r],r.dtype)}};class Pk{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.strideHeight,n=e.strideWidth,a=e.dilationHeight,r=e.effectiveFilterHeight,s=e.effectiveFilterWidth,o=r-1-e.padInfo.top,i=s-1-e.padInfo.left,u=r*s-1;this.userCode=`\n      const ivec2 pads = ivec2(${o}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${r};\n          wR += ${a}) {\n          float dyR = float(dyRCorner + wR) / ${t}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${s}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${n}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${u} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${s} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Bk{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.strideDepth,n=e.strideHeight,a=e.strideWidth,r=e.dilationDepth,s=e.dilationHeight,o=e.dilationWidth,i=e.effectiveFilterDepth,u=e.effectiveFilterHeight,l=e.effectiveFilterWidth,c=i-1-e.padInfo.front,d=u-1-e.padInfo.top,p=l-1-e.padInfo.left,h=i*u*l-1;this.userCode=`\n      const ivec3 pads = ivec3(${c}, ${d}, ${p});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${i};\n           wD += ${r}) {\n          float dyD = float(dyDCorner + wD) / ${t}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${u};\n              wR += ${s}) {\n            float dyR = float(dyRCorner + wR) / ${n}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${l};\n                wC += ${o}) {\n              float dyC = float(dyCCorner + wC) / ${a}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${h} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${u} * ${l} +\n                  wR * ${l} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const Wk={kernelName:At,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{dy:r,input:s}=t,o=s,{filterSize:i,strides:u,pad:l,dimRoundingMode:c}=a,d=ci(o.shape,i,u,[1,1,1],l,c),p=new Hb(d,"max",!0),h=n.runWebGLProgram(p,[o],o.dtype),f=new Bk(d),m=n.runWebGLProgram(f,[r,h],o.dtype);return n.disposeIntermediateTensorInfo(h),m}};const Vk={kernelName:St,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{dy:r,input:s,output:o}=t,i=s;Hh([s,o],"maxPoolGrad");const{filterSize:u,strides:l,pad:c,dimRoundingMode:d}=a,p=li(i.shape,u,l,1,c,d),h=new Gb(p,"max",!0),f=n.runWebGLProgram(h,[i],i.dtype),m=new Pk(p),g=n.runWebGLProgram(m,[r,f],i.dtype);return n.disposeIntermediateTensorInfo(f),g}};const zk={kernelName:_t,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:a}=e,{filterSize:r,strides:s,pad:o,includeBatchInIndex:u}=t,l=n;i(4===a.shape.length,(()=>`Error in maxPool: input must be rank 4 but got rank ${a.shape.length}.`));const c=[1,1];i(xi(s,c),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${s} and dilations '${c}'`));const d=li(a.shape,r,s,c,o),[p,h]=function(e,t,n,a){let r=new Gb(n,"max",!1);const s=a.runWebGLProgram(r,[e],"float32");return r=new Gb(n,"max",!0,!0,t),[s,a.runWebGLProgram(r,[e],"float32")]}(a,u,d,l);return[p,h]}};const Uk={kernelName:Ft,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:a}=e,{keepDims:r,axis:s}=t,o=n,i=a.shape.length,u=b(s,a.shape);let l=u;const c=Yu(l,i),p=null!=c,h=o.shouldExecuteOnCPU([a]),f=[];let m=a;if(p){if(h){const e=o.texData.get(m.dataId).values,t=new Array(i);for(let e=0;e<t.length;e++)t[e]=a.shape[c[e]];const n=py(e,a.shape,a.dtype,c,t);m=o.makeTensorInfo(t,a.dtype);o.texData.get(m.dataId).values=n}else m=ob(a,c,o);f.push(m),l=Zu(l.length,i)}Xu("sum",l,i);const[g,y]=qu(m.shape,l);let x=g;r&&(x=Ku(g,u));const v=function(e,t,n,a){const r=d(t),s=Jy({inputs:{x:e},attrs:{shape:[d(e.shape)/r,r]},backend:a}),o=ab(s,"float32","mean",a),i=Jy({inputs:{x:o},attrs:{shape:n},backend:a});return a.disposeIntermediateTensorInfo(s),a.disposeIntermediateTensorInfo(o),i}(m,y,x,o);for(const e of f)o.disposeIntermediateTensorInfo(e);return v}};const Gk={kernelName:Ot,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{axis:s,keepDims:o}=a,i=r.shape.length,u=b(s,r.shape);let l=u;const c=Yu(l,i);let p=r;null!=c&&(p=lb({inputs:{x:r},backend:n,attrs:{perm:c}}),l=Zu(l.length,r.shape.length)),Xu("min",l,i);const[h,f]=qu(p.shape,l),m=Jy({inputs:{x:p},backend:n,attrs:{shape:[-1,d(f)]}}),g=ab(m,m.dtype,"min",n);let y;if(o){y=Jy({inputs:{x:g},backend:n,attrs:{shape:Ku(h,u)}})}else y=Jy({inputs:{x:g},backend:n,attrs:{shape:h}});return n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(g),null!=c&&n.disposeIntermediateTensorInfo(p),y}},Hk=Gy({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return min(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(min(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",cpuKernelImpl:qg}),jk={kernelName:Dt,backendName:"webgl",kernelFunc:Hk};class qk{constructor(e,t,n){this.variableNames=["x"],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const a=e.length,r=Tf(a),s=t.map((e=>e[0])).join(","),o=t.map(((t,n)=>t[0]+e[n])).join(","),i=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,a),u="reflect"===n?0:1;this.userCode=1!==a?`\n      ${r} start = ${r}(${s});\n      ${r} end = ${r}(${o});\n\n      void main() {\n        ${r} outC = getOutputCoords();\n        for (int i = 0; i < ${a}; i++) {\n          if (outC[i] < start[i]) {\n            outC[i] = start[i] * 2 - outC[i] - ${u};\n          } else if(outC[i] >= end[i]) {\n            outC[i] = (end[i] - 1) * 2 - outC[i] + ${u};\n          }\n        }\n        ${r} coords = outC - start;\n        setOutput(getX(${i}));\n      }\n    `:`\n        int start = ${s};\n        int end = ${o};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start) {\n            outC = start * 2 - outC - ${u};\n          } else if(outC >= end) {\n            outC = (end - 1) * 2 - outC + ${u};\n          }\n          setOutput(getX(outC - start));\n        }\n      `}}class Kk{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const a=e.length,r=Tf(a),s=t.map((e=>e[0])).join(","),o=t.map(((t,n)=>t[0]+e[n])).join(","),i=my("rc",a),u=my("source",a),l=`${i[a-1]} < ${this.outputShape[a-1]}`,c=1===a?"source":`vec2(${u.slice(-2).join()})`,d="reflect"===n?0:1;let p="";if(1===a){const e=`\n        ${r} source = rc;\n        if (source < start) {\n          source = start * 2 - source - ${d};\n        } else if (source >= end) {\n          source = (end - 1) * 2 - source + ${d};\n        }\n        source -= start;\n      `;p=`\n        ${r} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${u.join()}), ${c});\n        ${i[a-1]} += 1;\n        if(${l}) {\n          ${e}\n          result[1] = getChannel(getX(${u.join()}), ${c});\n        }\n      `}else{const e=`\n        ${r} source = rc;\n        ${r} lt = ${r}(lessThan(source, start));\n        ${r} gte = ${r}(greaterThanEqual(source, end));\n        ${r} orig = 1 - (lt + gte);\n        source = orig * source +\n                lt * (start * 2 - source - ${d}) +\n                gte * ((end - 1) * 2 - source + ${d});\n        source -= start;\n      `;p=`\n        ${r} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${u.join()}), ${c});\n        ${i[a-1]} += 1;\n        if(${l}) {\n          ${e}\n          result[1] = getChannel(getX(${u.join()}), ${c});\n        }\n        rc = outputLoc;\n        ${i[a-2]} += 1;\n        if(${i[a-2]} < ${this.outputShape[a-2]}) {\n          ${e}\n          result[2] = getChannel(getX(${u.join()}), ${c});\n          ${i[a-1]} += 1;\n          if(${l}) {\n            ${e}\n            result[3] = getChannel(getX(${u.join()}), ${c});\n          }\n        }\n      `}this.userCode=`\n      const ${r} start = ${r}(${s});\n      const ${r} end = ${r}(${o});\n\n      void main() {\n        ${r} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${p}\n        setOutput(result);\n      }\n    `}}const Xk={kernelName:Mt,backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:a}=e,{paddings:r,mode:s}=n,o=q().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Kk(a.shape,r,s):new qk(a.shape,r,s);return t.runWebGLProgram(o,[a],a.dtype)}},Yk=Gy({opSnippet:"if (b == 0.0) return NAN;\n  return mod(a, b);",packedOpSnippet:"\n  vec4 result = mod(a, b);\n  vec4 isNaN = vec4(equal(b, vec4(0.0)));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n"}),Qk={kernelName:Lt,backendName:"webgl",kernelFunc:Yk};class Zk{constructor(e,t,n){this.variableNames=["probs"],this.outputShape=[e,n],this.userCode=`\n      uniform float seed;\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${t-1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${t-1}));\n      }\n    `}getCustomSetupFunc(e){return(t,n)=>{null==this.seedLoc&&(this.seedLoc=t.getUniformLocation(n,"seed")),t.gl.uniform1f(this.seedLoc,e)}}}const Jk=Gy({opSnippet:"\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;",packedOpSnippet:"\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n",checkOutOfBounds:!0}),ew={kernelName:Ge,backendName:"webgl",kernelFunc:Jk},tw="return a - b;",nw=Gy({opSnippet:tw,packedOpSnippet:tw,supportsComplex:!0,cpuKernelImpl:ly}),aw={kernelName:Ln,backendName:"webgl",kernelFunc:nw};function rw(e){const{inputs:t,backend:n,attrs:a}=e,{logits:r}=t,{dim:s}=a,o=b([s],r.shape),i=_k({inputs:{x:r},backend:n,attrs:{reductionIndices:o,keepDims:!1}}),u=Ku(i.shape,o),l=Jy({inputs:{x:i},backend:n,attrs:{shape:u}}),c=nw({inputs:{a:r,b:l},backend:n}),d=$v({inputs:{x:c},backend:n}),p=ib({inputs:{x:d},backend:n,attrs:{axis:o,keepDims:!1}}),h=Jy({inputs:{x:p},backend:n,attrs:{shape:u}}),f=Jk({inputs:{a:d,b:h},backend:n});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(c),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(h),f}const sw={kernelName:$n,backendName:"webgl",kernelFunc:rw};const ow={kernelName:Pt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{logits:r}=t,{numSamples:s,seed:o,normalized:i}=a,u=i?r:rw({inputs:{logits:r},backend:n,attrs:{dim:r.shape.length-1}}),l=u.shape[0],c=u.shape[1],d=new Zk(l,c,s),p=d.getCustomSetupFunc(o),h=n.runWebGLProgram(d,[u],"int32",p);return i||n.disposeIntermediateTensorInfo(u),h}},iw="return -x;";const uw={kernelName:Wt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:a}=t;if(n.shouldExecuteOnCPU([a])){const e=n.texData.get(a.dataId),[t,r]=Xg(e.values,a.shape,a.dtype);return n.makeTensorInfo(r,a.dtype,t)}let r;return r=q().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new $y(a.shape,iw):new wy(a.shape,iw),n.runWebGLProgram(r,[a],a.dtype)}},lw=vd;const cw={kernelName:zt,backendName:"webgl",kernelFunc:function(e){Pp("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:a}=e,{boxes:r,scores:s}=t,{maxOutputSize:o,iouThreshold:i,scoreThreshold:u}=a,l=n.readSync(r.dataId),c=n.readSync(s.dataId),{selectedIndices:d}=lw(l,c,o,i,u);return n.makeTensorInfo([d.length],"int32",new Int32Array(d))}},dw=kd;const pw={kernelName:Ut,backendName:"webgl",kernelFunc:function(e){Pp("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:a}=e,{boxes:r,scores:s}=t,{maxOutputSize:o,iouThreshold:i,scoreThreshold:u,padToMaxOutputSize:l}=a,c=n.readSync(r.dataId),d=n.readSync(s.dataId),{selectedIndices:p,validOutputs:h}=dw(c,d,o,i,u,l);return[n.makeTensorInfo([p.length],"int32",new Int32Array(p)),n.makeTensorInfo([],"int32",new Int32Array([h]))]}},hw=wd;const fw={kernelName:Gt,backendName:"webgl",kernelFunc:function(e){Pp("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:a}=e,{boxes:r,scores:s}=t,{maxOutputSize:o,iouThreshold:i,scoreThreshold:u,softNmsSigma:l}=a,c=n.readSync(r.dataId),d=n.readSync(s.dataId),p=o,h=i,f=u,m=l,{selectedIndices:g,selectedScores:y}=hw(c,d,p,h,f,m);return[n.makeTensorInfo([g.length],"int32",new Int32Array(g)),n.makeTensorInfo([y.length],"float32",new Float32Array(y))]}};class mw{constructor(e,t,n,a){this.variableNames=["indices"],this.outputShape=[e,t],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${a}), float(${n}),\n                      float(index == coords.y)));\n      }\n    `}}const gw={kernelName:jt,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:a}=e,{indices:r}=t,{depth:s,onValue:o,offValue:i}=a,u=d(r.shape),l=new mw(u,s,o,i),c=Jy({inputs:{x:r},backend:n,attrs:{shape:[u]}}),p=n.runWebGLProgram(l,[c],r.dtype);n.disposeIntermediateTensorInfo(c);const h=Jy({inputs:{x:p},backend:n,attrs:{shape:[...r.shape,s]}});return n.disposeIntermediateTensorInfo(p),h}};function yw(e){const{inputs:t,backend:n}=e,{x:a}=t;if("complex64"===a.dtype){const e=dx({inputs:{input:a},backend:n}),t=yw({inputs:{x:e},backend:n}),r=Tx({inputs:{input:a},backend:n}),s=yw({inputs:{x:r},backend:n}),o=Dy({inputs:{real:t,imag:s},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(s),o}return Mv({attrs:{shape:a.shape,dtype:a.dtype,value:"string"===a.dtype?"":0},backend:n})}const bw={kernelName:qn,backendName:"webgl",kernelFunc:yw};const xw={kernelName:Ht,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:a}=t,{x:r}=n;if("string"===r.dtype)throw new Error("onesLike is not supported under string dtype");if("complex64"===r.dtype){const t=dx({inputs:{input:r},backend:a}),n=e({inputs:{x:t},backend:a}),s=Tx({inputs:{input:r},backend:a}),o=yw({inputs:{x:s},backend:a}),i=Dy({inputs:{real:n,imag:o},backend:a});return a.disposeIntermediateTensorInfo(t),a.disposeIntermediateTensorInfo(n),a.disposeIntermediateTensorInfo(s),a.disposeIntermediateTensorInfo(o),i}return Mv({attrs:{shape:r.shape,dtype:r.dtype,value:1},backend:a})}};const vw={kernelName:qt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{axis:r}=a;if(1===t.length)return Cv({inputs:{input:t[0]},backend:n,attrs:{dim:r}});const s=t[0].shape,o=t[0].dtype;t.forEach((e=>{u(s,e.shape,"All tensors passed to stack must have matching shapes"),i(o===e.dtype,(()=>"All tensors passed to stack must have matching dtypes"))}));const l=[],c=Sx({inputs:t.map((e=>{const t=Cv({inputs:{input:e},backend:n,attrs:{dim:r}});return l.push(t),t})),backend:n,attrs:{axis:r}});return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}};class kw{constructor(e,t,n){this.variableNames=["x"],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const a=e.length,r=Tf(a),s=t.map((e=>e[0])).join(","),o=t.map(((t,n)=>t[0]+e[n])).join(","),i=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,a);this.userCode=1!==a?`\n      ${r} start = ${r}(${s});\n      ${r} end = ${r}(${o});\n      uniform float value;\n\n      void main() {\n        ${r} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(value);\n        } else {\n          ${r} coords = outC - start;\n          setOutput(getX(${i}));\n        }\n      }\n    `:`\n        int start = ${s};\n        int end = ${o};\n        uniform float value;\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(value);\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `}getCustomSetupFunc(e){return(t,n)=>{null==this.valueLoc&&(this.valueLoc=t.getUniformLocationNoThrow(n,"value")),t.gl.uniform1f(this.valueLoc,e)}}}class ww{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const a=e.length,r=Tf(a),s=t.map((e=>e[0])).join(","),o=t.map(((t,n)=>t[0]+e[n])).join(","),i=my("rc",a),u=my("source",a),l=`${i[a-1]} < ${this.outputShape[a-1]}`,c=1===a?"source":`vec2(${u.slice(-2).join()})`,d=[`${r} rc = outputLoc;`,`${i[a-1]} += 1;\n       if(${l}) {\n      `,1===a?"":`}\n       rc = outputLoc;\n       ${i[a-2]} += 1;\n       if(${i[a-2]} < ${this.outputShape[a-2]}) {`,1===a?"":`  ${i[a-1]} += 1;\n         if(${l}) {`],p=1===a?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))";let h="";for(let e=0,t=1===a?2:4;e<t;e++)h+=`\n        ${d[e]}\n        if (${p}) {\n          result[${e}] = float(value);\n        } else {\n          ${r} source = rc - start;\n          result[${e}] = getChannel(getX(${u.join()}), ${c});\n        }\n      `;h+=1===a?"} ":"}}",this.userCode=`\n      const ${r} start = ${r}(${s});\n      const ${r} end = ${r}(${o});\n      uniform float value;\n\n      void main() {\n        ${r} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${h}\n        setOutput(result);\n      }\n    `}getCustomSetupFunc(e){return(t,n)=>{null==this.valueLoc&&(this.valueLoc=t.getUniformLocationNoThrow(n,"value")),t.gl.uniform1f(this.valueLoc,e)}}}const Iw=e=>{const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{paddings:s,constantValue:o}=a,i=q().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new ww(r.shape,s,o):new kw(r.shape,s,o),u=i.getCustomSetupFunc(o);return n.runWebGLProgram(i,[r],r.dtype,u)},Nw={kernelName:Kt,backendName:"webgl",kernelFunc:Iw},$w=Gy({opSnippet:"\n  if(a < 0.0 && floor(b) < b){\n    return NAN;\n  }\n  if (b == 0.0) {\n    return 1.0;\n  }\n  return (round(mod(b, 2.0)) != 1) ?\n      pow(abs(a), b) : sign(a) * pow(abs(a), b);\n",packedOpSnippet:"\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n"}),Tw={kernelName:Xt,backendName:"webgl",kernelFunc:$w};const Cw={kernelName:Qt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{axis:s,keepDims:o}=a,i=r.shape.length,u=[],l=b(s,r.shape);let c=l;const p=Yu(c,i);let h,f=r;if(null!=p&&(f=lb({inputs:{x:r},backend:n,attrs:{perm:p}}),c=Zu(c.length,i),u.push(f)),Xu("prod",c,i),n.shouldExecuteOnCPU([f])){const e=n.texData.get(f.dataId).values,{outVals:t,outShape:a,outDtype:r}=Qg(f.shape,f.dtype,e,c);h=n.makeTensorInfo(a,r,t)}else{const[e,t]=qu(f.shape,c),a=d(t),s=Jy({inputs:{x:f},backend:n,attrs:{shape:[-1,a]}}),o=ab(s,br(r.dtype),"prod",n);h=Jy({inputs:{x:o},backend:n,attrs:{shape:e}}),u.push(s),u.push(o)}if(o){u.push(h);const e=Ku(h.shape,l);h=Jy({inputs:{x:h},backend:n,attrs:{shape:e}})}return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),h}},Ew=e=>{const{backend:t,attrs:n}=e,{start:a,stop:r,step:s,dtype:o}=n,i=Zg(a,r,s,o);return t.makeTensorInfo([i.length],o,i)},Sw={kernelName:Zt,backendName:"webgl",kernelFunc:Ew},Rw=Uy({opSnippet:"return 1.0 / x;"}),Aw={kernelName:en,backendName:"webgl",kernelFunc:Rw},_w=Uy({opSnippet:"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : x;\n",packedOpSnippet:"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),Fw={kernelName:tn,backendName:"webgl",kernelFunc:_w},Ow=Uy({opSnippet:"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",packedOpSnippet:"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),Dw={kernelName:un,backendName:"webgl",kernelFunc:Ow};class Mw{constructor(e,t,n,a,r){this.variableNames=["A"],this.outputShape=[];const[s,o,i,u]=e;this.outputShape=[s,t,n,u];const l=[a&&t>1?o-1:o,a&&n>1?i-1:i],c=[a&&t>1?t-1:t,a&&n>1?n-1:n];let d;d=r?"(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${l[0]/c[0]},\n          ${l[1]/c[1]});\n      const vec2 inputShapeRC = vec2(${o}.0, ${i}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${d};\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `}}class Lw{constructor(e,t,n,a,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[s,o,i,u]=e;this.outputShape=[s,t,n,u];const l=[a&&t>1?o-1:o,a&&n>1?i-1:i],c=[a&&t>1?t-1:t,a&&n>1?n-1:n];let d;d=r?"(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${l[0]/c[0]},\n          ${l[1]/c[1]},\n          ${l[1]/c[1]});\n      const vec3 inputShapeRC = vec3(${o}.0, ${i}.0,\n                                     ${i}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${d};\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${u-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `}}const Pw={kernelName:sn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{images:r}=t,{alignCorners:s,halfPixelCenters:o,size:i}=a,[u,l]=i,c=q().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new Lw(r.shape,u,l,s,o):new Mw(r.shape,u,l,s,o);return n.runWebGLProgram(c,[r],"float32")}};class Bw{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,a,r]=t,[,s,o]=e,i=[n&&s>1?a-1:a,n&&o>1?r-1:r],u=[n&&s>1?s-1:s,n&&o>1?o-1:o],l=i[0]/u[0],c=i[1]/u[1],d=1/l,p=1/c,h=2*Math.ceil(d)+2,f=2*Math.ceil(p)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${l});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${d});\n        const float invWidthScale = float(${p});\n\n        const int winHeight = int(${h});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${s}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${o}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${a-1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${r-1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const Ww={kernelName:on,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{images:r,dy:s}=t,{alignCorners:o}=a,i=new Bw(s.shape,r.shape,o);return n.runWebGLProgram(i,[s],s.dtype)}};class Vw{constructor(e,t,n,a,r){this.variableNames=["A"],this.outputShape=[];const[s,o,i,u]=e;this.outputShape=[s,t,n,u];const l=[a&&t>1?o-1:o,a&&n>1?i-1:i],c=[a&&t>1?t-1:t,a&&n>1?n-1:n],d=a?"0.5":"0.0";let p;p=r?"max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${l[0]/c[0]},\n          ${l[1]/c[1]});\n      const vec2 inputShapeRC = vec2(${o}.0, ${i}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${p};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${d})));\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `}}class zw{constructor(e,t,n,a,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[s,o,i,u]=e;this.outputShape=[s,t,n,u];const l=[a&&t>1?o-1:o,a&&n>1?i-1:i],c=[a&&t>1?t-1:t,a&&n>1?n-1:n],d=a?"0.5":"0.0";let p;p=r?"max((vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC, vec3(0.0))":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${l[0]/c[0]},\n          ${l[1]/c[1]},\n          ${l[1]/c[1]});\n      const vec3 inputShapeRC = vec3(${o}.0, ${i}.0,\n                                     ${i}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${p};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec3 sourceNearestRC = ivec3(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${d})));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${u-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        vec4 newValue = vec4(\n          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),\n          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);\n\n        setOutput(newValue);\n      }\n    `}}const Uw={kernelName:an,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{images:r}=t,{alignCorners:s,halfPixelCenters:o,size:i}=a,[u,l]=i,c=q().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new zw(r.shape,u,l,s,o):new Vw(r.shape,u,l,s,o);return n.runWebGLProgram(c,[r],r.dtype)}};class Gw{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,a,r]=t,[,s,o]=e,i=[n&&s>1?a-1:a,n&&o>1?r-1:r],u=[n&&s>1?s-1:s,n&&o>1?o-1:o],l=i[0]/u[0],c=i[1]/u[1],d=1/l,p=1/c,h=2*Math.ceil(d)+2,f=2*Math.ceil(p)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${l});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${d});\n        const float invWidthScale = float(${p});\n\n        const int winHeight = int(${h});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${s}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${o}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${i[0]}) *\n                (float(dyR) / float(${u[0]}));\n\n            float sourceFracCol =\n                float(${i[1]}) *\n                  (float(dyC) / float(${u[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${a}) - 1),\n                ${n} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${r}) - 1),\n                ${n} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const Hw={kernelName:rn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{images:r,dy:s}=t,{alignCorners:o}=a,i=new Gw(s.shape,r.shape,o);return n.runWebGLProgram(i,[s],s.dtype)}};class jw{constructor(e,t){this.variableNames=["x"];const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);if(this.outputShape=e,1===n)return void(this.userCode=`\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${e[0]} - coord - 1));\n        }\n      `);const a=e.map(((n,a)=>(n=>-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - coords[${n}] - 1`:`coords[${n}]`)(a))).join(","),r=Tf(n);this.userCode=`\n      void main() {\n        ${r} coords = getOutputCoords();\n        setOutput(getX(${a}));\n      }\n    `}}class qw{constructor(e,t){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);this.outputShape=e;const a=my("rc",n),r=`${a[n-1]} + 1 < ${this.outputShape[n-1]}`,s=`${a[n-2]} + 1 < ${this.outputShape[n-2]}`,o=Tf(n);function i(n){const a=e.map(((a,r)=>function(n,a){return-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - ${a[n]} - 1`:`${a[n]}`}(r,n)));return`getChannel(getX(${a.join(",")}), vec2(${a.slice(-2).join(",")}))`}this.userCode=1===n?`\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${e[0]} - rc - 1),\n            ${e[0]} - rc - 1);\n          if(${r}){\n              result.g = getChannel(getX(${e[0]} - (rc  + 1) - 1),\n                ${e[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `:`\n        void main() {\n          ${o} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${function(e){return i(e)}(a.slice())};\n          if(${r}){\n            result.g = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",i(e)}(a.slice())};\n          }\n          if(${s}) {\n            result.b = ${function(e){return e[n-2]="("+e[n-2]+" + 1)",i(e)}(a.slice())};\n            if(${r}) {\n              result.a = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",e[n-2]="("+e[n-2]+" + 1)",i(e)}(a.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `}}const Kw={kernelName:ln,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{dims:s}=a,o=r.shape.length,i=b(s,r.shape);if(0===o)return Fy({inputs:{x:r},backend:n});const u=q().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new qw(r.shape,i):new jw(r.shape,i);return n.runWebGLProgram(u,[r],r.dtype)}};class Xw{constructor(e,t){this.variableNames=["Image"],this.outputShape=[];const n=e[1],a=e[2];this.outputShape=e;let r="";r="number"==typeof t?`float outputValue = ${t.toFixed(2)};`:`\n        vec3 fill = vec3(${t.join(",")});\n        float outputValue = fill[coords[3]];`,this.userCode=`\n        uniform vec4 params;\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - params[0]) * params[3] -\n            (float(y) - params[1]) * params[2];\n          float coordYFloat = (float(x) - params[0]) * params[2] +\n            (float(y) - params[1]) * params[3];\n          int coordX = int(round(coordXFloat + params[0]));\n          int coordY = int(round(coordYFloat + params[1]));\n          ${r}\n          if(coordX >= 0 && coordX < ${a} && coordY >= 0 && coordY < ${n}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}getCustomSetupFunc(e,t,n,a){return(r,s)=>{null==this.paramsLoc&&(this.paramsLoc=r.getUniformLocationNoThrow(s,"params")),r.gl.uniform4f(this.paramsLoc,e,t,n,a)}}}const Yw={kernelName:Yn,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:a}=e,{radians:r,fillValue:s,center:o}=t,i=n,u=new Xw(a.shape,s),[l,c]=Np(o,a.shape[1],a.shape[2]),d=u.getCustomSetupFunc(l,c,Math.sin(r),Math.cos(r));return i.runWebGLProgram(u,[a],a.dtype,d)}},Qw=Uy({opSnippet:"\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n"}),Zw={kernelName:cn,backendName:"webgl",kernelFunc:Qw},Jw=Uy({opSnippet:"return inversesqrt(x);",cpuKernelImpl:Jg}),eI={kernelName:dn,backendName:"webgl",kernelFunc:Jw};class tI{constructor(e,t,n,a,r,s,o=!0){this.variableNames=["updates","indices","defaultValue"],this.outputShape=s;const i=Tf(r.length),u=Tf(s.length);let l="";1===n?l="i":2===n&&(l="i, j");const c=`getIndices(${l})`;let d="";1===a?d="i":2===a&&(d="i, coords[1]");const p=`getUpdates(${d})`,h=t>1?"strides[j]":"strides";this.userCode=`\n        ${i} strides = ${i}(${r});\n\n        void main() {\n          ${u} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${e}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${t}; j++) {\n              int index = round(${c});\n              flattenedIndex += index * ${h};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += ${p};\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      `}}const nI={kernelName:pn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{indices:r,updates:s}=t,{shape:o}=a,{sliceRank:i,numUpdates:u,sliceSize:l,strides:c,outputSize:d}=lo(0,r,o),p=[d/l,l];if(0===d)return n.makeTensorInfo(o,r.dtype);const h=Jy({inputs:{x:r},backend:n,attrs:{shape:[u,i]}}),f=Jy({inputs:{x:s},backend:n,attrs:{shape:[u,l]}}),m=n.makeTensorInfo([],"float32",new Float32Array([0])),g=new tI(u,i,h.shape.length,f.shape.length,c,p),y=n.runWebGLProgram(g,[f,h,m],f.dtype),b=Jy({inputs:{x:y},backend:n,attrs:{shape:o}});return n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(y),n.disposeIntermediateTensorInfo(m),b}};class aI{constructor(e,t,n){let a,r;if(this.variableNames=["c","a","b"],this.outputShape=t,n>4)throw Error(`Where for rank ${n} is not yet supported`);if(1===n)r="resRC",a="resRC";else{const n=["resRC.x","resRC.y","resRC.z","resRC.w"],s=[],o=[];for(let a=0;a<t.length;a++)o.push(`${n[a]}`),a<e&&s.push(`${n[a]}`);a=s.join(),r=o.join()}const s=Tf(n);this.userCode=`\n      void main() {\n        ${s} resRC = getOutputCoords();\n        float cVal = getC(${a});\n        if (cVal >= 1.0) {\n          setOutput(getA(${r}));\n        } else {\n          setOutput(getB(${r}));\n        }\n      }\n    `}}const rI={kernelName:hn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{condition:a,t:r,e:s}=t,o=new aI(a.shape.length,r.shape,r.shape.length);return n.runWebGLProgram(o,[a,r,s],yr(r.dtype,s.dtype))}},sI=Uy({opSnippet:`\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = 1.7580993408473768;\n  float scale = ${Ap};\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n`}),oI={kernelName:fn,backendName:"webgl",kernelFunc:sI},iI=Uy({opSnippet:"return 1.0 / (1.0 + exp(-1.0 * x));"}),uI={kernelName:xn,backendName:"webgl",kernelFunc:iI},lI=Uy({opSnippet:"\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n"}),cI={kernelName:bn,backendName:"webgl",kernelFunc:lI},dI=Uy({opSnippet:"if (isnan(x)) return x;\n  return sin(x);\n"}),pI={kernelName:gn,backendName:"webgl",kernelFunc:dI},hI=Uy({opSnippet:"\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n"}),fI={kernelName:yn,backendName:"webgl",kernelFunc:hI},mI=Uy({opSnippet:"\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n"}),gI={kernelName:vn,backendName:"webgl",kernelFunc:mI},yI={kernelName:In,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{blockShape:s,paddings:o}=a;i(r.shape.length<=4,(()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet"));const u=s.reduce(((e,t)=>e*t)),l=[[0,0]];l.push(...o);for(let e=1+s.length;e<r.shape.length;++e)l.push([0,0]);const c=[],d=Iw({inputs:{x:r},backend:n,attrs:{paddings:l,constantValue:0}}),p=$p(d.shape,s,u,!1),h=Tp(p.length,s.length,!1),f=Cp(d.shape,s,u,!1),m=Jy({inputs:{x:d},backend:n,attrs:{shape:p}}),g=lb({inputs:{x:m},backend:n,attrs:{perm:h}}),y=Jy({inputs:{x:g},backend:n,attrs:{shape:f}});return c.push(d),c.push(m),c.push(g),c.forEach((e=>n.disposeIntermediateTensorInfo(e))),y}};const bI={kernelName:Tn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{indices:a,values:r,denseShape:s,defaultValue:o}=t;if(1!==s.shape.length)throw new Error(`Dense shape must be a vector, saw:\n         ${s.shape}`);if(2!==a.shape.length)throw new Error(`Indices must be a matrix, saw:\n         ${a.shape}`);if(1!==r.shape.length)throw new Error(`Values must be a vector, saw:\n         ${r.shape}`);if(0!==o.shape.length)throw new Error(`Default value must be a scalar, saw:\n        ${o.shape}`);const i=n.readSync(a.dataId),u=n.readSync(r.dataId),l=n.readSync(s.dataId),c=n.readSync(o.dataId)[0],[d,p,h,f,m]=ny(i,a.shape,a.dtype,u,r.dtype,l,c);return[n.makeTensorInfo(p,a.dtype,d),n.makeTensorInfo([p[0]],r.dtype,h),n.makeTensorInfo([f.length],"bool",new Uint8Array(f.map((e=>Number(e))))),n.makeTensorInfo([m.length],a.dtype,new Int32Array(m))]}};const xI={kernelName:Cn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{inputIndices:a,inputShape:r,newShape:s}=t;if(2!==a.shape.length)throw new Error(`Input indices should be a matrix but received shape ${a.shape}`);if(1!==r.shape.length)throw new Error(`Input shape should be a vector but received shape ${r.shape}`);if(1!==s.shape.length)throw new Error(`Target shape should be a vector but received shape ${s.shape}`);const o=Array.from(n.readSync(r.dataId)),i=n.readSync(a.dataId),u=Array.from(n.readSync(s.dataId)),[l,c,d]=ay(i,a.shape,a.dtype,o,u);return[n.makeTensorInfo(c,a.dtype,l),n.makeTensorInfo([d.length],s.dtype,new Int32Array(d))]}};const vI={kernelName:En,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:a,indices:r,segmentIds:s}=t;if(a.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n              ${r.shape}`);if(1!==s.shape.length)throw new Error(`Segment ids should be a vector but received shape\n              ${s.shape}`);const o=n.readSync(a.dataId),i=n.readSync(r.dataId),u=n.readSync(s.dataId),[l,c]=ry(o,a.shape,a.dtype,i,u,!0);return n.makeTensorInfo(c,a.dtype,l)}};const kI={kernelName:Sn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:a,indices:r,segmentIds:s}=t;if(a.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n             ${r.shape}`);if(1!==s.shape.length)throw new Error(`Segment ids should be a vector but received shape\n             ${s.shape}`);const o=n.readSync(a.dataId),i=n.readSync(r.dataId),u=n.readSync(s.dataId),[l,c]=ry(o,a.shape,a.dtype,i,u);return n.makeTensorInfo(c,a.dtype,l)}};const wI={kernelName:Rn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{sparseIndices:r,sparseValues:s,defaultValue:o}=t,{outputShape:i}=a,{sliceRank:u,numUpdates:l,strides:c,outputSize:d}=lo(0,r,i),p=new tI(l,u,r.shape.length,s.shape.length,c,[d,1],!1),h=n.runWebGLProgram(p,[s,r,o],s.dtype),f=Jy({inputs:{x:h},backend:n,attrs:{shape:i}});return n.disposeIntermediateTensorInfo(h),f}};const II={kernelName:Nn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{numOrSizeSplits:s,axis:o}=a,i=b(o,r.shape)[0],u=th(r,s,i),l=r.shape.length,c=new Array(l).fill(0),d=r.shape.slice();return u.map((e=>{const t=[...d];t[i]=e;const a=sx({inputs:{x:r},backend:n,attrs:{begin:c,size:t}});return c[i]+=e,a}))}},NI=Uy({opSnippet:"return sqrt(x);"}),$I={kernelName:kn,backendName:"webgl",kernelFunc:NI},TI={kernelName:_n,backendName:"webgl",kernelFunc:Uy({opSnippet:"return x * x;"})},CI="return (a - b) * (a - b);",EI=Gy({opSnippet:CI,packedOpSnippet:CI}),SI={kernelName:An,backendName:"webgl",kernelFunc:EI};const RI={kernelName:Kn,backendName:"webgl",kernelFunc:function({inputs:e,attrs:t,backend:n}){const{x:a}=e,r=`if (isnan(x)) return x;\n    return x > 0.0 ? 1.0 : float(${t.alpha});\n  `,s=new wy(a.shape,r);return n.runWebGLProgram(s,[a],a.dtype)}};class AI{constructor(e,t,n){this.variableNames=["x"],this.outputShape=n;const a=n.length,r=Tf(n.length),s=Tf(n.length);let o="";if(1===a)o="coords * strides + begin";else{let e=0;o=n.map(((t,a)=>(e++,1===n.length?`coords * strides[${a}] + begin[${a}]`:`coords[${e-1}] * strides[${a}] + begin[${a}]`))).join(",")}this.userCode=`\n      ${r} begin = ${r}(${e});\n      ${r} strides = ${r}(${t});\n\n      void main() {\n        ${s} coords = getOutputCoords();\n        setOutput(getX(${o}));\n      }\n    `}}const _I={kernelName:Fn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{begin:s,end:o,strides:i,beginMask:u,endMask:l,ellipsisMask:c,newAxisMask:d,shrinkAxisMask:p}=a,{nonStrided:h,$begin:f,$strides:m,size:g,newShape:y,outShape:b}=Co(r.shape,s,o,i,u,l,c,d,p),x=Jy({inputs:{x:r},backend:n,attrs:{shape:y}});let v;if(h){const e=sx({inputs:{x:x},backend:n,attrs:{begin:f,size:g}});v=Jy({inputs:{x:e},backend:n,attrs:{shape:b}}),n.disposeIntermediateTensorInfo(e)}else if(b.some((e=>0===e)))v=n.makeTensorInfo(b,r.dtype,[]);else{if(n.shouldExecuteOnCPU([x])){const e=n.texData.get(x.dataId).values,t=Rs(x.shape,x.dtype,e),a=sy(b,t,m,f);v=n.makeTensorInfo(b,x.dtype,a.values)}else{const e=new AI(f,m,b);v=n.runWebGLProgram(e,[x],x.dtype)}}const k=Jy({inputs:{x:v},backend:n,attrs:{shape:b}});return n.disposeIntermediateTensorInfo(x),n.disposeIntermediateTensorInfo(v),k}};const FI={kernelName:On,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{separator:r,nGramWidths:s,leftPad:o,rightPad:i,padWidth:u,preserveShortSequences:l}=a,{data:c,dataSplits:d}=t,p=n.readSync(c.dataId),h=n.readSync(d.dataId),[f,m]=oy(p,h,r,s,o,i,u,l);return[n.makeTensorInfo([f.length],"string",f),n.makeTensorInfo(d.shape,"int32",m)]}};const OI={kernelName:Dn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{skipEmpty:r}=a,{input:s,delimiter:o}=t;if("string"!==s.dtype)throw new Error("Input must be of datatype string");if(1!==s.shape.length)throw new Error(`Input must be a vector, got shape: ${s.shape}`);if(0!==o.shape.length)throw new Error(`Delimiter must be a scalar, got shape: ${o.shape}`);const i=n.readSync(s.dataId),u=n.readSync(o.dataId)[0],[l,c,d]=iy(i,u,r),p=c.length;return[n.makeTensorInfo([p,2],"int32",l),n.makeTensorInfo([p],"string",c),n.makeTensorInfo([2],"int32",new Int32Array(d))]}};const DI={kernelName:Mn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{numBuckets:r}=a,{input:s}=t;if("string"!==s.dtype)throw new Error("Input must be of datatype string");if(r<=0)throw new Error("Number of buckets must be at least 1");const o=n.readSync(s.dataId),i=uy(o,r);return n.makeTensorInfo(s.shape,"int32",i)}},MI=Uy({opSnippet:"return tan(x);"}),LI={kernelName:Pn,backendName:"webgl",kernelFunc:MI},PI=Uy({opSnippet:"\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n"}),BI={kernelName:Bn,backendName:"webgl",kernelFunc:PI};class WI{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let a=0;a<n.length;a++)n[a]=e[a]*t[a];this.outputShape=n,this.rank=n.length;const a=Tf(this.rank),r=function(e){const t=e.length;if(t>5)throw Error(`Tile for rank ${t} is not yet supported`);if(1===t)return`imod(resRC, ${e[0]})`;const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],a=[];for(let t=0;t<e.length;t++)a.push(`imod(${n[t]}, ${e[t]})`);return a.join()}(e);this.userCode=`\n      void main() {\n        ${a} resRC = getOutputCoords();\n        setOutput(getA(${r}));\n      }\n    `}}function VI(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{reps:s}=a;if("string"===r.dtype||r.shape.length>5){const e=n.readSync(r.dataId),t="string"===r.dtype?e.map((e=>Xa(e))):e,a=Rs(r.shape,r.dtype,t),o=cy(a,s);return n.makeTensorInfo(o.shape,o.dtype,o.values)}const o=new WI(r.shape,s);return n.runWebGLProgram(o,[r],r.dtype)}const zI={kernelName:Wn,backendName:"webgl",kernelFunc:VI};const UI={kernelName:Vn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{k:s,sorted:o}=a,i=n.readSync(r.dataId),[u,l]=dy(i,r.shape,r.dtype,s,o);return[n.makeTensorInfo(u.shape,u.dtype,u.values),n.makeTensorInfo(l.shape,l.dtype,l.values)]}};class GI{constructor(e,t,n,a,r,s){this.variableNames=["Image","Transforms"],this.outputShape=s;const o="nearest"===n?1:2;let i;switch(a){case"constant":i=1;break;case"reflect":i=2;break;case"wrap":i=3;break;case"nearest":i=4;break;default:i=1}this.userCode=`\n            float mapCoord(float outCoord, float len) {\n              float inCoord = outCoord;\n              if(${i} == 2) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    if (inCoord < sz2) {\n                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +\n                      inCoord;\n                    }\n                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    inCoord -= sz2 * float(int(float(inCoord / sz2)));\n                    if (inCoord >= len) {\n                      inCoord = sz2 - inCoord - 1.0;\n                    }\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${i} == 3) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord -= len * float(int(float(inCoord / sz)));\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${i} == 4) {\n                return clamp(outCoord, 0.0, len - 1.0);\n              } else {\n                return outCoord;\n              }\n            }\n\n            float readWithFillValue(int batch, int coordY, int coordX,\n              int channel) {\n              float outputValue;\n              if (0 <= coordY && coordY < ${e} && 0 <= coordX && coordX < ${t}) {\n                  outputValue = getImage(batch, coordY, coordX, channel);\n              } else {\n                outputValue = float(${r});\n              }\n              return outputValue;\n            }\n\n            void main() {\n              ivec4 coords = getOutputCoords();\n              float outputValue;\n              int batch = coords[0];\n              int x = coords[2];\n              int y = coords[1];\n              int channel = coords[3];\n              float xf = float(x);\n              float yf = float(y);\n              float a1 = getTransforms(batch, 0);\n              float a2 = getTransforms(batch, 1);\n              float a3 = getTransforms(batch, 2);\n              float b1 = getTransforms(batch, 3);\n              float b2 = getTransforms(batch, 4);\n              float b3 = getTransforms(batch, 5);\n              float c1 = getTransforms(batch, 6);\n              float c2 = getTransforms(batch, 7);\n              float projection = c1 * xf + c2 * yf + 1.0;\n              if (projection == 0.0) {\n                outputValue = float(${r});\n              } else {\n                float inX = (a1 * xf + a2 * yf + a3) / projection;\n                float inY = (b1 * xf + b2 * yf + b3) / projection;\n                float mapX = mapCoord(inX, float(${t}));\n                float mapY = mapCoord(inY, float(${e}));\n\n                if (${o} == 1) {\n                  int coordY = int(round(mapY));\n                  int coordX = int(round(mapX));\n                  outputValue = readWithFillValue(batch, coordY, coordX,\n                    channel);\n                } else {\n                  float yFloor = floor(mapY);\n                  float xFloor = floor(mapX);\n                  float yCeil = yFloor + 1.0;\n                  float xCeil = xFloor + 1.0;\n                  float valueYFloor = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);\n                  float valueYCeil = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);\n                  outputValue = (yCeil - mapY) * valueYFloor +\n                  (mapY - yFloor) * valueYCeil;\n                }\n              }\n              setOutput(outputValue);\n            }\n        `}}const HI={kernelName:zn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{image:r,transforms:s}=t,{interpolation:o,fillMode:i,fillValue:u,outputShape:l}=a,[c,d,p,h]=r.shape,[f,m]=null!=l?l:[d,p],g=new GI(d,p,o,i,u,[c,f,m,h]);return n.runWebGLProgram(g,[r,s],"float32")}};const jI={kernelName:Gn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,attrs:n,backend:a}=e,{axis:r}=n,{x:s}=t;Hh(s,"unique"),console.warn("WARNING: ","UI might be locked temporarily as data is being downloaded");const o=a.readSync(s.dataId),{outputValues:i,outputShape:u,indices:l}=hy(o,r,s.shape,s.dtype);return[a.makeTensorInfo(u,s.dtype,i),a.makeTensorInfo([l.length],"int32",l)]}};const qI={kernelName:Hn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{value:r}=t;let{axis:s}=a;s<0&&(s+=r.shape.length);const o=r,i=o.shape.length,u=r.shape[s],l=new Array(i-1);let c=0;for(let e=0;e<i;e++)e!==s&&(l[c++]=o.shape[e]);const d=[],p=new Array(i).fill(0),h=o.shape.slice();h[s]=1;const f=new Array(u);for(let e=0;e<f.length;e++){p[s]=e;const t=sx({inputs:{x:o},backend:n,attrs:{begin:p,size:h}}),a=Jy({inputs:{x:t},backend:n,attrs:{shape:l}});f[e]=a,d.push(t)}return d.forEach((e=>n.disposeIntermediateTensorInfo(e))),f}};class KI{constructor(e,t){this.variableNames=["x","segmentIds"];const n=e.windowSize,a=e.batchSize,r=e.inSize,s=e.numSegments,o=s*Math.ceil(r/n);this.outputShape=[a,o];const i=4*Math.floor(n/4),u=n%4,l="\n        sumValue += dot(values, segFilter);\n    ";let c="";r%n>0&&(c=`\n        if (inIdx < 0 || inIdx >= ${r}) {\n          return initializationValue;\n        }\n      `);let d="";r%n>0&&(d=`\n        if (inIdx < 0 || inIdx >= ${r}) {\n          return -1.0;\n        }\n      `),this.userCode=`\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        ${c}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${d}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${s})) * float(${n}));\n        int currentSeg = int(mod(float(outIdx), float(${s})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${i}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${l}\n        }\n\n        int inIdx = inOffset + ${i};\n        if (${1===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${l}\n        } else if (${2===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${l}\n        } else if (${3===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${l}\n        }\n        setOutput(sumValue);\n      }\n    `}}const XI=[Sk,Ak,pb,fb,gb,bb,kb,Nb,$b,Tb,_b,Fb,Db,Lb,Vb,Bb,Ub,qb,jb,Yb,Qb,Zb,tx,ix,ux,hx,gx,xx,wx,My,Rx,Vx,zx,Mx,Gx,Hx,Ux,qx,Xx,Qx,tv,nv,rv,cv,dv,iv,hv,mv,gv,bv,xv,kv,Iv,Tv,Ev,Av,Ov,Lv,Bv,zv,Gv,qv,Xv,Yv,Zv,ek,nk,rk,Oy,sk,Cx,ik,lk,dk,By,hk,mk,gk,vk,bk,wk,Nk,Tk,Fk,Lk,Mk,Wk,Vk,zk,Dk,Uk,Gk,jk,Xk,Qk,ow,Zy,uw,cw,pw,fw,cx,gw,xw,vw,Nw,Tw,zy,Cw,Sw,px,ew,Aw,Dw,Fw,eb,Pw,Ww,Uw,Hw,Kw,Yw,Zw,eI,nI,rI,oI,uI,cI,pI,fI,ox,sw,gI,yI,bI,xI,vI,kI,wI,II,$I,TI,SI,RI,_I,FI,OI,DI,aw,ub,LI,BI,zI,UI,HI,cb,jI,qI,{kernelName:jn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r,segmentIds:s}=t,{numSegments:o}=a,i=r.shape.length,u=[];let l=0;const c=Yu([l],i);let p=r;null!=c&&(p=lb({inputs:{x:r},backend:n,attrs:{perm:c}}),u.push(p),l=Zu(1,i)[0]);const h=ah(p.shape,l,o),f=d([p.shape[l]]),m=Jy({inputs:{x:p},backend:n,attrs:{shape:[-1,f]}});u.push(m);const g=br(r.dtype),y=(e,t,a,r,s)=>{const o=e.shape[0],i=e.shape[1],l=nh(i,s),c=new KI({windowSize:l,inSize:i,batchSize:o,numSegments:s},t),d=n.compileAndRun(c,[e,a],r);if(u.push(d),d.shape[1]===s)return d;const p=Ew({backend:n,attrs:{start:0,stop:s,step:1,dtype:"float32"}}),h=VI({inputs:{x:p},backend:n,attrs:{reps:[i/l]}});u.push(p),u.push(h);return y(d,t,h,r,s)},b=Jy({inputs:{x:y(m,"unsortedSegmentSum",s,g,o)},backend:n,attrs:{shape:h}});let x=b;if(null!=c){u.push(b);const e=Qu(c);x=lb({inputs:{x:x},backend:n,attrs:{perm:e}})}return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),x}},bw];for(const e of XI)sa(e);const YI=Bc;class QI extends t{constructor(){super(),this.blockSize=48,this.firstUse=!0,this.data=new e(this,Bo())}nextDataId(){return QI.nextDataId++}write(e,t,n){this.firstUse&&(this.firstUse=!1,q().get("IS_NODE")&&Pp("\n============================\nHi there 👋. Looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, which binds to TensorFlow C++, by running npm i @tensorflow/tfjs-node, or npm i @tensorflow/tfjs-node-gpu if you have CUDA. Then call require('@tensorflow/tfjs-node'); (-gpu suffix for CUDA) at the start of your program. Visit https://github.com/tensorflow/tfjs-node for more details.\n============================"));const a={id:this.nextDataId()};return this.data.set(a,{values:e,dtype:n,refCount:1}),a}makeTensorInfo(e,t,n){let a;if("string"===t&&null!=n&&n.length>0&&E(n[0])){const r=n.map((e=>Ka(e)));a=this.write(r,e,t)}else a=this.write(n,e,t);return{dataId:a,shape:e,dtype:t}}refCount(e){if(this.data.has(e)){return this.data.get(e).refCount}return 0}incRef(e){this.data.get(e).refCount++}decRef(e){if(this.data.has(e)){this.data.get(e).refCount--}}move(e,t,n,a,r){this.data.set(e,{values:t,dtype:a,refCount:r})}numDataIds(){return this.data.numDataIds()}async read(e){return this.readSync(e)}readSync(e){const{dtype:t,complexTensorInfos:n}=this.data.get(e);if("complex64"===t){return Bp(this.readSync(n.real.dataId),this.readSync(n.imag.dataId))}return this.data.get(e).values}bufferSync(e){const t=this.readSync(e.dataId);let n=t;if("string"===e.dtype)try{n=t.map((e=>Xa(e)))}catch(e){throw new Error("Failed to decode encoded string bytes into utf-8")}return Rs(e.shape,e.dtype,n)}makeOutput(e,t,n){const a=this.write(e,t,n);return Bo().makeTensorFromDataId(a,t,n,this)}disposeData(e,t=!1){if(this.data.has(e)){if(this.data.get(e).refCount--,!t&&this.data.get(e).refCount>0)return!1;const{complexTensorInfos:n}=this.data.get(e);null!=n&&(this.disposeData(n.real.dataId,!0),this.disposeData(n.imag.dataId,!0)),this.data.delete(e)}return!0}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}async time(e){const t=qa();e();return{kernelMs:qa()-t}}memory(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}}where(e){Rf([e],"where");const t=this.readSync(e.dataId);return YI(e.shape,t)}dispose(){}floatPrecision(){return 32}epsilon(){return super.epsilon()}}QI.nextDataId=0;Go("cpu",(()=>new QI),1);const ZI=Zf(je,(e=>e>=0?e:Math.exp(e)-1)),JI={kernelName:je,backendName:"cpu",kernelFunc:ZI};function eN(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{alpha:s}=a;Rf([r],"leakyRelu");const o=d(r.shape),i=n.data.get(r.dataId).values,u=v("float32",o);for(let e=0;e<i.length;e++)u[e]=i[e]<0?s*i[e]:i[e];return n.makeTensorInfo(r.shape,"float32",u)}const tN={kernelName:mt,backendName:"cpu",kernelFunc:eN},nN=Ff(((e,t)=>e<0?t*e:e));function aN(e){const{inputs:t,backend:n}=e,{x:a,alpha:r}=t;Rf([a,r],"prelu");const s=n.data.get(a.dataId).values,o=n.data.get(r.dataId).values,[i,u]=nN(a.shape,r.shape,s,o,a.dtype);return n.makeTensorInfo(u,a.dtype,i)}const rN={kernelName:Yt,backendName:"cpu",kernelFunc:aN},sN=Zf(tn,(e=>Math.max(0,e))),oN={kernelName:tn,backendName:"cpu",kernelFunc:sN},iN=Zf(un,(e=>Math.min(Math.max(0,e),6))),uN={kernelName:un,backendName:"cpu",kernelFunc:iN},lN=Zf(xn,(e=>1/(1+Math.exp(-e)))),cN={kernelName:xn,backendName:"cpu",kernelFunc:lN};function dN(e,t,n,a,r){if("linear"===n)return Lf({inputs:{x:t},backend:e});if("relu"===n)return sN({inputs:{x:t},backend:e});if("elu"===n)return ZI({inputs:{x:t},backend:e});if("relu6"===n)return iN({inputs:{x:t},backend:e});if("prelu"===n)return aN({inputs:{x:t,alpha:a},backend:e});if("leakyrelu"===n)return eN({inputs:{x:t},backend:e,attrs:{alpha:r}});if("sigmoid"===n)return lN({inputs:{x:t},backend:e});throw new Error(`Activation ${n} has not been implemented for the CPU backend.`)}function pN(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{shape:s}=a,o=d(r.shape),u=y(s,o),l=d(u);i(o===l,(()=>`The new shape (${u}) has ${l} elements and the old shape (${r.shape}) has ${o} elements. The new shape and old shape must have the same number of elements.`)),n.incRef(r.dataId);const c=n.data.get(r.dataId);if(null!=c.complexTensorInfos){const e=c.complexTensorInfos.real,t=c.complexTensorInfos.imag;e.shape=u,t.shape=u}return{dataId:r.dataId,shape:u,dtype:r.dtype}}const hN={kernelName:nn,backendName:"cpu",kernelFunc:pN};function fN(e){const{inputs:t,backend:n,attrs:a}=e,{a:r,b:s}=t,{transposeA:o,transposeB:u}=a;Rf([r,s],"matMul");const l=r.shape.length,c=s.shape.length,p=o?r.shape[l-2]:r.shape[l-1],h=u?s.shape[c-1]:s.shape[c-2],f=o?r.shape[l-1]:r.shape[l-2],m=u?s.shape[c-2]:s.shape[c-1],g=r.shape.slice(0,-2),y=s.shape.slice(0,-2),b=d(g),x=d(y);i(l>=2&&c>=2&&(b===x||1===b||1===x),(()=>`Error in matMul: the input batch dimensions must either be the same or at least one input batch dimension must be 1. Got input batch dimensions of (${g}) and (${y}).`));const v=(b>x?r.shape.slice(0,-2):s.shape.slice(0,-2)).concat([f,m]);i(p===h,(()=>`Error in matMul: inner shapes (${p}) and (${h}) of Tensors with shapes ${r.shape} and ${s.shape} and transposeA=${o} and transposeB=${u} must match.`));const k=u?[x,m,h]:[x,h,m],w=pN({inputs:{x:r},backend:n,attrs:{shape:o?[b,p,f]:[b,f,p]}}),I=pN({inputs:{x:s},backend:n,attrs:{shape:k}}),N=o?w.shape[1]:w.shape[2],$=o?w.shape[2]:w.shape[1],T=u?I.shape[1]:I.shape[2],C=Math.max(b,x),E=n.data.get(w.dataId).values,S=n.data.get(I.dataId).values,R=O(w.shape),A=O(I.shape),[_,F,D]=o?[R[0],1,R[1]]:[R[0],R[1],1],[M,L,P]=u?[1,A[1],A[0]]:[A[1],1,A[0]],B=$*T,W=Rs([C,$,T],w.dtype),V=W.values,z=n.blockSize;for(let e=0;e<C;e++)for(let t=0;t<$;t+=z)for(let n=0;n<T;n+=z)for(let a=0;a<N;a+=z){const r=Math.min(t+z,$),s=Math.min(n+z,T),o=Math.min(a+z,N);for(let i=t;i<r;i++)for(let t=n;t<s;t++){let n=0;for(let r=a;r<o;r++){const a=Math.min(e,b-1)*_,s=Math.min(e,x-1)*P;n+=E[a+i*F+r*D]*S[r*M+t*L+s]}V[e*B+(i*T+t)]+=n}}return n.disposeIntermediateTensorInfo(w),n.disposeIntermediateTensorInfo(I),n.makeTensorInfo(v,W.dtype,W.values)}const mN={kernelName:ge,backendName:"cpu",kernelFunc:fN};const gN={kernelName:Qn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{a:r,b:s,bias:o,preluActivationWeights:i}=t,{transposeA:u,transposeB:l,activation:c,leakyreluAlpha:d}=a;let p,h,f;const m=[];p=fN({inputs:{a:r,b:s},attrs:{transposeA:u,transposeB:l},backend:n}),o&&(h=qf({inputs:{a:p,b:o},backend:n}),m.push(p),p=h),c&&(f=dN(n,p,c,i,d),m.push(p),p=f);for(const e of m)n.disposeIntermediateTensorInfo(e);return p}},yN=Zf(J,(e=>Math.acos(e))),bN={kernelName:J,backendName:"cpu",kernelFunc:yN},xN=Zf(ee,(e=>Math.acosh(e))),vN={kernelName:ee,backendName:"cpu",kernelFunc:xN};const kN={kernelName:ne,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,a=t;Rf(t,"addN");const r=a.map((e=>n.data.get(e.dataId).values)),s=Rs(a[0].shape,a[0].dtype),o=s.values;for(let e=0;e<a.length;e++){const t=r[e];for(let e=0;e<o.length;e++)o[e]+=t[e]}return n.makeTensorInfo(s.shape,s.dtype,s.values)}};const wN={kernelName:ae,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{axis:s,keepDims:o}=a;Rf(r,"all");const i=b(s,r.shape);let u=i;const l=Yu(u,r.shape.length);let c=r;null!=l&&(c=Qm({inputs:{x:r},backend:n,attrs:{perm:l}}),u=Zu(u.length,r.shape.length)),Xu("all",u,c.shape.length);const[p,h]=qu(c.shape,u),f=d(h),m=P(d(p),c.dtype),g=n.data.get(c.dataId).values;for(let e=0;e<m.length;++e){const t=e*f;let n=g[t];for(let e=0;e<f;++e){const a=g[t+e];n=n&&a}m[e]=n}null!=l&&n.disposeIntermediateTensorInfo(c);const y=n.makeTensorInfo(p,c.dtype,m);if(o){const e=pN({inputs:{x:y},backend:n,attrs:{shape:Ku(p,i)}});return n.disposeIntermediateTensorInfo(y),e}return y}};const IN={kernelName:re,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{axis:s,keepDims:o}=a;Rf(r,"any");const i=b(s,r.shape);let u=i;const l=Yu(u,r.shape.length);let c=r;null!=l&&(c=Qm({inputs:{x:r},backend:n,attrs:{perm:l}}),u=Zu(u.length,r.shape.length)),Xu("any",u,c.shape.length);const[p,h]=qu(c.shape,u),f=d(h),m=P(d(p),c.dtype),g=n.data.get(c.dataId).values;for(let e=0;e<m.length;++e){const t=e*f;let n=g[t];for(let e=0;e<f;++e){const a=g[t+e];n=n||a}m[e]=n}null!=l&&n.disposeIntermediateTensorInfo(c);const y=n.makeTensorInfo(p,c.dtype,m);if(o){const e=pN({inputs:{x:y},backend:n,attrs:{shape:Ku(p,i)}});return n.disposeIntermediateTensorInfo(y),e}return y}};const NN={kernelName:se,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{axis:s}=a;Rf(r,"argMax");let o=b(s,r.shape);const i=Yu(o,r.shape.length);let u=r;const l=[];null!=i&&(u=Qm({inputs:{x:r},backend:n,attrs:{perm:i}}),l.push(u),o=Zu(o.length,u.shape.length)),o=[o[0]],Xu("argMax",o,u.shape.length);const[c,p]=qu(u.shape,o),h=P(d(c),"int32"),f=d(p),m=n.data.get(u.dataId).values;for(let e=0;e<h.length;++e){const t=e*f;let n=m[t],a=0;for(let e=0;e<f;++e){const r=m[t+e];r>n&&(n=r,a=e)}h[e]=a}return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(c,"int32",h)}};const $N={kernelName:oe,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{axis:s}=a;Rf(r,"argMin");let o=b(s,r.shape);const i=Yu(o,r.shape.length);let u=r;const l=[];null!=i&&(u=Qm({inputs:{x:r},backend:n,attrs:{perm:i}}),l.push(u),o=Zu(o.length,u.shape.length)),o=[o[0]],Xu("argMin",o,u.shape.length);const[c,p]=qu(u.shape,o),h=P(d(c),"int32"),f=d(p),m=n.data.get(u.dataId).values;for(let e=0;e<h.length;++e){const t=e*f;let n=m[t],a=0;for(let e=0;e<f;++e){const r=m[t+e];r<n&&(n=r,a=e)}h[e]=a}return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(c,"int32",h)}},TN=Zf(ie,(e=>Math.asin(e))),CN={kernelName:ie,backendName:"cpu",kernelFunc:TN},EN=Zf(ue,(e=>Math.asinh(e))),SN={kernelName:ue,backendName:"cpu",kernelFunc:EN},RN=Zf(le,(e=>Math.atan(e))),AN={kernelName:le,backendName:"cpu",kernelFunc:RN},_N=Ff(((e,t)=>Math.atan2(e,t))),FN=Uf(de,_N),ON={kernelName:de,backendName:"cpu",kernelFunc:FN},DN=Zf(ce,(e=>Math.atanh(e))),MN={kernelName:ce,backendName:"cpu",kernelFunc:DN};function LN(e,t,n,a,r,s){const o=r.strideHeight,i=r.strideWidth,u=r.dilationHeight,l=r.dilationWidth,c=r.effectiveFilterHeight,d=r.effectiveFilterWidth,p=r.padInfo.top,h=r.padInfo.left,f="max"===s?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,m=Rs(r.outShape,n),g=m.values,y=r.outShape[1]*r.outShape[2]*r.outShape[3],b=r.outShape[2]*r.outShape[3],x=r.outShape[3];for(let t=0;t<r.batchSize;++t){const n=t*y,m=t*a[0];for(let t=0;t<r.inChannels;++t)for(let y=0;y<r.outHeight;++y){const v=y*o-p,k=Math.max(0,v),w=Math.min(r.inHeight,c+v),I=n+y*b;for(let n=0;n<r.outWidth;++n){const o=n*i-h,c=Math.max(0,o),p=Math.min(r.inWidth,d+o);let y=f,b=0,v=0;for(let n=k;n<w;n+=u){const r=m+n*a[1];for(let n=c;n<p;n+=l){const o=e[r+n*a[2]+t];"max"===s&&o>y?y=o:"avg"===s&&(b+=o,v++)}if(isNaN(y))break}g[I+n*x+t]="avg"===s?b/v:y}}}return m}function PN(e,t,n,a,r=!1,s=!1){const o=Rs(a.outShape,"int32"),i=a.strideHeight,u=a.strideWidth,l=a.dilationHeight,c=a.dilationWidth,d=a.effectiveFilterHeight,p=a.effectiveFilterWidth,h=a.padInfo.top,f=a.padInfo.left,m=Rs(t,n,e);for(let e=0;e<a.batchSize;++e)for(let t=0;t<a.inChannels;++t)for(let n=0;n<a.outHeight;++n){const g=n*i-h;let y=g;for(;y<0;)y+=l;const b=Math.min(a.inHeight,d+g);for(let i=0;i<a.outWidth;++i){const d=i*u-f;let h=d;for(;h<0;)h+=c;const x=Math.min(a.inWidth,p+d);let v=Number.NEGATIVE_INFINITY,k=-1;for(let n=y;n<b;n+=l){const o=n-g;for(let i=h;i<x;i+=c){const u=i-d,l=m.get(e,n,i,t);l>v&&(v=l,k=r?s?((e*a.inHeight+n)*a.inWidth+i)*a.inChannels+t:(n*a.inWidth+i)*a.inChannels+t:o*p+u)}}o.set(k,e,n,i,t)}}return o}function BN(e,t,n,a,r,s){const o=r.strideDepth,i=r.strideHeight,u=r.strideWidth,l=r.dilationDepth,c=r.dilationHeight,d=r.dilationWidth,p=r.effectiveFilterDepth,h=r.effectiveFilterHeight,f=r.effectiveFilterWidth,m=r.padInfo.front,g=r.padInfo.top,y=r.padInfo.left,b="max"===s?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,x=Rs(r.outShape,n),v=x.values,k=r.outShape[1]*r.outShape[2]*r.outShape[3]*r.outShape[4],w=r.outShape[2]*r.outShape[3]*r.outShape[4],I=r.outShape[3]*r.outShape[4],N=r.outShape[4];for(let t=0;t<r.batchSize;++t){const n=t*k,x=t*a[0];for(let t=0;t<r.inChannels;++t)for(let k=0;k<r.outDepth;++k){const $=k*o-m;let T=$;for(;T<0;)T+=l;const C=Math.min(r.inDepth,p+$),E=n+k*w;for(let n=0;n<r.outHeight;++n){const o=n*i-g;let p=o;for(;p<0;)p+=c;const m=Math.min(r.inHeight,h+o),k=E+n*I;for(let n=0;n<r.outWidth;++n){const o=n*u-y;let i=o;for(;i<0;)i+=d;const h=Math.min(r.inWidth,f+o),g=k+n*N;let w=b,I=0,$=0;for(let n=T;n<C;n+=l){const r=x+n*a[1];for(let n=p;n<m;n+=c){const o=r+n*a[2];for(let n=i;n<h;n+=d){const r=e[o+n*a[3]+t];if("max"===s&&r>w?w=r:"avg"===s&&(I+=r,$++),isNaN(w))break}if(isNaN(w))break}if(isNaN(w))break}v[g+t]="avg"===s?I/$:w}}}}return x}const WN={kernelName:pe,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t;Rf(r,"avgPool");const{filterSize:s,strides:o,pad:u,dimRoundingMode:l}=a;i(xi(o,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${o} and dilations '1'`));const c=li(r.shape,s,o,1,u,l);let d;if(1===c.filterWidth&&1===c.filterHeight&&p(c.inShape,c.outShape))d=Lf({inputs:{x:r},backend:n});else{const e=n.data.get(r.dataId).values,t=O(r.shape),a=LN(e,r.shape,r.dtype,t,c,"avg");d=n.makeTensorInfo(c.outShape,r.dtype,a.values)}return d}};const VN={kernelName:fe,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{filterSize:s,strides:o,pad:i,dimRoundingMode:u,dataFormat:l}=a;Rf(r,"avgPool3d");const c=ci(r.shape,s,o,1,i,u,l),d=BN(n.data.get(r.dataId).values,r.shape,r.dtype,O(r.shape),c,"avg");return n.makeTensorInfo(d.shape,"float32",d.values)}};const zN={kernelName:me,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{dy:r,input:s}=t,{filterSize:o,strides:i,pad:u,dimRoundingMode:l}=a;Rf([r,s],"avgPool3DGrad");const c=ci(s.shape,o,i,1,u,l),d=c.strideDepth,p=c.strideHeight,h=c.strideWidth,f=c.filterDepth,m=c.filterHeight,g=c.filterWidth,y=c.dilationDepth,b=c.dilationHeight,x=c.dilationWidth,v=c.effectiveFilterDepth,k=c.effectiveFilterHeight,w=c.effectiveFilterWidth,I=v-1-c.padInfo.front,N=w-1-c.padInfo.left,$=k-1-c.padInfo.top,T=Rs(s.shape,"float32"),C=1/(f*m*g),E=n.bufferSync(r);for(let e=0;e<c.batchSize;++e)for(let t=0;t<c.inChannels;++t)for(let n=0;n<c.inDepth;++n)for(let a=0;a<c.inHeight;++a)for(let r=0;r<c.inWidth;++r){const s=n-I,o=a-$,i=r-N;let u=0;for(let n=0;n<v;n+=y){const a=(s+n)/d;if(!(a<0||a>=c.outDepth||Math.floor(a)!==a))for(let n=0;n<k;n+=b){const r=(o+n)/p;if(!(r<0||r>=c.outHeight||Math.floor(r)!==r))for(let n=0;n<w;n+=x){const s=(i+n)/h;if(s<0||s>=c.outWidth||Math.floor(s)!==s)continue;u+=E.get(e,a,r,s,t)}}}T.set(u*C,e,n,a,r,t)}return n.makeTensorInfo(T.shape,T.dtype,T.values)}};const UN={kernelName:he,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{dy:r,input:s}=t,o=s;Rf([r,s],"avgPoolGrad");const{filterSize:i,strides:u,pad:l}=a,c=li(o.shape,i,u,1,l),d=c.strideHeight,p=c.strideWidth,h=c.filterHeight,f=c.filterWidth,m=c.dilationHeight,g=c.dilationWidth,y=c.effectiveFilterHeight,b=c.effectiveFilterWidth,x=b-1-c.padInfo.left,v=y-1-c.padInfo.top,k=Rs(o.shape,"float32"),w=1/(h*f),I=n.data.get(r.dataId).values,N=Rs(r.shape,"float32",I);for(let e=0;e<c.batchSize;++e)for(let t=0;t<c.inChannels;++t)for(let n=0;n<c.inHeight;++n)for(let a=0;a<c.inWidth;++a){const r=n-v,s=a-x;let o=0;for(let n=0;n<y;n+=m){const a=(r+n)/d;if(!(a<0||a>=c.outHeight||Math.floor(a)!==a))for(let n=0;n<b;n+=g){const r=(s+n)/p;if(r<0||r>=c.outWidth||Math.floor(r)!==r)continue;o+=N.get(e,a,r,t)}}k.set(o*w,e,n,a,t)}return n.makeTensorInfo(k.shape,k.dtype,k.values)}};const GN={kernelName:rt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r,scale:s,offset:o,mean:u,variance:l}=t;i(u.shape.length===l.shape.length,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),i(null==o||u.shape.length===o.shape.length,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),i(null==s||u.shape.length===s.shape.length,(()=>"Batch normalization gradient requires mean and scale to have equal ranks.")),Rf([r,u,l,s,o],"batchNorm");let{varianceEpsilon:c}=a;null==c&&(c=.001);const d=n.data.get(r.dataId).values,p=n.data.get(u.dataId).values,h=n.data.get(l.dataId).values,f=s?n.data.get(s.dataId).values:new Float32Array([1]),m=o?n.data.get(o.dataId).values:new Float32Array([0]),g=new Float32Array(d.length),y=m.length,b=f.length,x=h.length,v=p.length;let k=0,w=0,I=0,N=0;for(let e=0;e<d.length;++e)g[e]=m[k++]+(d[e]-p[w++])*f[I++]/Math.sqrt(h[N++]+c),k>=y&&(k=0),w>=v&&(w=0),I>=b&&(I=0),N>=x&&(N=0);return n.makeTensorInfo(r.shape,r.dtype,g)}};const HN={kernelName:ye,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{blockShape:s,crops:o}=a;Rf([r],"batchToSpaceND");const i=s.reduce(((e,t)=>e*t)),u=$p(r.shape,s,i),l=Tp(u.length,s.length),c=Cp(r.shape,s,i),d=Ep(o,s.length),p=Sp(c,o,s.length),h=pN({inputs:{x:r},backend:n,attrs:{shape:u}}),f=Qm({inputs:{x:h},backend:n,attrs:{perm:l}}),m=pN({inputs:{x:f},backend:n,attrs:{shape:c}}),g=og({inputs:{x:m},backend:n,attrs:{begin:d,size:p}});return n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),g}};const jN={kernelName:be,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r,weights:s}=t,{size:o}=a,i=Xf(n.data.get(r.dataId).values,n.data.get(s.dataId).values,s.dtype,s.shape,o);return n.makeTensorInfo([o],s.dtype,i)}},qN=Zf(ke,((e,t)=>{const n=t;return e>n.clipValueMax?n.clipValueMax:e<n.clipValueMin?n.clipValueMin:e})),KN={kernelName:ke,backendName:"cpu",kernelFunc:qN},XN={kernelName:Ie,backendName:"cpu",kernelFunc:e=>{const{x:t}=e.inputs,n=e.backend,a=new Float32Array(d(t.shape)),r=n.data.get(t.dataId),s=r.complexTensorInfos.real,o=r.complexTensorInfos.imag,i=n.data.get(s.dataId).values,u=n.data.get(o.dataId).values;for(let e=0;e<i.length;e++){const t=i[e],n=u[e];a[e]=Math.hypot(t,n)}return n.makeOutput(a,t.shape,"float32")}};function YN(e){const{inputs:t,backend:n}=e,{input:a}=t,r=n.data.get(a.dataId).complexTensorInfos.imag,s=n.data.get(r.dataId).values;return n.makeTensorInfo(r.shape,r.dtype,s)}const QN={kernelName:dt,backendName:"cpu",kernelFunc:YN};function ZN(e){const{inputs:t,backend:n,attrs:a}=e,{axis:r}=a,s=b(r,t[0].shape)[0];let o=wp(t.map((e=>e.shape)),s);if(0===d(o))return n.makeTensorInfo(o,t[0].dtype,[]);const i=t.filter((e=>d(e.shape)>0));if(1===i.length)return Lf({inputs:{x:i[0]},backend:n});if(kp(i.map((e=>e.shape)),s),"complex64"===i[0].dtype){const e=i.map((e=>Bf({inputs:{input:e},backend:n}))),t=i.map((e=>YN({inputs:{input:e},backend:n}))),a=ZN({inputs:e,backend:n,attrs:{axis:s}}),r=ZN({inputs:t,backend:n,attrs:{axis:s}}),o=Of({inputs:{real:a,imag:r},backend:n});return e.forEach((e=>n.disposeIntermediateTensorInfo(e))),t.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(r),o}const u=i.map((e=>{const t=d(e.shape.slice(s));return pN({inputs:{x:e},backend:n,attrs:{shape:[-1,t]}})})),l=u.map((e=>({vals:n.data.get(e.dataId).values,shape:e.shape})));o=wp(u.map((e=>e.shape)),1);const c=1===u[0].shape[0],p=am(l,o,t[0].dtype,c),h=wp(i.map((e=>e.shape)),s),f=n.makeTensorInfo(h,t[0].dtype,p);return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),f}const JN={kernelName:Ne,backendName:"cpu",kernelFunc:ZN};function e$(e){const{inputs:t,backend:n,attrs:a}=e,{x:r,filter:s}=t,{strides:o,pad:i,dataFormat:u,dilations:l,dimRoundingMode:c}=a;Rf([r,s],"conv2d");const d=vi(u),p=di(r.shape,s.shape,o,l,i,c,!1,d),h=p.filterHeight,f=p.filterWidth,m=p.dilationHeight,g=p.dilationWidth,y=p.padInfo.left,b=p.padInfo.top,x="channelsLast"===p.dataFormat,v=new sr(p.outShape,r.dtype),k=O(r.shape),w=O(s.shape),I=k[0],N=x?k[1]:k[2],$=x?k[2]:1,T=x?1:k[1],C=v.strides[0],E=x?v.strides[1]:v.strides[2],S=x?v.strides[2]:1,R=x?1:v.strides[1],A=n.data.get(r.dataId).values,_=n.data.get(s.dataId).values,F=v.values;for(let e=0;e<p.batchSize;++e){const t=e*I,n=e*C;for(let e=0;e<p.outHeight;++e){const a=n+e*E,r=e*p.strideHeight-b;for(let e=0;e<h;++e){const n=r+e*m;if(n<0||n>=p.inHeight)continue;const s=e*w[0],o=t+n*N;for(let e=0;e<p.outWidth;++e){const t=a+e*S,n=e*p.strideWidth-y;for(let e=0;e<f;++e){const a=n+e*g;if(a<0||a>=p.inWidth)continue;const r=o+a*$;let i=s+e*w[1];for(let e=0;e<p.inChannels;++e){const n=A[r+e*T];for(let e=0;e<p.outChannels;++e)F[t+e*R]+=n*_[i+e];i+=p.outChannels}}}}}}return n.makeTensorInfo(v.shape,v.dtype,F)}const t$={kernelName:$e,backendName:"cpu",kernelFunc:e$};const n$={kernelName:Te,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r,dy:s}=t,{strides:o,pad:i,dataFormat:u,dimRoundingMode:l,filterShape:c}=a;Rf([r,s],"conv2dBackpropFilter");const d=vi(u),p=di(r.shape,c,o,1,i,l,!1,d),{strideHeight:h,strideWidth:f,filterHeight:m,filterWidth:g}=p,y="channelsLast"===p.dataFormat,b=new sr(p.filterShape,"float32"),x=p.padInfo.left,v=p.padInfo.top,k=n.data.get(r.dataId).values,w=n.data.get(s.dataId).values,I=new sr(r.shape,r.dtype,k),N=new sr(s.shape,s.dtype,w);for(let e=0;e<m;++e){const t=Math.max(0,Math.ceil((v-e)/h)),n=Math.min(p.outHeight,(p.inHeight+v-e)/h);for(let a=0;a<g;++a){const r=Math.max(0,Math.ceil((x-a)/f)),s=Math.min(p.outWidth,(p.inWidth+x-a)/f);for(let o=0;o<p.inChannels;++o)for(let i=0;i<p.outChannels;++i){let u=0;for(let l=0;l<p.batchSize;++l)for(let c=t;c<n;++c){const t=e+c*h-v;for(let e=r;e<s;++e){const n=a+e*f-x;u+=y?I.get(l,t,n,o)*N.get(l,c,e,i):I.get(l,o,t,n)*N.get(l,i,c,e)}}b.set(u,e,a,o,i)}}}return n.makeTensorInfo(b.shape,b.dtype,b.values)}};const a$={kernelName:Ce,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{dy:r,filter:s}=t,{inputShape:o,strides:i,pad:u,dataFormat:l,dimRoundingMode:c}=a;Rf([r,s],"conv2dBackpropInput");const d=O(s.shape),p=O(r.shape);let h=vi(l);const f=di(o,s.shape,i,1,u,c,!1,h),m=new sr(f.inShape,"float32"),g=m.values,y=n.data.get(r.dataId).values,b=n.data.get(s.dataId).values,[x,v,k]=d,{batchSize:w,filterHeight:I,filterWidth:N,inChannels:$,inHeight:T,inWidth:C,outChannels:E,outHeight:S,outWidth:R,strideHeight:A,strideWidth:_}=f;h=f.dataFormat;const F=I-1-f.padInfo.top,D=N-1-f.padInfo.left,M="channelsLast"===h,L=m.strides[0],P=M?m.strides[1]:m.strides[2],B=M?m.strides[2]:1,W=M?1:m.strides[1],V=p[0],z=M?p[1]:p[2],U=M?p[2]:1,G=M?1:p[1];for(let e=0;e<w;++e)for(let t=0;t<$;++t)for(let n=0;n<T;++n){const a=n-F,r=Math.max(0,Math.ceil(a/A)),s=Math.min(S,(I+a)/A);for(let o=0;o<C;++o){const i=o-D,u=Math.max(0,Math.ceil(i/_)),l=Math.min(R,(N+i)/_);let c=0;for(let n=r;n<s;++n){const r=n*A-a;for(let a=u;a<l;++a){const s=V*e+z*n+U*a,o=x*(I-1-r)+v*(N-1-(a*_-i))+k*t;for(let e=0;e<E;++e){c+=y[s+G*e]*b[o+e]}}}g[L*e+P*n+B*o+W*t]=c}}return n.makeTensorInfo(m.shape,m.dtype,m.values)}};const r$={kernelName:Ee,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r,filter:s}=t,{strides:o,pad:i,dilations:u}=a;Rf([r,s],"conv3d");const l=pi(r.shape,s.shape,o,u,i),{filterDepth:c,filterHeight:d,filterWidth:p,dilationDepth:h,dilationHeight:f,dilationWidth:m,padInfo:g}=l,y=g.front,b=g.left,x=g.top,v=new sr(l.outShape,r.dtype),k=n.data.get(r.dataId).values,w=n.data.get(s.dataId).values,I=v.values,N=O(r.shape),$=O(s.shape);for(let e=0;e<l.batchSize;++e){const t=e*N[0],n=e*v.strides[0];for(let e=0;e<l.outDepth;++e){const a=n+e*v.strides[1],r=e*l.strideDepth-y;for(let e=0;e<c;++e){const n=r+e*h;if(n<0||n>=l.inDepth)continue;const s=e*$[0],o=t+n*N[1];for(let e=0;e<l.outHeight;++e){const t=a+e*v.strides[2],n=e*l.strideHeight-x;for(let e=0;e<d;++e){const a=n+e*f;if(a<0||a>=l.inHeight)continue;const r=s+e*$[1],i=o+a*N[2];for(let e=0;e<l.outWidth;++e){const n=t+e*l.outChannels,a=e*l.strideWidth-b;for(let e=0;e<p;++e){const t=a+e*m;if(t<0||t>=l.inWidth)continue;const s=r+e*$[2],o=i+t*l.inChannels;let u=s;for(let e=0;e<l.inChannels;++e){const t=k[o+e];for(let e=0;e<l.outChannels;++e)I[n+e]+=t*w[u+e];u+=l.outChannels}}}}}}}}return n.makeTensorInfo(v.shape,v.dtype,v.values)}};const s$={kernelName:Se,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r,dy:s}=t,{strides:o,pad:i,filterShape:u}=a;Rf([r,s],"conv3dBackpropFilterV2");const l=O(r.shape),c=O(s.shape),d=pi(r.shape,u,o,1,i),p=d.strideDepth,h=d.strideHeight,f=d.strideWidth,m=d.filterDepth,g=d.filterHeight,y=d.filterWidth,b=new sr(d.filterShape,"float32"),x=b.values,[v,k,w,I]=b.strides,N=n.data.get(s.dataId).values,[$,T,C,E]=c,S=n.data.get(r.dataId).values,[R,A,_,F]=l,D=d.padInfo.front,M=d.padInfo.left,L=d.padInfo.top;for(let e=0;e<m;++e){const t=Math.max(0,Math.ceil((D-e)/p)),n=Math.min(d.outDepth,(d.inDepth+D-e)/p),a=e*v;for(let r=0;r<g;++r){const s=Math.max(0,Math.ceil((L-r)/h)),o=Math.min(d.outHeight,(d.inHeight+L-r)/h),i=r*k+a;for(let a=0;a<y;++a){const u=Math.max(0,Math.ceil((M-a)/f)),l=Math.min(d.outWidth,(d.inWidth+M-a)/f),c=a*w+i;for(let i=0;i<d.inChannels;++i){const m=i*I+c;for(let c=0;c<d.outChannels;++c){let g=0;for(let m=0;m<d.batchSize;++m){const d=m*R,y=m*$;for(let m=t;m<n;++m){const t=(e+m*p-D)*A+d,n=m*T+y;for(let e=s;e<o;++e){const s=(r+e*h-L)*_+t,o=e*C+n;for(let e=u;e<l;++e){const t=e*E+o;g+=S[(a+e*f-M)*F+s+i]*N[t+c]}}}}x[m+c]=g}}}}}return n.makeTensorInfo(b.shape,b.dtype,b.values)}};const o$={kernelName:Re,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{dy:r,filter:s}=t,{pad:o,strides:i,inputShape:u}=a;Rf([r],"conv3dBackpropInputV2");const l=O(r.shape),c=O(s.shape),d=pi(u,s.shape,i,1,o),p=new sr(d.inShape,"float32"),h=p.values,[f,m,g,y]=p.strides,b=n.data.get(r.dataId).values,[x,v,k,w]=l,I=n.data.get(s.dataId).values,[N,$,T,C]=c,{batchSize:E,filterDepth:S,filterHeight:R,filterWidth:A,inChannels:_,inDepth:F,inHeight:D,inWidth:M,outChannels:L,outDepth:P,outHeight:B,outWidth:W,strideDepth:V,strideHeight:z,strideWidth:U}=d,G=S-1-d.padInfo.front,H=R-1-d.padInfo.top,j=A-1-d.padInfo.left;for(let e=0;e<E;++e)for(let t=0;t<_;++t)for(let n=0;n<F;++n){const a=n-G,r=Math.max(0,Math.ceil(a/V)),s=Math.min(P,(S+a)/V);for(let o=0;o<D;++o){const i=o-H,u=Math.max(0,Math.ceil(i/z)),l=Math.min(B,(R+i)/z);for(let c=0;c<M;++c){const d=c-j,p=Math.max(0,Math.ceil(d/U)),E=Math.min(W,(A+d)/U);let _=0;for(let n=r;n<s;++n){const r=n*V-a;for(let a=u;a<l;++a){const s=a*z-i;for(let o=p;o<E;++o){const i=x*e+v*n+k*a+w*o,u=N*(S-1-r)+$*(R-1-s)+T*(A-1-(o*U-d))+C*t;for(let e=0;e<L;++e){_+=b[i+e]*I[u+e]}}}}h[f*e+m*n+g*o+y*c+t]=_}}}return n.makeTensorInfo(p.shape,p.dtype,p.values)}},i$=Zf(Ae,(e=>Math.cos(e))),u$={kernelName:Ae,backendName:"cpu",kernelFunc:i$},l$=Zf(_e,(e=>Math.cosh(e))),c$={kernelName:_e,backendName:"cpu",kernelFunc:l$};const d$={kernelName:Oe,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{image:r,boxes:s,boxInd:o}=t,{cropSize:i,method:u,extrapolationValue:l}=a,[c,d,p,h]=r.shape,f=s.shape[0],[m,g]=i,y=Rs([f,m,g,h],"float32"),b=n.data.get(s.dataId).values,x=n.data.get(o.dataId).values,v=n.data.get(r.dataId).values,k=O(r.shape),w=O(y.shape);for(let e=0;e<f;e++){const t=4*e,n=b[t],a=b[t+1],r=b[t+2],s=b[t+3],o=x[e];if(o>=c)continue;const i=m>1?(r-n)*(d-1)/(m-1):0,f=g>1?(s-a)*(p-1)/(g-1):0;for(let t=0;t<m;t++){const c=m>1?n*(d-1)+t*i:.5*(n+r)*(d-1);if(c<0||c>d-1)for(let n=0;n<g;n++)for(let a=0;a<h;a++){const r=a+n*w[2]+t*w[1]+e*w[0];y.values[r]=l}else if("bilinear"===u){const n=Math.floor(c),r=Math.ceil(c),i=c-n;for(let u=0;u<g;u++){const c=g>1?a*(p-1)+u*f:.5*(a+s)*(p-1);if(c<0||c>p-1){for(let n=0;n<h;n++){const a=n+u*w[2]+t*w[1]+e*w[0];y.values[a]=l}continue}const d=Math.floor(c),m=Math.ceil(c),b=c-d;for(let a=0;a<h;a++){let s=a+d*k[2]+n*k[1]+o*k[0];const l=v[s];s=a+m*k[2]+n*k[1]+o*k[0];const c=v[s];s=a+d*k[2]+r*k[1]+o*k[0];const p=v[s];s=a+m*k[2]+r*k[1]+o*k[0];const h=l+(c-l)*b,f=p+(v[s]-p)*b;s=a+u*w[2]+t*w[1]+e*w[0],y.values[s]=h+(f-h)*i}}}else for(let n=0;n<g;++n){const r=g>1?a*(p-1)+n*f:.5*(a+s)*(p-1);if(r<0||r>p-1){for(let a=0;a<h;a++){const r=a+n*w[2]+t*w[1]+e*w[0];y.values[r]=l}continue}const i=Math.round(r),u=Math.round(c);for(let a=0;a<h;a++){const r=a+i*k[2]+u*k[1]+o*k[0],s=a+n*w[2]+t*w[1]+e*w[0];y.values[s]=v[r]}}}}return n.makeTensorInfo(y.shape,y.dtype,y.values)}};const p$={kernelName:Fe,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{axis:s,exclusive:o,reverse:i}=a;Rf(r,"cumsum");const u=Yu([s],r.shape.length);let l=r;null!=u&&(l=Qm({inputs:{x:r},backend:n,attrs:{perm:u}}));const c=Zu(1,r.shape.length)[0];if(c!==l.shape.length-1)throw new Error(`backend.cumsum in CPU expects an inner-most axis=${l.shape.length-1} but got axis=${c}`);const p=yr(l.dtype,"int32"),h=P(d(l.shape),p),f=n.data.get(l.dataId).values,m=l.shape[l.shape.length-1],g=i?(e,t)=>e+m-t-1:(e,t)=>e+t;for(let e=0;e<f.length;e+=m)for(let t=0;t<m;t++){const n=g(e,t);if(0===t)h[n]=o?0:f[n];else{const a=g(e,t-1);h[n]=o?f[a]+h[a]:f[n]+h[a]}}const y=n.makeTensorInfo(l.shape,p,h);if(null!=u){const e=Qm({inputs:{x:y},backend:n,attrs:{perm:Qu(u)}});return n.disposeIntermediateTensorInfo(y),n.disposeIntermediateTensorInfo(l),e}return y}};const h$={kernelName:De,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r,weights:s}=t,{size:o,binaryOutput:i}=a;if(1===r.shape.length){const e=Xf(n.data.get(r.dataId).values,n.data.get(s.dataId).values,s.dtype,s.shape,o);return n.makeTensorInfo([o],s.dtype,e)}if(2===r.shape.length){const e=Yf(n.bufferSync(r),n.bufferSync(s),o,i);return n.makeTensorInfo(e.shape,s.dtype,e.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${r.shape.length}.`)}};const f$={kernelName:Me,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{blockSize:s,dataFormat:o}=a;i("NHWC"===o,(()=>`Only NHWC dataFormat supported on CPU for depthToSpace. Got ${o}`)),i(s>1,(()=>`blockSize should be > 1 for depthToSpace, but was: ${s}`));const u=r.shape[0],l=r.shape[1],c=r.shape[2],d=r.shape[3],p=l*s,h=c*s,f=d/(s*s),m=n.data.get(r.dataId).values,g=new Float32Array(u*p*h*f);let y=0;for(let e=0;e<u;++e)for(let t=0;t<p;++t){const n=Math.floor(t/s),a=t%s;for(let t=0;t<h;++t){const r=Math.floor(t/s),o=(a*s+t%s)*f;for(let t=0;t<f;++t){const a=t+o+d*(r+c*(n+l*e));g[y++]=m[a]}}}return n.makeTensorInfo([u,p,h,f],r.dtype,g)}};function m$(e){const{inputs:t,backend:n,attrs:a}=e,{x:r,filter:s}=t,{strides:o,pad:u,dilations:l,dimRoundingMode:c}=a;Rf([r,s],"depthwiseConv2DNative");const d=O(r.shape),p=O(s.shape);let h=l;null==h&&(h=[1,1]),i(xi(o,h),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${o} and dilations '${h}'`));const f=di(r.shape,s.shape,o,h,u,c,!0),{filterHeight:m,filterWidth:g,dilationHeight:y,dilationWidth:b,padInfo:x}=f,v=x.left,k=x.top,w=f.outChannels/f.inChannels,I=new sr(f.outShape,r.dtype),N=n.data.get(r.dataId).values,$=n.data.get(s.dataId).values,T=I.values;for(let e=0;e<f.batchSize;++e){const t=e*d[0],n=e*I.strides[0];for(let e=0;e<f.outHeight;++e){const a=n+e*I.strides[1],r=e*f.strideHeight-k;for(let e=0;e<m;++e){const n=r+e*y;if(n<0||n>=f.inHeight)continue;const s=e*p[0],o=t+n*d[1];for(let e=0;e<f.outWidth;++e){const t=a+e*I.strides[2],n=e*f.strideWidth-v;for(let e=0;e<g;++e){const a=n+e*b;if(a<0||a>=f.inWidth)continue;const r=s+e*p[1],i=o+a*f.inChannels;let u=t,l=r;for(let e=0;e<f.inChannels;++e){const t=N[i+e];for(let e=0;e<w;++e)T[u+e]+=t*$[l+e];u+=w,l+=w}}}}}}return n.makeTensorInfo(I.shape,I.dtype,I.values)}const g$={kernelName:Le,backendName:"cpu",kernelFunc:m$};const y$={kernelName:Pe,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r,dy:s}=t,{strides:o,dilations:i,pad:u,dimRoundingMode:l,filterShape:c}=a;Rf([r,s],"depthwiseConv2dNativeBackpropFilter");const d=di(r.shape,c,o,i,u,l,!0),{strideHeight:p,strideWidth:h,filterHeight:f,filterWidth:m}=d,g=new sr(d.filterShape,"float32"),y=d.padInfo.left,b=d.padInfo.top,x=d.outChannels/d.inChannels,v=n.data.get(r.dataId).values,k=new sr(r.shape,r.dtype,v),w=n.data.get(s.dataId).values,I=new sr(s.shape,s.dtype,w);for(let e=0;e<f;++e){const t=Math.max(0,Math.ceil((b-e)/p)),n=Math.min(d.outHeight,(d.inHeight+b-e)/p);for(let a=0;a<m;++a){const r=Math.max(0,Math.ceil((y-a)/h)),s=Math.min(d.outWidth,(d.inWidth+y-a)/h);for(let o=0;o<d.outChannels;++o){const i=Math.trunc(o/x),u=o%x;let l=0;for(let u=0;u<d.batchSize;++u)for(let c=t;c<n;++c){const t=e+c*p-b;for(let e=r;e<s;++e){const n=a+e*h-y;l+=k.get(u,t,n,i)*I.get(u,c,e,o)}}g.set(l,e,a,i,u)}}}return n.makeTensorInfo(g.shape,g.dtype,g.values)}};const b$={kernelName:Be,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{dy:r,filter:s}=t,{strides:o,dilations:i,pad:u,dimRoundingMode:l,inputShape:c}=a;Rf([r,s],"depthwiseConv2DNativeBackpropInput");const d=O(r.shape),p=O(s.shape),h=di(c,s.shape,o,i,u,l,!0),f=new sr(h.inShape,"float32"),m=f.values,[g,y,b]=f.strides,x=n.data.get(r.dataId).values,[v,k,w]=d,I=n.data.get(s.dataId).values,[N,$,T]=p,{batchSize:C,filterHeight:E,filterWidth:S,inChannels:R,inHeight:A,inWidth:_,outChannels:F,outHeight:D,outWidth:M,strideHeight:L,strideWidth:P}=h,B=E-1-h.padInfo.top,W=S-1-h.padInfo.left,V=F/R;for(let e=0;e<C;++e)for(let t=0;t<R;++t)for(let n=0;n<A;++n){const a=n-B,r=Math.max(0,Math.ceil(a/L)),s=Math.min(D,(E+a)/L);for(let o=0;o<_;++o){const i=o-W,u=Math.max(0,Math.ceil(i/P)),l=Math.min(M,(S+i)/P);let c=0;for(let n=r;n<s;++n){const r=n*L-a;for(let a=u;a<l;++a){const s=v*e+k*n+w*a,o=N*(E-1-r)+$*(S-1-(a*P-i))+T*t;for(let e=0;e<V;++e){c+=x[s+(t*V+e)]*I[o+e]}}}m[g*e+y*n+b*o+t]=c}}return n.makeTensorInfo(f.shape,f.dtype,f.values)}};const x$={kernelName:We,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:a}=t,r=d(a.shape),s=n.data.get(a.dataId).values,o=Rs([r,r],a.dtype),i=o.values;for(let e=0;e<s.length;e++)i[e*r+e]=s[e];const u=[...a.shape,...a.shape];return n.makeTensorInfo(u,o.dtype,o.values)}},v$={kernelName:Ve,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:a,filter:r}=e,{strides:s,pad:o,dilations:i}=n,u=t,l=u.data.get(a.dataId).values,c=a.shape.length,p=u.data.get(r.dataId).values,h=r.shape.length,{batchSize:f,inHeight:m,inWidth:g,inChannels:y,outHeight:b,outWidth:x,padInfo:v,strideHeight:w,strideWidth:I,filterHeight:N,filterWidth:$,dilationHeight:T,dilationWidth:C,outShape:E}=ui(a.shape,r.shape,s,o,"NHWC",i),S=d(E),R=E.length,A=k(a.dtype,S);for(let e=0;e<f;++e)for(let t=0;t<b;++t){const n=t*w-v.top;for(let s=0;s<x;++s){const o=s*I-v.left;for(let i=0;i<y;++i){let u=Number.MIN_SAFE_INTEGER;for(let t=0;t<N;++t){const s=n+t*T;if(s>=0&&s<m)for(let n=0;n<$;++n){const d=o+n*C;if(d>=0&&d<g){const o=V([e,s,d,i],c,O(a.shape)),f=V([t,n,i],h,O(r.shape)),m=l[o]+p[f];m>u&&(u=m)}}}A[V([e,t,s,i],R,O(E))]=u}}}return{dataId:u.write(ja(A,a.dtype),E,a.dtype),shape:E,dtype:a.dtype}}},k$={kernelName:Ue,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:a,filter:r,dy:s}=e,{strides:o,pad:u,dilations:l}=n,c=t,d=M(a.shape,c.data.get(a.dataId).values),p=M(r.shape,c.data.get(r.dataId).values),{batchSize:h,inHeight:f,inWidth:m,inChannels:g,outHeight:y,outWidth:b,padInfo:x,strideHeight:v,strideWidth:k,filterHeight:w,filterWidth:I,dilationHeight:N,dilationWidth:$,outShape:T}=ui(a.shape,r.shape,o,u,"NHWC",l);i(s.rank===T.length,(()=>`Error in Dilation2DBackpropFilter, dy must have the same rank as output ${T.length}, but got ${s.rank}`));const C=M(T,c.data.get(s.dataId).values),E=B(r.shape,r.dtype);for(let e=0;e<h;++e)for(let t=0;t<y;++t){const n=t*v-x.top;for(let a=0;a<b;++a){const r=a*k-x.left;for(let s=0;s<g;++s){let o=Number.MIN_SAFE_INTEGER,i=0,u=0;for(let t=0;t<w;++t){const a=n+t*N;if(a>=0&&a<f)for(let n=0;n<I;++n){const l=r+n*$;if(l>=0&&l<m){const r=d[e][a][l][s]+p[t][n][s];r>o&&(o=r,i=t,u=n)}}}E[i][u][s]+=C[e][t][a][s]}}}return{dataId:c.write(ja(E,a.dtype),r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}},w$={kernelName:ze,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:a,filter:r,dy:s}=e,{strides:o,pad:u,dilations:l}=n,c=t,d=M(a.shape,c.data.get(a.dataId).values),p=M(r.shape,c.data.get(r.dataId).values),{batchSize:h,inHeight:f,inWidth:m,inChannels:g,outHeight:y,outWidth:b,padInfo:x,strideHeight:v,strideWidth:k,filterHeight:w,filterWidth:I,dilationHeight:N,dilationWidth:$,outShape:T}=ui(a.shape,r.shape,o,u,"NHWC",l);i(s.rank===T.length,(()=>`Error in Dilation2DBackpropInput, dy must have the same rank as output ${T.length}, but got ${s.rank}`));const C=M(T,c.data.get(s.dataId).values),E=B(a.shape,a.dtype);for(let e=0;e<h;++e)for(let t=0;t<y;++t){const n=t*v-x.top;for(let a=0;a<b;++a){const r=a*k-x.left;for(let s=0;s<g;++s){let o=Number.MIN_SAFE_INTEGER,i=n<0?0:n,u=r<0?0:r;for(let t=0;t<w;++t){const a=n+t*N;if(a>=0&&a<f)for(let n=0;n<I;++n){const l=r+n*$;if(l>=0&&l<m){const r=d[e][a][l][s]+p[t][n][s];r>o&&(o=r,i=a,u=l)}}}E[e][i][u][s]+=C[e][t][a][s]}}}return{dataId:c.write(ja(E,a.dtype),a.shape,a.dtype),shape:a.shape,dtype:a.dtype}}};function I$(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{axis:s,keepDims:o}=a;let i;Rf(r,"sum"),i="bool"===r.dtype?Vf({inputs:{x:r},backend:n,attrs:{dtype:"int32"}}):Lf({inputs:{x:r},backend:n});const u=i.shape.length,l=b(s,i.shape),c=Yu(l,u);let p=l,h=i;null!=c&&(h=Qm({inputs:{x:i},backend:n,attrs:{perm:c}}),p=Zu(p.length,u)),Xu("sum",p,h.shape.length);const[f,m]=qu(h.shape,p);let g=Mf(n,f,yr(h.dtype,"int32"));const y=d(m),x=n.data.get(g.dataId).values,v=n.data.get(h.dataId).values;for(let e=0;e<x.length;++e){const t=e*y;let n=0;for(let e=0;e<y;++e)n+=v[t+e];x[e]=n}if(o){const e=g;g=pN({inputs:{x:g},backend:n,attrs:{shape:Ku(g.shape,l)}}),n.disposeIntermediateTensorInfo(e)}return n.disposeIntermediateTensorInfo(i),null!=c&&n.disposeIntermediateTensorInfo(h),g}const N$={kernelName:wn,backendName:"cpu",kernelFunc:I$};const $$={kernelName:He,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{equation:r}=a,s=t,{allDims:o,summedDims:i,idDims:u}=Xp(r,s.length);Qp(o.length,u,s);const{path:l,steps:c}=Zp(i,u),d=c.length;let h=null,f=o.length;const m=[];for(let e=0;e<d;++e){for(const t of c[e]){const{permutationIndices:e,expandDims:a}=Yp(f,u[t]);let r;Jp(e)?r=s[t]:(r=Qm({inputs:{x:s[t]},backend:n,attrs:{perm:e}}),m.push(r));const o=r.shape.slice();for(let e=0;e<a.length;++e)o.splice(a[e],0,1);p(r.shape,o)||(r=pN({inputs:{x:r},backend:n,attrs:{shape:o}}),m.push(r)),null===h?h=r:(h=Um({inputs:{a:r,b:h},backend:n}),m.push(h))}e<d-1&&(l[e]>=0&&(h=I$({inputs:{x:h},backend:n,attrs:{axis:l[e]-(o.length-f),keepDims:!1}}),m.push(h)),f--)}for(const e of m)e!==h&&n.disposeIntermediateTensorInfo(e);return h}};const T$={kernelName:qe,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{dy:a,y:r}=t;Rf([a,r],"eluGrad");const s=new Float32Array(d(r.shape)),o=n.data.get(r.dataId).values,i=n.data.get(a.dataId).values;for(let e=0;e<o.length;++e){const t=o[e];s[e]=t>=1?i[e]:i[e]*(t+1)}return n.makeTensorInfo(r.shape,"float32",s)}},C$=Zf(Ke,(e=>{const t=Math.sign(e),n=Math.abs(e),a=1/(1+.3275911*n);return t*(1-((((1.061405429*a-1.453152027)*a+1.421413741)*a-.284496736)*a+.254829592)*a*Math.exp(-n*n))})),E$={kernelName:Ke,backendName:"cpu",kernelFunc:C$};function S$(e){const{inputs:t,backend:n,attrs:a}=e,{input:r}=t,{dim:s}=a,o=r.shape.length,u=r.shape.slice();let l=s;return s<0&&(i(-(o+1)<=s,(()=>`Axis must be in the interval [${-(o+1)}, ${o}]`)),l=o+s+1),u.splice(l,0,1),pN({inputs:{x:r},backend:n,attrs:{shape:u}})}const R$={kernelName:Qe,backendName:"cpu",kernelFunc:S$},A$=Ff(((e,t)=>e/t)),_$=Uf(Ge,A$),F$={kernelName:Ge,backendName:"cpu",kernelFunc:_$};function O$(e,t,n){const a=e.shape,r=a[0],s=a[1],o=n.data.get(e.dataId),i=o.complexTensorInfos.real,u=o.complexTensorInfos.imag,l=[r,s],c=d(l),p=v("float32",c),h=v("float32",c);for(let e=0;e<r;e++){const a=og({inputs:{x:i},backend:n,attrs:{begin:[e,0],size:[1,s]}}),r=og({inputs:{x:u},backend:n,attrs:{begin:[e,0],size:[1,s]}}),o=Of({inputs:{real:a,imag:r},backend:n}),{real:l,imag:c}=D$(o,t,n),d=Bp(l,c);for(let t=0;t<s;t++){const n=Up(d,t);p[e*s+t]=n.real,h[e*s+t]=n.imag}n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(o)}const f=n.makeTensorInfo(l,"float32",p),m=n.makeTensorInfo(l,"float32",h),g=Of({inputs:{real:f,imag:m},backend:n});return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),g}function D$(e,t,n){const a=d(e.shape),r=n.data.get(e.dataId),s=n.data.get(r.complexTensorInfos.real.dataId).values,o=n.data.get(r.complexTensorInfos.imag.dataId).values;if(0==((i=a)&i-1)){const r=M$(s,o,a,t,n),i=[e.shape[0],e.shape[1]];if(t){const e=n.makeTensorInfo(i,"float32",r.real),t=n.makeTensorInfo(i,"float32",r.imag),s=n.makeTensorInfo([],"float32",Ha(a,"float32")),o=Lf({inputs:{x:s},backend:n}),u=F$.kernelFunc({inputs:{a:e,b:s},backend:n}),l=F$.kernelFunc({inputs:{a:t,b:o},backend:n}),c=n.data.get(u.dataId).values,d=n.data.get(l.dataId).values;return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(l),{real:c,imag:d}}return r}return Wp(function(e,t,n){const a=new Float32Array(2*t);for(let r=0;r<t;r++){let s=0,o=0;for(let a=0;a<t;a++){const i=jp(r*a,t,n),u=Up(e,a);s+=u.real*i.real-u.imag*i.imag,o+=u.real*i.imag+u.imag*i.real}n&&(s/=t,o/=t),Gp(a,s,o,r)}return a}(Bp(s,o),a,t));var i}function M$(e,t,n,a,r){if(1===n)return{real:e,imag:t};const s=Bp(e,t),o=n/2,i=Vp(s),u=i.real,l=i.imag,c=[u.length],d=r.makeTensorInfo(c,"float32",u),p=r.makeTensorInfo(c,"float32",l),h=Of({inputs:{real:d,imag:p},backend:r}),f=zp(s),m=f.real,g=f.imag,y=[m.length],b=r.makeTensorInfo(y,"float32",m),x=r.makeTensorInfo(y,"float32",g),v=Of({inputs:{real:b,imag:x},backend:r}),k=M$(u,l,o,a,r),w=k.real,I=k.imag,N=[w.length],$=r.makeTensorInfo(N,"float32",w),T=r.makeTensorInfo(N,"float32",I),C=Of({inputs:{real:$,imag:T},backend:r}),E=M$(m,g,o,a,r),S=E.real,R=E.imag,A=[S.length],_=r.makeTensorInfo(A,"float32",S),F=r.makeTensorInfo(A,"float32",R),O=Of({inputs:{real:_,imag:F},backend:r}),D=Hp(n,a),M=[D.real.length],L=r.makeTensorInfo(M,"float32",D.real),P=r.makeTensorInfo(M,"float32",D.imag),B=Of({inputs:{real:L,imag:P},backend:r}),W=Um({inputs:{a:B,b:O},backend:r}),V=qf({inputs:{a:C,b:W},backend:r}),z=wg({inputs:{a:C,b:W},backend:r}),U=Bf({inputs:{input:V},backend:r}),G=Bf({inputs:{input:z},backend:r}),H=YN({inputs:{input:V},backend:r}),j=YN({inputs:{input:z},backend:r}),q=ZN({inputs:[U,G],backend:r,attrs:{axis:0}}),K=ZN({inputs:[H,j],backend:r,attrs:{axis:0}}),X=r.data.get(q.dataId).values,Y=r.data.get(K.dataId).values;return r.disposeIntermediateTensorInfo(d),r.disposeIntermediateTensorInfo(p),r.disposeIntermediateTensorInfo(h),r.disposeIntermediateTensorInfo(b),r.disposeIntermediateTensorInfo(x),r.disposeIntermediateTensorInfo(v),r.disposeIntermediateTensorInfo($),r.disposeIntermediateTensorInfo(T),r.disposeIntermediateTensorInfo(C),r.disposeIntermediateTensorInfo(_),r.disposeIntermediateTensorInfo(F),r.disposeIntermediateTensorInfo(O),r.disposeIntermediateTensorInfo(L),r.disposeIntermediateTensorInfo(P),r.disposeIntermediateTensorInfo(B),r.disposeIntermediateTensorInfo(W),r.disposeIntermediateTensorInfo(V),r.disposeIntermediateTensorInfo(z),r.disposeIntermediateTensorInfo(U),r.disposeIntermediateTensorInfo(H),r.disposeIntermediateTensorInfo(G),r.disposeIntermediateTensorInfo(j),r.disposeIntermediateTensorInfo(q),r.disposeIntermediateTensorInfo(K),{real:X,imag:Y}}const L$={kernelName:Je,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:a}=t,r=d(a.shape),s=a.shape[a.shape.length-1],o=pN({inputs:{x:a},backend:n,attrs:{shape:[r/s,s]}}),i=O$(o,!1,n),u=pN({inputs:{x:i},backend:n,attrs:{shape:a.shape}});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(i),u}};function P$(e){const{backend:t,attrs:n}=e,{shape:a,value:r,dtype:s}=n,o=s||A(r),i=k(o,d(a));return function(e,t,n){e.fill(t)}(i,r),t.makeTensorInfo(a,o,i)}const B$={kernelName:et,backendName:"cpu",kernelFunc:P$};const W$={kernelName:tt,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:a}=e,r=n,s=v(a.dtype,d(a.shape)),[o,i,u,l]=a.shape,c=r.data.get(a.dataId).values;for(let e=0;e<o;e++){const t=e*u*i*l;for(let e=0;e<i;e++){const n=e*(u*l);for(let a=0;a<u;a++){const r=a*l;for(let i=0;i<l;i++){const d=[o,e,a,i][2],p=Math.round(u-d),h=t+n+r+i;let f=c[h];if(p>=0&&p<u){f=c[t+n+p*l+i]}s[h]=f}}}}return{dataId:r.write(s,a.shape,a.dtype),shape:a.shape,dtype:a.dtype}}},V$=Ff(((e,t)=>Math.floor(e/t))),z$=Uf(at,V$,null,"int32"),U$={kernelName:at,backendName:"cpu",kernelFunc:z$};const G$={kernelName:Zn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r,filter:s,bias:o,preluActivationWeights:i}=t,{strides:u,pad:l,dataFormat:c,dilations:d,dimRoundingMode:p,activation:h,leakyreluAlpha:f}=a;let m=e$({inputs:{x:r,filter:s},backend:n,attrs:{strides:u,pad:l,dataFormat:c,dilations:d,dimRoundingMode:p}});if(o){const e=m;m=qf({inputs:{a:m,b:o},backend:n}),n.disposeIntermediateTensorInfo(e)}if(h){const e=m;m=dN(n,m,h,i,f),n.disposeIntermediateTensorInfo(e)}return m}};const H$={kernelName:Jn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r,filter:s,bias:o,preluActivationWeights:i}=t,{strides:u,pad:l,dataFormat:c,dilations:d,dimRoundingMode:p,activation:h,leakyreluAlpha:f}=a;let m=m$({inputs:{x:r,filter:s},backend:n,attrs:{strides:u,pad:l,dataFormat:c,dilations:d,dimRoundingMode:p}});if(o){const e=m;m=qf({inputs:{a:m,b:o},backend:n}),n.disposeIntermediateTensorInfo(e)}if(h){const e=m;m=dN(n,m,h,i,f),n.disposeIntermediateTensorInfo(e)}return m}};const j$={kernelName:ot,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{params:a,indices:r}=t,s=d(a.shape),o=r.shape,i=o[o.length-1],[u,l,c,p]=so(a,r);if(0===l)return n.makeTensorInfo(u,a.dtype,[]);const h=gm(n.data.get(r.dataId).values,n.bufferSync(a),a.dtype,l,i,c,p,a.shape,s);return n.makeTensorInfo(u,a.dtype,h.values)}};const q$={kernelName:st,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r,indices:s}=t,{axis:o,batchDims:i}=a;Rf([r,s],"gatherV2");let u=i;null==i&&(u=0);const l=d(s.shape),c=rh(r,s,b(o,r.shape)[0],u),p=pN({inputs:{x:r},backend:n,attrs:{shape:[c.batchSize,c.outerSize,c.dimSize,c.sliceSize]}}),h=pN({inputs:{x:s},backend:n,attrs:{shape:[c.batchSize,l/c.batchSize]}}),f=[c.batchSize,c.outerSize,l/c.batchSize,c.sliceSize],m=n.bufferSync(h),g=ym(n.bufferSync(p),m,f);return n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(h),n.makeTensorInfo(c.outputShape,g.dtype,g.values)}};const K$={kernelName:ct,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:a}=t,r=d(a.shape),s=a.shape[a.shape.length-1],o=pN({inputs:{x:a},backend:n,attrs:{shape:[r/s,s]}}),i=O$(o,!0,n),u=pN({inputs:{x:i},backend:n,attrs:{shape:a.shape}});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(i),u}},X$=Zf(pt,(e=>Number.isFinite(e)?1:0),"bool"),Y$={kernelName:pt,backendName:"cpu",kernelFunc:X$},Q$=Zf(ht,(e=>Math.abs(e)===1/0?1:0),"bool"),Z$={kernelName:ht,backendName:"cpu",kernelFunc:Q$},J$=Zf(ft,(e=>Number.isNaN(e)?1:0),"bool"),eT={kernelName:ft,backendName:"cpu",kernelFunc:J$};const tT={kernelName:bt,backendName:"cpu",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:a,stop:r,num:s}=n,o=Rm(a,r,s);return t.makeTensorInfo([o.length],"float32",o)}},nT=Zf(vt,(e=>Math.log1p(e))),aT={kernelName:vt,backendName:"cpu",kernelFunc:nT},rT=Ff(((e,t)=>e&&t)),sT=Uf(kt,rT,null,"bool"),oT={kernelName:kt,backendName:"cpu",kernelFunc:sT},iT=Zf(wt,(e=>e?0:1),"bool"),uT={kernelName:wt,backendName:"cpu",kernelFunc:iT},lT=Ff(((e,t)=>e||t)),cT=Uf(It,lT,null,"bool"),dT={kernelName:It,backendName:"cpu",kernelFunc:cT};const pT={kernelName:Nt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{depthRadius:s,bias:o,alpha:i,beta:u}=a;Rf(r,"LRN");const l=r.shape[3],c=l-1,p=n.data.get(r.dataId).values,h=d(r.shape),f=new Float32Array(h);function m(e){const t=e%l;let n=e-t+Math.max(0,t-s);const a=e-t+Math.min(t+s,c);let r=0;for(;n<=a;n++){const e=p[n];r+=e*e}return r}for(let e=0;e<h;e++){const t=m(e),n=p[e]*Math.pow(o+i*t,-u);f[e]=n}return n.makeTensorInfo(r.shape,r.dtype,f)}};const hT={kernelName:$t,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r,y:s,dy:o}=t,{depthRadius:i,bias:u,alpha:l,beta:c}=a;Rf(o,"LRNGrad");const p=d(o.shape),h=o.shape[3],f=n.data.get(o.dataId).values,m=n.data.get(r.dataId).values,g=n.data.get(s.dataId).values,y=new Float32Array(p),b=p;for(let e=0;e<b;e++){const t=e%h,n=e-t+Math.max(0,t-i),a=e-t+Math.min(h,t+i+1);let r=0;for(let e=n;e<a;e++)r+=Math.pow(m[e],2);r=l*r+u;for(let t=n;t<a;t++){let n=-2*l*c*m[t]*g[e]/r;e===t&&(n+=Math.pow(r,-c)),n*=f[e],y[t]+=n}}return n.makeTensorInfo(o.shape,r.dtype,y)}};function fT(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{reductionIndices:s,keepDims:o}=a,i=n;let u=r.shape;const l=u.length,c=b(s,u);let p=c;const h=Yu(p,l);let f=i.data.get(r.dataId).values;if(null!=h){const e=new Array(l);for(let t=0;t<e.length;t++)e[t]=u[h[t]];f=Ym(f,u,r.dtype,h,e),p=Zu(p.length,l),u=e}Rf(r,"max"),Xu("max",p,l);const[m,g]=qu(u,p),y=Om(f,d(g),m,r.dtype),x=i.write(y,m,r.dtype);let v=m;if(o){v=Ku(m,c)}return{dataId:x,shape:v,dtype:r.dtype}}const mT={kernelName:Tt,backendName:"cpu",kernelFunc:fT};const gT={kernelName:Et,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t;Rf(r,"maxPool");const{filterSize:s,strides:o,pad:u,dimRoundingMode:l}=a;i(xi(o,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${o} and dilations '1'`));const c=li(r.shape,s,o,1,u,l);let d;if(1===c.filterWidth&&1===c.filterHeight&&p(c.inShape,c.outShape))d=Lf({inputs:{x:r},backend:n});else{const e=n.data.get(r.dataId).values,t=O(r.shape),a=LN(e,r.shape,r.dtype,t,c,"max");d=n.makeTensorInfo(c.outShape,r.dtype,a.values)}return d}};const yT={kernelName:Rt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{filterSize:s,strides:o,pad:i,dimRoundingMode:u,dataFormat:l}=a;Rf(r,"maxPool3d");const c=ci(r.shape,s,o,1,i,u,l),d=BN(n.data.get(r.dataId).values,r.shape,r.dtype,O(r.shape),c,"max");return n.makeTensorInfo(d.shape,"float32",d.values)}};const bT={kernelName:At,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{dy:r,input:s}=t,{filterSize:o,strides:i,pad:u,dimRoundingMode:l}=a;Rf([r,s],"maxPool3DGrad");const c=ci(s.shape,o,i,1,u,l),d=function(e,t){const n=Rs(t.outShape,"int32"),a=t.strideDepth,r=t.strideHeight,s=t.strideWidth,o=t.dilationDepth,i=t.dilationHeight,u=t.dilationWidth,l=t.effectiveFilterDepth,c=t.effectiveFilterHeight,d=t.effectiveFilterWidth,p=t.padInfo.front,h=t.padInfo.top,f=t.padInfo.left;for(let m=0;m<t.batchSize;++m)for(let g=0;g<t.inChannels;++g)for(let y=0;y<t.outDepth;++y){const b=y*a-p;let x=b;for(;x<0;)x+=o;const v=Math.min(t.inDepth,l+b);for(let a=0;a<t.outHeight;++a){const l=a*r-h;let p=l;for(;p<0;)p+=i;const k=Math.min(t.inHeight,c+l);for(let r=0;r<t.outWidth;++r){const h=r*s-f;let w=h;for(;w<0;)w+=u;const I=Math.min(t.inWidth,d+h);let N=Number.NEGATIVE_INFINITY,$=-1;for(let t=x;t<v;t+=o){const n=t-b;for(let a=p;a<k;a+=i){const r=a-l;for(let s=w;s<I;s+=u){const o=s-h,i=e.get(m,t,a,s,g);i>=N&&(N=i,$=n*c*d+r*c+o)}}}n.set($,m,y,a,r,g)}}}return n}(n.bufferSync(s),c),p=c.strideDepth,h=c.strideHeight,f=c.strideWidth,m=c.dilationDepth,g=c.dilationHeight,y=c.dilationWidth,b=c.effectiveFilterDepth,x=c.effectiveFilterHeight,v=c.effectiveFilterWidth,k=b-1-c.padInfo.front,w=v-1-c.padInfo.left,I=x-1-c.padInfo.top,N=Rs(s.shape,"float32"),$=n.bufferSync(r);for(let e=0;e<c.batchSize;++e)for(let t=0;t<c.inChannels;++t)for(let n=0;n<c.inDepth;++n)for(let a=0;a<c.inHeight;++a)for(let r=0;r<c.inWidth;++r){const s=n-k,o=a-I,i=r-w;let u=0;for(let n=0;n<b;n+=m){const a=(s+n)/p;if(!(a<0||a>=c.outDepth||Math.floor(a)!==a))for(let r=0;r<x;r+=g){const s=(o+r)/h;if(!(s<0||s>=c.outHeight||Math.floor(s)!==s))for(let o=0;o<v;o+=y){const l=(i+o)/f;if(l<0||l>=c.outWidth||Math.floor(l)!==l)continue;const p=b*x*v-1-d.get(e,a,s,l,t)===n*x*v+r*v+o?1:0;if(0===p)continue;u+=$.get(e,a,s,l,t)*p}}}N.set(u,e,n,a,r,t)}return n.makeTensorInfo(N.shape,N.dtype,N.values)}};const xT={kernelName:St,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{dy:r,input:s,output:o}=t,i=s;Rf([s,o],"maxPoolGrad");const{filterSize:u,strides:l,pad:c,dimRoundingMode:d}=a,p=li(i.shape,u,l,1,c,d),h=n.data.get(i.dataId).values,f=Rs(p.outShape,i.dtype,PN(h,i.shape,i.dtype,p).values),m=p.strideHeight,g=p.strideWidth,y=p.dilationHeight,b=p.dilationWidth,x=p.effectiveFilterHeight,v=p.effectiveFilterWidth,k=v-1-p.padInfo.left,w=x-1-p.padInfo.top,I=Rs(i.shape,"float32"),N=n.data.get(r.dataId).values,$=Rs(r.shape,"float32",N);for(let e=0;e<p.batchSize;++e)for(let t=0;t<p.inChannels;++t)for(let n=0;n<p.inHeight;++n)for(let a=0;a<p.inWidth;++a){const r=n-w,s=a-k;let o=0;for(let n=0;n<x;n+=y){const a=(r+n)/m;if(!(a<0||a>=p.outHeight||Math.floor(a)!==a))for(let r=0;r<v;r+=b){const i=(s+r)/g;if(i<0||i>=p.outWidth||Math.floor(i)!==i)continue;const u=x*v-1-f.get(e,a,i,t)===n*v+r?1:0;if(0===u)continue;o+=$.get(e,a,i,t)*u}}I.set(o,e,n,a,t)}return n.makeTensorInfo(I.shape,I.dtype,I.values)}};const vT={kernelName:_t,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:a}=e,{filterSize:r,strides:s,pad:o,includeBatchInIndex:i}=t,u=n;Rf(a,"MaxPoolWithArgmax");const l=u.data.get(a.dataId).values,c=li(a.shape,r,s,[1,1],o),[d,p]=function(e,t,n,a,r){const s=LN(e,0,n,O(t),r,"max"),o=PN(e,t,n,r,!0,a);return[s.values,o.values]}(l,a.shape,a.dtype,i,c),h=u.write(d,c.outShape,a.dtype),f=u.write(p,c.outShape,a.dtype);return[{dataId:h,shape:c.outShape,dtype:a.dtype},{dataId:f,shape:c.outShape,dtype:"int32"}]}};const kT={kernelName:Ft,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{axis:s,keepDims:o}=a,i=b(s,r.shape),u=d(qu(r.shape,i)[1]),l=[],c=n.makeTensorInfo([],"float32",new Float32Array([u]));l.push(c);const p=Vf({inputs:{x:r},backend:n,attrs:{dtype:"float32"}});l.push(p);const h=_$({inputs:{a:p,b:c},backend:n});l.push(h);const f=I$({inputs:{x:h},backend:n,attrs:{axis:s,keepDims:o}});return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),f}};const wT={kernelName:Ot,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{axis:s,keepDims:o}=a;Rf(r,"min");const i=b(s,r.shape);let u=i;const l=Yu(u,r.shape.length);let c=r;null!=l&&(c=Qm({inputs:{x:r},backend:n,attrs:{perm:l}}),u=Zu(u.length,r.shape.length)),Xu("min",u,c.shape.length);const[p,h]=qu(c.shape,u),f=d(h),m=P(d(p),c.dtype),g=n.data.get(c.dataId).values;for(let e=0;e<m.length;++e){const t=e*f;let n=g[t];for(let e=0;e<f;++e){const a=g[t+e];(Number.isNaN(a)||a<n)&&(n=a)}m[e]=n}null!=l&&n.disposeIntermediateTensorInfo(c);const y=n.makeTensorInfo(p,c.dtype,m);if(o){const e=pN({inputs:{x:y},backend:n,attrs:{shape:Ku(p,i)}});return n.disposeIntermediateTensorInfo(y),e}return y}};const IT={kernelName:Mt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{paddings:s,mode:o}=a;Rf(r,"mirrorPad");const i=s.map(((e,t)=>e[0]+r.shape[t]+e[1])),u=s.map((e=>e[0])),l=s.map(((e,t)=>e[0]+r.shape[t])),c="reflect"===o?0:1,p=n.data.get(r.dataId).values,h=r.shape.length,f=O(r.shape),m=d(i),g=i.length,y=O(i),b=v(r.dtype,m);for(let e=0;e<m;e++){let t=z(e,g,y);for(let e=0;e<g;e++)t[e]<u[e]?t[e]=2*u[e]-t[e]-c:t[e]>=l[e]&&(t[e]=2*(l[e]-1)-t[e]+c);t=t.map(((e,t)=>e-u[t]));const n=V(t,h,f);b[e]=p[n]}return{dataId:n.write(b,i,r.dtype),shape:i,dtype:r.dtype}}},NT=Ff(((e,t)=>{const n=e%t;return e<0&&t<0||e>=0&&t>=0?n:(n+t)%t})),$T=Uf(Lt,NT),TT={kernelName:Lt,backendName:"cpu",kernelFunc:$T};function CT(e){const{inputs:t,backend:n,attrs:a}=e,{logits:r}=t,{dim:s}=a,o=r.shape.length;let i=s;if(-1===i&&(i=o-1),i!==o-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${o} and dim was ${i}`);const u=b([i],r.shape),l=fT({inputs:{x:r},backend:n,attrs:{reductionIndices:u,keepDims:!1}}),c=Ku(l.shape,u),d=pN({inputs:{x:l},backend:n,attrs:{shape:c}}),p=wg({inputs:{a:r,b:d},backend:n}),h=um({inputs:{x:p},backend:n}),f=I$({inputs:{x:h},backend:n,attrs:{axis:u,keepDims:!1}}),m=pN({inputs:{x:f},backend:n,attrs:{shape:c}}),g=_$({inputs:{a:h,b:m},backend:n});return n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),g}const ET={kernelName:$n,backendName:"cpu",kernelFunc:CT};const ST={kernelName:Pt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{logits:r}=t,{numSamples:s,seed:o,normalized:i}=a;Rf(r,"multinomial");const u=i?r:CT({inputs:{logits:r},backend:n,attrs:{dim:-1}}),l=u.shape[0],c=u.shape[1],p=n.data.get(u.dataId).values,h=[l,s],f=P(d(h),"int32");for(let e=0;e<l;++e){const t=e*c,n=new Float32Array(c-1);n[0]=p[t];for(let e=1;e<n.length;++e)n[e]=n[e-1]+p[t+e];const a=Ul.alea(o.toString()),r=e*s;for(let e=0;e<s;++e){const t=a();f[r+e]=n.length;for(let a=0;a<n.length;a++)if(t<n[a]){f[r+e]=a;break}}}return i||n.disposeIntermediateTensorInfo(u),n.makeTensorInfo(h,"int32",f)}},RT=vd;const AT={kernelName:zt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{boxes:r,scores:s}=t,{maxOutputSize:o,iouThreshold:i,scoreThreshold:u}=a;Rf(r,"NonMaxSuppression");const l=n.data.get(r.dataId).values,c=n.data.get(s.dataId).values,{selectedIndices:d}=RT(l,c,o,i,u);return n.makeTensorInfo([d.length],"int32",new Int32Array(d))}},_T=kd;const FT={kernelName:Ut,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{boxes:r,scores:s}=t,{maxOutputSize:o,iouThreshold:i,scoreThreshold:u,padToMaxOutputSize:l}=a;Rf(r,"NonMaxSuppressionPadded");const c=n.data.get(r.dataId).values,d=n.data.get(s.dataId).values,{selectedIndices:p,validOutputs:h}=_T(c,d,o,i,u,l);return[n.makeTensorInfo([p.length],"int32",new Int32Array(p)),n.makeTensorInfo([],"int32",new Int32Array([h]))]}},OT=wd;const DT={kernelName:Gt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{boxes:r,scores:s}=t,{maxOutputSize:o,iouThreshold:i,scoreThreshold:u,softNmsSigma:l}=a;Rf(r,"NonMaxSuppressionWithScore");const c=n.data.get(r.dataId).values,d=n.data.get(s.dataId).values,p=o,h=i,f=u,m=l,{selectedIndices:g,selectedScores:y}=OT(c,d,p,h,f,m);return[n.makeTensorInfo([g.length],"int32",new Int32Array(g)),n.makeTensorInfo([y.length],"float32",new Float32Array(y))]}};const MT={kernelName:jt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{indices:r}=t,{depth:s,onValue:o,offValue:i}=a;Rf(r,"oneHot");const u=d(r.shape),l=new Float32Array(u*s);l.fill(i);const c=n.data.get(r.dataId).values;for(let e=0;e<u;++e)c[e]>=0&&c[e]<s&&(l[e*s+c[e]]=o);return n.makeTensorInfo([...r.shape,s],"int32",l)}};function LT(e){const{inputs:t,backend:n}=e,{x:a}=t;if("string"===a.dtype)throw new Error("zerosLike is not supported for string tensors");if("complex64"===a.dtype){const e=Bf({inputs:{input:a},backend:n}),t=LT({inputs:{x:e},backend:n}),r=YN({inputs:{input:a},backend:n}),s=LT({inputs:{x:r},backend:n}),o=Of({inputs:{real:t,imag:s},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(s),o}return P$({backend:n,attrs:{shape:a.shape,value:0,dtype:a.dtype}})}const PT={kernelName:qn,backendName:"cpu",kernelFunc:LT};const BT={kernelName:Ht,backendName:"cpu",kernelFunc:function e(t){const{inputs:n,backend:a}=t,{x:r}=n;if("string"===r.dtype)throw new Error("onesLike is not supported for string tensors");if("complex64"===r.dtype){const t=Bf({inputs:{input:r},backend:a}),n=e({inputs:{x:t},backend:a}),s=YN({inputs:{input:r},backend:a}),o=LT({inputs:{x:s},backend:a}),i=Of({inputs:{real:n,imag:o},backend:a});return a.disposeIntermediateTensorInfo(t),a.disposeIntermediateTensorInfo(n),a.disposeIntermediateTensorInfo(s),a.disposeIntermediateTensorInfo(o),i}return P$({backend:a,attrs:{shape:r.shape,value:1,dtype:r.dtype}})}};function WT(e){const{inputs:t,backend:n,attrs:a}=e,{axis:r}=a;if(1===t.length)return S$({inputs:{input:t[0]},backend:n,attrs:{dim:r}});const s=t[0].shape,o=t[0].dtype;t.forEach((e=>{u(s,e.shape,"All tensors passed to stack must have matching shapes"),i(o===e.dtype,(()=>"All tensors passed to stack must have matching dtypes"))}));const l=[],c=ZN({inputs:t.map((e=>{const t=S$({inputs:{input:e},backend:n,attrs:{dim:r}});return l.push(t),t})),backend:n,attrs:{axis:r}});return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}const VT={kernelName:qt,backendName:"cpu",kernelFunc:WT};const zT={kernelName:Kt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{paddings:s,constantValue:o}=a;Rf(r,"pad");const i=s.map(((e,t)=>e[0]+r.shape[t]+e[1])),u=s.map((e=>e[0])),l=n.data.get(r.dataId).values,c=d(r.shape),p=r.shape.length,h=O(r.shape),f=d(i),m=i.length,g=O(i),y=v(r.dtype,f);0!==o&&y.fill(o);for(let e=0;e<c;e++){y[V(z(e,p,h).map(((e,t)=>e+u[t])),m,g)]=l[e]}return{dataId:n.write(y,i,r.dtype),shape:i,dtype:r.dtype}}},UT=Ff(((e,t)=>Math.pow(e,t))),GT=Uf(Xt,UT),HT={kernelName:Xt,backendName:"cpu",kernelFunc:GT};const jT={kernelName:Zt,backendName:"cpu",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:a,stop:r,dtype:s,step:o}=n,i=tg(a,r,o,s);return t.makeTensorInfo([i.length],s,i)}},qT=Zf(en,(e=>1/e)),KT={kernelName:en,backendName:"cpu",kernelFunc:qT};const XT={kernelName:sn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{images:r}=t,{alignCorners:s,halfPixelCenters:o,size:i}=a;Rf(r,"resizeBilinear");const u=O(r.shape),[l,c]=i,[p,h,f,m]=r.shape,g=n.data.get(r.dataId).values,y=new Float32Array(d([p,l,c,m])),b=[s&&l>1?h-1:h,s&&c>1?f-1:f],x=[s&&l>1?l-1:l,s&&c>1?c-1:c];let v=0;const k=b[0]/x[0],w=b[1]/x[1];for(let e=0;e<p;e++)for(let t=0;t<l;t++){let n;n=o?k*(t+.5)-.5:k*t;const a=Math.max(0,Math.floor(n)),r=n-a,s=Math.min(h-1,Math.ceil(n)),i=e*u[0]+a*u[1],l=e*u[0]+s*u[1];for(let e=0;e<c;e++){let t;t=o?w*(e+.5)-.5:w*e;const n=Math.max(0,Math.floor(t)),a=t-n,s=Math.min(f-1,Math.ceil(t)),c=i+n*u[2],d=l+n*u[2],p=i+s*u[2],h=l+s*u[2];for(let e=0;e<m;e++){const t=g[c+e],n=g[d+e],s=t+(g[p+e]-t)*a,o=s+(n+(g[h+e]-n)*a-s)*r;y[v++]=o}}}return n.makeTensorInfo([p,l,c,m],"float32",y)}};const YT={kernelName:on,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{images:r,dy:s}=t,{alignCorners:o}=a;Rf([s,r],"resizeBilinearGrad");const i=O(r.shape),[u,l,c,d]=r.shape,[,p,h]=s.shape,f=new Float32Array(u*l*c*d),m=[o&&p>1?l-1:l,o&&h>1?c-1:c],g=[o&&p>1?p-1:p,o&&h>1?h-1:h],y=m[0]/g[0],b=m[1]/g[1],x=n.data.get(s.dataId).values;let v=0;for(let e=0;e<u;e++){const t=e*i[0];for(let e=0;e<p;e++){const n=e*y,a=Math.floor(n),r=Math.min(Math.ceil(n),l-1),s=t+a*i[1],o=t+r*i[1],u=n-a,p=1-u;for(let e=0;e<h;e++){const t=e*b,n=Math.floor(t),a=Math.min(Math.ceil(t),c-1),r=t-n,l=1-r,h=s+n*i[2],m=s+a*i[2],g=o+n*i[2],y=o+a*i[2],k=p*l,w=p*r,I=u*l,N=u*r;for(let e=0;e<d;e++){const t=x[v++];f[h+e]+=t*k,f[m+e]+=t*w,f[g+e]+=t*I,f[y+e]+=t*N}}}}return n.makeTensorInfo([u,c,l,d],"float32",f)}};const QT={kernelName:an,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{images:r}=t,{alignCorners:s,halfPixelCenters:o,size:i}=a;Rf(r,"resizeNearestNeighbor");const u=O(r.shape),[l,c]=i,[d,p,h,f]=r.shape,m=n.data.get(r.dataId).values,g=new Float32Array(d*l*c*f),y=[s&&l>1?p-1:p,s&&c>1?h-1:h],b=[s&&l>1?l-1:l,s&&c>1?c-1:c],x=y[0]/b[0],v=y[1]/b[1];let k=0;for(let e=0;e<d;e++){const t=e*u[0];for(let e=0;e<l;e++){const n=o?x*(e+.5):x*e;let a=Math.min(p-1,s?Math.round(n):Math.floor(n));o&&(a=Math.max(0,a));const r=t+a*u[1];for(let e=0;e<c;e++){const t=o?v*(e+.5):v*e;let n=Math.min(h-1,s?Math.round(t):Math.floor(t));o&&(n=Math.max(0,n));const a=r+n*u[2];for(let e=0;e<f;e++){const t=m[a+e];g[k++]=t}}}}return n.makeTensorInfo([d,l,c,f],r.dtype,g)}};const ZT={kernelName:rn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{images:r,dy:s}=t,{alignCorners:o}=a;Rf([s,r],"resizeNearestNeighborGrad");const i=O(r.shape),u=O(s.shape),[l,c,d,p]=r.shape,[,h,f]=s.shape,m=new Float32Array(l*c*d*p),g=n.data.get(s.dataId).values,y=[o&&h>1?c-1:c,o&&f>1?d-1:d],b=[o&&h>1?h-1:h,o&&f>1?f-1:f],x=y[0]/b[0],v=y[1]/b[1],k=1/x,w=1/v,I=2*Math.ceil(k)+2,N=2*Math.ceil(w)+2;for(let e=0;e<l;e++){const t=e*i[0];for(let e=0;e<c;e++){const n=t+e*i[1],a=Math.floor(e*k),r=Math.floor(a-I/2);for(let a=0;a<d;a++){const s=n+a*i[2],l=Math.floor(a*w),y=Math.floor(l-N/2);for(let n=0;n<p;n++){let i=0;for(let s=0;s<I;s++){const l=s+r;if(l<0||l>=h)continue;const p=t+l*u[1],m=l*x;if(e===Math.min(c-1,o?Math.round(m):Math.floor(m)))for(let e=0;e<N;e++){const t=e+y;if(t<0||t>=f)continue;const r=p+t*u[2],s=t*v;a===Math.min(d-1,o?Math.round(s):Math.floor(s))&&(i+=g[r+n])}}m[s+n]=i}}}}return n.makeTensorInfo(r.shape,r.dtype,m)}};const JT={kernelName:ln,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{dims:s}=a;Rf(r,"reverse");const o=r.shape.length,i=b(s,r.shape);if(0===o)return Lf({inputs:{x:r},backend:n});const u=new sr(r.shape,r.dtype),l=n.bufferSync(r);for(let e=0;e<u.size;e++){const t=u.indexToLoc(e),n=t.slice();i.forEach((e=>n[e]=r.shape[e]-1-n[e])),u.set(l.get(...n),...t)}return n.makeTensorInfo(u.shape,u.dtype,u.values)}},eC={kernelName:Yn,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:a}=e,{radians:r,fillValue:s,center:o}=t,i=n,u=v(a.dtype,d(a.shape)),[l,c,p,h]=a.shape,[f,m]=Np(o,c,p),g=Math.sin(r),y=Math.cos(r),b=i.data.get(a.dataId).values;for(let e=0;e<l;e++){const t=e*p*c*h;for(let e=0;e<c;e++){const n=e*(p*h);for(let a=0;a<p;a++){const r=a*h;for(let o=0;o<h;o++){const i=[l,e,a,o],d=i[2],x=i[1];let v=(d-f)*y-(x-m)*g,k=(d-f)*g+(x-m)*y;v=Math.round(v+f),k=Math.round(k+m);let w=s;if("number"!=typeof s&&(w=3===o?255:s[o]),v>=0&&v<p&&k>=0&&k<c){w=b[t+k*(p*h)+v*h+o]}u[t+n+r+o]=w}}}}return{dataId:i.write(u,a.shape,a.dtype),shape:a.shape,dtype:a.dtype}}},tC=Zf(cn,(e=>{const t=Math.floor(e);return e-t<.5?Math.floor(e):e-t>.5?Math.ceil(e):t%2==0?t:t+1})),nC={kernelName:cn,backendName:"cpu",kernelFunc:tC};function aC(e,t,n,a,r,s,o,i,u,l){const c=[a/r,r],d=e.values,p=t.values;if(0===a)return Rs(n,t.dtype);const h=Rs(c,t.dtype);h.values.fill(u);for(let e=0;e<s;e++){const s=[];let u=0;for(let t=0;t<o;t++){const n=d[e*o+t];s.push(n),u+=n*i[t]}if(u<0||u>=a/r)throw new Error(`Invalid indices: ${s} does not index into ${n}`);for(let n=0;n<r;n++)l?h.values[u*r+n]+=p[e*r+n]:h.values[u*r+n]=0===t.rank?p[0]:p[e*r+n]}return h}const rC={kernelName:pn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{indices:r,updates:s}=t,{shape:o}=a,{sliceRank:i,numUpdates:u,sliceSize:l,strides:c,outputSize:d}=lo(0,r,o),p=aC(n.bufferSync(r),n.bufferSync(s),o,d,l,u,i,c,0,!0);return n.makeTensorInfo(o,p.dtype,p.values)}};const sC={kernelName:hn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{condition:a,t:r,e:s}=t;Rf([a,r,s],"select");const o=a.shape.length,i=n.data.get(a.dataId).values,u=n.data.get(r.dataId).values,l=n.data.get(s.dataId).values,c=yr(r.dtype,s.dtype),p=P(d(r.shape),c);let h=0;const f=0===o||o>1||1===r.shape.length?1:d(r.shape.slice(1));for(let e=0;e<i.length;e++)for(let t=0;t<f;t++)1===i[e]?p[h++]=u[e]:p[h++]=l[e];return n.makeTensorInfo(r.shape,c,p)}},oC=Zf(fn,(e=>e>=0?1.0507009873554805*e:1.7580993408473768*(Math.exp(e)-1))),iC={kernelName:fn,backendName:"cpu",kernelFunc:oC},uC=Zf(bn,(e=>e<0?-1:e>0?1:0)),lC={kernelName:bn,backendName:"cpu",kernelFunc:uC},cC=Zf(gn,(e=>Math.sin(e))),dC={kernelName:gn,backendName:"cpu",kernelFunc:cC},pC=Zf(yn,(e=>Math.sinh(e))),hC={kernelName:yn,backendName:"cpu",kernelFunc:pC},fC=Math.log(1.1920928955078125e-7)+2,mC=Zf(vn,(e=>{const t=e>-fC,n=e<fC,a=Math.exp(e);let r;return r=n?a:t?e:Math.log(1+a),r})),gC={kernelName:vn,backendName:"cpu",kernelFunc:mC};const yC={kernelName:In,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{blockShape:s,paddings:o}=a;Rf([r],"spaceToBatchND");const i=d(s),u=[[0,0]];u.push(...o);for(let e=1+s.length;e<r.shape.length;++e)u.push([0,0]);const l=zT.kernelFunc({inputs:{x:r},backend:n,attrs:{paddings:u,constantValue:0}}),c=$p(l.shape,s,i,!1),p=Tp(c.length,s.length,!1),h=Cp(l.shape,s,i,!1),f=pN({inputs:{x:l},backend:n,attrs:{shape:c}}),m=Qm({inputs:{x:f},backend:n,attrs:{perm:p}}),g=pN({inputs:{x:m},backend:n,attrs:{shape:h}});return n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),g}};const bC={kernelName:Tn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{indices:a,values:r,denseShape:s,defaultValue:o}=t;if(1!==s.shape.length)throw new Error(`Dense shape must be a vector, saw:\n        ${s.shape}`);if(2!==a.shape.length)throw new Error(`Indices must be a matrix, saw:\n        ${a.shape}`);if(1!==r.shape.length)throw new Error(`Values must be a vector, saw:\n        ${r.shape}`);if(0!==o.shape.length)throw new Error(`Default value must be a scalar, saw:\n        ${o.shape}`);const i=n.data.get(a.dataId).values,u=n.data.get(r.dataId).values,l=n.data.get(s.dataId).values,c=n.data.get(o.dataId).values[0],[d,p,h,f,m]=ug(i,a.shape,a.dtype,u,r.dtype,l,c);return[n.makeTensorInfo(p,a.dtype,d),n.makeTensorInfo([p[0]],r.dtype,h),n.makeTensorInfo([f.length],"bool",new Uint8Array(f.map((e=>Number(e))))),n.makeTensorInfo([m.length],a.dtype,new Int32Array(m))]}};const xC={kernelName:Cn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{inputIndices:a,inputShape:r,newShape:s}=t;if(2!==a.shape.length)throw new Error(`Input indices should be a matrix but received shape\n        ${a.shape}`);if(1!==r.shape.length)throw new Error(`Input shape should be a vector but received shape\n        ${r.shape}`);if(1!==s.shape.length)throw new Error(`Target shape should be a vector but received shape ${s.shape}`);const o=Array.from(n.data.get(r.dataId).values),i=n.data.get(a.dataId).values,u=Array.from(n.data.get(s.dataId).values),[l,c,d]=lg(i,a.shape,a.dtype,o,u);return[n.makeTensorInfo(c,a.dtype,l),n.makeTensorInfo([d.length],s.dtype,new Int32Array(d))]}};const vC={kernelName:En,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:a,indices:r,segmentIds:s}=t;if(a.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n          ${r.shape}`);if(1!==s.shape.length)throw new Error(`Segment ids should be a vector but received shape\n          ${s.shape}`);const o=n.data.get(a.dataId).values,i=n.data.get(r.dataId).values,u=n.data.get(s.dataId).values,[l,c]=cg(o,a.shape,a.dtype,i,u,!0);return n.makeTensorInfo(c,a.dtype,l)}};const kC={kernelName:Sn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:a,indices:r,segmentIds:s}=t;if(a.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n         ${r.shape}`);if(1!==s.shape.length)throw new Error(`Segment ids should be a vector but received shape\n         ${s.shape}`);const o=n.data.get(a.dataId).values,i=n.data.get(r.dataId).values,u=n.data.get(s.dataId).values,[l,c]=cg(o,a.shape,a.dtype,i,u);return n.makeTensorInfo(c,a.dtype,l)}};const wC={kernelName:Rn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{sparseIndices:r,sparseValues:s,defaultValue:o}=t,{outputShape:i}=a,{sliceRank:u,numUpdates:l,sliceSize:c,strides:d,outputSize:p}=lo(0,r,i),h=aC(n.bufferSync(r),n.bufferSync(s),i,p,c,l,u,d,n.data.get(o.dataId).values[0],!1);return n.makeTensorInfo(i,h.dtype,h.values)}};const IC={kernelName:Nn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{numOrSizeSplits:s,axis:o}=a,i=b(o,r.shape)[0],u=th(r,s,i),l=new Array(r.shape.length).fill(0),c=r.shape.slice();return u.map((e=>{const t=[...c];t[i]=e;const a=og({inputs:{x:r},backend:n,attrs:{begin:l,size:t}});return l[i]+=e,a}))}},NC=Zf(kn,(e=>Math.sqrt(e))),$C={kernelName:kn,backendName:"cpu",kernelFunc:NC},TC={kernelName:_n,backendName:"cpu",kernelFunc:({inputs:e,backend:t})=>{const{x:n}=e,a=t;Rf(n,"square");const r=a.data.get(n.dataId).values,s=new Float32Array(r.length);for(let e=0;e<r.length;++e){const t=r[e];s[e]=t*t}return{dataId:a.write(s,n.shape,n.dtype),shape:n.shape,dtype:n.dtype}}},CC=Zf(Kn,((e,t)=>{const n=t;return isNaN(e)?NaN:e>0?1:n.alpha})),EC={kernelName:Kn,backendName:"cpu",kernelFunc:CC};const SC={kernelName:Fn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{begin:s,end:o,strides:i,beginMask:u,endMask:l,ellipsisMask:c,newAxisMask:d,shrinkAxisMask:p}=a;Rf(r,"stridedSlice");const{nonStrided:h,$begin:f,$strides:m,size:g,newShape:y,outShape:b}=Co(r.shape,s,o,i,u,l,c,d,p),x=pN({inputs:{x:r},backend:n,attrs:{shape:y}});let v;if(h){const e=og({inputs:{x:x},backend:n,attrs:{begin:f,size:g}});v=pN({inputs:{x:e},backend:n,attrs:{shape:b}}),n.disposeIntermediateTensorInfo(e)}else if(b.some((e=>0===e)))v=n.makeTensorInfo(b,r.dtype,[]);else{const e=fg(b,n.bufferSync(x),m,f);v=n.makeTensorInfo(e.shape,e.dtype,e.values)}const k=pN({inputs:{x:v},backend:n,attrs:{shape:b}});return n.disposeIntermediateTensorInfo(x),n.disposeIntermediateTensorInfo(v),k}};const RC={kernelName:On,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{separator:r,nGramWidths:s,leftPad:o,rightPad:i,padWidth:u,preserveShortSequences:l}=a,{data:c,dataSplits:d}=t,p=n.data.get(c.dataId).values,h=n.data.get(d.dataId).values,[f,m]=gg(p,h,r,s,o,i,u,l);return[n.makeTensorInfo([f.length],"string",f),n.makeTensorInfo(d.shape,"int32",m)]}};const AC={kernelName:Dn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{skipEmpty:r}=a,{input:s,delimiter:o}=t;if("string"!==s.dtype)throw new Error("Input must be of datatype string");if(1!==s.shape.length)throw new Error(`Input must be a vector, got shape: ${s.shape}`);if(0!==o.shape.length)throw new Error(`Delimiter must be a scalar, got shape: ${o.shape}`);const i=n.data.get(s.dataId).values,u=n.data.get(o.dataId).values[0],[l,c,d]=bg(i,u,r),p=c.length;return[n.makeTensorInfo([p,2],"int32",l),n.makeTensorInfo([p],"string",c),n.makeTensorInfo([2],"int32",new Int32Array(d))]}};const _C={kernelName:Mn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{numBuckets:r}=a,{input:s}=t;if("string"!==s.dtype)throw new Error("Input must be of datatype string");if(r<=0)throw new Error("Number of buckets must be at least 1");const o=xg(n.data.get(s.dataId).values,r);return n.makeTensorInfo(s.shape,"int32",o)}},FC=Zf(Pn,(e=>Math.tan(e))),OC={kernelName:Pn,backendName:"cpu",kernelFunc:FC},DC=Zf(Bn,(e=>Math.tanh(e)));function MC(e,t,n){switch(n){case"reflect":return function(e,t){let n=e;if(n<0)if(t<=1)n=0;else{const e=2*t;n<e&&(n=e*Math.trunc(-n/e)+n),n=n<-t?n+e:-n-1}else if(n>t-1)if(t<=1)n=0;else{const e=2*t;n-=e*Math.trunc(n/e),n>=t&&(n=e-n-1)}return r(0,n,t-1)}(e,t);case"wrap":return function(e,t){let n=e;if(n<0)if(t<=1)n=0;else{const e=t-1;n+=t*(Math.trunc(-n/e)+1)}else if(n>t-1)if(t<=1)n=0;else{const e=t-1;n-=t*Math.trunc(n/e)}return r(0,n,t-1)}(e,t);case"nearest":return function(e,t){return r(0,e,t-1)}(e,t);case"constant":default:return function(e,t){return e}(e)}}function LC(e,t,n,a,r,s,o,i,u,l,c){return 0<=i&&i<t&&0<=u&&u<n?e[o*a+i*r+u*s+l]:c}function PC(e,t,n,a,r,s,o,i,u,l,c){return LC(e,t,n,a,r,s,o,Math.round(i),Math.round(u),l,c)}function BC(e,t,n,a,r,s,o,i,u,l,c){const d=Math.floor(i),p=Math.floor(u),h=d+1,f=p+1;return(h-i)*((f-u)*LC(e,t,n,a,r,s,o,d,p,l,c)+(u-p)*LC(e,t,n,a,r,s,o,d,f,l,c))+(i-d)*((f-u)*LC(e,t,n,a,r,s,o,h,p,l,c)+(u-p)*LC(e,t,n,a,r,s,o,h,f,l,c))}const WC=[gN,_f,bN,vN,Kf,kN,wN,IN,NN,$N,CN,SN,AN,ON,MN,WN,VN,zN,UN,mN,GN,HN,jN,zf,nm,KN,Df,XN,JN,n$,a$,t$,s$,o$,r$,u$,c$,d$,p$,h$,f$,g$,y$,b$,x$,v$,w$,k$,F$,$$,JI,T$,om,E$,lm,R$,pm,L$,B$,W$,mm,U$,G$,H$,j$,q$,vm,Im,Pf,K$,QN,Y$,Z$,eT,tN,Tm,Sm,tT,Fm,aT,oT,uT,dT,pT,hT,Lm,gT,yT,bT,xT,vT,mT,kT,wT,Wm,IT,TT,ST,Gm,jm,AT,FT,DT,Xm,MT,BT,VT,zT,HT,rN,eg,jT,Wf,KT,oN,uN,hN,XT,YT,QT,ZT,JT,eC,nC,rg,rC,sC,iC,cN,lC,dC,hC,ig,ET,gC,yC,bC,xC,vC,kC,wC,IC,$C,TC,hg,EC,SC,RC,AC,_C,Ig,N$,OC,{kernelName:Bn,backendName:"cpu",kernelFunc:DC},{kernelName:Wn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{reps:s}=a;Rf(r,"tile");const o=Ng(n.bufferSync(r),s);return n.makeTensorInfo(o.shape,o.dtype,o.values)}},{kernelName:Vn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r}=t,{k:s,sorted:o}=a;Rf(r,"topk");const i=n.data.get(r.dataId).values,[u,l]=$g(i,r.shape,r.dtype,s);return[n.makeTensorInfo(u.shape,u.dtype,u.values),n.makeTensorInfo(l.shape,l.dtype,l.values)]}},Zm,{kernelName:zn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,attrs:n,backend:a}=e,{image:r,transforms:s}=t,{interpolation:o,fillMode:i,fillValue:u,outputShape:l}=n,[c,p,h,f]=r.shape,[m,g]=null!=l?l:[p,h],y=[c,m,g,f],b=O(r.shape),x=b[0],k=b[1],w=b[2],I=v(r.dtype,d(y));I.fill(u);const N=a.data.get(r.dataId).values,$=a.data.get(s.dataId).values;for(let e=0;e<c;++e){const t=1===s.shape[0]?$:$.subarray(8*e,8*e+8);for(let n=0;n<m;++n)for(let a=0;a<g;++a)for(let r=0;r<f;++r){let s;const l=t[6]*a+t[7]*n+1;if(0===l)continue;const c=(t[0]*a+t[1]*n+t[2])/l,d=(t[3]*a+t[4]*n+t[5])/l,f=MC(c,h,i),m=MC(d,p,i);switch(o){case"nearest":s=PC(N,p,h,x,k,w,e,m,f,r,u);break;case"bilinear":s=BC(N,p,h,x,k,w,e,m,f,r,u);break;default:throw new Error(`Error in Transform: Expect 'nearest' or 'bilinear', but got ${o}`)}I[e*x+n*k+a*w+r]=s}return a.makeTensorInfo(y,r.dtype,I)}return{dataId:a.write(I,y,r.dtype),shape:r.shape,dtype:r.dtype}}},{kernelName:Gn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,attrs:n,backend:a}=e,{axis:r}=n,{x:s}=t;Rf(s,"unique");const o=a.data.get(s.dataId).values,{outputValues:i,outputShape:u,indices:l}=Tg(o,r,s.shape,s.dtype);return[a.makeTensorInfo(u,s.dtype,i),a.makeTensorInfo([l.length],"int32",l)]}},{kernelName:Hn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{value:r}=t;let{axis:s}=a;s<0&&(s+=r.shape.length);const o=r.shape.length,i=r.shape[s],u=new Array(o-1);let l=0;for(let e=0;e<o;e++)e!==s&&(u[l++]=r.shape[e]);const c=new Array(o).fill(0),d=r.shape.slice();d[s]=1;const p=new Array(i);for(let e=0;e<p.length;e++){c[s]=e;const t=og({inputs:{x:r},backend:n,attrs:{begin:c,size:d}});p[e]=pN({inputs:{x:t},backend:n,attrs:{shape:u}}),n.disposeIntermediateTensorInfo(t)}return p}},{kernelName:jn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:a}=e,{x:r,segmentIds:s}=t,{numSegments:o}=a;Rf(r,"unsortedSegmentSum");const i=[],u=[],l=r.shape.length-s.shape.length;let c=s;for(let e=0;e<l;++e){const t=S$({inputs:{input:c},backend:n,attrs:{dim:e+1}});c=t,u.push(t)}for(let e=0;e<o;++e){const t=Ha(e,"int32"),a=n.makeTensorInfo([],"int32",t),s=sm({inputs:{a:a,b:c},backend:n}),o=Vf({inputs:{x:s},backend:n,attrs:{dtype:"float32"}}),l=Um({inputs:{a:o,b:r},backend:n}),d=I$({inputs:{x:l},backend:n,attrs:{axis:0,keepDims:!1}});i.push(d),u.push(a),u.push(s),u.push(o),u.push(l),u.push(d)}const d=WT({inputs:i,backend:n,attrs:{axis:0}});return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),d}},PT];for(const e of WC)sa(e);var VC,zC;!function(e){e[e.DT_INVALID=0]="DT_INVALID",e[e.DT_FLOAT=1]="DT_FLOAT",e[e.DT_DOUBLE=2]="DT_DOUBLE",e[e.DT_INT32=3]="DT_INT32",e[e.DT_UINT8=4]="DT_UINT8",e[e.DT_INT16=5]="DT_INT16",e[e.DT_INT8=6]="DT_INT8",e[e.DT_STRING=7]="DT_STRING",e[e.DT_COMPLEX64=8]="DT_COMPLEX64",e[e.DT_INT64=9]="DT_INT64",e[e.DT_BOOL=10]="DT_BOOL",e[e.DT_QINT8=11]="DT_QINT8",e[e.DT_QUINT8=12]="DT_QUINT8",e[e.DT_QINT32=13]="DT_QINT32",e[e.DT_BFLOAT16=14]="DT_BFLOAT16",e[e.DT_FLOAT_REF=101]="DT_FLOAT_REF",e[e.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",e[e.DT_INT32_REF=103]="DT_INT32_REF",e[e.DT_UINT8_REF=104]="DT_UINT8_REF",e[e.DT_INT16_REF=105]="DT_INT16_REF",e[e.DT_INT8_REF=106]="DT_INT8_REF",e[e.DT_STRING_REF=107]="DT_STRING_REF",e[e.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",e[e.DT_INT64_REF=109]="DT_INT64_REF",e[e.DT_BOOL_REF=110]="DT_BOOL_REF",e[e.DT_QINT8_REF=111]="DT_QINT8_REF",e[e.DT_QUINT8_REF=112]="DT_QUINT8_REF",e[e.DT_QINT32_REF=113]="DT_QINT32_REF",e[e.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF"}(VC||(VC={})),function(e){let t;!function(e){e[e.LEGACY=0]="LEGACY",e[e.V1=1]="V1",e[e.V2=2]="V2"}(t=e.CheckpointFormatVersion||(e.CheckpointFormatVersion={}))}(zC||(zC={}));const UC={};function GC(e){return UC[e]}function HC(e,t,n,a,r){const s=t.inputParams[e];if(s&&void 0!==s.inputIndexStart){const e=s.inputIndexStart,o=0===s.inputIndexEnd?void 0:void 0===s.inputIndexEnd?e+1:s.inputIndexEnd;if("tensor"===s.type)return jC(t.inputNames[s.inputIndexStart],n,a,r);if("tensors"===s.type){return t.inputNames.slice(e,o).map((e=>jC(e,n,a,r)))}const i=jC(t.inputNames.slice(e)[0],n,a,r),u=i.dataSync();return"number"===s.type?u[0]:M(i.shape,u)}const o=t.attrParams[e];return o&&o.value}function jC(e,t,n,a){const[r,s]=XC(e);if(null!=a){const e=a.getHashTableHandleByName(r);if(null!=e)return e}const o=n.currentContextIds.find((e=>!!t[KC(r,e)]));return void 0!==o?t[KC(r,o)][s]:void 0}function qC(e,t){const[n,a,r]=XC(e);return[KC(n,t&&t.currentContextId),a,r]}function KC(e,t){return t?`${e}-${t}`:e}function XC(e){const t=e.split(":");if(1===t.length)return[e,0,void 0];const n=t[0],a=3===t.length?t[1]:void 0;return[n,Number(t[t.length-1]),a]}function YC(e,t,n){let a=HC("pad",e,t,n);if("explicit"===a){a=HC("explicitPaddings",e,t,n);const r=[[0,0],[0,0],[0,0],[0,0]];for(let e=0;e<4;e++)r[e][0]=a[2*e],r[e][1]=a[2*e+1];return r}return a}function QC(e){return e.kept?e:_s(e)}var ZC=Object.freeze({__proto__:null,json:[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]});var JC=Object.freeze({__proto__:null,json:[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"clipValueMin",type:"number"},{start:2,name:"clipValueMax",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Prod",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axes",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsNan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]});var eE=Object.freeze({__proto__:null,json:[{tfOpName:"EmptyTensorList",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"maxNumElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]}]});var tE=Object.freeze({__proto__:null,json:[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[],notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number"}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]",notSupported:!0}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}]});var nE=Object.freeze({__proto__:null,json:[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}]});var aE=Object.freeze({__proto__:null,json:[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]});var rE=Object.freeze({__proto__:null,json:[{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]},{tfOpName:"Unique",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"UniqueV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]}]});var sE=Object.freeze({__proto__:null,json:[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}]});var oE=Object.freeze({__proto__:null,json:[{tfOpName:"HashTable",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"HashTableV2",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"LookupTableImport",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableImportV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFind",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFindV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableSize",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"LookupTableSizeV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]}]});var iE=Object.freeze({__proto__:null,json:[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]}]});var uE=Object.freeze({__proto__:null,json:[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]});var lE=Object.freeze({__proto__:null,json:[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Einsum",category:"matrices",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"equation",name:"equation",type:"string"},{tfName:"N",name:"n",type:"number",defaultValue:2},{tfName:"T",name:"dtype",type:"dtype"}]}]});var cE=Object.freeze({__proto__:null,json:[{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"SparseToDense",category:"normalization",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!0,notSupported:!0}]}]});var dE=Object.freeze({__proto__:null,json:[{tfOpName:"Bincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}]},{tfOpName:"DenseBincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}],attrs:[{tfName:"binary_output",name:"binaryOutput",type:"bool"}]},{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}]});var pE=Object.freeze({__proto__:null,json:[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}],attrs:[{tfName:"batch_dims",name:"batchDims",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool[]"}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]}]});var hE=Object.freeze({__proto__:null,json:[{tfOpName:"SparseFillEmptyRows",category:"sparse",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"denseShape",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}]},{tfOpName:"SparseReshape",category:"sparse",inputs:[{start:0,name:"inputIndices",type:"tensor"},{start:1,name:"inputShape",type:"tensor"},{start:2,name:"newShape",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SparseSegmentMean",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]},{tfOpName:"SparseSegmentSum",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]}]});var fE=Object.freeze({__proto__:null,json:[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}]});var mE=Object.freeze({__proto__:null,json:[{tfOpName:"StringNGrams",category:"string",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"dataSplits",type:"tensor"}],attrs:[{tfName:"separator",name:"separator",type:"string"},{tfName:"ngram_widths",name:"nGramWidths",type:"number[]"},{tfName:"left_pad",name:"leftPad",type:"string"},{tfName:"right_pad",name:"rightPad",type:"string"},{tfName:"pad_width",name:"padWidth",type:"number"},{tfName:"preserve_short_sequences",name:"preserveShortSequences",type:"bool"}],outputs:["ngrams","ngrams_splits"]},{tfOpName:"StringSplit",category:"string",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"delimiter",type:"tensor"}],attrs:[{tfName:"skip_empty",name:"skipEmpty",type:"bool"}],outputs:["indices","values","shape"]},{tfOpName:"StringToHashBucketFast",category:"string",inputs:[{start:0,name:"input",type:"tensor"}],attrs:[{tfName:"num_buckets",name:"numBuckets",type:"number"}]}]});var gE=Object.freeze({__proto__:null,json:[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"MirrorPad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"mode",name:"mode",type:"string"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]}]});class yE{static get Instance(){return this._instance||(this._instance=new this)}constructor(){const e=[].concat(...[ZC,JC,eE,tE,nE,aE,rE,sE,oE,iE,uE,lE,cE,dE,pE,hE,fE,mE,gE].map((e=>e.json)));this.opMappers=e.reduce(((e,t)=>(e[t.tfOpName]=t,e)),{})}transformGraph(e,t={}){const n=e.node,a=[],r=[],s=[],o=n.reduce(((e,t)=>(e[t.name]=this.mapNode(t),t.op.startsWith("Placeholder")?a.push(e[t.name]):"Const"===t.op?r.push(e[t.name]):null!=t.input&&0!==t.input.length||s.push(e[t.name]),e)),{});let i=[];const u=[];let l={},c={};null!=t&&(l=this.mapSignatureEntries(t.inputs),c=this.mapSignatureEntries(t.outputs));const d=Object.keys(o);d.forEach((e=>{const t=o[e];t.inputNames.forEach(((e,n)=>{const[a,,r]=qC(e),s=o[a];if(null!=s.outputs){const e=s.outputs.indexOf(r);if(-1!==e){const r=`${a}:${e}`;t.inputNames[n]=r}}t.inputs.push(s),s.children.push(t)}))})),0===Object.keys(c).length?d.forEach((e=>{const t=o[e];0===t.children.length&&u.push(t)})):Object.keys(c).forEach((e=>{const[t]=qC(e),n=o[t];null!=n&&(n.signatureKey=c[e],u.push(n))})),Object.keys(l).length>0?Object.keys(l).forEach((e=>{const[t]=qC(e),n=o[t];n&&(n.signatureKey=l[e],i.push(n))})):i=a;let p={};null!=e.library&&null!=e.library.function&&(p=e.library.function.reduce(((e,t)=>(e[t.signature.name]=this.mapFunction(t),e)),{}));const h={nodes:o,inputs:i,outputs:u,weights:r,placeholders:a,signature:t,functions:p};return s.length>0&&(h.initNodes=s),h}mapSignatureEntries(e){return Object.keys(e||{}).reduce(((t,n)=>(t[e[n].name]=n,t)),{})}mapNode(e){const t=GC(e.op)||this.opMappers[e.op]||{};null==e.attr&&(e.attr={});const n={name:e.name,op:e.op,category:t.category,inputNames:(e.input||[]).map((e=>e.startsWith("^")?e.substr(1):e)),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:e.attr,outputs:t.outputs};return null!=t.inputs&&(n.inputParams=t.inputs.reduce(((e,t)=>(e[t.name]={type:t.type,inputIndexStart:t.start,inputIndexEnd:t.end},e)),{})),null!=t.attrs&&(n.attrParams=t.attrs.reduce(((t,n)=>{const a=n.type;let r;switch(n.type){case"string":r=xE(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=xE(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"string[]":r=SE(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=SE(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"number":r=kE(e.attr,n.tfName,n.defaultValue||0),void 0===r&&n.tfDeprecatedName&&(r=kE(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"number[]":r=EE(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=EE(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool":r=vE(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=vE(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool[]":r=AE(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=AE(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape":r=CE(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=CE(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape[]":r=RE(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=RE(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype":r=NE(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=NE(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype[]":r=$E(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=$E(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"func":r=IE(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=IE(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"tensor":case"tensors":break;default:throw new Error(`Unsupported param type: ${n.type} for op: ${e.op}`)}return t[n.name]={value:r,type:a},t}),{})),n}mapFunction(e){const t=e.nodeDef,n=[];let a={};null!=t&&(a=t.reduce(((e,t)=>(e[t.name]=this.mapNode(t),"Const"===t.op&&n.push(e[t.name]),e)),{}));const r=[],s=[];e.signature.inputArg.forEach((e=>{const[t]=qC(e.name),n={name:t,op:"Placeholder",inputs:[],inputNames:[],category:"graph",inputParams:{},attrParams:{dtype:{value:wE(e.type),type:"dtype"}},children:[]};n.signatureKey=e.name,r.push(n),a[t]=n}));Object.keys(a).forEach((e=>{const t=a[e];t.inputNames.forEach(((e,n)=>{const[r,,s]=qC(e),o=a[r];if(null!=o.outputs){const e=o.outputs.indexOf(s);if(-1!==e){const a=`${r}:${e}`;t.inputNames[n]=a}}t.inputs.push(o),o.children.push(t)}))}));const o=e.ret;e.signature.outputArg.forEach((e=>{const[t,n]=qC(o[e.name]),r=a[t];null!=r&&(r.defaultOutput=n,s.push(r))}));const i=this.mapArgsToSignature(e);return{nodes:a,inputs:r,outputs:s,weights:n,placeholders:[],signature:i}}mapArgsToSignature(e){return{methodName:e.signature.name,inputs:e.signature.inputArg.reduce(((e,t)=>(e[t.name]=this.mapArgToTensorInfo(t),e)),{}),outputs:e.signature.outputArg.reduce(((t,n)=>(t[n.name]=this.mapArgToTensorInfo(n,e.ret),t)),{})}}mapArgToTensorInfo(e,t){let n=e.name;return null!=t&&(n=t[n]),{name:n,dtype:e.type}}}function bE(e,t){const n=Array.isArray(e)?String.fromCharCode.apply(null,e):function(e){const t=q().global;if(void 0!==t.atob)return t.atob(e);if("undefined"!=typeof Buffer)return new Buffer(e,"base64").toString();throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()")}(e);return t?n:n.toLowerCase()}function xE(e,t,n,a=!1){const r=e[t];return null!=r?bE(r.s,a):n}function vE(e,t,n){const a=e[t];return a?a.b:n}function kE(e,t,n){const a=e[t]||{},r=null!=a.i?a.i:null!=a.f?a.f:n;return"number"==typeof r?r:parseInt(r,10)}function wE(e){switch("string"==typeof e&&(e=VC[e]),e){case VC.DT_FLOAT:return"float32";case VC.DT_INT32:case VC.DT_INT64:case VC.DT_INT8:case VC.DT_UINT8:return"int32";case VC.DT_BOOL:return"bool";case VC.DT_DOUBLE:return"float32";case VC.DT_STRING:return"string";default:return null}}function IE(e,t,n){const a=e[t];return a&&a.func?a.func.name:n}function NE(e,t,n){const a=e[t];return a&&a.type?wE(a.type):n}function $E(e,t,n){const a=e[t];return a&&a.list&&a.list.type?a.list.type.map((e=>wE(e))):n}function TE(e){if(!e.unknownRank)return null!=e.dim?e.dim.map((e=>"number"==typeof e.size?e.size:parseInt(e.size,10))):[]}function CE(e,t,n){const a=e[t];return a&&a.shape?TE(a.shape):n}function EE(e,t,n){const a=e[t];return a?((a.list.f&&a.list.f.length?a.list.f:a.list.i)||[]).map((e=>"number"==typeof e?e:parseInt(e,10))):n}function SE(e,t,n,a=!1){const r=e[t];return r&&r.list&&r.list.s?r.list.s.map((e=>bE(e,a))):n}function RE(e,t,n){const a=e[t];return a&&a.list&&a.list.shape?a.list.shape.map((e=>TE(e))):n}function AE(e,t,n){const a=e[t];return a&&a.list&&a.list.b?a.list.b:n}class _E{constructor(e,t,n){this.node=e,this.tensorMap=t,this.context=n,this.inputs=[],this.attrs={},this.inputs=e.inputNames.map((e=>this.getInput(e))),null!=e.rawAttrs&&(this.attrs=Object.keys(e.rawAttrs).reduce(((e,t)=>(e[t]=this.getAttr(t),e)),{}))}getInput(e){return jC(e,this.tensorMap,this.context)}getAttr(e,t){const n=this.node.rawAttrs[e];if(null!=n.tensor)return jC(e,this.tensorMap,this.context);if(null!=n.i||null!=n.f)return kE(this.node.rawAttrs,e,t);if(null!=n.s)return xE(this.node.rawAttrs,e,t);if(null!=n.b)return vE(this.node.rawAttrs,e,t);if(null!=n.shape)return CE(this.node.rawAttrs,e,t);if(null!=n.type)return NE(this.node.rawAttrs,e,t);if(null!=n.list){if(null!=n.list.i||null!=n.list.f)return EE(this.node.rawAttrs,e,t);if(null!=n.list.s)return SE(this.node.rawAttrs,e,t);if(null!=n.list.shape)return RE(this.node.rawAttrs,e,t);if(null!=n.list.b)return AE(this.node.rawAttrs,e,t);if(null!=n.list.type)return $E(this.node.rawAttrs,e,t)}return t}}function FE(e,t,n=""){if("number"!=typeof e&&"number"!=typeof t){i(e.length===t.length,(()=>n+` Shapes ${e} and ${t} must match`));for(let a=0;a<e.length;a++){const r=e[a],s=t[a];i(r<0||s<0||r===s,(()=>n+` Shapes ${e} and ${t} must match`))}}}function OE(e){return"number"!=typeof e&&!e.some((e=>e<0))}function DE(e,t,n){let a=ME(e,n);const r=!OE(a);if(r&&0===t.length)throw new Error(`Tried to calculate elements of an empty list with non-fully-defined elementShape: ${a}`);if(r&&t.forEach((e=>{a=ME(e.shape,a)})),!OE(a))throw new Error(`Non-fully-defined elementShape: ${a}`);return a}function ME(e,t){if("number"==typeof e)return t;if("number"==typeof t)return e;if(e.length!==t.length)throw new Error(`Incompatible ranks during merge: ${e} vs. ${t}`);const n=[];for(let a=0;a<e.length;++a){const r=e[a],s=t[a];if(r>=0&&s>=0&&r!==s)throw new Error(`Incompatible shape during merge: ${e} vs. ${t}`);n[a]=r>=0?r:s}return n}class LE{constructor(e,t,n,a,r,s,o){this.name=e,this.dtype=t,this.maxSize=n,this.elementShape=a,this.identicalElementShapes=r,this.dynamicSize=s,this.clearAfterRead=o,this.tensors=[],this.closed_=!1,this.idTensor=uc(0),zo(this.idTensor)}get id(){return this.idTensor.id}get closed(){return this.closed_}clearAndClose(e){this.tensors.forEach((t=>{null!=e&&e.has(t.tensor.id)||t.tensor.dispose()})),this.tensors=[],this.closed_=!0,this.idTensor.dispose()}size(){return this.tensors.length}read(e){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||e>=this.size())throw new Error(`Tried to read from index ${e}, but array size is: ${this.size()}`);const t=this.tensors[e];if(t.cleared)throw new Error(`TensorArray ${this.name}: Could not read index ${e} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`);return this.clearAfterRead&&(t.cleared=!0),t.read=!0,t.tensor}readMany(e){return e.map((e=>this.read(e)))}write(e,t){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||!this.dynamicSize&&e>=this.maxSize)throw new Error(`Tried to write to index ${e}, but array is not resizeable and size is: ${this.maxSize}`);const n=this.tensors[e]||{};if(t.dtype!==this.dtype)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e},\n          because the value dtype is ${t.dtype}, but TensorArray dtype is ${this.dtype}.`);if(0!==this.size()||null!=this.elementShape&&0!==this.elementShape.length||(this.elementShape=t.shape),FE(this.elementShape,t.shape,`TensorArray ${this.name}: Could not write to TensorArray index ${e}.`),n.read)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been read.`);if(n.written)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been written.`);n.tensor=t,zo(t),n.written=!0,this.tensors[e]=n}writeMany(e,t){if(e.length!==t.length)throw new Error(`TensorArray ${this.name}: could not write multiple tensors,because the index size: ${e.length} is not the same as tensors size: ${t.length}.`);e.forEach(((e,n)=>this.write(e,t[n])))}gather(e,t){if(t&&t!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${t}`);if(e)e=e.slice(0,this.size());else{e=[];for(let t=0;t<this.size();t++)e.push(t)}if(0===e.length)return Ur([],[0].concat(this.elementShape));const n=this.readMany(e);return FE(this.elementShape,n[0].shape,"TensorArray shape mismatch: "),Ec(n,0)}concat(e){if(e&&e!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${e}`);if(0===this.size())return Ur([],[0].concat(this.elementShape));const t=[];for(let e=0;e<this.size();e++)t.push(e);const n=this.readMany(t);return FE(this.elementShape,n[0].shape,`TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${n[0].shape})`),Ni(n,0)}scatter(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);if(e.length!==t.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${e.length} vs. ${t.shape[0]}`);const n=Math.max(...e);if(!this.dynamicSize&&n>=this.maxSize)throw new Error(`Max index must be < array size (${n}  vs. ${this.maxSize})`);this.writeMany(e,Pc(t,0))}split(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);let n=0;const a=e.map((e=>(n+=e,n)));if(n!==t.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${n}, and tensor's shape is: ${t.shape}`);if(!this.dynamicSize&&e.length!==this.maxSize)throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${e.length}), and the TensorArray is not marked as dynamically resizeable`);const r=0===n?0:t.size/n,s=[];Wo((()=>{t=ki(t,[1,n,r]);for(let n=0;n<e.length;++n){const o=[0,0===n?0:a[n-1],0],i=[1,e[n],r];s[n]=ki(Ti(t,o,i),this.elementShape)}return s}));const o=[];for(let t=0;t<e.length;t++)o[t]=t;this.writeMany(o,s)}}class PE{constructor(e,t,n,a=-1){this.tensors=e,this.elementShape=t,this.elementDtype=n,null!=e&&e.forEach((e=>{if(n!==e.dtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${e.dtype}`);FE(t,e.shape,"TensorList shape mismatch: "),zo(e)})),this.idTensor=uc(0),this.maxNumElements=a,zo(this.idTensor)}get id(){return this.idTensor.id}copy(){return new PE([...this.tensors],this.elementShape,this.elementDtype)}clearAndClose(e){this.tensors.forEach((t=>{null!=e&&e.has(t.id)||t.dispose()})),this.tensors.length=0,this.idTensor.dispose()}size(){return this.tensors.length}stack(e,t,n=-1){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(-1!==n&&this.tensors.length!==n)throw new Error(`Operation expected a list with ${n} elements but got a list with ${this.tensors.length} elements.`);FE(e,this.elementShape,"TensorList shape mismatch: ");const a=DE(this.elementShape,this.tensors,e);return Wo((()=>{const e=this.tensors.map((e=>ki(e,a)));return Ec(e,0)}))}popBack(e,t){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(0===this.size())throw new Error("Trying to pop from an empty list.");const n=DE(this.elementShape,this.tensors,e),a=this.tensors.pop();return FE(a.shape,e,"TensorList shape mismatch: "),ki(a,n)}pushBack(e){if(e.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${this.elementDtype}`);if(FE(e.shape,this.elementShape,"TensorList shape mismatch: "),this.maxNumElements===this.size())throw new Error("Trying to push element into a full list.");zo(e),this.tensors.push(e)}resize(e){if(e<0)throw new Error(`TensorListResize expects size to be non-negative. Got: ${e}`);if(-1!==this.maxNumElements&&e>this.maxNumElements)throw new Error(`TensorListResize input size ${e} is greater maxNumElement ${this.maxNumElements}.`);this.tensors.length=e}getItem(e,t,n){if(n!==this.elementDtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${this.elementDtype}`);if(e<0||e>this.tensors.length)throw new Error(`Trying to access element ${e} in a list with ${this.tensors.length} elements.`);if(null==this.tensors[e])throw new Error(`element at index ${e} is null.`);FE(this.tensors[e].shape,t,"TensorList shape mismatch: ");const a=DE(this.elementShape,this.tensors,t);return ki(this.tensors[e],a)}setItem(e,t){if(t.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${this.elementDtype}`);if(e<0||-1!==this.maxNumElements&&e>=this.maxNumElements)throw new Error(`Trying to set element ${e} in a list with max ${this.maxNumElements} elements.`);FE(this.elementShape,t.shape,"TensorList shape mismatch: "),zo(t),this.tensors[e]=t}gather(e,t,n){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);FE(this.elementShape,n,"TensorList shape mismatch: "),e=e.slice(0,this.size());const a=DE(this.elementShape,this.tensors,n);return 0===e.length?Ur([],[0].concat(a)):Wo((()=>{const t=e.map((e=>ki(this.tensors[e],a)));return Ec(t,0)}))}concat(e,t){if(e&&e!==this.elementDtype)throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${e}`);FE(this.elementShape,t,"TensorList shape mismatch: ");const n=DE(this.elementShape,this.tensors,t);return 0===this.size()?Ur([],[0].concat(n)):Wo((()=>{const e=this.tensors.map((e=>ki(e,n)));return Ni(e,0)}))}}const BE=async(e,t,n)=>{switch(e.op){case"If":case"StatelessIf":{const a=HC("thenBranch",e,t,n),r=HC("elseBranch",e,t,n),s=HC("cond",e,t,n),o=HC("args",e,t,n);return(await s.data())[0]?n.functionMap[a].executeFunctionAsync(o,n.tensorArrayMap,n.tensorListMap):n.functionMap[r].executeFunctionAsync(o,n.tensorArrayMap,n.tensorListMap)}case"While":case"StatelessWhile":{const a=HC("body",e,t,n),r=HC("cond",e,t,n),s=HC("args",e,t,n),o=await n.functionMap[r].executeFunctionAsync(s,n.tensorArrayMap,n.tensorListMap),i=s.map((e=>e.id));let u=await o[0].data();o.forEach((e=>{e.kept||-1!==i.indexOf(e.id)||e.dispose()}));let l=s;for(;u[0];){const e=l;l=await n.functionMap[a].executeFunctionAsync(l,n.tensorArrayMap,n.tensorListMap);const t=l.map((e=>e.id));e.forEach((e=>{e.kept||-1!==i.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()}));const s=await n.functionMap[r].executeFunctionAsync(l,n.tensorArrayMap,n.tensorListMap);u=await s[0].data(),s.forEach((e=>{e.kept||-1!==i.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()}))}return l}case"LoopCond":return[QC(HC("pred",e,t,n))];case"Switch":{const a=HC("pred",e,t,n);let r=HC("data",e,t,n);return r.kept||(r=QC(r)),(await a.data())[0]?[void 0,r]:[r,void 0]}case"Merge":{const a=e.inputNames.find((e=>void 0!==jC(e,t,n)));if(a){return[QC(jC(a,t,n))]}return}case"Enter":{const a=HC("frameName",e,t,n),r=HC("tensor",e,t,n);return n.enterFrame(a),[QC(r)]}case"Exit":{const a=HC("tensor",e,t,n);return n.exitFrame(),[QC(a)]}case"NextIteration":{const a=HC("tensor",e,t,n);return n.nextIteration(),[QC(a)]}case"TensorArrayV3":{const a=HC("size",e,t,n),r=HC("dtype",e,t,n),s=HC("elementShape",e,t,n),o=HC("dynamicSize",e,t,n),i=HC("clearAfterRead",e,t,n),u=HC("identicalElementShapes",e,t,n),l=HC("name",e,t,n),c=new LE(l,r,a,s,u,o,i);return n.addTensorArray(c),[c.idTensor,uc(1)]}case"TensorArrayWriteV3":{const a=HC("tensorArrayId",e,t,n),r=HC("index",e,t,n),s=HC("tensor",e,t,n),o=n.getTensorArray(a.id);return o.write(r,s),[o.idTensor]}case"TensorArrayReadV3":{const a=HC("tensorArrayId",e,t,n),r=HC("index",e,t,n);return[n.getTensorArray(a.id).read(r)]}case"TensorArrayGatherV3":{const a=HC("tensorArrayId",e,t,n),r=HC("indices",e,t,n),s=HC("dtype",e,t,n);return[n.getTensorArray(a.id).gather(r,s)]}case"TensorArrayScatterV3":{const a=HC("tensorArrayId",e,t,n),r=HC("indices",e,t,n),s=HC("tensor",e,t,n),o=n.getTensorArray(a.id);return o.scatter(r,s),[o.idTensor]}case"TensorArrayConcatV3":{const a=HC("tensorArrayId",e,t,n),r=n.getTensorArray(a.id),s=HC("dtype",e,t,n);return[r.concat(s)]}case"TensorArraySplitV3":{const a=HC("tensorArrayId",e,t,n),r=HC("tensor",e,t,n),s=HC("lengths",e,t,n),o=n.getTensorArray(a.id);return o.split(s,r),[o.idTensor]}case"TensorArraySizeV3":{const a=HC("tensorArrayId",e,t,n);return[uc(n.getTensorArray(a.id).size(),"int32")]}case"TensorArrayCloseV3":{const a=HC("tensorArrayId",e,t,n),r=n.getTensorArray(a.id);return r.clearAndClose(),[r.idTensor]}case"TensorListSetItem":{const a=HC("tensorListId",e,t,n),r=HC("index",e,t,n),s=HC("tensor",e,t,n),o=n.getTensorList(a.id);return o.setItem(r,s),[o.idTensor]}case"TensorListGetItem":{const a=HC("tensorListId",e,t,n),r=HC("index",e,t,n),s=HC("elementShape",e,t,n),o=HC("elementDType",e,t,n);return[n.getTensorList(a.id).getItem(r,s,o)]}case"TensorListScatterV2":case"TensorListScatter":{const a=HC("indices",e,t,n),r=function(e,t,n,a){if(t.length!==e.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${e.shape[0]}`);const r=Math.max(...t);if(null!=a&&-1!==a&&r>=a)throw new Error(`Max index must be < array size (${r}  vs. ${a})`);const s=new PE([],n,e.dtype,a),o=Pc(e,0);return t.forEach(((e,t)=>{s.setItem(e,o[t])})),s}(HC("tensor",e,t,n),a,HC("elementShape",e,t,n),HC("numElements",e,t,n));return n.addTensorList(r),[r.idTensor]}case"TensorListReserve":case"EmptyTensorList":{const a=HC("elementShape",e,t,n),r=HC("elementDType",e,t,n);let s;s="TensorListReserve"===e.op?"numElements":"maxNumElements";const o=function(e,t,n){return new PE([],e,t,n)}(a,r,HC(s,e,t,n));return n.addTensorList(o),[o.idTensor]}case"TensorListGather":{const a=HC("tensorListId",e,t,n),r=HC("indices",e,t,n),s=HC("elementShape",e,t,n),o=HC("elementDType",e,t,n);return[n.getTensorList(a.id).gather(r,o,s)]}case"TensorListStack":{const a=HC("tensorListId",e,t,n),r=HC("elementShape",e,t,n),s=HC("elementDType",e,t,n),o=HC("numElements",e,t,n);return[n.getTensorList(a.id).stack(r,s,o)]}case"TensorListFromTensor":{const a=function(e,t,n){const a=e.dtype;if(e.shape.length<1)throw new Error(`Tensor must be at least a vector, but saw shape: ${e.shape}`);if(e.dtype!==n)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${n}`);FE(e.shape.slice(1),t,"TensorList shape mismatch: ");const r=Pc(e);return new PE(r,t,a)}(HC("tensor",e,t,n),HC("elementShape",e,t,n),HC("elementDType",e,t,n));return n.addTensorList(a),[a.idTensor]}case"TensorListConcat":{const a=HC("tensorListId",e,t,n),r=n.getTensorList(a.id),s=HC("dtype",e,t,n),o=HC("elementShape",e,t,n);return[r.concat(s,o)]}case"TensorListPushBack":{const a=HC("tensorListId",e,t,n),r=HC("tensor",e,t,n),s=n.getTensorList(a.id);return s.pushBack(r),[s.idTensor]}case"TensorListPopBack":{const a=HC("tensorListId",e,t,n),r=HC("elementShape",e,t,n),s=HC("elementDType",e,t,n);return[n.getTensorList(a.id).popBack(r,s)]}case"TensorListSplit":{const a=HC("tensor",e,t,n),r=HC("elementShape",e,t,n),s=function(e,t,n){let a=0;const r=t.map((e=>(a+=e,a)));if(a!==e.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${a}, and tensor's shape is: ${e.shape}`);const s=ME(e.shape.slice(1),n),o=0===a?0:e.size/a,i=Wo((()=>{const n=[];e=ki(e,[1,a,o]);for(let a=0;a<t.length;++a){const i=[0,0===a?0:r[a-1],0],u=[1,t[a],o];n[a]=ki(Ti(e,i,u),s)}return e.dispose(),n})),u=new PE([],n,e.dtype,t.length);for(let e=0;e<i.length;e++)u.setItem(e,i[e]);return u}(a,HC("lengths",e,t,n),r);return n.addTensorList(s),[s.idTensor]}default:throw TypeError(`Node type ${e.op} is not implemented`)}};function WE(e,t,n){const[a,r]=HC("fusedOps",e,t,n),s="biasadd"===a,o=!s,i="prelu"===r,u="fusedbatchnorm"===a,l=HC("numArgs",e,t,n);if(s){if(i&&2!==l)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&s&&1!==l)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.")}if(u)throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported");const c=HC("strides",e,t,n),d=YC(e,t,n),p=HC("dataFormat",e,t,n).toUpperCase(),h=HC("dilations",e,t,n);let[f,m]=HC("args",e,t,n);o&&(m=f,f=void 0);return{stride:c,pad:d,dataFormat:p,dilations:h,biasArg:f,preluArg:m,activationFunc:r,leakyreluAlpha:HC("leakyreluAlpha",e,t,n)}}function VE(e,t,n){return{boxes:HC("boxes",e,t,n),scores:HC("scores",e,t,n),maxOutputSize:HC("maxOutputSize",e,t,n),iouThreshold:HC("iouThreshold",e,t,n),scoreThreshold:HC("scoreThreshold",e,t,n),softNmsSigma:HC("softNmsSigma",e,t,n)}}class zE{constructor(e,t){this.keyDType=e,this.valueDType=t,this.handle=uc(0),this.tensorMap=new Map,zo(this.handle)}get id(){return this.handle.id}clearAndClose(){this.tensorMap.forEach((e=>e.dispose())),this.tensorMap.clear(),this.handle.dispose()}size(){return this.tensorMap.size}tensorSize(){return uc(this.size(),"int32")}async import(e,t){this.checkKeyAndValueTensor(e,t);const n=await e.data();return this.tensorMap.forEach((e=>e.dispose())),this.tensorMap.clear(),Wo((()=>{const e=Pc(t),a=n.length,r=e.length;i(a===r,(()=>`The number of elements doesn't match, keys has ${a} elements, the values has ${r} elements.`));for(let t=0;t<a;t++){const a=n[t],r=e[t];zo(r),this.tensorMap.set(a,r)}return this.handle}))}async find(e,t){this.checkKeyAndValueTensor(e,t);const n=await e.data();return Wo((()=>{const e=[];for(let a=0;a<n.length;a++){const r=n[a],s=this.findWithDefault(r,t);e.push(s)}return Ec(e)}))}findWithDefault(e,t){const n=this.tensorMap.get(e);return null!=n?n:t}checkKeyAndValueTensor(e,t){if(e.dtype!==this.keyDType)throw new Error(`Expect key dtype ${this.keyDType}, but got ${e.dtype}`);if(t.dtype!==this.valueDType)throw new Error(`Expect value dtype ${this.valueDType}, but got ${t.dtype}`)}}function UE(e,t,n,a){const r=((e,t,n)=>{switch(e.category){case"arithmetic":return Wo((()=>((e,t,n)=>{switch(e.op){case"BiasAdd":case"AddV2":case"Add":return[Ho(HC("a",e,t,n),HC("b",e,t,n))];case"AddN":return[Zo(HC("tensors",e,t,n))];case"FloorMod":case"Mod":return[fl(HC("a",e,t,n),HC("b",e,t,n))];case"Mul":return[Ko(HC("a",e,t,n),HC("b",e,t,n))];case"RealDiv":case"Div":return[qo(HC("a",e,t,n),HC("b",e,t,n))];case"DivNoNan":return[lu(HC("a",e,t,n),HC("b",e,t,n))];case"FloorDiv":return[jo(HC("a",e,t,n),HC("b",e,t,n))];case"Sub":return[zu(HC("a",e,t,n),HC("b",e,t,n))];case"Minimum":return[pl(HC("a",e,t,n),HC("b",e,t,n))];case"Maximum":return[il(HC("a",e,t,n),HC("b",e,t,n))];case"Pow":return[Sl(HC("a",e,t,n),HC("b",e,t,n))];case"SquaredDifference":return[Tc(HC("a",e,t,n),HC("b",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"basic_math":return Wo((()=>((e,t,n)=>{switch(e.op){case"Abs":case"ComplexAbs":return[Xo(HC("x",e,t,n))];case"Acos":return[Yo(HC("x",e,t,n))];case"Acosh":return[Qo(HC("x",e,t,n))];case"Asin":return[ai(HC("x",e,t,n))];case"Asinh":return[ri(HC("x",e,t,n))];case"Atan":return[si(HC("x",e,t,n))];case"Atan2":return[oi(HC("x",e,t,n),HC("y",e,t,n))];case"Atanh":return[ii(HC("x",e,t,n))];case"Ceil":return[Mi(HC("x",e,t,n))];case"Complex":return[Vr(HC("real",e,t,n),HC("imag",e,t,n))];case"Cos":return[Xi(HC("x",e,t,n))];case"Cosh":return[Yi(HC("x",e,t,n))];case"Elu":return[pu(HC("x",e,t,n))];case"Erf":return[hu(HC("x",e,t,n))];case"Exp":return[fu(HC("x",e,t,n))];case"Expm1":return[gu(HC("x",e,t,n))];case"Floor":return[vu(HC("x",e,t,n))];case"Log":return[Fu(HC("x",e,t,n))];case"Log1p":return[Ou(HC("x",e,t,n))];case"Imag":return[Nu(HC("x",e,t,n))];case"Neg":return[Pu(HC("x",e,t,n))];case"Reciprocal":return[Zl(HC("x",e,t,n))];case"Real":return[Ql(HC("x",e,t,n))];case"Relu":return[Jl(HC("x",e,t,n))];case"Round":return[oc(HC("x",e,t,n))];case"Selu":return[lc(HC("x",e,t,n))];case"Sigmoid":return[$i(HC("x",e,t,n))];case"Sin":return[hc(HC("x",e,t,n))];case"Sign":return[pc(HC("x",e,t,n))];case"Sinh":return[fc(HC("x",e,t,n))];case"Softplus":return[Bu(HC("x",e,t,n))];case"Sqrt":return[$c(HC("x",e,t,n))];case"Square":return[ml(HC("x",e,t,n))];case"Tanh":return[Ci(HC("x",e,t,n))];case"Tan":return[Ac(HC("x",e,t,n))];case"ClipByValue":return[Li(HC("x",e,t,n),HC("clipValueMin",e,t,n),HC("clipValueMax",e,t,n))];case"Relu6":return[ec(HC("x",e,t,n))];case"Rsqrt":return[ic(jC(e.inputNames[0],t,n))];case"Prod":return[Al(HC("x",e,t,n),HC("axes",e,t,n))];case"LeakyRelu":return[Eu(HC("x",e,t,n),HC("alpha",e,t,n))];case"Prelu":return[Rl(HC("x",e,t,n),HC("alpha",e,t,n))];case"IsNan":return[Cu(jC(e.inputNames[0],t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"control":return BE(e,t,n);case"convolution":return Wo((()=>((e,t,n)=>{switch(e.op){case"Conv1D":{const a=HC("stride",e,t,n),r=HC("pad",e,t,n),s=HC("dataFormat",e,t,n).toUpperCase(),o=HC("dilation",e,t,n);return[Ui(HC("x",e,t,n),HC("filter",e,t,n),a,r,s,o)]}case"Conv2D":{const a=HC("strides",e,t,n),r=YC(e,t,n),s=HC("dataFormat",e,t,n).toUpperCase(),o=HC("dilations",e,t,n);return[zi(HC("x",e,t,n),HC("filter",e,t,n),[a[1],a[2]],r,s,[o[1],o[2]])]}case"_FusedConv2D":{const{stride:a,pad:r,dataFormat:s,dilations:o,biasArg:i,preluArg:u,activationFunc:l,leakyreluAlpha:c}=WE(e,t,n);return[ad({x:HC("x",e,t,n),filter:HC("filter",e,t,n),strides:[a[1],a[2]],pad:r,dataFormat:s,dilations:[o[1],o[2]],bias:i,activation:l,preluActivationWeights:u,leakyreluAlpha:c})]}case"FusedDepthwiseConv2dNative":{const{stride:a,pad:r,dataFormat:s,dilations:o,biasArg:i,preluArg:u,activationFunc:l,leakyreluAlpha:c}=WE(e,t,n);return[od({x:HC("x",e,t,n),filter:HC("filter",e,t,n),strides:[a[1],a[2]],pad:r,dataFormat:s,dilations:[o[1],o[2]],bias:i,activation:l,preluActivationWeights:u,leakyreluAlpha:c})]}case"Conv2DBackpropInput":case"Conv2dTranspose":{const a=HC("outputShape",e,t,n),r=HC("strides",e,t,n),s=YC(e,t,n);return[Hi(HC("x",e,t,n),HC("filter",e,t,n),a,[r[1],r[2]],s)]}case"DepthwiseConv2dNative":case"DepthwiseConv2d":{const a=HC("strides",e,t,n),r=YC(e,t,n),s=HC("dilations",e,t,n),o=HC("dataFormat",e,t,n).toUpperCase();return[eu(HC("input",e,t,n),HC("filter",e,t,n),[a[1],a[2]],r,o,[s[1],s[2]])]}case"Conv3D":{const a=HC("strides",e,t,n),r=HC("pad",e,t,n),s=HC("dataFormat",e,t,n).toUpperCase(),o=HC("dilations",e,t,n);return[ji(HC("x",e,t,n),HC("filter",e,t,n),[a[1],a[2],a[3]],r,s,[o[1],o[2],o[3]])]}case"AvgPool":{const a=HC("strides",e,t,n),r=HC("pad",e,t,n),s=HC("kernelSize",e,t,n);return[wi(HC("x",e,t,n),[s[1],s[2]],[a[1],a[2]],r)]}case"MaxPool":{const a=HC("strides",e,t,n),r=HC("pad",e,t,n),s=HC("kernelSize",e,t,n);return[rl(HC("x",e,t,n),[s[1],s[2]],[a[1],a[2]],r)]}case"MaxPoolWithArgmax":{const a=HC("strides",e,t,n),r=HC("pad",e,t,n),s=HC("kernelSize",e,t,n),o=HC("includeBatchInIndex",e,t,n),{result:i,indexes:u}=ol(HC("x",e,t,n),[s[1],s[2]],[a[1],a[2]],r,o);return[i,u]}case"AvgPool3D":{const a=HC("strides",e,t,n),r=HC("pad",e,t,n),s=HC("kernelSize",e,t,n);return[Ii(HC("x",e,t,n),[s[1],s[2],s[3]],[a[1],a[2],a[3]],r)]}case"MaxPool3D":{const a=HC("strides",e,t,n),r=HC("pad",e,t,n),s=HC("kernelSize",e,t,n);return[sl(HC("x",e,t,n),[s[1],s[2],s[3]],[a[1],a[2],a[3]],r)]}case"Dilation2D":{const a=HC("strides",e,t,n),r=HC("pad",e,t,n),s=HC("dilations",e,t,n),o=a[1],i=a[2],u=s[1],l=s[2];return[nu(HC("x",e,t,n),HC("filter",e,t,n),[o,i],r,[u,l],"NHWC")]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"creation":return Wo((()=>((e,t,n)=>{switch(e.op){case"Fill":{const a=HC("shape",e,t,n),r=HC("dtype",e,t,n);return[xu(a,HC("value",e,t,n),r)]}case"LinSpace":return[Au(HC("start",e,t,n),HC("stop",e,t,n),HC("num",e,t,n))];case"Multinomial":{const a=HC("logits",e,t,n),r=HC("numSamples",e,t,n),s=HC("seed",e,t,n);return[bl(a,r,s)]}case"OneHot":{const a=HC("indices",e,t,n),r=HC("depth",e,t,n),s=HC("onValue",e,t,n),o=HC("offValue",e,t,n);return[Xs(a,r,s,o)]}case"Ones":return[cl(HC("shape",e,t,n),HC("dtype",e,t,n))];case"OnesLike":return[vl(HC("x",e,t,n))];case"RandomUniform":return[Xl(HC("shape",e,t,n),HC("minval",e,t,n),HC("maxval",e,t,n),HC("dtype",e,t,n))];case"Range":return[Yl(HC("start",e,t,n),HC("stop",e,t,n),HC("step",e,t,n),HC("dtype",e,t,n))];case"TruncatedNormal":{const a=HC("shape",e,t,n),r=HC("mean",e,t,n),s=HC("stdDev",e,t,n),o=HC("seed",e,t,n);return[Dc(a,r,s,HC("dtype",e,t,n),o)]}case"Zeros":return[ll(HC("shape",e,t,n),HC("dtype",e,t,n))];case"ZerosLike":return[uu(HC("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"dynamic":return(async(e,t,n)=>{switch(e.op){case"NonMaxSuppressionV5":{const{boxes:a,scores:r,maxOutputSize:s,iouThreshold:o,scoreThreshold:i,softNmsSigma:u}=VE(e,t,n),l=await sp.nonMaxSuppressionWithScoreAsync(a,r,s,o,i,u);return[l.selectedIndices,l.selectedScores]}case"NonMaxSuppressionV4":{const{boxes:a,scores:r,maxOutputSize:s,iouThreshold:o,scoreThreshold:i}=VE(e,t,n),u=HC("padToMaxOutputSize",e,t,n),l=await sp.nonMaxSuppressionPaddedAsync(a,r,s,o,i,u);return[l.selectedIndices,l.validOutputs]}case"NonMaxSuppressionV3":case"NonMaxSuppressionV2":{const{boxes:a,scores:r,maxOutputSize:s,iouThreshold:o,scoreThreshold:i}=VE(e,t,n);return[await sp.nonMaxSuppressionAsync(a,r,s,o,i)]}case"Where":{const a=As(HC("condition",e,t,n),"bool"),r=[await Wc(a)];return a.dispose(),r}case"ListDiff":return dc(HC("x",e,t,n),HC("y",e,t,n));default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n);case"evaluation":return Wo((()=>((e,t,n)=>{switch(e.op){case"TopKV2":{const a=HC("x",e,t,n),r=HC("k",e,t,n),s=HC("sorted",e,t,n),o=Oc(a,r,s);return[o.values,o.indices]}case"Unique":{const a=HC("x",e,t,n),r=Mc(a);return[r.values,r.indices]}case"UniqueV2":{const a=HC("x",e,t,n),r=HC("axis",e,t,n),s=Mc(a,r);return[s.values,s.indices]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"image":return Wo((()=>((e,t,n)=>{switch(e.op){case"ResizeBilinear":{const a=HC("images",e,t,n),r=HC("size",e,t,n),s=HC("alignCorners",e,t,n),o=HC("halfPixelCenters",e,t,n);return[sp.resizeBilinear(a,[r[0],r[1]],s,o)]}case"ResizeNearestNeighbor":{const a=HC("images",e,t,n),r=HC("size",e,t,n),s=HC("alignCorners",e,t,n),o=HC("halfPixelCenters",e,t,n);return[sp.resizeNearestNeighbor(a,[r[0],r[1]],s,o)]}case"CropAndResize":{const a=HC("image",e,t,n),r=HC("boxes",e,t,n),s=HC("boxInd",e,t,n),o=HC("cropSize",e,t,n),i=HC("method",e,t,n),u=HC("extrapolationValue",e,t,n);return[sp.cropAndResize(a,r,s,o,i,u)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"graph":return Wo((()=>((e,t,n)=>{switch(e.op){case"Const":return t[e.name];case"PlaceholderWithDefault":const a=HC("default",e,t,n);return[jC(e.name,t,n)||a];case"Placeholder":return[jC(e.name,t,n)];case"Identity":case"StopGradient":case"FakeQuantWithMinMaxVars":return[QC(HC("x",e,t,n))];case"IdentityN":return HC("x",e,t,n).map((e=>QC(e)));case"Snapshot":return[QC(HC("x",e,t,n))];case"Shape":return[_c(HC("x",e,t,n).shape,"int32")];case"ShapeN":return HC("x",e,t,n).map((e=>_c(e.shape)));case"Size":return[uc(HC("x",e,t,n).size,"int32")];case"Rank":return[uc(HC("x",e,t,n).rank,"int32")];case"NoOp":return[uc(1)];case"Print":const r=HC("x",e,t,n),s=HC("data",e,t,n),o=HC("message",e,t,n),i=HC("summarize",e,t,n);console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."),console.log(o);for(let e=0;e<s.length;e++)console.log(Array.prototype.slice.call(s[e].dataSync()).slice(0,i));return[r];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"logical":return Wo((()=>((e,t,n)=>{switch(e.op){case"Equal":return[ou(HC("a",e,t,n),HC("b",e,t,n))];case"NotEqual":return[xl(HC("a",e,t,n),HC("b",e,t,n))];case"Greater":return[wu(HC("a",e,t,n),HC("b",e,t,n))];case"GreaterEqual":return[Iu(HC("a",e,t,n),HC("b",e,t,n))];case"Less":return[Su(HC("a",e,t,n),HC("b",e,t,n))];case"LessEqual":return[Ru(HC("a",e,t,n),HC("b",e,t,n))];case"LogicalAnd":return[el(HC("a",e,t,n),HC("b",e,t,n))];case"LogicalNot":return[tl(HC("a",e,t,n))];case"LogicalOr":return[nl(HC("a",e,t,n),HC("b",e,t,n))];case"Select":case"SelectV2":return[iu(HC("condition",e,t,n),HC("a",e,t,n),HC("b",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"matrices":return Wo((()=>((e,t,n)=>{switch(e.op){case"BatchMatMul":case"BatchMatMulV2":case"MatMul":return[Ks(HC("a",e,t,n),HC("b",e,t,n),HC("transposeA",e,t,n),HC("transposeB",e,t,n))];case"Einsum":return[du(HC("equation",e,t,n),...HC("tensors",e,t,n))];case"Transpose":return[Ys(HC("x",e,t,n),HC("perm",e,t,n))];case"_FusedMatMul":const[a,r]=HC("fusedOps",e,t,n),s="biasadd"===a,o="prelu"===r,i=HC("numArgs",e,t,n),u=HC("leakyreluAlpha",e,t,n);if(s){if(o&&2!==i)throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!o&&1!==i)throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.")}const[l,c]=HC("args",e,t,n);return[id({a:HC("a",e,t,n),b:HC("b",e,t,n),transposeA:HC("transposeA",e,t,n),transposeB:HC("transposeB",e,t,n),bias:l,activation:r,preluActivationWeights:c,leakyreluAlpha:u})];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"normalization":return Wo((()=>((e,t,n)=>{switch(e.op){case"FusedBatchNorm":case"FusedBatchNormV2":case"FusedBatchNormV3":return[Ri(HC("x",e,t,n),HC("mean",e,t,n),HC("variance",e,t,n),HC("offset",e,t,n),HC("scale",e,t,n),HC("epsilon",e,t,n))];case"LRN":return[_u(HC("x",e,t,n),HC("radius",e,t,n),HC("bias",e,t,n),HC("alpha",e,t,n),HC("beta",e,t,n))];case"Softmax":return[xc(HC("x",e,t,n))];case"LogSoftmax":return[Gu(HC("x",e,t,n))];case"SparseToDense":return[jc(HC("sparseIndices",e,t,n),HC("outputShape",e,t,n),HC("sparseValues",e,t,n),HC("defaultValue",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"reduction":return Wo((()=>((e,t,n)=>{switch(e.op){case"Max":{const a=HC("axis",e,t,n),r=HC("keepDims",e,t,n);return[Vu(HC("x",e,t,n),a,r)]}case"Mean":{const a=HC("axis",e,t,n),r=HC("keepDims",e,t,n);return[ul(HC("x",e,t,n),a,r)]}case"Min":{const a=HC("axis",e,t,n),r=HC("keepDims",e,t,n);return[dl(HC("x",e,t,n),a,r)]}case"Sum":{const a=HC("axis",e,t,n),r=HC("keepDims",e,t,n);return[Uu(HC("x",e,t,n),a,r)]}case"All":{const a=HC("axis",e,t,n),r=HC("keepDims",e,t,n);return[Jo(HC("x",e,t,n),a,r)]}case"Any":{const a=HC("axis",e,t,n),r=HC("keepDims",e,t,n);return[ei(HC("x",e,t,n),a,r)]}case"ArgMax":{const a=HC("axis",e,t,n);return[ti(HC("x",e,t,n),a)]}case"ArgMin":{const a=HC("axis",e,t,n);return[ni(HC("x",e,t,n),a)]}case"Prod":{const a=HC("axis",e,t,n),r=HC("keepDims",e,t,n);return[Al(HC("x",e,t,n),a,r)]}case"Cumsum":{const a=HC("axis",e,t,n),r=HC("exclusive",e,t,n),s=HC("reverse",e,t,n);return[Qi(HC("x",e,t,n),a,r,s)]}case"Bincount":const a=HC("x",e,t,n),r=HC("weights",e,t,n),s=HC("size",e,t,n);return[Oi(a,r,s)];case"DenseBincount":{const a=HC("x",e,t,n),r=HC("weights",e,t,n),s=HC("size",e,t,n),o=HC("binaryOutput",e,t,n);return[Zi(a,r,s,o)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"slice_join":return Wo((()=>((e,t,n)=>{switch(e.op){case"ConcatV2":case"Concat":{const a=HC("n",e,t,n),r=HC("axis",e,t,n);let s=HC("tensors",e,t,n);return s=s.slice(0,a),[Ni(s,r)]}case"Gather":{const a=HC("x",e,t,n),r=HC("indices",e,t,n);return[ku(a,As(r,"int32"),0)]}case"GatherV2":{const a=HC("axis",e,t,n),r=HC("batchDims",e,t,n),s=HC("x",e,t,n),o=HC("indices",e,t,n);return[ku(s,As(o,"int32"),a,r)]}case"Reverse":{const a=HC("dims",e,t,n),r=[];for(let e=0;e<a.length;e++)a[e]&&r.push(e);const s=HC("x",e,t,n);return[tc(s,r)]}case"ReverseV2":{const a=HC("axis",e,t,n),r=HC("x",e,t,n);return[tc(r,a)]}case"Slice":{const a=HC("begin",e,t,n),r=HC("size",e,t,n);return[Ti(HC("x",e,t,n),a,r)]}case"StridedSlice":{const a=HC("begin",e,t,n),r=HC("end",e,t,n),s=HC("strides",e,t,n),o=HC("beginMask",e,t,n),i=HC("endMask",e,t,n),u=HC("ellipsisMask",e,t,n),l=HC("newAxisMask",e,t,n),c=HC("shrinkAxisMask",e,t,n),d=HC("x",e,t,n);return[Rc(d,a,r,s,o,i,u,l,c)]}case"Pack":return Wo((()=>{const a=HC("axis",e,t,n),r=HC("tensors",e,t,n),s=r[0].shape,o=Cc(r[0]).shape,i=r.map((e=>{const t=p(e.shape,s);if(!t&&!p(Cc(e).shape,o))throw new Error("the input tensors shape does not match");return t?e:ki(e,s)}));return[Ec(i,a)]}));case"Unpack":{const a=HC("axis",e,t,n),r=HC("tensor",e,t,n);return Pc(r,a)}case"Tile":{const a=HC("reps",e,t,n);return[yu(HC("x",e,t,n),a)]}case"Split":case"SplitV":{const a=HC("axis",e,t,n),r=HC("numOrSizeSplits",e,t,n),s=HC("x",e,t,n);return Ic(s,r,a)}case"ScatterNd":{const a=HC("indices",e,t,n),r=HC("values",e,t,n),s=HC("shape",e,t,n);return[Hc(a,r,s)]}case"GatherNd":{const a=HC("x",e,t,n),r=HC("indices",e,t,n);return[qc(a,r)]}case"SparseToDense":{const a=HC("sparseIndices",e,t,n),r=HC("outputShape",e,t,n),s=HC("sparseValues",e,t,n),o=HC("defaultValue",e,t,n);return[jc(a,s,r,s.dtype===o.dtype?o:As(o,s.dtype))]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"sparse":return Wo((()=>((e,t,n)=>{switch(e.op){case"SparseFillEmptyRows":{const{outputIndices:a,outputValues:r,emptyRowIndicator:s,reverseIndexMap:o}=up.sparseFillEmptyRows(HC("indices",e,t,n),HC("values",e,t,n),HC("denseShape",e,t,n),HC("defaultValue",e,t,n));return[a,r,s,o]}case"SparseReshape":{const{outputIndices:a,outputShape:r}=up.sparseReshape(HC("inputIndices",e,t,n),HC("inputShape",e,t,n),HC("newShape",e,t,n));return[a,r]}case"SparseSegmentMean":return[up.sparseSegmentMean(HC("data",e,t,n),HC("indices",e,t,n),HC("segmentIds",e,t,n))];case"SparseSegmentSum":return[up.sparseSegmentSum(HC("data",e,t,n),HC("indices",e,t,n),HC("segmentIds",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"spectral":return Wo((()=>((e,t,n)=>{switch(e.op){case"FFT":return[vc(HC("x",e,t,n))];case"IFFT":return[kc(HC("x",e,t,n))];case"RFFT":return[Nc(HC("x",e,t,n))];case"IRFFT":return[wc(HC("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"string":return Wo((()=>((e,t,n)=>{switch(e.op){case"StringNGrams":{const{nGrams:a,nGramsSplits:r}=lp.stringNGrams(HC("data",e,t,n),HC("dataSplits",e,t,n),HC("separator",e,t,n),HC("nGramWidths",e,t,n),HC("leftPad",e,t,n),HC("rightPad",e,t,n),HC("padWidth",e,t,n),HC("preserveShortSequences",e,t,n));return[a,r]}case"StringSplit":{const{indices:a,values:r,shape:s}=lp.stringSplit(HC("input",e,t,n),HC("delimiter",e,t,n),HC("skipEmpty",e,t,n));return[a,r,s]}case"StringToHashBucketFast":return[lp.stringToHashBucketFast(HC("input",e,t,n),HC("numBuckets",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"transformation":return Wo((()=>((e,t,n)=>{switch(e.op){case"Cast":return[As(HC("x",e,t,n),HC("dtype",e,t,n))];case"ExpandDims":{const a=HC("axis",e,t,n);return[mu(HC("x",e,t,n),a)]}case"Squeeze":{const a=HC("axis",e,t,n);return[Cc(HC("x",e,t,n),a)]}case"Reshape":return[ki(HC("x",e,t,n),HC("shape",e,t,n))];case"MirrorPad":return[hl(HC("x",e,t,n),HC("padding",e,t,n),HC("mode",e,t,n))];case"PadV2":case"Pad":return[wl(HC("x",e,t,n),HC("padding",e,t,n),HC("constantValue",e,t,n))];case"SpaceToBatchND":{const a=HC("blockShape",e,t,n),r=HC("paddings",e,t,n);return[Cl(HC("x",e,t,n),a,r)]}case"BatchToSpaceND":{const a=HC("blockShape",e,t,n),r=HC("crops",e,t,n);return[Si(HC("x",e,t,n),a,r)]}case"DepthToSpace":{const a=HC("blockSize",e,t,n),r=HC("dataFormat",e,t,n).toUpperCase();return[Ji(HC("x",e,t,n),a,r)]}case"BroadcastTo":return[Di(HC("x",e,t,n),HC("shape",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"hash_table":return(async(e,t,n,a)=>{switch(e.op){case"HashTable":case"HashTableV2":{const r=HC("keyDType",e,t,n),s=HC("valueDType",e,t,n),o=new zE(r,s);return a.addHashTable(e.name,o),[o.handle]}case"LookupTableImport":case"LookupTableImportV2":{const r=HC("tableHandle",e,t,n,a),s=HC("keys",e,t,n),o=HC("values",e,t,n),i=a.getHashTableById(r.id);return[await i.import(s,o)]}case"LookupTableFind":case"LookupTableFindV2":{const r=HC("tableHandle",e,t,n,a),s=HC("keys",e,t,n),o=HC("defaultValue",e,t,n),i=a.getHashTableById(r.id);return[await i.find(s,o)]}case"LookupTableSize":case"LookupTableSizeV2":{const r=HC("tableHandle",e,t,n,a);return[a.getHashTableById(r.id).tensorSize()]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n,a);case"custom":const r=GC(e.op);if(r&&r.customExecutor)return r.customExecutor(new _E(e,t,n));throw TypeError(`Custom op ${e.op} is not registered.`);default:throw TypeError(`Unknown op '${e.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`)}})(e,t,n);return U(r)?r.then((e=>[].concat(e))):[].concat(r)}class GE{constructor(e={},t={},n={},a={}){this.weightMap=e,this.tensorArrayMap=t,this.tensorListMap=n,this.functionMap=a,this.rootContext={id:0,frameName:"",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}newFrame(e,t){return{id:e,frameName:t,iterationId:0}}set currentContext(e){this.contexts!==e&&(this.contexts=e,this.generateCurrentContextIds())}get currentContext(){return this.contexts}get currentContextId(){return this._currentContextIds[0]}get currentContextIds(){return this._currentContextIds}generateCurrentContextIds(){const e=[];for(let t=0;t<this.contexts.length-1;t++){const n=this.contexts.slice(0,this.contexts.length-t);e.push(this.contextIdforContexts(n))}e.push(""),this._currentContextIds=e}contextIdforContexts(e){return e?e.map((e=>0===e.id&&0===e.iterationId?"":`${e.frameName}-${e.iterationId}`)).join("/"):""}enterFrame(e){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,e)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))}exitFrame(){if(!(this.contexts&&this.contexts.length>1))throw new Error("Cannot exit frame, the context is empty");this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift()}nextIteration(){if(!(this.contexts&&this.contexts.length>0))throw new Error("Cannot increase frame iteration, the context is empty");{this.contexts=this.contexts.slice(),this.lastId++;const e=Object.assign({},this.contexts[this.contexts.length-1]);e.iterationId+=1,e.id=this.lastId,this.contexts.splice(-1,1,e),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))}}getWeight(e){return this.weightMap[e]}addTensorArray(e){this.tensorArrayMap[e.id]=e}getTensorArray(e){return this.tensorArrayMap[e]}addTensorList(e){this.tensorListMap[e.id]=e}getTensorList(e){return this.tensorListMap[e]}dispose(e){for(const t in this.tensorArrayMap)this.tensorArrayMap[t].clearAndClose(e);for(const t in this.tensorListMap)this.tensorListMap[t].clearAndClose(e)}}function HE(e,t,n,a){const r=new Set,s=[];let o=null,i=null;const u=new Set,l=Object.keys(e).map((e=>XC(e)[0]));let c=[];null!=a&&(c=a.map((e=>XC(e.name)[0])));const d=[...t];for(;d.length>0;){const e=d.pop();(XE(e)||YE(e)||QE(e))&&null==o&&(o=e,i=o.children.map((e=>e.name)).filter((e=>r.has(e)))),r.add(e.name),null==n[e.name]&&(-1===l.indexOf(e.name)&&-1===c.indexOf(e.name)&&(0!==e.inputs.length?e.inputs.forEach((e=>{u.has(e.name)||(u.add(e.name),d.push(e))})):s.push(e.name)))}return{inputs:e,outputs:t,usedNodes:r,missingInputs:s,dynamicNode:o,syncInputs:i}}const jE=["Switch","Merge","Enter","Exit","NextIteration","StatelessIf","StatelessWhile","if","While"],qE=["NonMaxSuppressionV2","NonMaxSuppressionV3","NonMaxSuppressionV5","Where"],KE=["HashTable","HashTableV2","LookupTableImport","LookupTableImportV2","LookupTableFind","LookupTableFindV2","LookupTableSize","LookupTableSizeV2"];function XE(e){return jE.indexOf(e.op)>=0}function YE(e){return qE.indexOf(e.op)>=0}function QE(e){return KE.indexOf(e.op)>=0}class ZE{constructor(e,t){this.graph=e,this.parent=t,this.compiledMap=new Map,this._weightMap={},this.SEPERATOR=",",this._functions={},this._functionExecutorMap={},this._outputs=e.outputs,this._inputs=e.inputs,this._initNodes=e.initNodes,this._signature=e.signature,this._functions=e.functions,null!=e.functions&&Object.keys(e.functions).forEach((t=>{this._functionExecutorMap[t]=new ZE(e.functions[t],this)}))}get weightIds(){return this.parent?this.parent.weightIds:this._weightIds}get functionExecutorMap(){return this.parent?this.parent.functionExecutorMap:this._functionExecutorMap}get weightMap(){return this.parent?this.parent.weightMap:this._weightMap}set weightMap(e){const t=Object.keys(e).map((t=>e[t].map((e=>e.id))));this._weightIds=[].concat(...t),this._weightMap=e}set resourceManager(e){this._resourceManager=e}get inputs(){return this._inputs.map((e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0})))}get outputs(){return this._outputs.map((e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0})))}get inputNodes(){return this._inputs.map((e=>e.signatureKey||e.name))}get outputNodes(){return this._outputs.map((e=>{const t=e.signatureKey||e.name;return e.defaultOutput?`${t}:${e.defaultOutput}`:t}))}get functions(){return Object.keys(this._functions).reduce(((e,t)=>(e[t]=this._functions[t].signature,e)),{})}getCompilationKey(e,t){const n=e.map((e=>e.name)).sort(),a=t.map((e=>e.name)).sort();return n.join(this.SEPERATOR)+"--"+a.join(this.SEPERATOR)}compile(e,t){const n=HE(e,t,this.weightMap,this._initNodes),{missingInputs:a,dynamicNode:r,syncInputs:s}=n;if(null!=r)throw new Error(`This execution contains the node '${r.name}', which has the dynamic op '${r.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${s}]`);if(a.length>0){const n=t.map((e=>e.name)),r=Object.keys(e);throw new Error(`Cannot compute the outputs [${n}] from the provided inputs [${r}]. Missing the following inputs: [${a}]`)}return function(e,t,n){const{usedNodes:a,inputs:r}=n,s=[],o=Object.keys(r).map((e=>XC(e)[0])).map((t=>e.nodes[t])),i=e.initNodes;o.forEach((e=>{a.has(e.name)&&s.push(e)})),e.weights.forEach((e=>{a.has(e.name)&&s.push(e)})),null!=i&&i.forEach((e=>{a.has(e.name)&&s.push(e)}));const u=new Set,l=[];for(;s.length>0;){const e=s.pop();u.add(e.name),t[e.name]||l.push(e),e.children.forEach((e=>{!u.has(e.name)&&a.has(e.name)&&e.inputs.every((e=>u.has(e.name)))&&s.push(e)}))}return l}(this.graph,this.weightMap,n)}execute(e,t){e=this.mapInputs(e);const n=Object.keys(e).sort();this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t);const a=n.map((e=>this.graph.nodes[XC(e)[0]])),r=t.map((e=>XC(e)[0]));let s=r.map((e=>this.graph.nodes[e]));0===s.length&&(s=this._outputs);const o=this.getCompilationKey(a,s);let i=this.compiledMap.get(o);null==i&&(i=this.compile(e,s),this.compiledMap.set(o,i));const u={},l={};return Wo((()=>{const n=new GE(this.weightMap,u,l,this.functionExecutorMap),a=Object.assign({},this.weightMap);Object.keys(e).forEach((t=>{const[n,r]=XC(t),s=[];s[r]=e[t],a[n]=s}));const s=this.getFrozenTensorIds(a),o={};for(let e=0;e<i.length;e++){const t=i[e];if(!a[t.name]){const e=UE(t,a,n,this._resourceManager);if(U(e))throw new Error(`The execution of the op '${t.op}' returned a promise. Please use model.executeAsync() instead.`);a[t.name]=e,this.checkTensorForDisposal(t.name,t,a,n,s,r,o)}}return null==this.parent&&n.dispose(s),t.map((e=>jC(e,a,n)))}))}getFrozenTensorIds(e){const t=[].concat.apply([],Object.keys(e).map((t=>e[t])).map((e=>e.map((e=>e.id)))));return new Set(t)}checkTensorForDisposal(e,t,n,a,r,s,o){"control"!==t.category&&-1===s.indexOf(e)&&(n[e].forEach((e=>{null!=e&&(o[e.id]=(o[e.id]||0)+t.children.length)})),t.inputs.forEach((e=>{if("control"!==e.category){const t=function(e,t,n){return t[KC(e,n.currentContextId)]}(e.name,n,a);null!=t&&t.forEach((e=>{if(e&&!e.kept&&!r.has(e.id)){const t=o[e.id];1===t?(e.dispose(),delete o[e.id]):null!=t&&o[e.id]--}}))}})))}async executeAsync(e,t){return this._executeAsync(e,t)}async _executeAsync(e,t,n=!1,a={},r={}){n||(e=this.mapInputs(e),this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t));const s=new GE(this.weightMap,a,r,this.functionExecutorMap),o=await this.executeWithControlFlow(e,s,t,n),i=t.map((e=>jC(e,o,s))),u=i.map((e=>e.id)),l=Object.keys(e).map((t=>e[t].id)),c=new Set([...u,...l,...this.weightIds]);return Object.keys(o).forEach((e=>{o[e].forEach((e=>{!e||e.kept||e.isDisposed||c.has(e.id)||e.dispose()}))})),null==this.parent&&s.dispose(c),i}async executeFunctionAsync(e,t,n){const a=e.reduce(((e,t,n)=>(e[this.inputs[n].name]=t,e)),{});return this._executeAsync(a,this.outputNodes,!0,t,n)}async executeWithControlFlow(e,t,n,a){const r=Object.keys(e),s=r.map((e=>this.graph.nodes[XC(e)[0]])),o=n.map((e=>XC(e)[0]));let i=o.map((e=>this.graph.nodes[e]));0===i.length&&(i=this._outputs);const{usedNodes:u,missingInputs:l,dynamicNode:c,syncInputs:d}=HE(e,i,this.weightMap,this._initNodes),p=[...s,...this.graph.weights,...this._initNodes||[]].map((e=>({node:e,contexts:t.currentContext}))),h=Object.assign({},this.weightMap);Object.keys(e).forEach((t=>{const[n,a]=XC(t),r=[];r[a]=e[t],h[n]=r}));const f={},m=this.getFrozenTensorIds(h),g={};for(;p.length>0;){const e=this.processStack(s,p,t,h,g,m,o,f,u);await Promise.all(e)}null!=c||a||console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.");const y=i.filter((e=>!XE(e)&&!jC(e.name,h,t))).map((e=>e.name));if(y.length>0){let e="";throw null!=c&&(e=`Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${d}]`),new Error(`Cannot compute the outputs [${y}] from the provided inputs [${r}]. Consider providing the following inputs: [${l}]. ${e}`)}return h}processStack(e,t,n,a,r,s,o,i,u){const l=[];for(;t.length>0;){const e=t.pop();n.currentContext=e.contexts;let c="";if("Enter"===e.node.op&&HC("isConstant",e.node,a,n)&&([c]=qC(e.node.name,n)),null==a[e.node.name]){const d=UE(e.node,a,n,this._resourceManager);c||([c]=qC(e.node.name,n));const p=n.currentContext;U(d)?l.push(d.then((l=>(a[c]=l,n.currentContext=p,this.checkTensorForDisposal(c,e.node,a,n,s,o,i),this.processChildNodes(e.node,t,n,a,r,u),l)))):(a[c]=d,this.checkTensorForDisposal(c,e.node,a,n,s,o,i),this.processChildNodes(e.node,t,n,a,r,u))}else this.processChildNodes(e.node,t,n,a,r,u)}return l}processChildNodes(e,t,n,a,r,s){e.children.forEach((e=>{const[o]=qC(e.name,n);!r[o]&&s.has(e.name)&&("Merge"===e.op?e.inputNames.some((e=>!!jC(e,a,n)))&&(r[o]=!0,t.push({contexts:n.currentContext,node:e})):e.inputNames.every((e=>!!jC(e,a,n)))&&(r[o]=!0,t.push({contexts:n.currentContext,node:e})))}))}dispose(){Object.keys(this.weightMap).forEach((e=>this.weightMap[e].forEach((e=>e.dispose()))))}checkInputShapeAndType(e){Object.keys(e).forEach((t=>{const n=e[t],[a]=XC(t),r=this.graph.nodes[a];if(r.attrParams.shape&&r.attrParams.shape.value){const e=r.attrParams.shape.value;i(e.length===n.shape.length&&n.shape.every(((t,n)=>-1===e[n]||e[n]===t)),(()=>`The shape of dict['${r.name}'] provided in model.execute(dict) must be [${e}], but was [${n.shape}]`))}r.attrParams.dtype&&r.attrParams.dtype.value&&i(n.dtype===r.attrParams.dtype.value,(()=>`The dtype of dict['${r.name}'] provided in model.execute(dict) must be ${r.attrParams.dtype.value}, but was ${n.dtype}`))}))}mapInputs(e){const t={};for(const n in e)if(null!=this._signature&&null!=this._signature.inputs&&null!=this._signature.inputs[n]){t[this._signature.inputs[n].name]=e[n]}else t[n]=e[n];return t}checkInputs(e){const t=Object.keys(e).filter((e=>{const[t]=XC(e);return null==this.graph.nodes[t]}));if(t.length>0)throw new Error(`The dict provided in model.execute(dict) has keys: [${t}] that are not part of graph`)}mapOutputs(e){return e.map((e=>{if(null!=this._signature&&null!=this._signature.outputs&&null!=this._signature.outputs[e]){return this._signature.outputs[e].name}return e}),{})}checkOutputs(e){e.forEach((e=>{const[t]=XC(e);if(!this.graph.nodes[t])throw new Error(`The output '${e}' is not found in the graph`)}))}}class JE{constructor(e={},t={}){this.hashTableNameToHandle=e,this.hashTableMap=t}addHashTable(e,t){this.hashTableNameToHandle[e]=t.handle,this.hashTableMap[t.id]=t}getHashTableHandleByName(e){return this.hashTableNameToHandle[e]}getHashTableById(e){return this.hashTableMap[e]}dispose(){for(const e in this.hashTableMap)this.hashTableMap[e].clearAndClose(),delete this.hashTableMap[e];for(const e in this.hashTableNameToHandle)this.hashTableNameToHandle[e].dispose(),delete this.hashTableNameToHandle[e]}}class eS{constructor(e,t={}){this.modelUrl=e,this.loadOptions=t,this.version="n/a",null==t&&(this.loadOptions={}),this.resourceManager=new JE}get modelVersion(){return this.version}get inputNodes(){return this.executor.inputNodes}get outputNodes(){return this.executor.outputNodes}get inputs(){return this.executor.inputs}get outputs(){return this.executor.outputs}get weights(){return this.executor.weightMap}get metadata(){return this.artifacts.userDefinedMetadata}get modelSignature(){return this.signature}findIOHandler(){const e=this.modelUrl;if(null!=e.load)this.handler=e;else if(null!=this.loadOptions.requestInit)this.handler=Gs(e,this.loadOptions);else{const t=ts(e,this.loadOptions);if(0===t.length)t.push(Gs(e,this.loadOptions));else if(t.length>1)throw new Error(`Found more than one (${t.length}) load handlers for URL '${[e]}'`);this.handler=t[0]}}async load(){if(this.findIOHandler(),null==this.handler.load)throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const e=await this.handler.load();return this.loadSync(e)}loadSync(e){this.artifacts=e;const t=this.artifacts.modelTopology;let n;n=null!=this.artifacts.userDefinedMetadata&&null!=this.artifacts.userDefinedMetadata.signature?this.artifacts.userDefinedMetadata.signature:this.artifacts.signature,this.signature=n,this.version=`${t.versions.producer}.${t.versions.minConsumer}`;const a=Hr(this.artifacts.weightData,this.artifacts.weightSpecs);if(this.executor=new ZE(yE.Instance.transformGraph(t,this.signature)),this.executor.weightMap=this.convertTensorMapToTensorsMap(a),this.executor.resourceManager=this.resourceManager,null!=e.modelInitializer&&null!=e.modelInitializer.node){const t=yE.Instance.transformGraph(e.modelInitializer);this.initializer=new ZE(t),this.initializer.weightMap=this.executor.weightMap,this.initializer.resourceManager=this.resourceManager,this.initializer.executeAsync({},[])}return!0}async save(e,t){if("string"==typeof e){const t=es(e);if(0===t.length)throw new Error(`Cannot find any save handlers for URL '${e}'`);if(t.length>1)throw new Error(`Found more than one (${t.length}) save handlers for URL '${e}'`);e=t[0]}if(null==e.save)throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");return e.save(this.artifacts)}predict(e,t){return this.execute(e,this.outputNodes)}normalizeInputs(e){if(!(e instanceof lr||Array.isArray(e)))return e;if((e=Array.isArray(e)?e:[e]).length!==this.inputNodes.length)throw new Error(`Input tensor count mismatch,the graph model has ${this.inputNodes.length} placeholders, while there are ${e.length} input tensors.`);return this.inputNodes.reduce(((t,n,a)=>(t[n]=e[a],t)),{})}normalizeOutputs(e){return e=e||this.outputNodes,Array.isArray(e)?e:[e]}execute(e,t){e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const n=this.executor.execute(e,t);return n.length>1?n:n[0]}async executeAsync(e,t){e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const n=await this.executor.executeAsync(e,t);return n.length>1?n:n[0]}convertTensorMapToTensorsMap(e){return Object.keys(e).reduce(((t,n)=>(t[n]=[e[n]],t)),{})}dispose(){this.executor.dispose(),this.initializer&&this.initializer.dispose(),this.resourceManager.dispose()}}async function tS(e,t={}){if(null==e)throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");null==t&&(t={}),t.fromTFHub&&null==e.load&&(e.endsWith("/")||(e+="/"),e=`${e}model.json?tfjs-format=file`);const n=new eS(e,t);return await n.load(),n}var nS=function(){return(nS=Object.assign||function(e){for(var t,n=1,a=arguments.length;n<a;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e}).apply(this,arguments)};function aS(e,t,n,a){return new(n||(n=Promise))((function(r,s){function o(e){try{u(a.next(e))}catch(e){s(e)}}function i(e){try{u(a.throw(e))}catch(e){s(e)}}function u(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,i)}u((a=a.apply(e,t||[])).next())}))}function rS(e,t){var n,a,r,s,o={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return s={next:i(0),throw:i(1),return:i(2)},"function"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function i(s){return function(i){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,a&&(r=2&s[0]?a.return:s[0]?a.throw||((r=a.return)&&r.call(a),0):a.next)&&!(r=r.call(a,s[1])).done)return r;switch(a=0,r&&(s=[2&s[0],r.value]),s[0]){case 0:case 1:r=s;break;case 4:return o.label++,{value:s[1],done:!1};case 5:o.label++,a=s[1],s=[0];continue;case 7:s=o.ops.pop(),o.trys.pop();continue;default:if(!((r=(r=o.trys).length>0&&r[r.length-1])||6!==s[0]&&2!==s[0])){o=0;continue}if(3===s[0]&&(!r||s[1]>r[0]&&s[1]<r[3])){o.label=s[1];break}if(6===s[0]&&o.label<r[1]){o.label=r[1],r=s;break}if(r&&o.label<r[2]){o.label=r[2],o.ops.push(s);break}r[2]&&o.ops.pop(),o.trys.pop();continue}s=t.call(e,o)}catch(e){s=[6,e],a=0}finally{n=r=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,i])}}}function sS(e,t,n,a){return new(n||(n=Promise))((function(r,s){function o(e){try{u(a.next(e))}catch(e){s(e)}}function i(e){try{u(a.throw(e))}catch(e){s(e)}}function u(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,i)}u((a=a.apply(e,t||[])).next())}))}function oS(e,t){var n,a,r,s,o={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return s={next:i(0),throw:i(1),return:i(2)},"function"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function i(s){return function(i){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,a&&(r=2&s[0]?a.return:s[0]?a.throw||((r=a.return)&&r.call(a),0):a.next)&&!(r=r.call(a,s[1])).done)return r;switch(a=0,r&&(s=[2&s[0],r.value]),s[0]){case 0:case 1:r=s;break;case 4:return o.label++,{value:s[1],done:!1};case 5:o.label++,a=s[1],s=[0];continue;case 7:s=o.ops.pop(),o.trys.pop();continue;default:if(!(r=(r=o.trys).length>0&&r[r.length-1])&&(6===s[0]||2===s[0])){o=0;continue}if(3===s[0]&&(!r||s[1]>r[0]&&s[1]<r[3])){o.label=s[1];break}if(6===s[0]&&o.label<r[1]){o.label=r[1],r=s;break}if(r&&o.label<r[2]){o.label=r[2],o.ops.push(s);break}r[2]&&o.ops.pop(),o.trys.pop();continue}s=t.call(e,o)}catch(e){s=[6,e],a=0}finally{n=r=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,i])}}}var iS=function(e){return{startEndTensor:e,startPoint:Ti(e,[0,0],[-1,2]),endPoint:Ti(e,[0,2],[-1,2])}},uS={strides:[8,16],anchors:[2,6]};function lS(e,t){var n,a,r;if(e.topLeft instanceof lr&&e.bottomRight instanceof lr){var s=Wo((function(){return[Ni([Ti(zu(t-1,e.topLeft),0,1),Ti(e.topLeft,1,1)]),Ni([zu(t-1,Ti(e.bottomRight,0,1)),Ti(e.bottomRight,1,1)])]}));n=s[0],a=s[1],null!=e.landmarks&&(r=Wo((function(){var n=zu(_c([t-1,0]),e.landmarks),a=_c([1,-1]);return Ko(n,a)})))}else{var o=e.topLeft,i=o[0],u=o[1],l=e.bottomRight,c=l[0],d=l[1];n=[t-1-i,u],a=[t-1-c,d],null!=e.landmarks&&(r=e.landmarks.map((function(e){return[t-1-e[0],e[1]]})))}var p={topLeft:n,bottomRight:a};return null!=r&&(p.landmarks=r),null!=e.probability&&(p.probability=e.probability instanceof lr?e.probability.clone():e.probability),p}function cS(e,t){return Wo((function(){var n;return n=e.hasOwnProperty("box")?e.box:e,Cc(function(e,t){var n=Ko(e.startPoint,t),a=Ko(e.endPoint,t),r=Bi([n,a],1);return iS(r)}(n,t).startEndTensor)}))}var dS=function(){function e(e,t,n,a,r,s){this.blazeFaceModel=e,this.width=t,this.height=n,this.maxFaces=a,this.anchorsData=function(e,t,n){for(var a=[],r=0;r<n.strides.length;r++)for(var s=n.strides[r],o=Math.floor((t+s-1)/s),i=Math.floor((e+s-1)/s),u=n.anchors[r],l=0;l<o;l++)for(var c=s*(l+.5),d=0;d<i;d++)for(var p=s*(d+.5),h=0;h<u;h++)a.push([p,c]);return a}(t,n,uS),this.anchors=Fc(this.anchorsData),this.inputSizeData=[t,n],this.inputSize=_c([t,n]),this.iouThreshold=r,this.scoreThreshold=s}return e.prototype.getBoundingBoxes=function(e,t,n){return void 0===n&&(n=!0),sS(this,void 0,void 0,(function(){var a,r,s,o,i,u,l,c,d,p,h,f,m,g,y=this;return oS(this,(function(b){switch(b.label){case 0:return a=Wo((function(){var t=sp.resizeBilinear(e,[y.width,y.height]),n=Ko(zu(qo(t,255),.5),2),a=y.blazeFaceModel.predict(n),r=Cc(a),s=function(e,t,n){var a=Ti(e,[0,1],[-1,2]),r=Ho(a,t),s=Ti(e,[0,3],[-1,2]),o=qo(s,n),i=qo(r,n),u=qo(o,2),l=zu(i,u),c=Ho(i,u),d=Ko(l,n),p=Ko(c,n);return Bi([d,p],1)}(r,y.anchors,y.inputSize),o=Ti(r,[0,0],[-1,1]);return[r,s,Cc($i(o))]})),r=a[0],s=a[1],o=a[2],i=console.warn,console.warn=function(){},u=sp.nonMaxSuppression(s,o,this.maxFaces,this.iouThreshold,this.scoreThreshold),console.warn=i,[4,u.array()];case 1:return l=b.sent(),u.dispose(),c=l.map((function(e){return Ti(s,[e,0],[1,-1])})),t?[3,3]:[4,Promise.all(c.map((function(e){return sS(y,void 0,void 0,(function(){var t;return oS(this,(function(n){switch(n.label){case 0:return[4,e.array()];case 1:return t=n.sent(),e.dispose(),[2,t]}}))}))})))];case 2:c=b.sent(),b.label=3;case 3:for(d=e.shape[1],p=e.shape[2],h=t?qo([p,d],this.inputSize):[p/this.inputSizeData[0],d/this.inputSizeData[1]],f=[],m=function(e){var a=c[e],s=Wo((function(){var s=iS(a instanceof lr?a:Fc(a));if(!n)return s;var i,u=l[e];return i=t?Ti(y.anchors,[u,0],[1,2]):y.anchorsData[u],{box:s,landmarks:ki(Cc(Ti(r,[u,5],[1,-1])),[6,-1]),probability:Ti(o,[u],[1]),anchor:i}}));f.push(s)},g=0;g<c.length;g++)m(g);return s.dispose(),o.dispose(),r.dispose(),[2,{boxes:f,scaleFactor:h}]}}))}))},e.prototype.estimateFaces=function(e,t,n,a){return void 0===t&&(t=!1),void 0===n&&(n=!1),void 0===a&&(a=!0),sS(this,void 0,void 0,(function(){var r,s,o,i,u,l,c=this;return oS(this,(function(d){switch(d.label){case 0:return r=function(e){return e instanceof lr?[e.shape[0],e.shape[1]]:[e.height,e.width]}(e),s=r[1],o=Wo((function(){return e instanceof lr||(e=ao(e)),mu(As(e,"float32"),0)})),[4,this.getBoundingBoxes(o,t,a)];case 1:return i=d.sent(),u=i.boxes,l=i.scaleFactor,o.dispose(),t?[2,u.map((function(e){var t=cS(e,l),r={topLeft:Ti(t,[0],[2]),bottomRight:Ti(t,[2],[2])};if(a){var o=e,i=o.landmarks,u=o.probability,c=o.anchor,d=Ko(Ho(i,c),l);r.landmarks=d,r.probability=u}return n&&(r=lS(r,s)),r}))]:[2,Promise.all(u.map((function(e){return sS(c,void 0,void 0,(function(){var t,r,o,i,u,c,d,p,h,f,m,g=this;return oS(this,(function(y){switch(y.label){case 0:return t=cS(e,l),a?[3,2]:[4,t.array()];case 1:return u=y.sent(),r={topLeft:u.slice(0,2),bottomRight:u.slice(2)},[3,4];case 2:return[4,Promise.all([e.landmarks,t,e.probability].map((function(e){return sS(g,void 0,void 0,(function(){return oS(this,(function(t){return[2,e.array()]}))}))})))];case 3:o=y.sent(),i=o[0],u=o[1],c=o[2],d=e.anchor,h=(p=l)[0],f=p[1],m=i.map((function(e){return[(e[0]+d[0])*h,(e[1]+d[1])*f]})),r={topLeft:u.slice(0,2),bottomRight:u.slice(2),landmarks:m,probability:c},function(e){e.startEndTensor.dispose(),e.startPoint.dispose(),e.endPoint.dispose()}(e.box),e.landmarks.dispose(),e.probability.dispose(),y.label=4;case 4:return t.dispose(),n&&(r=lS(r,s)),[2,r]}}))}))})))]}}))}))},e}();function pS(e){var t=void 0===e?{}:e,n=t.maxFaces,a=void 0===n?10:n,r=t.inputWidth,s=void 0===r?128:r,o=t.inputHeight,i=void 0===o?128:o,u=t.iouThreshold,l=void 0===u?.3:u,c=t.scoreThreshold,d=void 0===c?.75:c,p=t.modelUrl;return sS(this,void 0,void 0,(function(){var e;return oS(this,(function(t){switch(t.label){case 0:return null==p?[3,2]:[4,tS(p)];case 1:return e=t.sent(),[3,4];case 2:return[4,tS("https://cdn.static.oppenlab.com/weblf/test/blazeface/model.json",{fromTFHub_:!0})];case 3:e=t.sent(),t.label=4;case 4:return[2,new dS(e,s,i,a,l,d)]}}))}))}var hS={silhouette:[10,338,297,332,284,251,389,356,454,323,361,288,397,365,379,378,400,377,152,148,176,149,150,136,172,58,132,93,234,127,162,21,54,103,67,109],lipsUpperOuter:[61,185,40,39,37,0,267,269,270,409,291],lipsLowerOuter:[146,91,181,84,17,314,405,321,375,291],lipsUpperInner:[78,191,80,81,82,13,312,311,310,415,308],lipsLowerInner:[78,95,88,178,87,14,317,402,318,324,308],rightEyeUpper0:[246,161,160,159,158,157,173],rightEyeLower0:[33,7,163,144,145,153,154,155,133],rightEyeUpper1:[247,30,29,27,28,56,190],rightEyeLower1:[130,25,110,24,23,22,26,112,243],rightEyeUpper2:[113,225,224,223,222,221,189],rightEyeLower2:[226,31,228,229,230,231,232,233,244],rightEyeLower3:[143,111,117,118,119,120,121,128,245],rightEyebrowUpper:[156,70,63,105,66,107,55,193],rightEyebrowLower:[35,124,46,53,52,65],rightEyeIris:[473,474,475,476,477],leftEyeUpper0:[466,388,387,386,385,384,398],leftEyeLower0:[263,249,390,373,374,380,381,382,362],leftEyeUpper1:[467,260,259,257,258,286,414],leftEyeLower1:[359,255,339,254,253,252,256,341,463],leftEyeUpper2:[342,445,444,443,442,441,413],leftEyeLower2:[446,261,448,449,450,451,452,453,464],leftEyeLower3:[372,340,346,347,348,349,350,357,465],leftEyebrowUpper:[383,300,293,334,296,336,285,417],leftEyebrowLower:[265,353,276,283,282,295],leftEyeIris:[468,469,470,471,472],midwayBetweenEyes:[168],noseTip:[1],noseBottom:[2],noseRightCorner:[98],noseLeftCorner:[327],rightCheek:[205],leftCheek:[425]};function fS(e){return[Math.abs(e.endPoint[0]-e.startPoint[0]),Math.abs(e.endPoint[1]-e.startPoint[1])]}function mS(e){return[e.startPoint[0]+(e.endPoint[0]-e.startPoint[0])/2,e.startPoint[1]+(e.endPoint[1]-e.startPoint[1])/2]}function gS(e,t){void 0===t&&(t=1.5);var n=mS(e),a=fS(e),r=[t*a[0]/2,t*a[1]/2];return{startPoint:[n[0]-r[0],n[1]-r[1]],endPoint:[n[0]+r[0],n[1]+r[1]],landmarks:e.landmarks}}function yS(e){var t=mS(e),n=fS(e),a=Math.max.apply(Math,n)/2;return{startPoint:[t[0]-a,t[1]-a],endPoint:[t[0]+a,t[1]+a],landmarks:e.landmarks}}var bS=[[1,0,0],[0,1,0],[0,0,1]];function xS(e,t){return[[1,0,e],[0,1,t],[0,0,1]]}function vS(e,t){for(var n=0,a=0;a<e.length;a++)n+=e[a]*t[a];return n}function kS(e,t){for(var n=[],a=0;a<e.length;a++)n.push(e[a][t]);return n}function wS(e,t){for(var n=[],a=e.length,r=0;r<a;r++){n.push([]);for(var s=0;s<a;s++)n[r].push(vS(e[r],kS(t,s)))}return n}function IS(e,t){var n=Math.cos(e),a=Math.sin(e),r=[[n,-a,0],[a,n,0],[0,0,1]],s=wS(xS(t[0],t[1]),r);return wS(s,xS(-t[0],-t[1]))}var NS=[13,hS.midwayBetweenEyes[0]],$S=[3,2],TS=hS.leftEyeLower0,CS=[TS[0],TS[TS.length-1]],ES=hS.rightEyeLower0,SS=[ES[0],ES[ES.length-1]],RS=[{key:"EyeUpper0",indices:[9,10,11,12,13,14,15]},{key:"EyeUpper1",indices:[25,26,27,28,29,30,31]},{key:"EyeUpper2",indices:[41,42,43,44,45,46,47]},{key:"EyeLower0",indices:[0,1,2,3,4,5,6,7,8]},{key:"EyeLower1",indices:[16,17,18,19,20,21,22,23,24]},{key:"EyeLower2",indices:[32,33,34,35,36,37,38,39,40]},{key:"EyeLower3",indices:[54,55,56,57,58,59,60,61,62]},{key:"EyebrowUpper",indices:[63,64,65,66,67,68,69,70]},{key:"EyebrowLower",indices:[48,49,50,51,52,53]}];function AS(e,t,n,a){for(var r=0;r<RS.length;r++){var s=RS[r],o=s.key,i=s.indices,u=hS[""+n+o];if(null==a||a.includes(o))for(var l=0;l<i.length;l++){var c=i[l];e[u[l]]=[t[c][0],t[c][1],(t[c][2]+e[u[l]][2])/2]}}}var _S=function(){function e(e,t,n,a,r,s,o){this.regionsOfInterest=[],this.runsWithoutFaceDetector=0,this.boundingBoxDetector=e,this.meshDetector=t,this.irisModel=o,this.meshWidth=n,this.meshHeight=a,this.maxContinuousChecks=r,this.maxFaces=s}return e.prototype.transformRawCoords=function(e,t,n,a){var r,s,o,i,u=this,l=fS({startPoint:t.startPoint,endPoint:t.endPoint}),c=[l[0]/this.meshWidth,l[1]/this.meshHeight],d=e.map((function(e){return[c[0]*(e[0]-u.meshWidth/2),c[1]*(e[1]-u.meshHeight/2),e[2]]})),p=IS(n,[0,0]),h=d.map((function(e){return function(e,t){return[vS(e,t[0]),vS(e,t[1])]}(e,p).concat([e[2]])})),f=(s=[[(r=a)[0][0],r[1][0]],[r[0][1],r[1][1]]],o=[r[0][2],r[1][2]],i=[-vS(s[0],o),-vS(s[1],o)],[s[0].concat(i[0]),s[1].concat(i[1]),[0,0,1]]),m=mS({startPoint:t.startPoint,endPoint:t.endPoint}).concat([1]),g=[vS(m,f[0]),vS(m,f[1])];return h.map((function(e){return[e[0]+g[0],e[1]+g[1],e[2]]}))},e.prototype.getLeftToRightEyeDepthDifference=function(e){return e[CS[0]][2]-e[SS[0]][2]},e.prototype.getEyeBox=function(e,t,n,a,r){void 0===r&&(r=!1);var s=yS(gS(this.calculateLandmarksBoundingBox([e[n],e[a]]),2.3)),o=fS(s),i=sp.cropAndResize(t,[[s.startPoint[1]/this.meshHeight,s.startPoint[0]/this.meshWidth,s.endPoint[1]/this.meshHeight,s.endPoint[0]/this.meshWidth]],[0],[64,64]);return r&&(i=sp.flipLeftRight(i)),{box:s,boxSize:o,crop:i}},e.prototype.getEyeCoords=function(e,t,n,a){void 0===a&&(a=!1);for(var r=[],s=0;s<76;s++){var o=e[3*s],i=e[3*s+1],u=e[3*s+2];r.push([(a?1-o/64:o/64)*n[0]+t.startPoint[0],i/64*n[1]+t.startPoint[1],u])}return{rawCoords:r,iris:r.slice(71)}},e.prototype.getAdjustedIrisCoords=function(e,t,n){var a=e[hS[n+"EyeUpper0"][3]][2],r=e[hS[n+"EyeLower0"][4]][2],s=(a+r)/2;return t.map((function(e,t){var n=s;return 2===t?n=a:4===t&&(n=r),[e[0],e[1],n]}))},e.prototype.predict=function(e,t){return aS(this,void 0,void 0,(function(){var n,a,r,s,o=this;return rS(this,(function(i){switch(i.label){case 0:return this.shouldUpdateRegionsOfInterest()?[4,this.boundingBoxDetector.getBoundingBoxes(e,!1,!0)]:[3,2];case 1:return n=i.sent(),a=n.boxes,r=n.scaleFactor,0===a.length?(this.regionsOfInterest=[],[2,null]):(s=a.map((function(e){var t,n,a={startPoint:Cc(e.box.startPoint).arraySync(),endPoint:Cc(e.box.endPoint).arraySync()},s=yS(gS((n=r,{startPoint:[(t=a).startPoint[0]*n[0],t.startPoint[1]*n[1]],endPoint:[t.endPoint[0]*n[0],t.endPoint[1]*n[1]]})));return nS({},s,{landmarks:e.landmarks.arraySync()})})),a.forEach((function(e){null!=e&&null!=e.startPoint&&(e.startEndTensor.dispose(),e.startPoint.dispose(),e.endPoint.dispose())})),this.updateRegionsOfInterest(s),this.runsWithoutFaceDetector=0,[3,3]);case 2:this.runsWithoutFaceDetector++,i.label=3;case 3:return[2,Wo((function(){return o.regionsOfInterest.map((function(n,a){var r,s=n.landmarks.length>=468,i=NS[0],u=NS[1];!1===s&&(i=$S[0],u=$S[1]),r=function(e,t){var n;return(n=Math.PI/2-Math.atan2(-(t[1]-e[1]),t[0]-e[0]))-2*Math.PI*Math.floor((n+Math.PI)/(2*Math.PI))}(n.landmarks[i],n.landmarks[u]);var l=mS({startPoint:n.startPoint,endPoint:n.endPoint}),c=[l[0]/e.shape[2],l[1]/e.shape[1]],d=e,p=bS;0!==r&&(d=sp.rotateWithOffset(e,r,0,c),p=IS(-r,l));var h={startPoint:n.startPoint,endPoint:n.endPoint},f=qo(function(e,t,n){var a=t.shape[1],r=t.shape[2],s=[[e.startPoint[1]/a,e.startPoint[0]/r,e.endPoint[1]/a,e.endPoint[0]/r]];return sp.cropAndResize(t,s,[0],n,"bilinear",0)}(h,d,[o.meshHeight,o.meshWidth]),255),m=o.meshDetector.predict(f),g=m[1],y=m[2],b=ki(y,[-1,3]).arraySync();if(t){var x=o.getEyeBox(b,f,CS[0],CS[1],!0),v=x.box,k=x.boxSize,w=x.crop,I=o.getEyeBox(b,f,SS[0],SS[1]),N=I.box,$=I.boxSize,T=I.crop,C=o.irisModel.predict(Ni([w,T])).dataSync(),E=C.slice(0,228),S=o.getEyeCoords(E,v,k,!0),R=S.rawCoords,A=S.iris,_=C.slice(228),F=o.getEyeCoords(_,N,$),O=F.rawCoords,D=F.iris,M=o.getLeftToRightEyeDepthDifference(b);Math.abs(M)<30?(AS(b,R,"left"),AS(b,O,"right")):M<1?AS(b,R,"left",["EyeUpper0","EyeLower0"]):AS(b,O,"right",["EyeUpper0","EyeLower0"]);var L=o.getAdjustedIrisCoords(b,A,"left"),P=o.getAdjustedIrisCoords(b,D,"right");b=b.concat(L).concat(P)}var B=o.transformRawCoords(b,n,r,p),W=Fc(B),V=gS(o.calculateLandmarksBoundingBox(B)),z=yS(V);return o.regionsOfInterest[a]=nS({},z,{landmarks:W.arraySync()}),{coords:Fc(b,[b.length,3]),scaledCoords:W,box:V,flag:Cc(g)}}))}))]}}))}))},e.prototype.updateRegionsOfInterest=function(e){for(var t=0;t<e.length;t++){var n=e[t],a=this.regionsOfInterest[t],r=0;if(a&&a.startPoint){var s=n.startPoint,o=s[0],i=s[1],u=n.endPoint,l=u[0],c=u[1],d=a.startPoint,p=d[0],h=d[1],f=a.endPoint,m=f[0],g=f[1],y=Math.max(o,p),b=Math.max(i,h),x=(Math.min(l,m)-y)*(Math.min(c,g)-b);r=x/((l-o)*(c-i)+(m-p)*(g-i)-x)}r<.25&&(this.regionsOfInterest[t]=n)}this.regionsOfInterest=this.regionsOfInterest.slice(0,e.length)},e.prototype.clearRegionOfInterest=function(e){null!=this.regionsOfInterest[e]&&(this.regionsOfInterest=this.regionsOfInterest.slice(0,e).concat(this.regionsOfInterest.slice(e+1)))},e.prototype.shouldUpdateRegionsOfInterest=function(){var e=this.regionsOfInterest.length,t=0===e;return 1===this.maxFaces||t?t:e!==this.maxFaces&&this.runsWithoutFaceDetector>=this.maxContinuousChecks},e.prototype.calculateLandmarksBoundingBox=function(e){var t=e.map((function(e){return e[0]})),n=e.map((function(e){return e[1]}));return{startPoint:[Math.min.apply(Math,t),Math.min.apply(Math,n)],endPoint:[Math.max.apply(Math,t),Math.max.apply(Math,n)]}},e}(),FS=[[.499976992607117,.652534008026123],[.500025987625122,.547487020492554],[.499974012374878,.602371990680695],[.482113003730774,.471979022026062],[.500150978565216,.527155995368958],[.499909996986389,.498252987861633],[.499523013830185,.40106201171875],[.289712011814117,.380764007568359],[.499954998493195,.312398016452789],[.499987006187439,.269918978214264],[.500023007392883,.107050001621246],[.500023007392883,.666234016418457],[.5000159740448,.679224014282227],[.500023007392883,.692348003387451],[.499976992607117,.695277988910675],[.499976992607117,.70593398809433],[.499976992607117,.719385027885437],[.499976992607117,.737019002437592],[.499967992305756,.781370997428894],[.499816000461578,.562981009483337],[.473773002624512,.573909997940063],[.104906998574734,.254140973091125],[.365929991006851,.409575998783112],[.338757991790771,.41302502155304],[.311120003461838,.409460008144379],[.274657994508743,.389131009578705],[.393361985683441,.403706014156342],[.345234006643295,.344011008739471],[.370094001293182,.346076011657715],[.319321990013123,.347265005111694],[.297903001308441,.353591024875641],[.24779200553894,.410809993743896],[.396889001131058,.842755019664764],[.280097991228104,.375599980354309],[.106310002505779,.399955987930298],[.2099249958992,.391353011131287],[.355807989835739,.534406006336212],[.471751004457474,.65040397644043],[.474155008792877,.680191993713379],[.439785003662109,.657229006290436],[.414617002010345,.66654098033905],[.450374007225037,.680860996246338],[.428770989179611,.682690978050232],[.374971002340317,.727805018424988],[.486716985702515,.547628998756409],[.485300987958908,.527395009994507],[.257764995098114,.314490020275116],[.401223003864288,.455172002315521],[.429818987846375,.548614978790283],[.421351999044418,.533740997314453],[.276895999908447,.532056987285614],[.483370006084442,.499586999416351],[.33721199631691,.282882988452911],[.296391993761063,.293242990970612],[.169294998049736,.193813979625702],[.447580009698868,.302609980106354],[.392390012741089,.353887975215912],[.354490011930466,.696784019470215],[.067304998636246,.730105042457581],[.442739009857178,.572826027870178],[.457098007202148,.584792017936707],[.381974011659622,.694710969924927],[.392388999462128,.694203019142151],[.277076005935669,.271932005882263],[.422551989555359,.563233017921448],[.385919004678726,.281364023685455],[.383103013038635,.255840003490448],[.331431001424789,.119714021682739],[.229923993349075,.232002973556519],[.364500999450684,.189113974571228],[.229622006416321,.299540996551514],[.173287004232407,.278747975826263],[.472878992557526,.666198015213013],[.446828007698059,.668527007102966],[.422762006521225,.673889994621277],[.445307999849319,.580065965652466],[.388103008270264,.693961024284363],[.403039008378983,.706539988517761],[.403629004955292,.693953037261963],[.460041999816895,.557139039039612],[.431158006191254,.692366003990173],[.452181994915009,.692366003990173],[.475387006998062,.692366003990173],[.465828001499176,.779190003871918],[.472328990697861,.736225962638855],[.473087012767792,.717857003211975],[.473122000694275,.704625964164734],[.473033010959625,.695277988910675],[.427942007780075,.695277988910675],[.426479011774063,.703539967536926],[.423162013292313,.711845993995667],[.4183090031147,.720062971115112],[.390094995498657,.639572978019714],[.013953999616206,.560034036636353],[.499913990497589,.58014702796936],[.413199990987778,.69539999961853],[.409626007080078,.701822996139526],[.468080013990402,.601534962654114],[.422728985548019,.585985004901886],[.463079988956451,.593783974647522],[.37211999297142,.47341400384903],[.334562003612518,.496073007583618],[.411671012639999,.546965003013611],[.242175996303558,.14767599105835],[.290776997804642,.201445996761322],[.327338010072708,.256527006626129],[.399509996175766,.748921036720276],[.441727995872498,.261676013469696],[.429764986038208,.187834024429321],[.412198007106781,.108901023864746],[.288955003023148,.398952007293701],[.218936994671822,.435410976409912],[.41278201341629,.398970007896423],[.257135003805161,.355440020561218],[.427684992551804,.437960982322693],[.448339998722076,.536936044692993],[.178560003638268,.45755398273468],[.247308000922203,.457193970680237],[.286267012357712,.467674970626831],[.332827985286713,.460712015628815],[.368755996227264,.447206974029541],[.398963987827301,.432654976844788],[.476410001516342,.405806005001068],[.189241006970406,.523923993110657],[.228962004184723,.348950982093811],[.490725994110107,.562400996685028],[.404670000076294,.485132992267609],[.019469000399113,.401564002037048],[.426243007183075,.420431017875671],[.396993011236191,.548797011375427],[.266469985246658,.376977026462555],[.439121007919312,.51895797252655],[.032313998788595,.644356966018677],[.419054001569748,.387154996395111],[.462783008813858,.505746960639954],[.238978996872902,.779744982719421],[.198220998048782,.831938028335571],[.107550002634525,.540755033493042],[.183610007166862,.740257024765015],[.134409993886948,.333683013916016],[.385764002799988,.883153975009918],[.490967005491257,.579378008842468],[.382384985685349,.508572995662689],[.174399003386497,.397670984268188],[.318785011768341,.39623498916626],[.343364000320435,.400596976280212],[.396100014448166,.710216999053955],[.187885001301765,.588537991046906],[.430987000465393,.944064974784851],[.318993002176285,.898285031318665],[.266247987747192,.869701027870178],[.500023007392883,.190576016902924],[.499976992607117,.954452991485596],[.366169989109039,.398822009563446],[.393207013607025,.39553701877594],[.410373002290726,.391080021858215],[.194993004202843,.342101991176605],[.388664990663528,.362284004688263],[.365961998701096,.355970978736877],[.343364000320435,.355356991291046],[.318785011768341,.35834002494812],[.301414996385574,.363156020641327],[.058132998645306,.319076001644135],[.301414996385574,.387449026107788],[.499987989664078,.618434011936188],[.415838003158569,.624195992946625],[.445681989192963,.566076993942261],[.465844005346298,.620640993118286],[.49992299079895,.351523995399475],[.288718998432159,.819945991039276],[.335278987884521,.852819979190826],[.440512001514435,.902418971061707],[.128294005990028,.791940987110138],[.408771991729736,.373893976211548],[.455606997013092,.451801002025604],[.499877005815506,.908990025520325],[.375436991453171,.924192011356354],[.11421000212431,.615022003650665],[.448662012815475,.695277988910675],[.4480200111866,.704632043838501],[.447111994028091,.715808033943176],[.444831997156143,.730794012546539],[.430011987686157,.766808986663818],[.406787008047104,.685672998428345],[.400738000869751,.681069016456604],[.392399996519089,.677703022956848],[.367855995893478,.663918972015381],[.247923001646996,.601333022117615],[.452769994735718,.420849978923798],[.43639200925827,.359887003898621],[.416164010763168,.368713974952698],[.413385987281799,.692366003990173],[.228018000721931,.683571994304657],[.468268007040024,.352671027183533],[.411361992359161,.804327011108398],[.499989002943039,.469825029373169],[.479153990745544,.442654013633728],[.499974012374878,.439637005329132],[.432112008333206,.493588984012604],[.499886006116867,.866917014122009],[.49991300702095,.821729004383087],[.456548988819122,.819200992584229],[.344549000263214,.745438992977142],[.37890899181366,.574010014533997],[.374292999505997,.780184984207153],[.319687992334366,.570737957954407],[.357154995203018,.604269981384277],[.295284003019333,.621580958366394],[.447750002145767,.862477004528046],[.410986006259918,.508723020553589],[.31395098567009,.775308012962341],[.354128003120422,.812552988529205],[.324548006057739,.703992962837219],[.189096003770828,.646299958229065],[.279776990413666,.71465802192688],[.1338230073452,.682700991630554],[.336768001317978,.644733011722565],[.429883986711502,.466521978378296],[.455527991056442,.548622965812683],[.437114000320435,.558896005153656],[.467287987470627,.529924988746643],[.414712011814117,.335219979286194],[.37704598903656,.322777986526489],[.344107985496521,.320150971412659],[.312875986099243,.32233202457428],[.283526003360748,.333190023899078],[.241245999932289,.382785975933075],[.102986000478268,.468762993812561],[.267612010240555,.424560010433197],[.297879010438919,.433175981044769],[.333433985710144,.433878004550934],[.366427004337311,.426115989685059],[.396012008190155,.416696012020111],[.420121014118195,.41022801399231],[.007561000064015,.480777025222778],[.432949006557465,.569517970085144],[.458638995885849,.479089021682739],[.473466008901596,.545744001865387],[.476087987422943,.563830018043518],[.468472003936768,.555056989192963],[.433990985155106,.582361996173859],[.483518004417419,.562983989715576],[.482482999563217,.57784903049469],[.42645001411438,.389798998832703],[.438998997211456,.39649498462677],[.450067013502121,.400434017181396],[.289712011814117,.368252992630005],[.276670008897781,.363372981548309],[.517862021923065,.471948027610779],[.710287988185883,.380764007568359],[.526226997375488,.573909997940063],[.895093023777008,.254140973091125],[.634069979190826,.409575998783112],[.661242008209229,.41302502155304],[.688880026340485,.409460008144379],[.725341975688934,.389131009578705],[.606630027294159,.40370500087738],[.654766023159027,.344011008739471],[.629905998706818,.346076011657715],[.680678009986877,.347265005111694],[.702096998691559,.353591024875641],[.75221198797226,.410804986953735],[.602918028831482,.842862963676453],[.719901978969574,.375599980354309],[.893692970275879,.399959981441498],[.790081977844238,.391354024410248],[.643998026847839,.534487962722778],[.528249025344849,.65040397644043],[.525849997997284,.680191040039062],[.560214996337891,.657229006290436],[.585384011268616,.66654098033905],[.549625992774963,.680860996246338],[.57122802734375,.682691991329193],[.624852001667023,.72809898853302],[.513050019741058,.547281980514526],[.51509702205658,.527251958847046],[.742246985435486,.314507007598877],[.598631024360657,.454979002475739],[.570338010787964,.548575043678284],[.578631997108459,.533622980117798],[.723087012767792,.532054007053375],[.516445994377136,.499638974666595],[.662801027297974,.282917976379395],[.70362401008606,.293271005153656],[.830704987049103,.193813979625702],[.552385985851288,.302568018436432],[.607609987258911,.353887975215912],[.645429015159607,.696707010269165],[.932694971561432,.730105042457581],[.557260990142822,.572826027870178],[.542901992797852,.584792017936707],[.6180260181427,.694710969924927],[.607590973377228,.694203019142151],[.722943007946014,.271963000297546],[.577413976192474,.563166975975037],[.614082992076874,.281386971473694],[.616907000541687,.255886018276215],[.668509006500244,.119913995265961],[.770092010498047,.232020974159241],[.635536015033722,.189248979091644],[.77039098739624,.299556016921997],[.826722025871277,.278755009174347],[.527121007442474,.666198015213013],[.553171992301941,.668527007102966],[.577238023281097,.673889994621277],[.554691970348358,.580065965652466],[.611896991729736,.693961024284363],[.59696102142334,.706539988517761],[.596370995044708,.693953037261963],[.539958000183105,.557139039039612],[.568841993808746,.692366003990173],[.547818005084991,.692366003990173],[.52461302280426,.692366003990173],[.534089982509613,.779141008853912],[.527670979499817,.736225962638855],[.526912987232208,.717857003211975],[.526877999305725,.704625964164734],[.526966989040375,.695277988910675],[.572058022022247,.695277988910675],[.573521018028259,.703539967536926],[.57683801651001,.711845993995667],[.581691026687622,.720062971115112],[.609944999217987,.639909982681274],[.986046016216278,.560034036636353],[.5867999792099,.69539999961853],[.590372025966644,.701822996139526],[.531915009021759,.601536989212036],[.577268004417419,.585934996604919],[.536915004253387,.593786001205444],[.627542972564697,.473352015018463],[.665585994720459,.495950996875763],[.588353991508484,.546862006187439],[.757824003696442,.14767599105835],[.709249973297119,.201507985591888],[.672684013843536,.256581008434296],[.600408971309662,.74900496006012],[.55826598405838,.261672019958496],[.570303976535797,.187870979309082],[.588165998458862,.109044015407562],[.711045026779175,.398952007293701],[.781069993972778,.435405015945435],[.587247014045715,.398931980133057],[.742869973182678,.355445981025696],[.572156012058258,.437651991844177],[.55186802148819,.536570012569427],[.821442008018494,.457556009292603],[.752701997756958,.457181990146637],[.71375697851181,.467626988887787],[.66711300611496,.460672974586487],[.631101012229919,.447153985500336],[.6008620262146,.432473003864288],[.523481011390686,.405627012252808],[.810747981071472,.523926019668579],[.771045982837677,.348959028720856],[.509127020835876,.562718033790588],[.595292985439301,.485023975372314],[.980530977249146,.401564002037048],[.573499977588654,.420000016689301],[.602994978427887,.548687994480133],[.733529984951019,.376977026462555],[.560611009597778,.519016981124878],[.967685997486115,.644356966018677],[.580985009670258,.387160003185272],[.537728011608124,.505385041236877],[.760966002941132,.779752969741821],[.801778972148895,.831938028335571],[.892440974712372,.54076099395752],[.816350996494293,.740260004997253],[.865594983100891,.333687007427216],[.614073991775513,.883246004581451],[.508952975273132,.579437971115112],[.617941975593567,.508316040039062],[.825608015060425,.397674977779388],[.681214988231659,.39623498916626],[.656635999679565,.400596976280212],[.603900015354156,.710216999053955],[.81208598613739,.588539004325867],[.56801301240921,.944564998149872],[.681007981300354,.898285031318665],[.733752012252808,.869701027870178],[.633830010890961,.398822009563446],[.606792986392975,.39553701877594],[.589659988880157,.391062021255493],[.805015981197357,.342108011245728],[.611334979534149,.362284004688263],[.634037971496582,.355970978736877],[.656635999679565,.355356991291046],[.681214988231659,.35834002494812],[.698584973812103,.363156020641327],[.941866993904114,.319076001644135],[.698584973812103,.387449026107788],[.584177017211914,.624107003211975],[.554318010807037,.566076993942261],[.534153997898102,.62064003944397],[.711217999458313,.819975018501282],[.664629995822906,.852871000766754],[.559099972248077,.902631998062134],[.871706008911133,.791940987110138],[.591234028339386,.373893976211548],[.544341027736664,.451583981513977],[.624562978744507,.924192011356354],[.88577002286911,.615028977394104],[.551338016986847,.695277988910675],[.551980018615723,.704632043838501],[.552887976169586,.715808033943176],[.555167973041534,.730794012546539],[.569944024085999,.767035007476807],[.593203008174896,.685675978660583],[.599261999130249,.681069016456604],[.607599973678589,.677703022956848],[.631937980651855,.663500010967255],[.752032995223999,.601315021514893],[.547226011753082,.420395016670227],[.563543975353241,.359827995300293],[.583841025829315,.368713974952698],[.586614012718201,.692366003990173],[.771915018558502,.683578014373779],[.531597018241882,.352482974529266],[.588370978832245,.804440975189209],[.52079701423645,.442565023899078],[.567984998226166,.493479013442993],[.543282985687256,.819254994392395],[.655317008495331,.745514988899231],[.621008992195129,.574018001556396],[.625559985637665,.78031200170517],[.680198013782501,.570719003677368],[.64276397228241,.604337990283966],[.704662978649139,.621529996395111],[.552012026309967,.862591981887817],[.589071989059448,.508637011051178],[.685944974422455,.775357007980347],[.645735025405884,.812640011310577],[.675342977046967,.703978002071381],[.810858011245728,.646304965019226],[.72012197971344,.714666962623596],[.866151988506317,.682704985141754],[.663187026977539,.644596993923187],[.570082008838654,.466325998306274],[.544561982154846,.548375964164734],[.562758982181549,.558784961700439],[.531987011432648,.530140042304993],[.585271000862122,.335177004337311],[.622952997684479,.32277899980545],[.655896008014679,.320163011550903],[.687132000923157,.322345972061157],[.716481983661652,.333200991153717],[.758756995201111,.382786989212036],[.897013008594513,.468769013881683],[.732392013072968,.424547016620636],[.70211398601532,.433162987232208],[.66652500629425,.433866024017334],[.633504986763,.426087975502014],[.603875994682312,.416586995124817],[.579657971858978,.409945011138916],[.992439985275269,.480777025222778],[.567192018032074,.569419980049133],[.54136598110199,.478899002075195],[.526564002037048,.546118021011353],[.523913025856018,.563830018043518],[.531529009342194,.555056989192963],[.566035985946655,.582329034805298],[.51631098985672,.563053965568542],[.5174720287323,.577877044677734],[.573594987392426,.389806985855103],[.560697972774506,.395331978797913],[.549755990505219,.399751007556915],[.710287988185883,.368252992630005],[.723330020904541,.363372981548309]];function OS(e){return aS(this,void 0,void 0,(function(){var t,n,a,r,s,o,i,u,l,c,d,p,h,f,m,g;return rS(this,(function(y){switch(y.label){case 0:return t=e.maxContinuousChecks,n=void 0===t?5:t,a=e.detectionConfidence,r=void 0===a?.9:a,s=e.maxFaces,o=void 0===s?10:s,i=e.iouThreshold,u=void 0===i?.3:i,l=e.scoreThreshold,c=void 0===l?.75:l,d=e.shouldLoadIrisModel,p=void 0===d||d,h=e.modelUrl,f=e.detectorModelUrl,m=e.irisModelUrl,p?[4,Promise.all([DS(f,o,u,c),MS(h),LS(m)])]:[3,2];case 1:return g=y.sent(),[3,4];case 2:return[4,Promise.all([DS(f,o,u,c),MS(h)])];case 3:g=y.sent(),y.label=4;case 4:return[2,new WS(g[0],g[1],n,r,o,p?g[2]:null)]}}))}))}function DS(e,t,n,a){return aS(this,void 0,void 0,(function(){return rS(this,(function(r){return[2,pS({modelUrl:e,maxFaces:t,iouThreshold:n,scoreThreshold:a})]}))}))}function MS(e){return aS(this,void 0,void 0,(function(){return rS(this,(function(t){return null!=e?[2,tS(e)]:[2,tS("https://tfhub.dev/mediapipe/tfjs-model/facemesh/1/default/1",{fromTFHub:!0})]}))}))}function LS(e){return aS(this,void 0,void 0,(function(){return rS(this,(function(t){return null!=e?[2,tS(e)]:[2,tS("https://tfhub.dev/mediapipe/tfjs-model/iris/1/default/2",{fromTFHub:!0})]}))}))}function PS(e,t){if(e.mesh instanceof lr){var n=Wo((function(){var n=_c([t-1,0,0]),a=_c([1,-1,1]);return Wo((function(){return[Ni([zu(t-1,Ti(e.boundingBox.topLeft,0,1)),Ti(e.boundingBox.topLeft,1,1)]),Ni([zu(t-1,Ti(e.boundingBox.bottomRight,0,1)),Ti(e.boundingBox.bottomRight,1,1)]),Ko(zu(n,e.mesh),a),Ko(zu(n,e.scaledMesh),a)]}))})),a=n[0],r=n[1],s=n[2],o=n[3];return Object.assign({},e,{boundingBox:{topLeft:a,bottomRight:r},mesh:s,scaledMesh:o})}return Object.assign({},e,{boundingBox:{topLeft:[t-1-e.boundingBox.topLeft[0],e.boundingBox.topLeft[1]],bottomRight:[t-1-e.boundingBox.bottomRight[0],e.boundingBox.bottomRight[1]]},mesh:e.mesh.map((function(e){var n=e.slice(0);return n[0]=t-1-e[0],n})),scaledMesh:e.scaledMesh.map((function(e){var n=e.slice(0);return n[0]=t-1-e[0],n}))})}var BS,WS=function(){function e(e,t,n,a,r,s){this.kind="MediaPipeFaceMesh",this.pipeline=new _S(e,t,192,192,n,r,s),this.detectionConfidence=a}return e.getAnnotations=function(){return hS},e.getUVCoords=function(){return FS},e.prototype.estimateFaces=function(e){return aS(this,void 0,void 0,(function(){var t,n,a,r,s,o,i,u,l,c,d,p,h=this;return rS(this,(function(f){switch(f.label){case 0:if(t=e.returnTensors,n=void 0!==t&&t,a=e.flipHorizontal,r=void 0!==a&&a,s=e.predictIrises,o=void 0===s||s,i=e.input,o&&null==this.pipeline.irisModel)throw new Error("The iris model was not loaded as part of facemesh. Please initialize the model with facemesh.load({shouldLoadIrisModel: true}).");return u=function(e){return e instanceof lr?[e.shape[0],e.shape[1]]:[e.height,e.width]}(i),l=u[1],c=Wo((function(){return i instanceof lr||(i=ao(i)),mu(As(i,"float32"),0)})),"webgl"!==Uo()?[3,2]:(p=q().get("WEBGL_PACK_DEPTHWISECONV"),q().set("WEBGL_PACK_DEPTHWISECONV",!0),[4,this.pipeline.predict(c,o)]);case 1:return d=f.sent(),q().set("WEBGL_PACK_DEPTHWISECONV",p),[3,4];case 2:return[4,this.pipeline.predict(c,o)];case 3:d=f.sent(),f.label=4;case 4:return c.dispose(),null!=d&&d.length>0?[2,Promise.all(d.map((function(e,t){return aS(h,void 0,void 0,(function(){var a,s,i,u,c,d,p,h,f,m,g,y,b,x,v=this;return rS(this,(function(k){switch(k.label){case 0:return a=e.coords,s=e.scaledCoords,i=e.box,u=e.flag,c=[u],n||(c=c.concat([a,s])),[4,Promise.all(c.map((function(e){return aS(v,void 0,void 0,(function(){return rS(this,(function(t){return[2,e.array()]}))}))})))];case 1:if(d=k.sent(),p=d[0],u.dispose(),p<this.detectionConfidence&&this.pipeline.clearRegionOfInterest(t),n)return h={kind:"MediaPipePredictionTensors",faceInViewConfidence:p,mesh:a,scaledMesh:s,boundingBox:{topLeft:_c(i.startPoint),bottomRight:_c(i.endPoint)}},r?[2,PS(h,l)]:[2,h];for(x in f=d.slice(1),m=f[0],g=f[1],s.dispose(),a.dispose(),y={kind:"MediaPipePredictionValues",faceInViewConfidence:p,boundingBox:{topLeft:i.startPoint,bottomRight:i.endPoint},mesh:m,scaledMesh:g},r&&(y=PS(y,l)),b={},hS)(o||!1===x.includes("Iris"))&&(b[x]=hS[x].map((function(e){return y.scaledMesh[e]})));return y.annotations=b,[2,y]}}))}))})))]:[2,[]]}}))}))},e}();(BS||(BS={})).mediapipeFacemesh="mediapipe-facemesh";const VS=[127,34,139,11,0,37,232,231,120,72,37,39,128,121,47,232,121,128,104,69,67,175,171,148,157,154,155,118,50,101,73,39,40,9,151,108,48,115,131,194,204,211,74,40,185,80,42,183,40,92,186,230,229,118,202,212,214,83,18,17,76,61,146,160,29,30,56,157,173,106,204,194,135,214,192,203,165,98,21,71,68,51,45,4,144,24,23,77,146,91,205,50,187,201,200,18,91,106,182,90,91,181,85,84,17,206,203,36,148,171,140,92,40,39,193,189,244,159,158,28,247,246,161,236,3,196,54,68,104,193,168,8,117,228,31,189,193,55,98,97,99,126,47,100,166,79,218,155,154,26,209,49,131,135,136,150,47,126,217,223,52,53,45,51,134,211,170,140,67,69,108,43,106,91,230,119,120,226,130,247,63,53,52,238,20,242,46,70,156,78,62,96,46,53,63,143,34,227,173,155,133,123,117,111,44,125,19,236,134,51,216,206,205,154,153,22,39,37,167,200,201,208,36,142,100,57,212,202,20,60,99,28,158,157,35,226,113,160,159,27,204,202,210,113,225,46,43,202,204,62,76,77,137,123,116,41,38,72,203,129,142,64,98,240,49,102,64,41,73,74,212,216,207,42,74,184,169,170,211,170,149,176,105,66,69,122,6,168,123,147,187,96,77,90,65,55,107,89,90,180,101,100,120,63,105,104,93,137,227,15,86,85,129,102,49,14,87,86,55,8,9,100,47,121,145,23,22,88,89,179,6,122,196,88,95,96,138,172,136,215,58,172,115,48,219,42,80,81,195,3,51,43,146,61,171,175,199,81,82,38,53,46,225,144,163,110,246,33,7,52,65,66,229,228,117,34,127,234,107,108,69,109,108,151,48,64,235,62,78,191,129,209,126,111,35,143,163,161,246,117,123,50,222,65,52,19,125,141,221,55,65,3,195,197,25,7,33,220,237,44,70,71,139,122,193,245,247,130,33,71,21,162,153,158,159,170,169,150,188,174,196,216,186,92,144,160,161,2,97,167,141,125,241,164,167,37,72,38,12,145,159,160,38,82,13,63,68,71,226,35,111,158,153,154,101,50,205,206,92,165,209,198,217,165,167,97,220,115,218,133,112,243,239,238,241,214,135,169,190,173,133,171,208,32,125,44,237,86,87,178,85,86,179,84,85,180,83,84,181,201,83,182,137,93,132,76,62,183,61,76,184,57,61,185,212,57,186,214,207,187,34,143,156,79,239,237,123,137,177,44,1,4,201,194,32,64,102,129,213,215,138,59,166,219,242,99,97,2,94,141,75,59,235,24,110,228,25,130,226,23,24,229,22,23,230,26,22,231,112,26,232,189,190,243,221,56,190,28,56,221,27,28,222,29,27,223,30,29,224,247,30,225,238,79,20,166,59,75,60,75,240,147,177,215,20,79,166,187,147,213,112,233,244,233,128,245,128,114,188,114,217,174,131,115,220,217,198,236,198,131,134,177,132,58,143,35,124,110,163,7,228,110,25,356,389,368,11,302,267,452,350,349,302,303,269,357,343,277,452,453,357,333,332,297,175,152,377,384,398,382,347,348,330,303,304,270,9,336,337,278,279,360,418,262,431,304,408,409,310,415,407,270,409,410,450,348,347,422,430,434,313,314,17,306,307,375,387,388,260,286,414,398,335,406,418,364,367,416,423,358,327,251,284,298,281,5,4,373,374,253,307,320,321,425,427,411,421,313,18,321,405,406,320,404,405,315,16,17,426,425,266,377,400,369,322,391,269,417,465,464,386,257,258,466,260,388,456,399,419,284,332,333,417,285,8,346,340,261,413,441,285,327,460,328,355,371,329,392,439,438,382,341,256,429,420,360,364,394,379,277,343,437,443,444,283,275,440,363,431,262,369,297,338,337,273,375,321,450,451,349,446,342,467,293,334,282,458,461,462,276,353,383,308,324,325,276,300,293,372,345,447,382,398,362,352,345,340,274,1,19,456,248,281,436,427,425,381,256,252,269,391,393,200,199,428,266,330,329,287,273,422,250,462,328,258,286,384,265,353,342,387,259,257,424,431,430,342,353,276,273,335,424,292,325,307,366,447,345,271,303,302,423,266,371,294,455,460,279,278,294,271,272,304,432,434,427,272,407,408,394,430,431,395,369,400,334,333,299,351,417,168,352,280,411,325,319,320,295,296,336,319,403,404,330,348,349,293,298,333,323,454,447,15,16,315,358,429,279,14,15,316,285,336,9,329,349,350,374,380,252,318,402,403,6,197,419,318,319,325,367,364,365,435,367,397,344,438,439,272,271,311,195,5,281,273,287,291,396,428,199,311,271,268,283,444,445,373,254,339,263,466,249,282,334,296,449,347,346,264,447,454,336,296,299,338,10,151,278,439,455,292,407,415,358,371,355,340,345,372,390,249,466,346,347,280,442,443,282,19,94,370,441,442,295,248,419,197,263,255,359,440,275,274,300,383,368,351,412,465,263,467,466,301,368,389,380,374,386,395,378,379,412,351,419,436,426,322,373,390,388,2,164,393,370,462,461,164,0,267,302,11,12,374,373,387,268,12,13,293,300,301,446,261,340,385,384,381,330,266,425,426,423,391,429,355,437,391,327,326,440,457,438,341,382,362,459,457,461,434,430,394,414,463,362,396,369,262,354,461,457,316,403,402,315,404,403,314,405,404,313,406,405,421,418,406,366,401,361,306,408,407,291,409,408,287,410,409,432,436,410,434,416,411,264,368,383,309,438,457,352,376,401,274,275,4,421,428,262,294,327,358,433,416,367,289,455,439,462,370,326,2,326,370,305,460,455,254,449,448,255,261,446,253,450,449,252,451,450,256,452,451,341,453,452,413,464,463,441,413,414,258,442,441,257,443,442,259,444,443,260,445,444,467,342,445,459,458,250,289,392,290,290,328,460,376,433,435,250,290,392,411,416,433,341,463,464,453,464,465,357,465,412,343,412,399,360,363,440,437,399,456,420,456,363,401,435,288,372,383,353,339,255,249,448,261,255,133,243,190,133,155,112,33,246,247,33,130,25,398,384,286,362,398,414,362,463,341,263,359,467,263,249,255,466,467,260,75,60,166,238,239,79,162,127,139,72,11,37,121,232,120,73,72,39,114,128,47,233,232,128,103,104,67,152,175,148,173,157,155,119,118,101,74,73,40,107,9,108,49,48,131,32,194,211,184,74,185,191,80,183,185,40,186,119,230,118,210,202,214,84,83,17,77,76,146,161,160,30,190,56,173,182,106,194,138,135,192,129,203,98,54,21,68,5,51,4,145,144,23,90,77,91,207,205,187,83,201,18,181,91,182,180,90,181,16,85,17,205,206,36,176,148,140,165,92,39,245,193,244,27,159,28,30,247,161,174,236,196,103,54,104,55,193,8,111,117,31,221,189,55,240,98,99,142,126,100,219,166,218,112,155,26,198,209,131,169,135,150,114,47,217,224,223,53,220,45,134,32,211,140,109,67,108,146,43,91,231,230,120,113,226,247,105,63,52,241,238,242,124,46,156,95,78,96,70,46,63,116,143,227,116,123,111,1,44,19,3,236,51,207,216,205,26,154,22,165,39,167,199,200,208,101,36,100,43,57,202,242,20,99,56,28,157,124,35,113,29,160,27,211,204,210,124,113,46,106,43,204,96,62,77,227,137,116,73,41,72,36,203,142,235,64,240,48,49,64,42,41,74,214,212,207,183,42,184,210,169,211,140,170,176,104,105,69,193,122,168,50,123,187,89,96,90,66,65,107,179,89,180,119,101,120,68,63,104,234,93,227,16,15,85,209,129,49,15,14,86,107,55,9,120,100,121,153,145,22,178,88,179,197,6,196,89,88,96,135,138,136,138,215,172,218,115,219,41,42,81,5,195,51,57,43,61,208,171,199,41,81,38,224,53,225,24,144,110,105,52,66,118,229,117,227,34,234,66,107,69,10,109,151,219,48,235,183,62,191,142,129,126,116,111,143,7,163,246,118,117,50,223,222,52,94,19,141,222,221,65,196,3,197,45,220,44,156,70,139,188,122,245,139,71,162,145,153,159,149,170,150,122,188,196,206,216,92,163,144,161,164,2,167,242,141,241,0,164,37,11,72,12,144,145,160,12,38,13,70,63,71,31,226,111,157,158,154,36,101,205,203,206,165,126,209,217,98,165,97,237,220,218,237,239,241,210,214,169,140,171,32,241,125,237,179,86,178,180,85,179,181,84,180,182,83,181,194,201,182,177,137,132,184,76,183,185,61,184,186,57,185,216,212,186,192,214,187,139,34,156,218,79,237,147,123,177,45,44,4,208,201,32,98,64,129,192,213,138,235,59,219,141,242,97,97,2,141,240,75,235,229,24,228,31,25,226,230,23,229,231,22,230,232,26,231,233,112,232,244,189,243,189,221,190,222,28,221,223,27,222,224,29,223,225,30,224,113,247,225,99,60,240,213,147,215,60,20,166,192,187,213,243,112,244,244,233,245,245,128,188,188,114,174,134,131,220,174,217,236,236,198,134,215,177,58,156,143,124,25,110,7,31,228,25,264,356,368,0,11,267,451,452,349,267,302,269,350,357,277,350,452,357,299,333,297,396,175,377,381,384,382,280,347,330,269,303,270,151,9,337,344,278,360,424,418,431,270,304,409,272,310,407,322,270,410,449,450,347,432,422,434,18,313,17,291,306,375,259,387,260,424,335,418,434,364,416,391,423,327,301,251,298,275,281,4,254,373,253,375,307,321,280,425,411,200,421,18,335,321,406,321,320,405,314,315,17,423,426,266,396,377,369,270,322,269,413,417,464,385,386,258,248,456,419,298,284,333,168,417,8,448,346,261,417,413,285,326,327,328,277,355,329,309,392,438,381,382,256,279,429,360,365,364,379,355,277,437,282,443,283,281,275,363,395,431,369,299,297,337,335,273,321,348,450,349,359,446,467,283,293,282,250,458,462,300,276,383,292,308,325,283,276,293,264,372,447,346,352,340,354,274,19,363,456,281,426,436,425,380,381,252,267,269,393,421,200,428,371,266,329,432,287,422,290,250,328,385,258,384,446,265,342,386,387,257,422,424,430,445,342,276,422,273,424,306,292,307,352,366,345,268,271,302,358,423,371,327,294,460,331,279,294,303,271,304,436,432,427,304,272,408,395,394,431,378,395,400,296,334,299,6,351,168,376,352,411,307,325,320,285,295,336,320,319,404,329,330,349,334,293,333,366,323,447,316,15,315,331,358,279,317,14,316,8,285,9,277,329,350,253,374,252,319,318,403,351,6,419,324,318,325,397,367,365,288,435,397,278,344,439,310,272,311,248,195,281,375,273,291,175,396,199,312,311,268,276,283,445,390,373,339,295,282,296,448,449,346,356,264,454,337,336,299,337,338,151,294,278,455,308,292,415,429,358,355,265,340,372,388,390,466,352,346,280,295,442,282,354,19,370,285,441,295,195,248,197,457,440,274,301,300,368,417,351,465,251,301,389,385,380,386,394,395,379,399,412,419,410,436,322,387,373,388,326,2,393,354,370,461,393,164,267,268,302,12,386,374,387,312,268,13,298,293,301,265,446,340,380,385,381,280,330,425,322,426,391,420,429,437,393,391,326,344,440,438,458,459,461,364,434,394,428,396,262,274,354,457,317,316,402,316,315,403,315,314,404,314,313,405,313,421,406,323,366,361,292,306,407,306,291,408,291,287,409,287,432,410,427,434,411,372,264,383,459,309,457,366,352,401,1,274,4,418,421,262,331,294,358,435,433,367,392,289,439,328,462,326,94,2,370,289,305,455,339,254,448,359,255,446,254,253,449,253,252,450,252,256,451,256,341,452,414,413,463,286,441,414,286,258,441,258,257,442,257,259,443,259,260,444,260,467,445,309,459,250,305,289,290,305,290,460,401,376,435,309,250,392,376,411,433,453,341,464,357,453,465,343,357,412,437,343,399,344,360,440,420,437,456,360,420,363,361,401,288,265,372,353,390,339,249,339,448,255];!function(e){let t,n,a,r,s,o;const i={backend:"webgl"},u=468,l="#32EEDB";function c(e,t){return Math.sqrt(Math.pow(e[0]-t[0],2)+Math.pow(e[1]-t[1],2))}function d(e,t,n){const a=new Path2D;a.moveTo(t[0][0],t[0][1]);for(let e=1;e<t.length;e++){const n=t[e];a.lineTo(n[0],n[1])}n&&a.closePath(),e.stroke(a)}const p=async()=>{e.profile((async()=>{const e=await t.estimateFaces({input:s,returnTensors:!1,flipHorizontal:!1,predictIrises:!1});n.drawImage(s,0,0,a,r,0,0,o.width,o.height),e.length>0&&e.forEach((e=>{const t=e.scaledMesh;if(i.triangulateMesh){n.strokeStyle=l,n.lineWidth=.5;for(let e=0;e<VS.length/3;e++){const a=[VS[3*e],VS[3*e+1],VS[3*e+2]].map((e=>t[e]));d(n,a,!0)}}else{n.fillStyle=l;for(let e=0;e<u;e++){const a=t[e][0],r=t[e][1];n.beginPath(),n.arc(a,r,1,0,2*Math.PI),n.fill()}}if(t.length>u){n.strokeStyle="#FF2C35",n.lineWidth=1;const e=t[468],a=c(t[472],t[470]),r=c(t[471],t[469]);if(n.beginPath(),n.ellipse(e[0],e[1],r/2,a/2,0,0,2*Math.PI),n.stroke(),t.length>473){const e=t[473],a=c(t[475],t[477]),r=c(t[476],t[474]);n.beginPath(),n.ellipse(e[0],e[1],r/2,a/2,0,0,2*Math.PI),n.stroke()}}}))})).then((e=>{console.log(e.kernelNames)})),requestAnimationFrame(p)};(async()=>{await e.setBackend(i.backend),await async function(){s=document.getElementById("video");const e=await navigator.mediaDevices.getUserMedia({audio:!1,video:{facingMode:"user"}});return s.srcObject=e,new Promise((e=>{s.onloadedmetadata=()=>{e(s)}}))}(),s.play(),a=s.videoWidth,r=s.videoHeight,s.width=a,s.height=r,o=document.getElementById("output"),o.width=a,o.height=r,n=o.getContext("2d"),n.fillStyle="rgba(255, 0, 0, 0.5)",t=await function(e,t){return void 0===e&&(e=BS.mediapipeFacemesh),void 0===t&&(t={}),aS(this,void 0,void 0,(function(){return rS(this,(function(n){if(e===BS.mediapipeFacemesh)return[2,OS(t)];throw new Error(e+" is not a valid package name.")}))}))}(BS.mediapipeFacemesh,{maxFaces:1,shouldLoadIrisModel:!1,modelUrl:"https://cdn.static.oppenlab.com/weblf/test/facemesh/model.json"}),p()})()}(ch)}));
