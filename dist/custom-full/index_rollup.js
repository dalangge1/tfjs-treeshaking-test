!function(e){"function"==typeof define&&define.amd?define(e):e()}((function(){"use strict";class e{constructor(e,t){this.backend=e,this.dataMover=t,this.data=new WeakMap,this.dataIdsCount=0}get(e){return this.data.has(e)||this.dataMover.moveData(this.backend,e),this.data.get(e)}set(e,t){this.dataIdsCount++,this.data.set(e,t)}has(e){return this.data.has(e)}delete(e){return this.dataIdsCount--,this.data.delete(e)}numDataIds(){return this.dataIdsCount}}class t{refCount(e){return n("refCount")}incRef(e){return n("incRef")}timerAvailable(){return!0}time(e){return n("time")}read(e){return n("read")}readSync(e){return n("readSync")}numDataIds(){return n("numDataIds")}disposeData(e,t){return n("disposeData")}write(e,t,r){return n("write")}move(e,t,r,a,s){return n("move")}memory(){return n("memory")}floatPrecision(){return n("floatPrecision")}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}dispose(){return n("dispose")}}function n(e){throw new Error(`'${e}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`)}function r(e){let t=e.length,n=0,r=0;for(;t>0;)r=Math.random()*t|0,t--,n=e[t],e[t]=e[r],e[r]=n}function a(e,t,n){return Math.max(e,Math.min(t,n))}function s(e){return e%2==0?e:e+1}function o(e){let t=0;for(let n=0;n<e.length;n++)t+=e[n];return t}function i(e,t){if(!e)throw new Error("string"==typeof t?t:t())}function u(e,t,n=""){i(d(e,t),(()=>n+` Shapes ${e} and ${t} must match`))}function l(e){i(null!=e,(()=>"The input to the tensor constructor must be a non-null value."))}function c(e,t=[],n=!1){if(null==t&&(t=[]),Array.isArray(e)||k(e)&&!n)for(let r=0;r<e.length;++r)c(e[r],t,n);else t.push(e);return t}function p(e){if(0===e.length)return 1;let t=e[0];for(let n=1;n<e.length;n++)t*=e[n];return t}function d(e,t){if(e===t)return!0;if(null==e||null==t)return!1;if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}function h(e){return e%1==0}function f(e){const t=Math.ceil(Math.sqrt(e));return[t,Math.ceil(e/t)]}function m(e,t){return t<=e.length?e:e+" ".repeat(t-e.length)}function g(e,t=(e=>0),n){return new Promise(((r,a)=>{let s=0;const o=()=>{if(e())return void r();s++;const i=t(s);null!=n&&s>=n?a():setTimeout(o,i)};o()}))}function y(e,t){let n=1,r=-1;for(let t=0;t<e.length;++t)if(e[t]>=0)n*=e[t];else if(-1===e[t]){if(-1!==r)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${r} and dim ${t}`);r=t}else if(e[t]<0)throw Error(`Shapes can not be < 0. Found ${e[t]} at dim ${t}`);if(-1===r){if(t>0&&t!==n)throw Error(`Size(${t}) must match the product of shape ${e}`);return e}if(0===n)throw Error(`Cannot infer the missing size in [${e}] when there are 0 elements`);if(t%n!=0)throw Error(`The implicit shape can't be a fractional number. Got ${t} / ${n}`);const a=e.slice();return a[r]=t/n,a}function x(e,t){const n=t.length;return i((e=null==e?t.map(((e,t)=>t)):[].concat(e)).every((e=>e>=-n&&e<n)),(()=>`All values in axis param must be in range [-${n}, ${n}) but got axis ${e}`)),i(e.every((e=>h(e))),(()=>`All values in axis param must be integers but got axis ${e}`)),e.map((e=>e<0?n+e:e))}function b(e,t){const n=[],r=[],a=null!=t&&Array.isArray(t)&&0===t.length,s=null==t||a?null:x(t,e).sort();let o=0;for(let t=0;t<e.length;++t){if(null!=s){if(s[o]===t&&1!==e[t])throw new Error(`Can't squeeze axis ${t} since its dim '${e[t]}' is not 1`);(null==s[o]||s[o]>t)&&1===e[t]&&(n.push(e[t]),r.push(t)),s[o]<=t&&o++}1!==e[t]&&(n.push(e[t]),r.push(t))}return{newShape:n,keptDims:r}}function v(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else{if("bool"!==e)throw new Error(`Unknown data type ${e}`);n=new Uint8Array(t)}return n}function w(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else if("bool"===e)n=new Uint8Array(t);else{if("string"!==e)throw new Error(`Unknown data type ${e}`);n=new Array(t)}return n}function E(e,t){for(let n=0;n<e.length;n++){const r=e[n];if(isNaN(r)||!isFinite(r))throw Error(`A tensor of type ${t} being uploaded contains ${r}.`)}}function T(e){return"bool"===e||"complex64"===e||"float32"===e||"int32"===e||"string"===e}function N(e,t){return"complex64"!==t&&(("float32"!==t||"complex64"===e)&&(("int32"!==t||"float32"===e||"complex64"===e)&&("bool"!==t||"bool"!==e)))}function k(e){return e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array}function $(e){if("float32"===e||"int32"===e)return 4;if("complex64"===e)return 8;if("bool"===e)return 1;throw new Error(`Unknown dtype ${e}`)}function I(e){if(null==e)return 0;let t=0;return e.forEach((e=>t+=e.length)),t}function S(e){return"string"==typeof e||e instanceof String}function _(e){return"boolean"==typeof e}function C(e){return"number"==typeof e}function A(e){return Array.isArray(e)?A(e[0]):e instanceof Float32Array?"float32":e instanceof Int32Array||e instanceof Uint8Array?"int32":C(e)?"float32":S(e)?"string":_(e)?"bool":"float32"}function R(e){return!!(e&&e.constructor&&e.call&&e.apply)}function O(e,t){for(let n=t;n<e;++n)if(e%n==0)return n;return e}function M(e){const t=e.length;if(t<2)return[];const n=new Array(t-1);n[t-2]=e[t-1];for(let r=t-3;r>=0;--r)n[r]=n[r+1]*e[r+1];return n}function D(e,t,n,r=!1){const a=new Array;if(1===t.length){const s=t[0]*(r?2:1);for(let t=0;t<s;t++)a[t]=n[e+t]}else{const s=t[0],o=t.slice(1),i=o.reduce(((e,t)=>e*t))*(r?2:1);for(let t=0;t<s;t++)a[t]=D(e+t*i,o,n,r)}return a}function F(e,t,n=!1){if(0===e.length)return t[0];const r=e.reduce(((e,t)=>e*t))*(n?2:1);if(0===r)return[];if(r!==t.length)throw new Error(`[${e}] does not match the input size ${t.length}${n?" for a complex tensor":""}.`);return D(0,e,t,n)}function L(e,t){const n=B(e,t);for(let e=0;e<n.length;e++)n[e]=1;return n}function B(e,t){if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t)return new Uint8Array(e);throw new Error(`Unknown data type ${t}`)}function P(e){e.forEach((t=>{i(Number.isInteger(t)&&t>=0,(()=>`Tensor must have a shape comprised of positive integers but got shape [${e}].`))}))}function V(e,t,n){if(0===t)return 0;if(1===t)return e[0];let r=e[e.length-1];for(let t=0;t<e.length-1;++t)r+=n[t]*e[t];return r}function U(e,t,n){if(0===t)return[];if(1===t)return[e];const r=new Array(t);for(let t=0;t<r.length-1;++t)r[t]=Math.floor(e/n[t]),e-=r[t]*n[t];return r[r.length-1]=e,r}function z(e){return e&&e.then&&"function"==typeof e.then}const W="tfjsflags";class G{constructor(e){this.global=e,this.flags={},this.flagRegistry={},this.urlFlags={},this.getQueryParams=H,this.populateURLFlags()}setPlatform(e,t){null!=this.platform&&console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${t}.`),this.platformName=e,this.platform=t}registerFlag(e,t,n){if(this.flagRegistry[e]={evaluationFn:t,setHook:n},null!=this.urlFlags[e]){const t=this.urlFlags[e];console.warn(`Setting feature override from URL ${e}: ${t}.`),this.set(e,t)}}async getAsync(e){return e in this.flags||(this.flags[e]=await this.evaluateFlag(e)),this.flags[e]}get(e){if(e in this.flags)return this.flags[e];const t=this.evaluateFlag(e);if(z(t))throw new Error(`Flag ${e} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[e]=t,this.flags[e]}getNumber(e){return this.get(e)}getBool(e){return this.get(e)}getFlags(){return this.flags}get features(){return this.flags}set(e,t){if(null==this.flagRegistry[e])throw new Error(`Cannot set flag ${e} as it has not been registered.`);this.flags[e]=t,null!=this.flagRegistry[e].setHook&&this.flagRegistry[e].setHook(t)}evaluateFlag(e){if(null==this.flagRegistry[e])throw new Error(`Cannot evaluate flag '${e}': no evaluation function found.`);return this.flagRegistry[e].evaluationFn()}setFlags(e){this.flags=Object.assign({},e)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(void 0===this.global||void 0===this.global.location||void 0===this.global.location.search)return;const e=this.getQueryParams(this.global.location.search);if(W in e){e.tfjsflags.split(",").forEach((e=>{const[t,n]=e.split(":");this.urlFlags[t]=function(e,t){if("true"===(t=t.toLowerCase())||"false"===t)return"true"===t;if(""+ +t===t)return+t;throw new Error(`Could not parse value flag value ${t} for flag ${e}.`)}(t,n)}))}}}function H(e){const t={};return e.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,((e,...n)=>(function(e,t,n){e[decodeURIComponent(t)]=decodeURIComponent(n||"")}(t,n[0],n[1]),n.join("=")))),t}function j(){return q}let K,q=null;function X(){if(null==K){let e;if("undefined"!=typeof window)e=window;else if("undefined"!=typeof global)e=global;else if("undefined"!=typeof process)e=process;else{if("undefined"==typeof self)throw new Error("Could not find a global object");e=self}K=e}return K}function Y(e,t){const n=function(){const e=X();return null==e._tfGlobals&&(e._tfGlobals=new Map),e._tfGlobals}();if(n.has(e))return n.get(e);{const r=t();return n.set(e,r),n.get(e)}}const Q="Abs",Z="Acos",J="Acosh",ee="Add",te="AddN",ne="ArgMax",re="ArgMin",ae="Asin",se="Asinh",oe="Atan",ie="Atanh",ue="Atan2",le="AvgPool",ce="AvgPool3D",pe="BatchMatMul",de="BatchToSpaceND",he="Bincount",fe="Cast",me="Ceil",ge="ClipByValue",ye="Complex",xe="ComplexAbs",be="Concat",ve="Conv2D",we="Conv2DBackpropFilter",Ee="Conv2DBackpropInput",Te="Conv3D",Ne="Conv3DBackpropInputV2",ke="Cosh",$e="Cumsum",Ie="CropAndResize",Se="DenseBincount",_e="DepthToSpace",Ce="DepthwiseConv2dNative",Ae="DepthwiseConv2dNativeBackpropFilter",Re="DepthwiseConv2dNativeBackpropInput",Oe="Diag",Me="Dilation2D",De="RealDiv",Fe="Einsum",Le="Elu",Be="Equal",Pe="Exp",Ve="ExpandDims",Ue="Expm1",ze="Fill",We="FlipLeftRight",Ge="Floor",He="FloorDiv",je="FusedBatchNorm",Ke="GatherV2",qe="GatherNd",Xe="Greater",Ye="GreaterEqual",Qe="Identity",Ze="IFFT",Je="Imag",et="IsFinite",tt="IsInf",nt="IsNan",rt="LeakyRelu",at="Less",st="LessEqual",ot="LinSpace",it="Log",ut="Log1p",lt="LogicalAnd",ct="LogicalNot",pt="LogicalOr",dt="Maximum",ht="MaxPool",ft="MaxPool3D",mt="MaxPoolWithArgmax",gt="Mean",yt="Minimum",xt="MirrorPad",bt="Multinomial",vt="Multiply",wt="Neg",Et="NotEqual",Tt="NonMaxSuppressionV3",Nt="NonMaxSuppressionV4",kt="NonMaxSuppressionV5",$t="OnesLike",It="OneHot",St="Pack",_t="PadV2",Ct="Prelu",At="Prod",Rt="Range",Ot="Real",Mt="Reciprocal",Dt="Relu",Ft="Reshape",Lt="ResizeNearestNeighbor",Bt="ResizeBilinear",Pt="Relu6",Vt="Reverse",Ut="Round",zt="Rsqrt",Wt="ScatterNd",Gt="Select",Ht="Selu",jt="Slice",Kt="Sinh",qt="Sign",Xt="Sigmoid",Yt="Softplus",Qt="Sqrt",Zt="Sum",Jt="SpaceToBatchND",en="SplitV",tn="Softmax",nn="SparseFillEmptyRows",rn="SparseReshape",an="SparseSegmentMean",sn="SparseSegmentSum",on="SparseToDense",un="SquaredDifference",ln="StridedSlice",cn="StringNGrams",pn="StringSplit",dn="StringToHashBucketFast",hn="Sub",fn="Tanh",mn="Tile",gn="TopK",yn="Transform",xn="Transpose",bn="Unique",vn="Unpack",wn="UnsortedSegmentSum",En="ZerosLike",Tn="Step",Nn="FromPixels",kn="RotateWithOffset",$n="_FusedMatMul",In="FusedConv2D",Sn="FusedDepthwiseConv2D",_n=Y("kernelRegistry",(()=>new Map)),Cn=Y("gradRegistry",(()=>new Map));function An(e,t){const n=Dn(e,t);return _n.get(n)}function Rn(e){return Cn.get(e)}function On(e){const t=_n.entries(),n=[];for(;;){const{done:r,value:a}=t.next();if(r)break;const[s,o]=a,[i]=s.split("_");i===e&&n.push(o)}return n}function Mn(e){const{kernelName:t,backendName:n}=e,r=Dn(t,n);_n.has(r)&&console.warn(`The kernel '${t}' for backend '${n}' is already registered`),_n.set(r,e)}function Dn(e,t){return`${t}_${e}`}var Fn=Bn,Ln=null;try{Ln=new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,1,13,2,96,0,1,127,96,4,127,127,127,127,1,127,3,7,6,0,1,1,1,1,1,6,6,1,127,1,65,0,11,7,50,6,3,109,117,108,0,1,5,100,105,118,95,115,0,2,5,100,105,118,95,117,0,3,5,114,101,109,95,115,0,4,5,114,101,109,95,117,0,5,8,103,101,116,95,104,105,103,104,0,0,10,191,1,6,4,0,35,0,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,126,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,127,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,128,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,129,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,130,34,4,66,32,135,167,36,0,32,4,167,11])),{}).exports}catch(e){}function Bn(e,t,n){this.low=0|e,this.high=0|t,this.unsigned=!!n}function Pn(e){return!0===(e&&e.__isLong__)}Bn.prototype.__isLong__,Object.defineProperty(Bn.prototype,"__isLong__",{value:!0}),Bn.isLong=Pn;var Vn={},Un={};function zn(e,t){var n,r,a;return t?(a=0<=(e>>>=0)&&e<256)&&(r=Un[e])?r:(n=Gn(e,(0|e)<0?-1:0,!0),a&&(Un[e]=n),n):(a=-128<=(e|=0)&&e<128)&&(r=Vn[e])?r:(n=Gn(e,e<0?-1:0,!1),a&&(Vn[e]=n),n)}function Wn(e,t){if(isNaN(e))return t?Jn:Zn;if(t){if(e<0)return Jn;if(e>=Xn)return ar}else{if(e<=-Yn)return sr;if(e+1>=Yn)return rr}return e<0?Wn(-e,t).neg():Gn(e%qn|0,e/qn|0,t)}function Gn(e,t,n){return new Bn(e,t,n)}Bn.fromInt=zn,Bn.fromNumber=Wn,Bn.fromBits=Gn;var Hn=Math.pow;function jn(e,t,n){if(0===e.length)throw Error("empty string");if("NaN"===e||"Infinity"===e||"+Infinity"===e||"-Infinity"===e)return Zn;if("number"==typeof t?(n=t,t=!1):t=!!t,(n=n||10)<2||36<n)throw RangeError("radix");var r;if((r=e.indexOf("-"))>0)throw Error("interior hyphen");if(0===r)return jn(e.substring(1),t,n).neg();for(var a=Wn(Hn(n,8)),s=Zn,o=0;o<e.length;o+=8){var i=Math.min(8,e.length-o),u=parseInt(e.substring(o,o+i),n);if(i<8){var l=Wn(Hn(n,i));s=s.mul(l).add(Wn(u))}else s=(s=s.mul(a)).add(Wn(u))}return s.unsigned=t,s}function Kn(e,t){return"number"==typeof e?Wn(e,t):"string"==typeof e?jn(e,t):Gn(e.low,e.high,"boolean"==typeof t?t:e.unsigned)}Bn.fromString=jn,Bn.fromValue=Kn;var qn=4294967296,Xn=qn*qn,Yn=Xn/2,Qn=zn(1<<24),Zn=zn(0);Bn.ZERO=Zn;var Jn=zn(0,!0);Bn.UZERO=Jn;var er=zn(1);Bn.ONE=er;var tr=zn(1,!0);Bn.UONE=tr;var nr=zn(-1);Bn.NEG_ONE=nr;var rr=Gn(-1,2147483647,!1);Bn.MAX_VALUE=rr;var ar=Gn(-1,-1,!0);Bn.MAX_UNSIGNED_VALUE=ar;var sr=Gn(0,-2147483648,!1);Bn.MIN_VALUE=sr;var or=Bn.prototype;or.toInt=function(){return this.unsigned?this.low>>>0:this.low},or.toNumber=function(){return this.unsigned?(this.high>>>0)*qn+(this.low>>>0):this.high*qn+(this.low>>>0)},or.toString=function(e){if((e=e||10)<2||36<e)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative()){if(this.eq(sr)){var t=Wn(e),n=this.div(t),r=n.mul(t).sub(this);return n.toString(e)+r.toInt().toString(e)}return"-"+this.neg().toString(e)}for(var a=Wn(Hn(e,6),this.unsigned),s=this,o="";;){var i=s.div(a),u=(s.sub(i.mul(a)).toInt()>>>0).toString(e);if((s=i).isZero())return u+o;for(;u.length<6;)u="0"+u;o=""+u+o}},or.getHighBits=function(){return this.high},or.getHighBitsUnsigned=function(){return this.high>>>0},or.getLowBits=function(){return this.low},or.getLowBitsUnsigned=function(){return this.low>>>0},or.getNumBitsAbs=function(){if(this.isNegative())return this.eq(sr)?64:this.neg().getNumBitsAbs();for(var e=0!=this.high?this.high:this.low,t=31;t>0&&0==(e&1<<t);t--);return 0!=this.high?t+33:t+1},or.isZero=function(){return 0===this.high&&0===this.low},or.eqz=or.isZero,or.isNegative=function(){return!this.unsigned&&this.high<0},or.isPositive=function(){return this.unsigned||this.high>=0},or.isOdd=function(){return 1==(1&this.low)},or.isEven=function(){return 0==(1&this.low)},or.equals=function(e){return Pn(e)||(e=Kn(e)),(this.unsigned===e.unsigned||this.high>>>31!=1||e.high>>>31!=1)&&(this.high===e.high&&this.low===e.low)},or.eq=or.equals,or.notEquals=function(e){return!this.eq(e)},or.neq=or.notEquals,or.ne=or.notEquals,or.lessThan=function(e){return this.comp(e)<0},or.lt=or.lessThan,or.lessThanOrEqual=function(e){return this.comp(e)<=0},or.lte=or.lessThanOrEqual,or.le=or.lessThanOrEqual,or.greaterThan=function(e){return this.comp(e)>0},or.gt=or.greaterThan,or.greaterThanOrEqual=function(e){return this.comp(e)>=0},or.gte=or.greaterThanOrEqual,or.ge=or.greaterThanOrEqual,or.compare=function(e){if(Pn(e)||(e=Kn(e)),this.eq(e))return 0;var t=this.isNegative(),n=e.isNegative();return t&&!n?-1:!t&&n?1:this.unsigned?e.high>>>0>this.high>>>0||e.high===this.high&&e.low>>>0>this.low>>>0?-1:1:this.sub(e).isNegative()?-1:1},or.comp=or.compare,or.negate=function(){return!this.unsigned&&this.eq(sr)?sr:this.not().add(er)},or.neg=or.negate,or.add=function(e){Pn(e)||(e=Kn(e));var t=this.high>>>16,n=65535&this.high,r=this.low>>>16,a=65535&this.low,s=e.high>>>16,o=65535&e.high,i=e.low>>>16,u=0,l=0,c=0,p=0;return c+=(p+=a+(65535&e.low))>>>16,l+=(c+=r+i)>>>16,u+=(l+=n+o)>>>16,u+=t+s,Gn((c&=65535)<<16|(p&=65535),(u&=65535)<<16|(l&=65535),this.unsigned)},or.subtract=function(e){return Pn(e)||(e=Kn(e)),this.add(e.neg())},or.sub=or.subtract,or.multiply=function(e){if(this.isZero())return Zn;if(Pn(e)||(e=Kn(e)),Ln)return Gn(Ln.mul(this.low,this.high,e.low,e.high),Ln.get_high(),this.unsigned);if(e.isZero())return Zn;if(this.eq(sr))return e.isOdd()?sr:Zn;if(e.eq(sr))return this.isOdd()?sr:Zn;if(this.isNegative())return e.isNegative()?this.neg().mul(e.neg()):this.neg().mul(e).neg();if(e.isNegative())return this.mul(e.neg()).neg();if(this.lt(Qn)&&e.lt(Qn))return Wn(this.toNumber()*e.toNumber(),this.unsigned);var t=this.high>>>16,n=65535&this.high,r=this.low>>>16,a=65535&this.low,s=e.high>>>16,o=65535&e.high,i=e.low>>>16,u=65535&e.low,l=0,c=0,p=0,d=0;return p+=(d+=a*u)>>>16,c+=(p+=r*u)>>>16,p&=65535,c+=(p+=a*i)>>>16,l+=(c+=n*u)>>>16,c&=65535,l+=(c+=r*i)>>>16,c&=65535,l+=(c+=a*o)>>>16,l+=t*u+n*i+r*o+a*s,Gn((p&=65535)<<16|(d&=65535),(l&=65535)<<16|(c&=65535),this.unsigned)},or.mul=or.multiply,or.divide=function(e){if(Pn(e)||(e=Kn(e)),e.isZero())throw Error("division by zero");var t,n,r;if(Ln)return this.unsigned||-2147483648!==this.high||-1!==e.low||-1!==e.high?Gn((this.unsigned?Ln.div_u:Ln.div_s)(this.low,this.high,e.low,e.high),Ln.get_high(),this.unsigned):this;if(this.isZero())return this.unsigned?Jn:Zn;if(this.unsigned){if(e.unsigned||(e=e.toUnsigned()),e.gt(this))return Jn;if(e.gt(this.shru(1)))return tr;r=Jn}else{if(this.eq(sr))return e.eq(er)||e.eq(nr)?sr:e.eq(sr)?er:(t=this.shr(1).div(e).shl(1)).eq(Zn)?e.isNegative()?er:nr:(n=this.sub(e.mul(t)),r=t.add(n.div(e)));if(e.eq(sr))return this.unsigned?Jn:Zn;if(this.isNegative())return e.isNegative()?this.neg().div(e.neg()):this.neg().div(e).neg();if(e.isNegative())return this.div(e.neg()).neg();r=Zn}for(n=this;n.gte(e);){t=Math.max(1,Math.floor(n.toNumber()/e.toNumber()));for(var a=Math.ceil(Math.log(t)/Math.LN2),s=a<=48?1:Hn(2,a-48),o=Wn(t),i=o.mul(e);i.isNegative()||i.gt(n);)i=(o=Wn(t-=s,this.unsigned)).mul(e);o.isZero()&&(o=er),r=r.add(o),n=n.sub(i)}return r},or.div=or.divide,or.modulo=function(e){return Pn(e)||(e=Kn(e)),Ln?Gn((this.unsigned?Ln.rem_u:Ln.rem_s)(this.low,this.high,e.low,e.high),Ln.get_high(),this.unsigned):this.sub(this.div(e).mul(e))},or.mod=or.modulo,or.rem=or.modulo,or.not=function(){return Gn(~this.low,~this.high,this.unsigned)},or.and=function(e){return Pn(e)||(e=Kn(e)),Gn(this.low&e.low,this.high&e.high,this.unsigned)},or.or=function(e){return Pn(e)||(e=Kn(e)),Gn(this.low|e.low,this.high|e.high,this.unsigned)},or.xor=function(e){return Pn(e)||(e=Kn(e)),Gn(this.low^e.low,this.high^e.high,this.unsigned)},or.shiftLeft=function(e){return Pn(e)&&(e=e.toInt()),0==(e&=63)?this:e<32?Gn(this.low<<e,this.high<<e|this.low>>>32-e,this.unsigned):Gn(0,this.low<<e-32,this.unsigned)},or.shl=or.shiftLeft,or.shiftRight=function(e){return Pn(e)&&(e=e.toInt()),0==(e&=63)?this:e<32?Gn(this.low>>>e|this.high<<32-e,this.high>>e,this.unsigned):Gn(this.high>>e-32,this.high>=0?0:-1,this.unsigned)},or.shr=or.shiftRight,or.shiftRightUnsigned=function(e){if(Pn(e)&&(e=e.toInt()),0===(e&=63))return this;var t=this.high;return e<32?Gn(this.low>>>e|t<<32-e,t>>>e,this.unsigned):Gn(32===e?t:t>>>e-32,0,this.unsigned)},or.shru=or.shiftRightUnsigned,or.shr_u=or.shiftRightUnsigned,or.toSigned=function(){return this.unsigned?Gn(this.low,this.high,!1):this},or.toUnsigned=function(){return this.unsigned?this:Gn(this.low,this.high,!0)},or.toBytes=function(e){return e?this.toBytesLE():this.toBytesBE()},or.toBytesLE=function(){var e=this.high,t=this.low;return[255&t,t>>>8&255,t>>>16&255,t>>>24,255&e,e>>>8&255,e>>>16&255,e>>>24]},or.toBytesBE=function(){var e=this.high,t=this.low;return[e>>>24,e>>>16&255,e>>>8&255,255&e,t>>>24,t>>>16&255,t>>>8&255,255&t]},Bn.fromBytes=function(e,t,n){return n?Bn.fromBytesLE(e,t):Bn.fromBytesBE(e,t)},Bn.fromBytesLE=function(e,t){return new Bn(e[0]|e[1]<<8|e[2]<<16|e[3]<<24,e[4]|e[5]<<8|e[6]<<16|e[7]<<24,t)},Bn.fromBytesBE=function(e,t){return new Bn(e[4]<<24|e[5]<<16|e[6]<<8|e[7],e[0]<<24|e[1]<<16|e[2]<<8|e[3],t)};const ir=Fn||Object.freeze(Object.assign(Object.create(null),Fn,{default:Fn}));function ur(e){return ir.fromString(e,!0,16)}const lr=ur("c3a5c85c97cb3127"),cr=ur("b492b66fbe98f273"),pr=ur("9ae16a3b2f90404f");function dr(e){return e.xor(e.shru(47))}function hr(e,t,n){const r=e.slice(t,t+n);return ir.fromBytes(Array.from(r),!0,!0)}function fr(e,t){return hr(e,t,8)}function mr(e,t){return hr(e,t,4)}function gr(e,t){return 0===t?e:e.shru(t).or(e.shl(64-t))}function yr(e,t,n=ur("9ddfea08eb382d69")){let r=e.xor(t).mul(n);r=r.xor(r.shru(47));let a=t.xor(r).mul(n);return a=a.xor(a.shru(47)),a=a.mul(n),a}function xr(e,t,n,r){return function(e,t,n,r,a,s){a=a.add(e),s=gr(s.add(a).add(r),21);const o=a;return a=(a=a.add(t)).add(n),s=s.add(gr(a,44)),[a.add(r),s.add(o)]}(fr(e,t),fr(e,t+8),fr(e,t+16),fr(e,t+24),n,r)}function br(e,t=e.length){const n=ir.fromNumber(81,!0);if(t<=32)return t<=16?function(e,t=e.length){if(t>=8){const n=pr.add(2*t),r=fr(e,0).add(pr),a=fr(e,t-8);return yr(gr(a,37).mul(n).add(r),gr(r,25).add(a).mul(n),n)}if(t>=4){const n=pr.add(2*t);return yr(mr(e,0).shl(3).add(t),mr(e,t-4),n)}if(t>0){const n=e[0]+(e[t>>1]<<8),r=t+(e[t-1]<<2);return dr(pr.mul(n).xor(lr.mul(r))).mul(pr)}return pr}(e,t):function(e,t=e.length){const n=pr.add(2*t),r=fr(e,0).mul(cr),a=fr(e,8),s=fr(e,t-8).mul(n),o=fr(e,t-16).mul(pr);return yr(gr(r.add(a),43).add(gr(s,30)).add(o),r.add(gr(a.add(pr),18)).add(s),n)}(e,t);if(t<=64)return function(e,t=e.length){const n=pr.add(2*t),r=fr(e,0).mul(pr),a=fr(e,8),s=fr(e,t-8).mul(n),o=fr(e,t-16).mul(pr),i=gr(r.add(a),43).add(gr(s,30)).add(o),u=yr(i,r.add(gr(a.add(pr),18)).add(s),n),l=fr(e,16).mul(n),c=fr(e,24),p=i.add(fr(e,t-32)).mul(n),d=u.add(fr(e,t-24)).mul(n);return yr(gr(l.add(c),43).add(gr(p,30)).add(d),l.add(gr(c.add(r),18)).add(p),n)}(e,t);let r=n,a=n.mul(cr).add(113),s=dr(a.mul(pr).add(113)).mul(pr),o=[ir.UZERO,ir.UZERO],i=[ir.UZERO,ir.UZERO];r=r.mul(pr).add(fr(e,0));let u=0;const l=64*(t-1>>6),c=l+(t-1&63)-63;do{r=gr(r.add(a).add(o[0]).add(fr(e,u+8)),37).mul(cr),a=gr(a.add(o[1]).add(fr(e,u+48)),42).mul(cr),r=r.xor(i[1]),a=a.add(o[0]).add(fr(e,u+40)),s=gr(s.add(i[0]),33).mul(cr),o=xr(e,u,o[1].mul(cr),r.add(i[0])),i=xr(e,u+32,s.add(i[1]),a.add(fr(e,u+16))),[s,r]=[r,s],u+=64}while(u!==l);const p=cr.add(s.and(255).shl(1));return u=c,i[0]=i[0].add(t-1&63),o[0]=o[0].add(i[0]),i[0]=i[0].add(o[0]),r=gr(r.add(a).add(o[0]).add(fr(e,u+8)),37).mul(p),a=gr(a.add(o[1]).add(fr(e,u+48)),42).mul(p),r=r.xor(i[1].mul(9)),a=a.add(o[0].mul(9).add(fr(e,u+40))),s=gr(s.add(i[0]),33).mul(p),o=xr(e,u,o[1].mul(p),r.add(i[0])),i=xr(e,u+32,s.add(i[1]),a.add(fr(e,u+16))),[s,r]=[r,s],yr(yr(o[0],i[0],p).add(dr(a).mul(lr)).add(s),yr(o[1],i[1],p).add(r),p)}function vr(e,t){return"string"===t?Tr(e):wr([e],t)}function wr(e,t){if("string"===t)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(e)&&(e=c(e)),j().getBool("DEBUG")&&E(e,t),function(e,t){return e instanceof Float32Array&&"float32"===t||e instanceof Int32Array&&"int32"===t||e instanceof Uint8Array&&"bool"===t}(e,t))return e;if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t){const t=new Uint8Array(e.length);for(let n=0;n<t.length;++n)0!==Math.round(e[n])&&(t[n]=1);return t}throw new Error(`Unknown data type ${t}`)}function Er(){return j().platform.now()}function Tr(e,t="utf-8"){return t=t||"utf-8",j().platform.encode(e,t)}function Nr(e,t="utf-8"){return t=t||"utf-8",j().platform.decode(e,t)}var kr=Object.freeze({__proto__:null,createScalarValue:vr,toTypedArray:wr,now:Er,fetch:function(e,t){return j().platform.fetch(e,t)},encodeString:Tr,decodeString:Nr,shuffle:r,shuffleCombo:function(e,t){if(e.length!==t.length)throw new Error(`Array sizes must match to be shuffled together First array length was ${e.length}Second array length was ${t.length}`);let n,r,a=e.length,s=0;for(;a>0;)s=Math.random()*a|0,a--,n=e[a],r=t[a],e[a]=e[s],t[a]=t[s],e[s]=n,t[s]=r},clamp:a,nearestLargerEven:s,sum:o,randUniform:function(e,t){const n=Math.random();return t*n+(1-n)*e},distSquared:function(e,t){let n=0;for(let r=0;r<e.length;r++){const a=Number(e[r])-Number(t[r]);n+=a*a}return n},assert:i,assertShapesMatch:u,assertNonNull:l,flatten:c,sizeFromShape:p,isScalarShape:function(e){return 0===e.length},arraysEqual:d,isInt:h,tanh:function(e){if(null!=Math.tanh)return Math.tanh(e);if(e===1/0)return 1;if(e===-1/0)return-1;{const t=Math.exp(2*e);return(t-1)/(t+1)}},sizeToSquarishShape:f,createShuffledIndices:function(e){const t=new Uint32Array(e);for(let n=0;n<e;++n)t[n]=n;return r(t),t},rightPad:m,repeatedTry:g,inferFromImplicitShape:y,parseAxisParam:x,squeezeShape:b,getTypedArrayFromDType:v,getArrayFromDType:w,checkConversionForErrors:E,isValidDtype:T,hasEncodingLoss:N,isTypedArray:k,bytesPerElement:$,bytesFromStringArray:I,isString:S,isBoolean:_,isNumber:C,inferDtype:A,isFunction:R,nearestDivisor:O,computeStrides:M,toNestedArray:F,makeOnesTypedArray:L,makeZerosTypedArray:B,makeZerosNestedTypedArray:function(e,t){const n=e.reduce(((e,t)=>e*t),1);if(null==t||"float32"===t)return F(e,new Float32Array(n));if("int32"===t)return F(e,new Int32Array(n));if("bool"===t)return F(e,new Uint8Array(n));throw new Error(`Unknown data type ${t}`)},assertNonNegativeIntegerDimensions:P,locToIndex:V,indexToLoc:U,isPromise:z,hexToLong:ur,fingerPrint64:br});class $r{constructor(e,t){this.backendTimer=e,this.logger=t,null==t&&(this.logger=new Sr)}profileKernel(e,t,n){let r;const a=()=>{r=n()};let s;const o=Er();if(this.backendTimer.timerAvailable())s=this.backendTimer.time(a);else{a();for(const e of r)e.dataSync();s=Promise.resolve({kernelMs:Er()-o})}if(j().getBool("CHECK_COMPUTATION_FOR_ERRORS"))for(let t=0;t<r.length;t++){const n=r[t];n.data().then((t=>{Ir(t,n.dtype,e)}))}return{kernelName:e,outputs:r,inputs:t,timeMs:s.then((e=>e.kernelMs)),extraInfo:s.then((e=>null!=e.getExtraProfileInfo?e.getExtraProfileInfo():""))}}logKernelProfile(e){const{kernelName:t,outputs:n,timeMs:r,inputs:a,extraInfo:s}=e;n.forEach((e=>{Promise.all([e.data(),r,s]).then((n=>{this.logger.logKernelProfile(t,e,n[0],n[1],a,n[2])}))}))}}function Ir(e,t,n){if("float32"!==t)return!1;for(let t=0;t<e.length;t++){const r=e[t];if(isNaN(r)||!isFinite(r))return console.warn(`Found ${r} in the result of '${n}'`),!0}return!1}class Sr{logKernelProfile(e,t,n,r,a,s){const o="number"==typeof r?m(`${r}ms`,9):r.error,i=m(e,25),u=t.rank,l=t.size,c=m(t.shape.toString(),14);let p="";for(const e in a){const n=a[e];if(null!=n){const r=n.shape||t.shape,a=r.length;p+=`${e}: ${a}D ${a>0?r:""} `}}console.log(`%c${i}\t%c${o}\t%c${u}D ${c}\t%c${l}\t%c${p}\t%c${s}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}function _r(e,t,n,r){const a=M(t),s=function(e,t,n,r){const a=p(t),s=r[r.length-1],o=new Array(s).fill(0),i=t.length,u="complex64"===n?Or(e):e;if(i>1)for(let e=0;e<a/s;e++){const t=e*s;for(let e=0;e<s;e++)o[e]=Math.max(o[e],Cr(u[t+e],0,n).length)}return o}(e,t,n,a),o=t.length,i=Rr(e,t,n,a,s),u=["Tensor"];return r&&(u.push(`  dtype: ${n}`),u.push(`  rank: ${o}`),u.push(`  shape: [${t}]`),u.push("  values:")),u.push(i.map((e=>"    "+e)).join("\n")),u.join("\n")}function Cr(e,t,n){let r;return r=Array.isArray(e)?`${parseFloat(e[0].toFixed(7))} + ${parseFloat(e[1].toFixed(7))}j`:S(e)?`'${e}'`:"bool"===n?Ar(e):parseFloat(e.toFixed(7)).toString(),m(r,t)}function Ar(e){return 0===e?"false":"true"}function Rr(e,t,n,r,a,s=!0){const o="complex64"===n?2:1,i=t[0],u=t.length;if(0===u){if("complex64"===n){return[Cr(Or(e)[0],0,n)]}return"bool"===n?[Ar(e[0])]:[e[0].toString()]}if(1===u){if(i>20){const t=3*o;let r=Array.from(e.slice(0,t)),s=Array.from(e.slice((i-3)*o,i*o));return"complex64"===n&&(r=Or(r),s=Or(s)),["["+r.map(((e,t)=>Cr(e,a[t],n))).join(", ")+", ..., "+s.map(((e,t)=>Cr(e,a[i-3+t],n))).join(", ")+"]"]}return["["+("complex64"===n?Or(e):Array.from(e)).map(((e,t)=>Cr(e,a[t],n))).join(", ")+"]"]}const l=t.slice(1),c=r.slice(1),p=r[0]*o,d=[];if(i>20){for(let t=0;t<3;t++){const r=t*p,s=r+p;d.push(...Rr(e.slice(r,s),l,n,c,a,!1))}d.push("...");for(let t=i-3;t<i;t++){const r=t*p,s=r+p;d.push(...Rr(e.slice(r,s),l,n,c,a,t===i-1))}}else for(let t=0;t<i;t++){const r=t*p,s=r+p;d.push(...Rr(e.slice(r,s),l,n,c,a,t===i-1))}const h=2===u?",":"";d[0]="["+d[0]+h;for(let e=1;e<d.length-1;e++)d[e]=" "+d[e]+h;let f=",\n";for(let e=2;e<u;e++)f+="\n";return d[d.length-1]=" "+d[d.length-1]+"]"+(s?"":f),d}function Or(e){const t=[];for(let n=0;n<e.length;n+=2)t.push([e[n],e[n+1]]);return t}class Mr{constructor(e,t,n){if(this.dtype=t,this.shape=e.slice(),this.size=p(e),null!=n){const e=n.length;i(e===this.size,(()=>`Length of values '${e}' does not match the size inferred by the shape '${this.size}'.`))}if("complex64"===t)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=n||w(t,this.size),this.strides=M(e)}set(e,...t){0===t.length&&(t=[0]),i(t.length===this.rank,(()=>`The number of provided coordinates (${t.length}) must match the rank (${this.rank})`));const n=this.locToIndex(t);this.values[n]=e}get(...e){0===e.length&&(e=[0]);let t=0;for(const n of e){if(n<0||n>=this.shape[t]){const t=`Requested out of range element at ${e}.   Buffer shape=${this.shape}`;throw new Error(t)}t++}let n=e[e.length-1];for(let t=0;t<e.length-1;++t)n+=this.strides[t]*e[t];return this.values[n]}locToIndex(e){if(0===this.rank)return 0;if(1===this.rank)return e[0];let t=e[e.length-1];for(let n=0;n<e.length-1;++n)t+=this.strides[n]*e[n];return t}indexToLoc(e){if(0===this.rank)return[];if(1===this.rank)return[e];const t=new Array(this.shape.length);for(let n=0;n<t.length-1;++n)t[n]=Math.floor(e/this.strides[n]),e-=t[n]*this.strides[n];return t[t.length-1]=e,t}get rank(){return this.shape.length}toTensor(){return Dr().makeTensor(this.values,this.shape,this.dtype)}}let Dr=null,Fr=null,Lr=null;class Br{constructor(e,t,n,r){this.kept=!1,this.isDisposedInternal=!1,this.shape=e.slice(),this.dtype=t||"float32",this.size=p(e),this.strides=M(e),this.dataId=n,this.id=r,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}async buffer(){const e=await this.data();return Fr.buffer(this.shape,this.dtype,e)}bufferSync(){return Fr.buffer(this.shape,this.dtype,this.dataSync())}async array(){const e=await this.data();return F(this.shape,e,"complex64"===this.dtype)}arraySync(){return F(this.shape,this.dataSync(),"complex64"===this.dtype)}async data(){this.throwIfDisposed();const e=Dr().read(this.dataId);if("string"===this.dtype){const t=await e;try{return t.map((e=>Nr(e)))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return e}dataSync(){this.throwIfDisposed();const e=Dr().readSync(this.dataId);if("string"===this.dtype)try{return e.map((e=>Nr(e)))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return e}async bytes(){this.throwIfDisposed();const e=await Dr().read(this.dataId);return"string"===this.dtype?e:new Uint8Array(e.buffer)}dispose(){this.isDisposed||(Dr().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(e=!1){return Fr.print(this,e)}clone(){return this.throwIfDisposed(),Fr.clone(this)}toString(e=!1){return _r(this.dataSync(),this.shape,this.dtype,e)}cast(e){return this.throwIfDisposed(),Fr.cast(this,e)}variable(e=!0,t,n){return this.throwIfDisposed(),Dr().makeVariable(this,e,t,n)}}Object.defineProperty(Br,Symbol.hasInstance,{value:e=>!!e&&null!=e.data&&null!=e.dataSync&&null!=e.throwIfDisposed}),Y("Tensor",(()=>Br));class Pr extends Br{constructor(e,t,n,r){super(e.shape,e.dtype,e.dataId,r),this.trainable=t,this.name=n}assign(e){if(e.dtype!==this.dtype)throw new Error(`dtype of the new value (${e.dtype}) and previous value (${this.dtype}) must match`);if(!d(e.shape,this.shape))throw new Error(`shape of the new value (${e.shape}) and previous value (${this.shape}) must match`);Dr().disposeTensor(this),this.dataId=e.dataId,Dr().incRef(this,null)}dispose(){Dr().disposeVariable(this),this.isDisposedInternal=!0}}var Vr,Ur,zr,Wr,Gr;Object.defineProperty(Pr,Symbol.hasInstance,{value:e=>e instanceof Br&&null!=e.assign&&e.assign instanceof Function}),function(e){e.R0="R0",e.R1="R1",e.R2="R2",e.R3="R3",e.R4="R4",e.R5="R5",e.R6="R6"}(Vr||(Vr={})),function(e){e.float32="float32",e.int32="int32",e.bool="int32",e.complex64="complex64"}(Ur||(Ur={})),function(e){e.float32="float32",e.int32="int32",e.bool="bool",e.complex64="complex64"}(zr||(zr={})),function(e){e.float32="float32",e.int32="float32",e.bool="float32",e.complex64="complex64"}(Wr||(Wr={})),function(e){e.float32="complex64",e.int32="complex64",e.bool="complex64",e.complex64="complex64"}(Gr||(Gr={}));const Hr={float32:Wr,int32:Ur,bool:zr,complex64:Gr};function jr(e,t){if("string"===e||"string"===t){if("string"===e&&"string"===t)return"string";throw new Error(`Can not upcast ${e} with ${t}`)}return Hr[e][t]}function Kr(e){return jr(e,"int32")}function qr(e,t){if(e.dtype===t.dtype)return[e,t];const n=jr(e.dtype,t.dtype);return[e.cast(n),t.cast(n)]}function Xr(e,t){i(e.dtype===t.dtype,(()=>`The dtypes of the first(${e.dtype}) and second(${t.dtype}) input must match`))}function Yr(e){const t=[];return Qr(e,t,new Set),t}function Qr(e,t,n){if(null==e)return;if(e instanceof Br)return void t.push(e);if(r=e,!Array.isArray(r)&&"object"!=typeof r)return;var r;const a=e;for(const e in a){const r=a[e];n.has(r)||(n.add(r),Qr(r,t,n))}}var Zr=Object.freeze({__proto__:null,makeTypesMatch:qr,assertTypesMatch:Xr,isTensorInList:function(e,t){return t.some((t=>t.id===e.id))},getTensorsInContainer:Yr});function Jr(e){return null!=e.kernelName}class ea{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null,get kernelNames(){return Array.from(new Set(this.kernels.map((e=>e.name))))}}}dispose(){for(const e in this.registeredVariables)this.registeredVariables[e].dispose()}}class ta{constructor(e){this.ENV=e,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new ea}async ready(){if(null!=this.pendingBackendInit)return this.pendingBackendInit.then((()=>{}));if(null!=this.backendInstance)return;const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t];if(await this.initializeBackend(n).success)return void await this.setBackend(n)}throw new Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(null!=this.pendingBackendInit)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(null==this.backendInstance){const{name:e,asyncInit:t}=this.initializeBackendsAndReturnBest();if(t)throw new Error(`The highest priority backend '${e}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(e)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(e){if(!(e in this.registry)){if(!(e in this.registryFactory))return null;{const{asyncInit:t}=this.initializeBackend(e);if(t)return null}}return this.registry[e]}findBackendFactory(e){return e in this.registryFactory?this.registryFactory[e].factory:null}registerBackend(e,t,n=1){return e in this.registryFactory?(console.warn(`${e} backend was already registered. Reusing existing backend factory.`),!1):(this.registryFactory[e]={factory:t,priority:n},!0)}async setBackend(e){if(null==this.registryFactory[e])throw new Error(`Backend name '${e}' not found in registry`);if(this.backendName=e,null==this.registry[e]){this.backendInstance=null;const{success:t,asyncInit:n}=this.initializeBackend(e);if(!(n?await t:t))return!1}return this.backendInstance=this.registry[e],this.setupRegisteredKernels(),this.profiler=new $r(this.backendInstance),!0}setupRegisteredKernels(){On(this.backendName).forEach((e=>{null!=e.setupFunc&&e.setupFunc(this.backendInstance)}))}disposeRegisteredKernels(e){On(e).forEach((t=>{null!=t.disposeFunc&&t.disposeFunc(this.registry[e])}))}initializeBackend(e){const n=this.registryFactory[e];if(null==n)throw new Error(`Cannot initialize backend ${e}, no registration found.`);try{const r=n.factory();if(!r||r instanceof t||"function"!=typeof r.then)return this.registry[e]=r,{success:!0,asyncInit:!1};{const t=++this.pendingBackendInitId,n=r.then((n=>!(t<this.pendingBackendInitId)&&(this.registry[e]=n,this.pendingBackendInit=null,!0))).catch((n=>(t<this.pendingBackendInitId||(this.pendingBackendInit=null,console.warn(`Initialization of backend ${e} failed`),console.warn(n.stack||n.message)),!1)));return this.pendingBackendInit=n,{success:n,asyncInit:!0}}}catch(t){return console.warn(`Initialization of backend ${e} failed`),console.warn(t.stack||t.message),{success:!1,asyncInit:!1}}}removeBackend(e){if(!(e in this.registryFactory))throw new Error(`${e} backend not found in registry`);this.backendName===e&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,e in this.registry&&(this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e]),delete this.registryFactory[e],this.backendName===e&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort(((e,t)=>this.registryFactory[t].priority-this.registryFactory[e].priority))}initializeBackendsAndReturnBest(){const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t],{success:r,asyncInit:a}=this.initializeBackend(n);if(a||r)return{name:n,asyncInit:a}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(e,t){const n=this.state.tensorInfo.get(t),r=n.backend,a=this.readSync(t),s=r.refCount(t);r.disposeData(t,!0),n.backend=e,e.move(t,a,n.shape,n.dtype,s),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(e,t){let n,r=null;if(null==t){if("function"!=typeof e)throw new Error("Please provide a function to tidy()");t=e}else{if("string"!=typeof e&&!(e instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof t)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");r=e}return this.scopedRun((()=>this.startScope(r)),(()=>this.endScope(n)),(()=>(n=t(),n instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),n)))}scopedRun(e,t,n){e();try{const e=n();return t(),e}catch(e){throw t(),e}}nextTensorId(){return ta.nextTensorId++}nextVariableId(){return ta.nextVariableId++}clone(e){const t=ra.runKernel(Qe,{x:e}),n={x:e};return this.addTapeNode(this.state.activeScope.name,n,[t],(e=>({x:()=>{const t={x:e},n={dtype:"float32"};return ra.runKernel(fe,t,n)}})),[],{}),t}runKernel(e,t,n){if(!(null!=An(e,this.backendName)))throw new Error(`Kernel '${e}' not registered for backend '${this.backendName}'`);return this.runKernelFunc({kernelName:e,inputs:t,attrs:n})}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(e,t,n){const r=this.backend.numDataIds();let a=0;n.forEach((e=>{a+="complex64"===e.dtype?3:1}));const s=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],o=r-t-a-s;if(o>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${o} data ids) after running '${e}'`)}runKernelFunc(e){let t,n=[];const r=this.isTapeOn(),a=this.state.numBytes,s=this.state.numTensors;let o,u;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0),null==this.backendName&&this.backend;const l=Jr(e)?e.kernelName:null!=this.state.activeScope?this.state.activeScope.name:"";if(Jr(e)){const{kernelName:t,inputs:a,attrs:s}=e;null==this.backendName&&this.backend;const l=An(t,this.backendName);i(null!=l,(()=>`Cannot find registered kernel '${t}' for backend '${this.backendName}'`)),o=()=>{const e=this.backend.numDataIds();u=l.kernelFunc({inputs:a,attrs:s,backend:this.backend});const o=Array.isArray(u)?u:[u];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(t,e,o);const i=o.map((e=>{if(null!=e.rank)return e;const{dataId:t,shape:n,dtype:r}=e;return this.makeTensorFromDataId(t,n,r)}));if(r){const e=this.getTensorsForGradient(t,a,i);n=this.saveTensorsForBackwardMode(e)}return i}}else{const{forwardFunc:t}=e,a=e=>{r&&(n=e.map((e=>this.keep(this.clone(e)))))};o=()=>{const e=this.backend.numDataIds();u=this.tidy((()=>t(this.backend,a)));const n=Array.isArray(u)?u:[u];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(l,e,n),n}}const{inputs:c,attrs:p}=e,d=Jr(e)?null:e.backwardsFunc;let h;return this.scopedRun((()=>this.state.kernelDepth++),(()=>this.state.kernelDepth--),(()=>{this.ENV.getBool("DEBUG")||this.state.profiling?(h=this.profiler.profileKernel(l,c,(()=>o())),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(h),t=h.outputs):t=o()})),r&&this.addTapeNode(l,c,t,d,n,p),this.state.profiling&&this.state.activeProfile.kernels.push({name:l,bytesAdded:this.state.numBytes-a,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-s,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(c).map((e=>null!=c[e]?c[e].shape:null)),outputShapes:t.map((e=>e.shape)),kernelTimeMs:h.timeMs,extraInfo:h.extraInfo}),Array.isArray(u)?t:t[0]}saveTensorsForBackwardMode(e){return e.map((e=>this.keep(this.clone(e))))}getTensorsForGradient(e,t,n){const r=Rn(e);if(null!=r){const e=r.inputsToSave||[],a=r.outputsToSave||[];let s;r.saveAllInputs?(i(Array.isArray(t),(()=>"saveAllInputs is true, expected inputs to be an array.")),s=Object.keys(t).map((e=>t[e]))):s=e.map((e=>t[e]));const o=n.filter(((e,t)=>a[t]));return s.concat(o)}return[]}makeTensor(e,t,n,r){if(null==e)throw new Error("Values passed to engine.makeTensor() are null");n=n||"float32",r=r||this.backend;let a=e;"string"===n&&S(e[0])&&(a=e.map((e=>Tr(e))));const s=r.write(a,t,n),o=new Br(t,n,s,this.nextTensorId());if(this.trackTensor(o,r),"string"===n){const e=this.state.tensorInfo.get(s),t=I(a);this.state.numBytes+=t-e.bytes,e.bytes=t}return o}makeTensorFromDataId(e,t,n,r){const a=new Br(t,n=n||"float32",e,this.nextTensorId());return this.trackTensor(a,r),a}makeVariable(e,t=!0,n,r){n=n||this.nextVariableId().toString(),null!=r&&r!==e.dtype&&(e=e.cast(r));const a=new Pr(e,t,n,this.nextTensorId());if(null!=this.state.registeredVariables[a.name])throw new Error(`Variable with name ${a.name} was already registered`);return this.state.registeredVariables[a.name]=a,this.incRef(a,this.backend),a}trackTensor(e,t){this.state.numTensors++,"string"===e.dtype&&this.state.numStringTensors++;let n=0;"complex64"!==e.dtype&&"string"!==e.dtype&&(n=e.size*$(e.dtype)),this.state.numBytes+=n,this.state.tensorInfo.has(e.dataId)||(this.state.numDataBuffers++,this.state.tensorInfo.set(e.dataId,{backend:t||this.backend,dtype:e.dtype,shape:e.shape,bytes:n})),e instanceof Pr||this.track(e)}incRef(e,t){this.trackTensor(e,t),this.backend.incRef(e.dataId)}removeDataId(e,t){this.state.tensorInfo.has(e)&&this.state.tensorInfo.get(e).backend===t&&(this.state.tensorInfo.delete(e),this.state.numDataBuffers--)}disposeTensor(e){if(!this.state.tensorInfo.has(e.dataId))return;const t=this.state.tensorInfo.get(e.dataId);if(this.state.numTensors--,"string"===e.dtype&&(this.state.numStringTensors--,this.state.numBytes-=t.bytes),"complex64"!==e.dtype&&"string"!==e.dtype){const t=e.size*$(e.dtype);this.state.numBytes-=t}t.backend.disposeData(e.dataId)&&this.removeDataId(e.dataId,t.backend)}disposeVariables(){for(const e in this.state.registeredVariables){const t=this.state.registeredVariables[e];this.disposeVariable(t)}}disposeVariable(e){this.disposeTensor(e),null!=this.state.registeredVariables[e.name]&&delete this.state.registeredVariables[e.name]}memory(){const e=this.backend.memory();return e.numTensors=this.state.numTensors,e.numDataBuffers=this.state.numDataBuffers,e.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(e.unreliable=!0,null==e.reasons&&(e.reasons=[]),e.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),e}async profile(e){this.state.profiling=!0;const t=this.state.numBytes,n=this.state.numTensors;this.state.activeProfile.kernels=[],this.state.activeProfile.result=await e(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map((e=>e.totalBytesSnapshot))),this.state.activeProfile.newBytes=this.state.numBytes-t,this.state.activeProfile.newTensors=this.state.numTensors-n;for(const e of this.state.activeProfile.kernels)e.kernelTimeMs=await e.kernelTimeMs,e.extraInfo=await e.extraInfo;return this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(e,t,n,r,a,s){const o={id:this.state.nextTapeNodeId++,kernelName:e,inputs:t,outputs:n,saved:a},i=Rn(e);null!=i&&(r=i.gradFunc),null!=r&&(o.gradient=e=>(e=e.map(((e,t)=>{if(null==e){const e=n[t],r=B(e.size,e.dtype);return this.makeTensor(r,e.shape,e.dtype)}return e})),r(e.length>1?e:e[0],a,s))),this.state.activeTape.push(o)}keep(e){return e.kept=!0,e}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(e){const t={track:[],name:"unnamed scope",id:this.state.nextScopeId++};e&&(t.name=e),this.state.scopeStack.push(t),this.state.activeScope=t}endScope(e){const t=Yr(e),n=new Set(t.map((e=>e.id)));for(let e=0;e<this.state.activeScope.track.length;e++){const t=this.state.activeScope.track[e];t.kept||n.has(t.id)||t.dispose()}const r=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],t.forEach((e=>{e.kept||e.scopeId!==r.id||this.track(e)}))}gradients(e,t,n,r=!1){if(i(t.length>0,(()=>"gradients() received an empty list of xs.")),null!=n&&"float32"!==n.dtype)throw new Error(`dy must have 'float32' dtype, but has '${n.dtype}'`);const a=this.scopedRun((()=>this.startTape()),(()=>this.endTape()),(()=>this.tidy("forward",e)));i(a instanceof Br,(()=>"The result y returned by f() must be a tensor."));const s=function(e,t,n){const r={},a={};for(let e=0;e<t.length;e++)r[t[e].id]=!0;for(let n=0;n<e.length;n++){const s=e[n],o=s.inputs;for(const e in o){const n=o[e];let i=!1;for(let e=0;e<t.length;e++)if(r[n.id]){s.outputs.forEach((e=>r[e.id]=!0)),i=!0,a[s.id]=!0;break}if(i)break}}const s={};s[n.id]=!0;const o={};for(let t=e.length-1;t>=0;t--){const n=e[t],r=n.inputs;for(let e=0;e<n.outputs.length;e++)if(s[n.outputs[e].id]){for(const e in r)s[r[e].id]=!0,o[n.id]=!0;break}}const i=[];for(let t=0;t<e.length;t++){const n=e[t];if(a[n.id]&&o[n.id]){const e={};for(const t in n.inputs){const a=n.inputs[t];r[a.id]&&(e[t]=a)}const t=Object.assign({},n);t.inputs=e,t.outputs=n.outputs,i.push(t)}}return i}(this.state.activeTape,t,a);if(!r&&0===s.length&&t.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",(()=>{const e={};e[a.id]=null==n?function(e){const t=L(p(e),"float32");return ra.makeTensor(t,e,"float32")}(a.shape):n,function(e,t,n,r){for(let a=t.length-1;a>=0;a--){const s=t[a],o=[];if(s.outputs.forEach((t=>{const n=e[t.id];null!=n?o.push(n):o.push(null)})),null==s.gradient)throw new Error(`Cannot compute gradient: gradient function not found for ${s.kernelName}.`);const i=s.gradient(o);for(const t in s.inputs){if(!(t in i))throw new Error(`Cannot backprop through input ${t}. Available gradients found: ${Object.keys(i)}.`);const a=n((()=>i[t]()));if("float32"!==a.dtype)throw new Error(`Error in gradient for op ${s.kernelName}. The gradient of input ${t} must have 'float32' dtype, but has '${a.dtype}'`);const o=s.inputs[t];if(!d(a.shape,o.shape))throw new Error(`Error in gradient for op ${s.kernelName}. The gradient of input '${t}' has shape '${a.shape}', which does not match the shape of the input '${o.shape}'`);if(null==e[o.id])e[o.id]=a;else{const t=e[o.id];e[o.id]=r(t,a),t.dispose()}}}}(e,s,(e=>this.tidy(e)),aa);const r=t.map((t=>e[t.id]));return 0===this.state.gradientDepth&&(this.state.activeTape.forEach((e=>{for(const t of e.saved)t.dispose()})),this.state.activeTape=null),{value:a,grads:r}}))}customGrad(e){return i(R(e),(()=>"The f passed in customGrad(f) must be a function.")),(...t)=>{let n;i(t.every((e=>e instanceof Br)),(()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors"));const r={};t.forEach(((e,t)=>{r[t]=e}));return this.runKernelFunc({forwardFunc:(r,a)=>(n=e(...t,a),i(n.value instanceof Br,(()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor")),i(R(n.gradFunc),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function.")),n.value),backwardsFunc:(e,r)=>{const a=n.gradFunc(e,r),s=Array.isArray(a)?a:[a];i(s.length===t.length,(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...).")),i(s.every((e=>e instanceof Br)),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors."));const o={};return s.forEach(((e,t)=>{o[t]=()=>e})),o},inputs:r})}}readSync(e){return this.state.tensorInfo.get(e).backend.readSync(e)}read(e){return this.state.tensorInfo.get(e).backend.read(e)}async time(e){const t=Er(),n=await this.backend.time(e);return n.wallMs=Er()-t,n}track(e){return null!=this.state.activeScope&&(e.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(e)),e}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new ea;for(const e in this.registry)this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}function na(){const e=X();if(null==e._tfengine){const t=new G(e);e._tfengine=new ta(t)}var t;return t=e._tfengine.ENV,q=t,Dr=()=>e._tfengine,e._tfengine}ta.nextTensorId=0,ta.nextVariableId=0;const ra=na();function aa(e,t){const n={a:e,b:t};return ra.runKernel(ee,n)}function sa(e){if(e||"undefined"!=typeof navigator&&null!=navigator){if(e||(e=navigator),"ReactNative"===e.product)return!0;const t=e.userAgent||e.vendor||window.opera;return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0,4))}return!1}function oa(){return"undefined"!=typeof window&&null!=window.document||"undefined"!=typeof WorkerGlobalScope}var ia=Object.freeze({__proto__:null,isMobile:sa,isBrowser:oa});const ua=j();function la(e,t){let n=e;if(k(e))return"string"===t?[]:[e.length];if(!Array.isArray(e))return[];const r=[];for(;Array.isArray(n)||k(n)&&"string"!==t;)r.push(n.length),n=n[0];return Array.isArray(e)&&j().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&ca(e,r,[]),r}function ca(e,t,n){if(n=n||[],!Array.isArray(e)&&!k(e))return void i(0===t.length,(()=>`Element arr[${n.join("][")}] is a primitive, but should be an array/TypedArray of ${t[0]} elements`));i(t.length>0,(()=>`Element arr[${n.join("][")}] should be a primitive, but is an array of ${e.length} elements`)),i(e.length===t[0],(()=>`Element arr[${n.join("][")}] should have ${t[0]} elements, but has ${e.length} elements`));const r=t.slice(1);for(let t=0;t<e.length;++t)ca(e[t],r,n.concat(t))}function pa(e,t,n,r){if("string_or_numeric"!==e){if(null==e)throw new Error("Expected dtype cannot be null.");if("numeric"!==e&&e!==t||"numeric"===e&&"string"===t)throw new Error(`Argument '${n}' passed to '${r}' must be ${e} tensor, but got ${t} tensor`)}}function da(e,t,n,r="numeric"){if(e instanceof Br)return pa(r,e.dtype,t,n),e;let a=A(e);if("string"!==a&&["bool","int32","float32"].indexOf(r)>=0&&(a=r),pa(r,a,t,n),null==e||!k(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e){const r=null==e?"null":e.constructor.name;throw new Error(`Argument '${t}' passed to '${n}' must be a Tensor or TensorLike, but got '${r}'`)}const s=la(e,a);k(e)||Array.isArray(e)||(e=[e]);const o="string"!==a?wr(e,a):c(e,[],!0);return ra.makeTensor(o,s,a)}function ha(e,t,n,r="numeric"){if(!Array.isArray(e))throw new Error(`Argument ${t} passed to ${n} must be a \`Tensor[]\` or \`TensorLike[]\``);return e.map(((e,a)=>da(e,`${t}[${a}]`,n,r)))}ua.registerFlag("DEBUG",(()=>!1),(e=>{e&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")})),ua.registerFlag("IS_BROWSER",(()=>oa())),ua.registerFlag("IS_NODE",(()=>"undefined"!=typeof process&&void 0!==process.versions&&void 0!==process.versions.node)),ua.registerFlag("IS_CHROME",(()=>"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor))),ua.registerFlag("PROD",(()=>!1)),ua.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",(()=>ua.getBool("DEBUG"))),ua.registerFlag("DEPRECATION_WARNINGS_ENABLED",(()=>!0)),ua.registerFlag("IS_TEST",(()=>!1)),ua.registerFlag("CHECK_COMPUTATION_FOR_ERRORS",(()=>!0)),ua.registerFlag("WRAP_TO_IMAGEBITMAP",(()=>!1));const fa="__op";function ma(e){const t=Object.keys(e);if(1!==t.length)throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${t.length} keys.`);let n=t[0];const r=e[n];n.endsWith("_")&&(n=n.substring(0,n.length-1)),n+=fa;const a=(...e)=>{ra.startScope(n);try{const t=r(...e);return z(t)&&console.error("Cannot return a Promise inside of tidy."),ra.endScope(t),t}catch(e){throw ra.endScope(null),e}};return Object.defineProperty(a,"name",{value:n,configurable:!0}),a}const ga=ma({complex_:function(e,t){const n=da(e,"real","complex"),r=da(t,"imag","complex");u(n.shape,r.shape,`real and imag shapes, ${n.shape} and ${r.shape}, must match in call to tf.complex().`);const a={real:n,imag:r};return ra.runKernel(ye,a)}});function ya(e,t,n,r){if(null==r&&(r=A(e)),"complex64"===r)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(!k(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=t){P(t);const e=p(t),r=p(n);i(e===r,(()=>`Based on the provided shape, [${t}], the tensor should have ${e} values but has ${r}`));for(let e=0;e<n.length;++e){const r=n[e],a=e!==n.length-1||r!==p(t.slice(e));i(n[e]===t[e]||!a,(()=>`Error creating a new Tensor. Inferred shape (${n}) does not match the provided shape (${t}). `))}}return k(e)||Array.isArray(e)||(e=[e]),t=t||n,e="string"!==r?wr(e,r):c(e,[],!0),ra.makeTensor(e,t,r)}function xa(e,t,n){return ya(e,t,la(e,n),n)}const ba={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8};function va(e,t){const n={};let r,a=0;for(const s of t){const t=s.name,o=s.dtype,i=s.shape,u=p(i);let l;if("quantization"in s){const n=s.quantization;if("uint8"===n.dtype||"uint16"===n.dtype){if(!("min"in n)||!("scale"in n))throw new Error(`Weight ${s.name} with quantization ${n.dtype} doesn't have corresponding metadata min and scale.`)}else{if("float16"!==n.dtype)throw new Error(`Weight ${s.name} has unknown quantization dtype ${n.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);if("float32"!==o)throw new Error(`Weight ${s.name} is quantized with ${n.dtype} which only supports weights of type float32 not ${o}.`)}const i=ba[n.dtype],c=e.slice(a,a+u*i),p="uint8"===n.dtype?new Uint8Array(c):new Uint16Array(c);if("float32"===o)if("uint8"===n.dtype||"uint16"===n.dtype){l=new Float32Array(p.length);for(let e=0;e<p.length;e++){const t=p[e];l[e]=t*n.scale+n.min}}else{if("float16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type float32.`);void 0===r&&(r=Ia()),l=r(p)}else{if("int32"!==o)throw new Error(`Unsupported dtype in weight '${t}': ${o}`);if("uint8"!==n.dtype&&"uint16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type int32.`);l=new Int32Array(p.length);for(let e=0;e<p.length;e++){const t=p[e];l[e]=Math.round(t*n.scale+n.min)}}a+=u*i}else if("string"===o){const t=p(s.shape);l=[];for(let n=0;n<t;n++){const t=new Uint32Array(e.slice(a,a+4))[0];a+=4;const n=new Uint8Array(e.slice(a,a+t));l.push(n),a+=t}}else{const r=ba[o],s=e.slice(a,a+u*r);if("float32"===o)l=new Float32Array(s);else if("int32"===o)l=new Int32Array(s);else if("bool"===o)l=new Uint8Array(s);else{if("complex64"!==o)throw new Error(`Unsupported dtype in weight '${t}': ${o}`);{l=new Float32Array(s);const e=new Float32Array(l.length/2),r=new Float32Array(l.length/2);for(let t=0;t<e.length;t++)e[t]=l[2*t],r[t]=l[2*t+1];const a=xa(e,i,"float32"),o=xa(r,i,"float32");n[t]=ga(a,o),a.dispose(),o.dispose()}}a+=u*r}"complex64"!==o&&(n[t]=xa(l,i,o))}return n}function wa(e){if(null===e)throw new Error(`Invalid input value: ${JSON.stringify(e)}`);let t=0;const n=[];e.forEach((e=>{if(t+=e.byteLength,n.push(e.byteLength===e.buffer.byteLength?e:new e.constructor(e)),!(e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array))throw new Error(`Unsupported TypedArray subtype: ${e.constructor.name}`)}));const r=new Uint8Array(t);let a=0;return n.forEach((e=>{r.set(new Uint8Array(e.buffer),a),a+=e.byteLength})),r.buffer}const Ea="undefined"!=typeof Buffer&&("undefined"==typeof Blob||"undefined"==typeof atob||"undefined"==typeof btoa);function Ta(e){return Ea?Buffer.byteLength(e):new Blob([e]).size}function Na(e){if(1===e.length)return e[0];let t=0;e.forEach((e=>{t+=e.byteLength}));const n=new Uint8Array(t);let r=0;return e.forEach((e=>{n.set(new Uint8Array(e),r),r+=e.byteLength})),n.buffer}function ka(e){for(e=e.trim();e.endsWith("/");)e=e.slice(0,e.length-1);const t=e.split("/");return t[t.length-1]}function $a(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==e.modelTopology?0:Ta(JSON.stringify(e.modelTopology)),weightSpecsBytes:null==e.weightSpecs?0:Ta(JSON.stringify(e.weightSpecs)),weightDataBytes:null==e.weightData?0:e.weightData.byteLength}}function Ia(){const e=function(){const e=e=>{let t=e<<13,n=0;for(;0==(8388608&t);)n-=8388608,t<<=1;return t&=-8388609,n+=947912704,t|n},t=new Uint32Array(2048);t[0]=0;for(let n=1;n<1024;n++)t[n]=e(n);for(let e=1024;e<2048;e++)t[e]=939524096+(e-1024<<13);return t}(),t=function(){const e=new Uint32Array(64);e[0]=0,e[31]=1199570944,e[32]=2147483648,e[63]=3347054592;for(let t=1;t<31;t++)e[t]=t<<23;for(let t=33;t<63;t++)e[t]=2147483648+(t-32<<23);return e}(),n=function(){const e=new Uint32Array(64);for(let t=0;t<64;t++)e[t]=1024;return e[0]=e[32]=0,e}();return r=>{const a=new ArrayBuffer(4*r.length),s=new Uint32Array(a);for(let a=0;a<r.length;a++){const o=r[a],i=e[n[o>>10]+(1023&o)]+t[o>>10];s[a]=i}return new Float32Array(a)}}class Sa{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return null==Sa.instance&&(Sa.instance=new Sa),Sa.instance}static registerSaveRouter(e){Sa.getInstance().saveRouters.push(e)}static registerLoadRouter(e){Sa.getInstance().loadRouters.push(e)}static getSaveHandlers(e){return Sa.getHandlers(e,"save")}static getLoadHandlers(e,t){return Sa.getHandlers(e,"load",t)}static getHandlers(e,t,n){const r=[];return("load"===t?Sa.getInstance().loadRouters:Sa.getInstance().saveRouters).forEach((t=>{const a=t(e,n);null!==a&&r.push(a)})),r}}const _a=e=>Sa.getSaveHandlers(e),Ca=(e,t)=>Sa.getLoadHandlers(e,t),Aa="tensorflowjs",Ra="models_store",Oa="model_info_store";function Ma(){if(!j().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");const e="undefined"==typeof window?self:window,t=e.indexedDB||e.mozIndexedDB||e.webkitIndexedDB||e.msIndexedDB||e.shimIndexedDB;if(null==t)throw new Error("The current browser does not appear to support IndexedDB.");return t}function Da(e){const t=e.result;t.createObjectStore(Ra,{keyPath:"modelPath"}),t.createObjectStore(Oa,{keyPath:"modelPath"})}class Fa{constructor(e){if(this.indexedDB=Ma(),null==e||!e)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=e}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return this.databaseAction(this.modelPath,e)}async load(){return this.databaseAction(this.modelPath)}databaseAction(e,t){return new Promise(((e,n)=>{const r=this.indexedDB.open(Aa,1);r.onupgradeneeded=()=>Da(r),r.onsuccess=()=>{const a=r.result;if(null==t){const t=a.transaction(Ra,"readonly"),r=t.objectStore(Ra).get(this.modelPath);r.onsuccess=()=>{if(null==r.result)return a.close(),n(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));e(r.result.modelArtifacts)},r.onerror=e=>(a.close(),n(r.error)),t.oncomplete=()=>a.close()}else{const r=$a(t),s=a.transaction(Oa,"readwrite");let o=s.objectStore(Oa);const i=o.put({modelPath:this.modelPath,modelArtifactsInfo:r});let u;i.onsuccess=()=>{u=a.transaction(Ra,"readwrite");const i=u.objectStore(Ra).put({modelPath:this.modelPath,modelArtifacts:t,modelArtifactsInfo:r});i.onsuccess=()=>e({modelArtifactsInfo:r}),i.onerror=e=>{o=s.objectStore(Oa);const t=o.delete(this.modelPath);t.onsuccess=()=>(a.close(),n(i.error)),t.onerror=e=>(a.close(),n(i.error))}},i.onerror=e=>(a.close(),n(i.error)),s.oncomplete=()=>{null==u?a.close():u.oncomplete=()=>a.close()}}},r.onerror=e=>n(r.error)}))}}Fa.URL_SCHEME="indexeddb://";const La=e=>{return j().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(Fa.URL_SCHEME)?(t=e.slice(Fa.URL_SCHEME.length),new Fa(t)):null;var t};Sa.registerSaveRouter(La),Sa.registerLoadRouter(La);class Ba{constructor(){this.indexedDB=Ma()}async listModels(){return new Promise(((e,t)=>{const n=this.indexedDB.open(Aa,1);n.onupgradeneeded=()=>Da(n),n.onsuccess=()=>{const r=n.result,a=r.transaction(Oa,"readonly"),s=a.objectStore(Oa).getAll();s.onsuccess=()=>{const t={};for(const e of s.result)t[e.modelPath]=e.modelArtifactsInfo;e(t)},s.onerror=e=>(r.close(),t(s.error)),a.oncomplete=()=>r.close()},n.onerror=e=>t(n.error)}))}async removeModel(e){var t;return e=(t=e).startsWith(Fa.URL_SCHEME)?t.slice(Fa.URL_SCHEME.length):t,new Promise(((t,n)=>{const r=this.indexedDB.open(Aa,1);r.onupgradeneeded=()=>Da(r),r.onsuccess=()=>{const a=r.result,s=a.transaction(Oa,"readwrite"),o=s.objectStore(Oa),i=o.get(e);let u;i.onsuccess=()=>{if(null==i.result)return a.close(),n(new Error(`Cannot find model with path '${e}' in IndexedDB.`));{const r=o.delete(e),s=()=>{u=a.transaction(Ra,"readwrite");const r=u.objectStore(Ra).delete(e);r.onsuccess=()=>t(i.result.modelArtifactsInfo),r.onerror=e=>n(i.error)};r.onsuccess=s,r.onerror=e=>(s(),a.close(),n(i.error))}},i.onerror=e=>(a.close(),n(i.error)),s.oncomplete=()=>{null==u?a.close():u.oncomplete=()=>a.close()}},r.onerror=e=>n(r.error)}))}}const Pa="/",Va="tensorflowjs_models",Ua="info",za="model_topology",Wa="weight_specs",Ga="weight_data",Ha="model_metadata";function ja(e){return{info:[Va,e,Ua].join(Pa),topology:[Va,e,za].join(Pa),weightSpecs:[Va,e,Wa].join(Pa),weightData:[Va,e,Ga].join(Pa),modelMetadata:[Va,e,Ha].join(Pa)}}function Ka(e){const t=e.split(Pa);if(t.length<3)throw new Error(`Invalid key format: ${e}`);return t.slice(1,t.length-1).join(Pa)}class qa{constructor(e){if(!j().getBool("IS_BROWSER")||"undefined"==typeof window||void 0===window.localStorage)throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==e||!e)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=e,this.keys=ja(this.modelPath)}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{const t=JSON.stringify(e.modelTopology),n=JSON.stringify(e.weightSpecs),r=$a(e);try{this.LS.setItem(this.keys.info,JSON.stringify(r)),this.LS.setItem(this.keys.topology,t),this.LS.setItem(this.keys.weightSpecs,n),this.LS.setItem(this.keys.weightData,function(e){if(Ea)return Buffer.from(e).toString("base64");const t=new Uint8Array(e);let n="";for(let e=0,r=t.length;e<r;e++)n+=String.fromCharCode(t[e]);return btoa(n)}(e.weightData));const a={format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy};return null!=e.signature&&(a.signature=e.signature),null!=e.userDefinedMetadata&&(a.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(a.modelInitializer=e.modelInitializer),this.LS.setItem(this.keys.modelMetadata,JSON.stringify(a)),{modelArtifactsInfo:r}}catch(e){throw this.LS.removeItem(this.keys.info),this.LS.removeItem(this.keys.topology),this.LS.removeItem(this.keys.weightSpecs),this.LS.removeItem(this.keys.weightData),this.LS.removeItem(this.keys.modelMetadata),new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${r.modelTopologyBytes}, weightSpecsBytes=${r.weightSpecsBytes}, weightDataBytes=${r.weightDataBytes}.`)}}}async load(){const e=JSON.parse(this.LS.getItem(this.keys.info));if(null==e)throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);if("JSON"!==e.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");const t={},n=JSON.parse(this.LS.getItem(this.keys.topology));if(null==n)throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);t.modelTopology=n;const r=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(null==r)throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);t.weightSpecs=r;const a=this.LS.getItem(this.keys.modelMetadata);if(null!=a){const e=JSON.parse(a);t.format=e.format,t.generatedBy=e.generatedBy,t.convertedBy=e.convertedBy,null!=e.signature&&(t.signature=e.signature),null!=e.userDefinedMetadata&&(t.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(t.modelInitializer=e.modelInitializer)}const s=this.LS.getItem(this.keys.weightData);if(null==s)throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);return t.weightData=function(e){if(Ea){const t=Buffer.from(e,"base64");return t.buffer.slice(t.byteOffset,t.byteOffset+t.byteLength)}const t=atob(e),n=new Uint8Array(t.length);for(let e=0;e<t.length;++e)n.set([t.charCodeAt(e)],e);return n.buffer}(s),t}}qa.URL_SCHEME="localstorage://";const Xa=e=>{return j().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(qa.URL_SCHEME)?(t=e.slice(qa.URL_SCHEME.length),new qa(t)):null;var t};Sa.registerSaveRouter(Xa),Sa.registerLoadRouter(Xa);class Ya{constructor(){i(j().getBool("IS_BROWSER"),(()=>"Current environment is not a web browser")),i("undefined"==typeof window||void 0!==window.localStorage,(()=>"Current browser does not appear to support localStorage")),this.LS=window.localStorage}async listModels(){const e={},t=Va+Pa,n=Pa+Ua;for(let r=0;r<this.LS.length;++r){const a=this.LS.key(r);if(a.startsWith(t)&&a.endsWith(n)){e[Ka(a)]=JSON.parse(this.LS.getItem(a))}}return e}async removeModel(e){var t;const n=ja(e=(t=e).startsWith(qa.URL_SCHEME)?t.slice(qa.URL_SCHEME.length):t);if(null==this.LS.getItem(n.info))throw new Error(`Cannot find model at path '${e}'`);const r=JSON.parse(this.LS.getItem(n.info));return this.LS.removeItem(n.info),this.LS.removeItem(n.topology),this.LS.removeItem(n.weightSpecs),this.LS.removeItem(n.weightData),r}}function Qa(e){return new Promise((e=>setTimeout(e))).then(e)}class Za{constructor(e){if(!j().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");e.startsWith(Za.URL_SCHEME)&&(e=e.slice(Za.URL_SCHEME.length)),null!=e&&0!==e.length||(e="model"),this.modelTopologyFileName=e+".json",this.weightDataFileName=e+".weights.bin"}async save(e){if("undefined"==typeof document)throw new Error("Browser downloads are not supported in this environment since `document` is not present");const t=window.URL.createObjectURL(new Blob([e.weightData],{type:"application/octet-stream"}));if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{const n=[{paths:["./"+this.weightDataFileName],weights:e.weightSpecs}],r={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,weightsManifest:n};null!=e.signature&&(r.signature=e.signature),null!=e.userDefinedMetadata&&(r.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(r.modelInitializer=e.modelInitializer);const a=window.URL.createObjectURL(new Blob([JSON.stringify(r)],{type:"application/json"})),s=null==this.jsonAnchor?document.createElement("a"):this.jsonAnchor;if(s.download=this.modelTopologyFileName,s.href=a,await Qa((()=>s.dispatchEvent(new MouseEvent("click")))),null!=e.weightData){const e=null==this.weightDataAnchor?document.createElement("a"):this.weightDataAnchor;e.download=this.weightDataFileName,e.href=t,await Qa((()=>e.dispatchEvent(new MouseEvent("click"))))}return{modelArtifactsInfo:$a(e)}}}}Za.URL_SCHEME="downloads://";class Ja{constructor(e){if(null==e||e.length<1)throw new Error(`When calling browserFiles, at least 1 file is required, but received ${e}`);this.files=e}async load(){const e=this.files[0],t=this.files.slice(1);return new Promise(((n,r)=>{const a=new FileReader;a.onload=a=>{const s=JSON.parse(a.target.result),o=s.modelTopology;if(null==o)return void r(new Error(`modelTopology field is missing from file ${e.name}`));0===t.length&&n({modelTopology:o});const i=s.weightsManifest;if(null==i)return void r(new Error(`weightManifest field is missing from file ${e.name}`));let u;try{u=this.checkManifestAndWeightFiles(i,t)}catch(e){return void r(e)}const l=[],c=[],p=[];i.forEach((e=>{e.paths.forEach((e=>{c.push(e),p.push(null)})),l.push(...e.weights)})),i.forEach((e=>{e.paths.forEach((e=>{const t=new FileReader;t.onload=t=>{const r=t.target.result,a=c.indexOf(e);if(p[a]=r,-1===p.indexOf(null)){const e={modelTopology:o,weightSpecs:l,weightData:Na(p),format:s.format,generatedBy:s.generatedBy,convertedBy:s.convertedBy};null!=s.signature&&(e.signature=s.signature),null!=s.userDefinedMetadata&&(e.userDefinedMetadata=s.userDefinedMetadata),null!=s.modelInitializer&&(e.modelInitializer=s.modelInitializer),n(e)}},t.onerror=t=>r(`Failed to weights data from file of path '${e}'.`),t.readAsArrayBuffer(u[e])}))}))},a.onerror=t=>r(`Failed to read model topology and weights manifest JSON from file '${e.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`),a.readAsText(e)}))}checkManifestAndWeightFiles(e,t){const n=[],r=t.map((e=>ka(e.name))),a={};for(const s of e)s.paths.forEach((e=>{const s=ka(e);if(-1!==n.indexOf(s))throw new Error(`Duplicate file basename found in weights manifest: '${s}'`);if(n.push(s),-1===r.indexOf(s))throw new Error(`Weight file with basename '${s}' is not provided.`);a[e]=t[r.indexOf(s)]}));if(n.length!==t.length)throw new Error(`Mismatch in the number of files in weights manifest (${n.length}) and the number of weight files provided (${t.length}).`);return a}}function es(e,t,n,r){!function(e){i(null!=e&&Array.isArray(e)&&e.length>0,(()=>"promises must be a none empty array"))}(e),function(e,t){i(e>=0&&e<=1,(()=>`Progress fraction must be in range [0, 1], but got startFraction ${e}`)),i(t>=0&&t<=1,(()=>`Progress fraction must be in range [0, 1], but got endFraction ${t}`)),i(t>=e,(()=>`startFraction must be no more than endFraction, but got startFraction ${e} and endFraction ${t}`))}(n=null==n?0:n,r=null==r?1:r);let a=0;return Promise.all(e.map((s=>(s.then((s=>{const o=n+ ++a/e.length*(r-n);return t(o),s})),s))))}async function ts(e,t){null==t&&(t={});const n=null==t.fetchFunc?j().platform.fetch:t.fetchFunc,r=e.map((e=>n(e,t.requestInit,{isBinary:!0}))),a=(null==t.onProgress?await Promise.all(r):await es(r,t.onProgress,0,.5)).map((e=>e.arrayBuffer()));return null==t.onProgress?await Promise.all(a):await es(a,t.onProgress,.5,1)}function ns(e){return async(t,n="",r)=>{const a=t.map((()=>!1)),s={},o=null!=r?r.map((()=>!1)):[],i=[];if(t.forEach(((e,t)=>{let n=0;e.weights.forEach((e=>{const u="quantization"in e?e.quantization.dtype:e.dtype,l=ba[u]*p(e.shape),c=()=>{a[t]=!0,null==s[t]&&(s[t]=[]),s[t].push({manifestEntry:e,groupOffset:n,sizeBytes:l})};null!=r?r.forEach(((t,n)=>{t===e.name&&(c(),o[n]=!0)})):c(),i.push(e.name),n+=l}))})),!o.every((e=>e))){const e=r.filter(((e,t)=>!o[t]));throw new Error(`Could not find weights in manifest with names: ${e.join(", ")}. \nManifest JSON has weights with names: ${i.join(", ")}.`)}const u=a.reduce(((e,t,n)=>(t&&e.push(n),e)),[]),l=[];u.forEach((e=>{t[e].paths.forEach((e=>{const t=n+(n.endsWith("/")?"":"/")+e;l.push(t)}))}));const c=await e(l),d={};let h=0;return u.forEach((e=>{const n=t[e].paths.length;let r=0;for(let e=0;e<n;e++)r+=c[h+e].byteLength;const a=new ArrayBuffer(r),o=new Uint8Array(a);let i=0;for(let e=0;e<n;e++){const t=new Uint8Array(c[h+e]);o.set(t,i),i+=t.byteLength}s[e].forEach((e=>{const t=va(a.slice(e.groupOffset,e.groupOffset+e.sizeBytes),[e.manifestEntry]);for(const e in t)d[e]=t[e]})),h+=n})),d}}Sa.registerSaveRouter((e=>j().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(Za.URL_SCHEME)?function(e="model"){return new Za(e)}(e.slice(Za.URL_SCHEME.length)):null));class rs{constructor(e,t){if(this.DEFAULT_METHOD="POST",null==t&&(t={}),this.weightPathPrefix=t.weightPathPrefix,this.onProgress=t.onProgress,this.weightUrlConverter=t.weightUrlConverter,null!=t.fetchFunc?(i("function"==typeof t.fetchFunc,(()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)")),this.fetch=t.fetchFunc):this.fetch=j().platform.fetch,i(null!=e&&e.length>0,(()=>"URL path for http must not be null, undefined or empty.")),Array.isArray(e)&&i(2===e.length,(()=>`URL paths for http must have a length of 2, (actual length is ${e.length}).`)),this.path=e,null!=t.requestInit&&null!=t.requestInit.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=t.requestInit||{}}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");const t=Object.assign({method:this.DEFAULT_METHOD},this.requestInit);t.body=new FormData;const n=[{paths:["./model.weights.bin"],weights:e.weightSpecs}],r={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,weightsManifest:n};null!=e.signature&&(r.signature=e.signature),null!=e.userDefinedMetadata&&(r.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(r.modelInitializer=e.modelInitializer),t.body.append("model.json",new Blob([JSON.stringify(r)],{type:"application/json"}),"model.json"),null!=e.weightData&&t.body.append("model.weights.bin",new Blob([e.weightData],{type:"application/octet-stream"}),"model.weights.bin");const a=await this.fetch(this.path,t);if(a.ok)return{modelArtifactsInfo:$a(e),responses:[a]};throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${a.status}.`)}async load(){const e=await this.fetch(this.path,this.requestInit);if(!e.ok)throw new Error(`Request to ${this.path} failed with status code ${e.status}. Please verify this URL points to the model JSON of the model to load.`);let t;try{t=await e.json()}catch(e){let t=`Failed to parse model JSON of response from ${this.path}.`;throw this.path.endsWith(".pb")?t+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":t+=" Please make sure the server is serving valid JSON for this request.",new Error(t)}const n=t.modelTopology,r=t.weightsManifest,a=t.generatedBy,s=t.convertedBy,o=t.format,i=t.signature,u=t.userDefinedMetadata;if(null==n&&null==r)throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);let l,c;if(null!=r){const e=await this.loadWeights(r);[l,c]=e}const p={modelTopology:n,weightSpecs:l,weightData:c,generatedBy:a,convertedBy:s,format:o};null!=i&&(p.signature=i),null!=u&&(p.userDefinedMetadata=u);const d=t.modelInitializer;return d&&(p.modelInitializer=d),p}async loadWeights(e){const t=Array.isArray(this.path)?this.path[1]:this.path,[n,r]=function(e){const t=e.lastIndexOf("/"),n=e.lastIndexOf("?"),r=e.substring(0,t),a=n>t?e.substring(n):"";return[r+"/",a]}(t),a=this.weightPathPrefix||n,s=[];for(const t of e)s.push(...t.weights);const o=[],i=[];for(const t of e)for(const e of t.paths)null!=this.weightUrlConverter?i.push(this.weightUrlConverter(e)):o.push(a+e+r);this.weightUrlConverter&&o.push(...await Promise.all(i));return[s,Na(await ts(o,{requestInit:this.requestInit,fetchFunc:this.fetch,onProgress:this.onProgress}))]}}function as(e){return null!=e.match(rs.URL_SCHEME_REGEX)}rs.URL_SCHEME_REGEX=/^https?:\/\//;const ss=(e,t)=>{if("undefined"==typeof fetch&&(null==t||null==t.fetchFunc))return null;{let n=!0;if(n=Array.isArray(e)?e.every((e=>as(e))):as(e),n)return os(e,t)}return null};function os(e,t){return new rs(e,t)}function is(e,t){return os(e,t)}Sa.registerSaveRouter(ss),Sa.registerLoadRouter(ss);class us{constructor(e){this.modelArtifacts=e}async load(){return this.modelArtifacts}}class ls{constructor(e){this.saveHandler=e}async save(e){return this.saveHandler(e)}}const cs="://";class ps{constructor(){this.managers={}}static getInstance(){return null==ps.instance&&(ps.instance=new ps),ps.instance}static registerManager(e,t){i(null!=e,(()=>"scheme must not be undefined or null.")),e.endsWith(cs)&&(e=e.slice(0,e.indexOf(cs))),i(e.length>0,(()=>"scheme must not be an empty string."));const n=ps.getInstance();i(null==n.managers[e],(()=>`A model store manager is already registered for scheme '${e}'.`)),n.managers[e]=t}static getManager(e){const t=this.getInstance().managers[e];if(null==t)throw new Error(`Cannot find model manager for scheme '${e}'`);return t}static getSchemes(){return Object.keys(this.getInstance().managers)}}function ds(e){if(-1===e.indexOf(cs))throw new Error(`The url string provided does not contain a scheme. Supported schemes are: ${ps.getSchemes().join(",")}`);return{scheme:e.split(cs)[0],path:e.split(cs)[1]}}async function hs(e,t,n=!1){i(e!==t,(()=>`Old path and new path are the same: '${e}'`));const r=Sa.getLoadHandlers(e);i(r.length>0,(()=>`Copying failed because no load handler is found for source URL ${e}.`)),i(r.length<2,(()=>`Copying failed because more than one (${r.length}) load handlers for source URL ${e}.`));const a=r[0],s=Sa.getSaveHandlers(t);i(s.length>0,(()=>`Copying failed because no save handler is found for destination URL ${t}.`)),i(s.length<2,(()=>`Copying failed because more than one (${r.length}) save handlers for destination URL ${t}.`));const o=s[0],u=ds(e).scheme,l=ds(e).path,c=u===ds(e).scheme,p=await a.load();n&&c&&await ps.getManager(u).removeModel(l);const d=await o.save(p);return n&&!c&&await ps.getManager(u).removeModel(l),d.modelArtifactsInfo}var fs=Object.freeze({__proto__:null,browserFiles:function(e){return new Ja(e)},browserHTTPRequest:is,concatenateArrayBuffers:Na,decodeWeights:va,encodeWeights:async function(e,t){const n=[],r=[],a=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);for(let s=0;s<a.length;++s){const o=a[s],i=Array.isArray(e)?e[s].tensor:e[o];if("float32"!==i.dtype&&"int32"!==i.dtype&&"bool"!==i.dtype&&"string"!==i.dtype&&"complex64"!==i.dtype)throw new Error(`Unsupported dtype in weight '${o}': ${i.dtype}`);const u={name:o,shape:i.shape,dtype:i.dtype};if("string"===i.dtype){const e=new Promise((async e=>{const t=await i.bytes(),n=t.reduce(((e,t)=>e+t.length),0)+4*t.length,r=new Uint8Array(n);let a=0;for(let e=0;e<t.length;e++){const n=t[e],s=new Uint8Array(new Uint32Array([n.length]).buffer);r.set(s,a),a+=4,r.set(n,a),a+=n.length}e(r)}));r.push(e)}else r.push(i.data());null!=t&&(u.group=t),n.push(u)}return{data:wa(await Promise.all(r)),specs:n}},fromMemory:function(e,t,n,r){if(1===arguments.length){return null!=e.modelTopology||null!=e.weightSpecs?new us(e):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new us({modelTopology:e}))}return console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new us({modelTopology:e,weightSpecs:t,weightData:n,trainingConfig:r})},getLoadHandlers:Ca,getModelArtifactsInfoForJSON:$a,getSaveHandlers:_a,http:os,isHTTPScheme:as,loadWeights:async function(e,t="",n,r){return ns((e=>ts(e,{requestInit:r})))(e,t,n)},registerLoadRouter:e=>Sa.registerLoadRouter(e),registerSaveRouter:e=>Sa.registerSaveRouter(e),weightsLoaderFactory:ns,withSaveHandler:function(e){return new ls(e)},copyModel:async function(e,t){return hs(e,t,!1)},listModels:async function(){const e=ps.getSchemes(),t={};for(const n of e){const e=await ps.getManager(n).listModels();for(const r in e){t[n+cs+r]=e[r]}}return t},moveModel:async function(e,t){return hs(e,t,!0)},removeModel:async function(e){const t=ds(e);return ps.getManager(t.scheme).removeModel(t.path)}});const ms=ma({cast_:function(e,t){const n=da(e,"x","cast");if(!T(t))throw new Error(`Failed to cast to unknown dtype ${t}`);if("string"===t&&"string"!==n.dtype||"string"!==t&&"string"===n.dtype)throw new Error("Only strings can be casted to strings");const r={x:n},a={dtype:t};return ra.runKernel(fe,r,a)}});const gs=ma({matMul_:function(e,t,n=!1,r=!1){let a=da(e,"a","matMul"),s=da(t,"b","matMul");[a,s]=qr(a,s);const o={a:a,b:s},i={transposeA:n,transposeB:r};return ra.runKernel(pe,o,i)}});const ys=ma({oneHot_:function(e,t,n=1,r=0){if(t<2)throw new Error(`Error in oneHot: depth must be >=2, but it is ${t}`);const a={indices:da(e,"indices","oneHot","int32")},s={depth:t,onValue:n,offValue:r};return ra.runKernel(It,a,s)}});const xs=ma({transpose_:function(e,t){const n=da(e,"x","transpose");if(null==t&&(t=n.shape.map(((e,t)=>t)).reverse()),i(n.rank===t.length,(()=>`Error in transpose: rank of input ${n.rank} must match length of perm ${t}.`)),t.forEach((e=>{i(e>=0&&e<n.rank,(()=>"All entries in 'perm' must be between 0 and "+(n.rank-1)+` but got ${t}`))})),n.rank<=1)return n.clone();const r={x:n},a={perm:t};return ra.runKernel(xn,r,a)}});const bs=ma({confusionMatrix_:function(e,t,n){const r=da(e,"labels","confusionMatrix"),a=da(t,"predictions","confusionMatrix");i(null==n||n>0&&Number.isInteger(n),(()=>`If provided, numClasses must be a positive integer, but got ${n}`)),i(1===r.rank,(()=>`Expected the rank of labels to be 1, but got ${r.rank}`)),i(1===a.rank,(()=>`Expected the rank of predictions to be 1, but got ${a.rank}`)),i(r.shape[0]===a.shape[0],(()=>`Mismatch in the number of examples: ${r.shape[0]} vs. ${a.shape[0]}. Labels and predictions should have the same number of elements.`)),i(n>0&&Number.isInteger(n),(()=>`numClasses is required to be a positive integer, but got ${n}`));const s=ys(ms(r,"int32"),n),o=ys(ms(a,"int32"),n),u=xs(s),l=gs(u,o);return ms(l,"int32")}});var vs=Object.freeze({__proto__:null,confusionMatrix:bs});function ws(e,t,n){if(l(e),null!=t&&3!==t.length)throw new Error("tensor3d() requires shape to have three numbers");const r=la(e,n);if(3!==r.length&&1!==r.length)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return ya(e,t,r,n)}let Es;function Ts(e,t=3){if(t>4)throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");if(null==e)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");let n=!1,r=!1,a=!1,s=!1,o=!1,i=!1;if(e.data instanceof Uint8Array)n=!0;else if("undefined"!=typeof ImageData&&e instanceof ImageData)r=!0;else if("undefined"!=typeof HTMLVideoElement&&e instanceof HTMLVideoElement)a=!0;else if("undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement)s=!0;else if(null!=e.getContext)o=!0;else{if(!("undefined"!=typeof ImageBitmap&&e instanceof ImageBitmap))throw new Error(`pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was ${e.constructor.name}`);i=!0}if(a){const t=2;if(a&&e.readyState<t)throw new Error("The video element has not loaded data yet. Please wait for `loadeddata` event on the <video> element.")}if(null!=An(Nn,ra.backendName)){const n={pixels:e},r={numChannels:t};return ra.runKernel(Nn,n,r)}const[u,l]=a?[e.videoWidth,e.videoHeight]:[e.width,e.height];let c,p;if(o?c=e.getContext("2d").getImageData(0,0,u,l).data:r||n?c=e.data:(s||a||i)&&(null==Es&&(Es=document.createElement("canvas").getContext("2d")),Es.canvas.width=u,Es.canvas.height=l,Es.drawImage(e,0,0,u,l),c=Es.getImageData(0,0,u,l).data),4===t)p=new Int32Array(c);else{const e=u*l;p=new Int32Array(e*t);for(let n=0;n<e;n++)for(let e=0;e<t;++e)p[n*t+e]=c[4*n+e]}return ws(p,[l,u,t],"int32")}function Ns(e){return"undefined"!=typeof window&&"undefined"!=typeof ImageBitmap&&window.hasOwnProperty("createImageBitmap")&&!(e instanceof ImageBitmap)&&function(e){return null!=e&&0!==e.width&&0!==e.height}(e)&&!function(e){return null!=e&&e.data instanceof Uint8Array}(e)}const ks=ma({fromPixels_:Ts});var $s=Object.freeze({__proto__:null,fromPixelsAsync:async function(e,t=3){let n=null;if(j().getBool("WRAP_TO_IMAGEBITMAP")&&Ns(e)){let t;try{t=await createImageBitmap(e,{premultiplyAlpha:"none"})}catch(e){t=null}n=null!=t&&t.width===e.width&&t.height===e.height?t:e}else n=e;return Ts(n,t)},toPixels:async function(e,t){let n=da(e,"img","toPixels");if(!(e instanceof Br)){const e=n;n=ms(e,"int32"),e.dispose()}if(2!==n.rank&&3!==n.rank)throw new Error(`toPixels only supports rank 2 or 3 tensors, got rank ${n.rank}.`);const[r,a]=n.shape.slice(0,2),s=2===n.rank?1:n.shape[2];if(s>4||2===s)throw new Error(`toPixels only supports depth of size 1, 3 or 4 but got ${s}`);if("float32"!==n.dtype&&"int32"!==n.dtype)throw new Error(`Unsupported type for toPixels: ${n.dtype}. Please use float32 or int32 tensors.`);const o=await n.data(),i="float32"===n.dtype?255:1,u=new Uint8ClampedArray(a*r*4);for(let e=0;e<r*a;++e){const t=[0,0,0,255];for(let r=0;r<s;r++){const a=o[e*s+r];if("float32"===n.dtype){if(a<0||a>1)throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${a}.`)}else if("int32"===n.dtype&&(a<0||a>255))throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${a}.`);1===s?(t[0]=a*i,t[1]=a*i,t[2]=a*i):t[r]=a*i}const r=4*e;u[r+0]=Math.round(t[0]),u[r+1]=Math.round(t[1]),u[r+2]=Math.round(t[2]),u[r+3]=Math.round(t[3])}if(null!=t){t.width=a,t.height=r;const e=t.getContext("2d"),n=new ImageData(u,a,r);e.putImageData(n,0,0)}return n!==e&&n.dispose(),u},fromPixels:ks});function Is(e,t){const n=e.shape.length,r=t.shape.length;if(n<1)throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${n}.`);if(r<1)throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${r}.`);if("int32"!==t.dtype)throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);if(t.shape[r-1]>n)throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${t.shape[r-1]} vs. ${n}`);if(0===p(e.shape))throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${e.shape}.`);const a=t.shape,s=a[a.length-1];let o=1;for(let e=0;e<a.length-1;++e)o*=a[e];const i=e.shape,u=a.slice();u.pop();let l=1;for(let e=s;e<n;++e)l*=i[e],u.push(i[e]);const c=[...M(e.shape).map((e=>e/l)),1].slice(0,s);return[u,o,l,c]}var Ss=Object.freeze({__proto__:null,prepareAndValidate:Is});function _s(e,t,n){const r=t.rank>1?t.shape[t.rank-1]:1,a=t.rank>1?t.rank-1:1,s=`Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${n.shape}, indices.shape: ${t.shape}, shape: ${e}, sliceDim: ${r}, and batchDim: ${a}.`;if(n.rank<a)throw new Error(s+` update.rank < ${a}. `);if(e.length<r+(n.rank-a))throw new Error(s+` Output shape length < ${r+(n.rank-a)}`);if(n.rank!==a+e.length-r)throw new Error(s+" update.rank != "+(a+e.length-r));for(let e=0;e<a;++e)if(n.shape[e]!==t.shape[e])throw new Error(s+` updates.shape[${e}] (${n.shape[e]}) != indices.shape[${e}] (${t.shape[e]}).`);for(let t=0;t<n.rank-a;++t)if(n.shape[t+a]!==e[t+r])throw new Error(s+` updates.shape[${t+a}] (${n.shape[t+a]}) != shape[${t+a}] (${e[t+a]})`)}function Cs(e,t,n){if(t.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${t.rank}.`);if(e.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${e.rank}.`);if("int32"!==t.dtype)throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${t.dtype}`);if(n.length<1)throw new Error(`Output rank must be greater or equal to 1, but got shape: ${n}`);if(0===n.length){if(0===t.size)throw new Error(`Indices specified for empty output. indices shape: ${t.shape}`);if(0===e.size)throw new Error(`Updates specified for empty output. updates shape: ${e.shape}`)}_s(n,t,e)}function As(e,t,n){const r=t.shape.length,a=r>1?t.shape[r-1]:1,s=n.length;let o=1;for(let e=a;e<s;++e)o*=n[e];const i=a<1?1:a;return{sliceRank:a,numUpdates:p(t.shape)/i,sliceSize:o,strides:[...M(n.slice(0,a)),1],outputSize:p(n)}}var Rs=Object.freeze({__proto__:null,validateUpdateShape:_s,validateInput:Cs,calculateShapes:As});function Os(e,t,n){const r=e.shape.length;i(r===t.length,(()=>`Error in slice${r}D: Length of begin ${t} must match the rank of the array (${r}).`)),i(r===n.length,(()=>`Error in slice${r}D: Length of size ${n} must match the rank of the array (${r}).`));for(let a=0;a<r;++a)i(t[a]+n[a]<=e.shape[a],(()=>`Error in slice${r}D: begin[${a}] + size[${a}] (${t[a]+n[a]}) would overflow input.shape[${a}] (${e.shape[a]})`))}function Ms(e){const t=[];let n=0;for(;e>0;)1&e&&t.push(n),e/=2,n++;return t}function Ds(e,t,n){const r=[];for(let a=0;a<e.length;a++)r[a]=Math.ceil((t[a]-e[a])/n[a]);return r}function Fs(e,t,n,r){const a=[...e];for(let e=a.length;e<r.length;e++)a.push(1);for(let e=0;e<n;e++)0===e?a[t]=1:(a.splice(t,0,1),a.pop());return a}function Ls(e,t,n){return n<=e?n:n-(t-1)}function Bs(e,t){const n=[];for(let r=0;r<e;r++)n.push(t+r);return n}function Ps(e,t,n,r,a,s,o,i,u){const l=e.length;let c=new Array(l),p=new Array(l),d=new Array(l);if(t.length&&n>0){const u=t[0],l=n+1;c=Vs(o,u,l,r,e),p=Us(i,u,l,a,e),d=Fs(s,u,l,e)}else for(let t=0;t<l;t++)c[t]=Ws(o,r,s,e,t,u),p[t]=Gs(i,a,s,e,t,u),d[t]=zs(s,t,u);return{begin:c,end:p,strides:d}}function Vs(e,t,n,r,a){const s=[...a],o=Bs(n,t);for(let a=0;a<s.length;a++)if(o.indexOf(a)>-1)s[a]=0;else{const o=Ls(t,n,a);let i=r[o];e&1<<o&&(i=0),s[a]=i}return s}function Us(e,t,n,r,s){const o=[...s],i=Bs(n,t);for(let a=0;a<o.length;a++)if(i.indexOf(a)>-1)o[a]=Number.MAX_SAFE_INTEGER;else{const s=Ls(t,n,a);let i=r[s];e&1<<s&&(i=Number.MAX_SAFE_INTEGER),o[a]=i}for(let e=0;e<o.length;e++){const t=s[e];o[e]<0&&(o[e]+=t),o[e]=a(0,o[e],s[e])}return o}function zs(e,t,n){let r=e[t];return(n&1<<t||null==r)&&(r=1),r}function Ws(e,t,n,r,s,o){let i=t[s];const u=n[s]||1;(e&1<<s||o&1<<s||null==i)&&(i=u>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);const l=r[s];return i<0&&(i+=l),i=a(0,i,l-1),i}function Gs(e,t,n,r,s,o){let i=t[s];const u=n[s]||1;(e&1<<s||o&1<<s||null==i)&&(i=u>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);const l=r[s];return i<0&&(i+=l),i=u>0?a(0,i,l):a(-1,i,l-1),i}function Hs(e,t,n){let r=n.length;for(let e=0;e<n.length;e++)if(n[e]>1){r=e;break}for(let a=r+1;a<n.length;a++)if(t[a]>0||n[a]!==e[a])return!1;return!0}function js(e,t){let n=e.length>0?e[e.length-1]:1;for(let r=0;r<e.length-1;r++)n+=e[r]*t[r];return n}function Ks(e,t,n){let r;const a=e.shape.length;let s;return r="number"==typeof t?[t,...new Array(a-1).fill(0)]:t.length<a?t.concat(new Array(a-t.length).fill(0)):t.slice(),r.forEach((e=>{i(-1!==e,(()=>"slice() does not support negative begin indexing."))})),s=null==n?new Array(a).fill(-1):"number"==typeof n?[n,...new Array(a-1).fill(-1)]:n.length<a?n.concat(new Array(a-n.length).fill(-1)):n,s=s.map(((t,n)=>t>=0?t:(i(-1===t,(()=>`Negative size values should be exactly -1 but got ${t} for the slice() size at index ${n}.`)),e.shape[n]-r[n]))),[r,s]}function qs(e,t,n,r,a,s,o,i,u){let l=t.slice(),c=n.slice(),p=r;null==r&&(p=new Array(l.length));const d=Ms(o);if(d.length>1)throw new Error("Multiple ellipses in slice is not allowed.");if(0!==o&&0!==i)throw new Error("Using both ellipsisMask and newAxisMask is not yet supported.");if(0!==o&&0!==u)throw new Error("Using both ellipsisMask and shrinkAxisMask is not yet supported.");const h=e.length-l.length,f=Ms(i),m=e.slice();f.forEach((e=>{l[e]=0,c[e]=1,m.splice(e,0,1)}));const{begin:g,end:y,strides:x}=Ps(m,d,h,l,c,p,a,s,o);l=g,c=y,p=x;const b=Ms(u);b.forEach((e=>{c[e]=l[e]+1,p[e]=1}));const v=Ds(l,c,p),w=v.filter(((e,t)=>-1===b.indexOf(t)));return{nonStrided:p.every((e=>1===e)),$begin:l,$end:c,$strides:p,size:v,newShape:m,outShape:w}}var Xs=Object.freeze({__proto__:null,assertParamsValid:Os,maskToAxes:Ms,computeOutShape:Ds,stridesWithElidedDims:Fs,getNormalizedAxes:Ps,startIndicesWithElidedDims:Vs,stopIndicesWithElidedDims:Us,stridesForAxis:zs,startForAxis:Ws,stopForAxis:Gs,isSliceContinous:Hs,computeFlatOffset:js,parseSliceParams:Ks,sliceInfo:qs});class Ys{getClassName(){return this.constructor.className}static fromConfig(e,t){return new e(t)}}class Qs{constructor(){this.classNameMap={}}static getMap(){return null==Qs.instance&&(Qs.instance=new Qs),Qs.instance}static register(e){Qs.getMap().classNameMap[e.className]=[e,e.fromConfig]}}function Zs(e){i(null!=e.className,(()=>"Class being registered does not have the static className property defined.")),i("string"==typeof e.className,(()=>"className is required to be a string, but got type "+typeof e.className)),i(e.className.length>0,(()=>"Class being registered has an empty-string as its className, which is disallowed.")),Qs.register(e)}var Js=Object.freeze({__proto__:null,Serializable:Ys,SerializationMap:Qs,registerClass:Zs});function eo(){return 32===ra.backend.floatPrecision()?.001:.1}function to(e,t,n){let r=!0;if((k(e)||k(t))&&(r=!1),k(e)&&k(t)&&(r=!0),r){const n=e.constructor.name,r=t.constructor.name;if(n!==r)throw new Error(`Arrays are of different type. Actual: ${n}. Expected: ${r}`)}if(Array.isArray(e)&&Array.isArray(t)){const n=la(e),r=la(t);if(!d(n,r))throw new Error(`Arrays have different shapes. Actual: [${n}]. Expected: [${r}]`)}const a=k(e)?e:c(e),s=k(t)?t:c(t);if(a.length!==s.length)throw new Error(`Arrays have different lengths actual: ${a.length} vs expected: ${s.length}.\nActual:   ${a}.\nExpected: ${s}.`);for(let e=0;e<s.length;++e){const t=a[e],r=s[e];if(!n(t,r))throw new Error(`Arrays differ: actual[${e}] = ${t}, expected[${e}] = ${r}.\nActual:   ${a}.\nExpected: ${s}.`)}}function no(e,t,n){if(null==n&&(n=eo()),!ro(e,t,n))throw new Error(`Numbers differ: actual === ${e}, expected === ${t}`)}function ro(e,t,n){return!isFinite(e)&&!isFinite(t)||!(isNaN(e)||isNaN(t)||Math.abs(e-t)>n)}var ao=Object.freeze({__proto__:null,TEST_EPSILON_FLOAT16:.1,expectArraysClose:function(e,t,n){return null==n&&(n=eo()),to(e,t,((e,t)=>ro(e,t,n)))},testEpsilon:eo,expectPromiseToFail:function(e,t){e().then((()=>t.fail()),(()=>t()))},expectArraysEqual:function(e,t){const n="string"==typeof t||"number"==typeof t||"boolean"==typeof t?[t]:t;return S(e)||S(e[0])||S(t)||S(t[0])?to(e,n,((e,t)=>e==t)):to(e,t,((e,t)=>ro(e,t,0)))},expectNumbersClose:no,expectValuesInRange:function(e,t,n){for(let r=0;r<e.length;r++)if(e[r]<t||e[r]>n)throw new Error(`Value out of range:${e[r]} low: ${t}, high: ${n}`)},expectArrayBuffersEqual:function(e,t){expect(new Float32Array(e)).toEqual(new Float32Array(t))},encodeStrings:function e(t){for(let n=0;n<t.length;n++){const r=t[n];Array.isArray(r)?e(r):t[n]=Tr(r)}return t}});function so(e){j().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(e+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")}function oo(){return ra}function io(e,t){return ra.tidy(e,t)}function uo(e){Yr(e).forEach((e=>e.dispose()))}function lo(e){return ra.keep(e)}function co(){return ra.backendName}function po(e,t,n=1){return ra.registerBackend(e,t,n)}Lr=so;const ho=ma({add_:function(e,t){let n=da(e,"a","add"),r=da(t,"b","add");[n,r]=qr(n,r);const a={a:n,b:r};return ra.runKernel(ee,a)}});const fo=ma({floorDiv_:function(e,t){let n=da(e,"a","floorDiv"),r=da(t,"b","floorDiv");[n,r]=qr(n,r);const a={a:n,b:r};return ra.runKernel(He,a)}});const mo=ma({div_:function(e,t){let n=da(e,"a","div"),r=da(t,"b","div");if([n,r]=qr(n,r),"int32"===n.dtype&&"int32"===r.dtype)return fo(n,r);const a={a:n,b:r};return ra.runKernel(De,a,{})}});const go=ma({mul_:function(e,t){let n=da(e,"a","mul"),r=da(t,"b","mul");[n,r]=qr(n,r);const a={a:n,b:r};return ra.runKernel(vt,a)}});const yo=ma({abs_:function(e){const t=da(e,"x","abs");if("complex64"===t.dtype){const e={x:t};return ra.runKernel(xe,e)}{const e={x:t};return ra.runKernel(Q,e)}}});const xo=ma({acos_:function(e){const t={x:da(e,"x","acos")};return ra.runKernel(Z,t)}});const bo=ma({acosh_:function(e){const t={x:da(e,"x","acosh")};return ra.runKernel(J,t)}});const vo=ma({addN_:function(e){i(Array.isArray(e),(()=>"The argument passed to tf.addN() must be a list of tensors")),i(e.length>=1,(()=>`Must pass at least one tensor to tf.addN(), but got ${e.length}`));const t=e.map(((e,t)=>da(e,`tensors${t}`,"addN"))),n=t[0];t.forEach((e=>{if(e.dtype!==n.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")})),t.forEach((e=>{if(!d(e.shape,n.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")}));const r=t;return ra.runKernel(te,r)}});const wo=ma({all_:function(e,t=null,n=!1){const r={x:da(e,"x","all","bool")},a={axis:t,keepDims:n};return ra.runKernel("All",r,a)}});const Eo=ma({any_:function(e,t=null,n=!1){const r={x:da(e,"x","any","bool")},a={axis:t,keepDims:n};return ra.runKernel("Any",r,a)}});const To=ma({argMax_:function(e,t=0){const n={x:da(e,"x","argMax")},r={axis:t};return ra.runKernel(ne,n,r)}});const No=ma({argMin_:function(e,t=0){const n={x:da(e,"x","argMin")},r={axis:t};return ra.runKernel(re,n,r)}});const ko=ma({asin_:function(e){const t={x:da(e,"x","asin")};return ra.runKernel(ae,t)}});const $o=ma({asinh_:function(e){const t={x:da(e,"x","asinh")};return ra.runKernel(se,t)}});const Io=ma({atan_:function(e){const t={x:da(e,"x","atan")};return ra.runKernel(oe,t)}});const So=ma({atan2_:function(e,t){let n=da(e,"a","atan2"),r=da(t,"b","atan2");[n,r]=qr(n,r);const a={a:n,b:r};return ra.runKernel(ue,a)}});const _o=ma({atanh_:function(e){const t={x:da(e,"x","atanh")};return ra.runKernel(ie,t)}});function Co(e,t,n,r,a,s,o="channelsLast"){const[i,u]=Mo(t);let l;if("channelsLast"===o)l=[i,u,e[3],e[3]];else{if("channelsFirst"!==o)throw new Error(`Unknown dataFormat ${o}`);l=[i,u,e[1],e[1]]}return Ao(e,l,n,r,a,s,!1,o)}function Ao(e,t,n,r,a,s,o=!1,i="channelsLast"){let[u,l,c,p]=[-1,-1,-1,-1];if("channelsLast"===i)[u,l,c,p]=e;else{if("channelsFirst"!==i)throw new Error(`Unknown dataFormat ${i}`);[u,p,l,c]=e}const[d,h,,f]=t,[m,g]=Mo(n),[y,x]=Mo(r),b=Fo(d,y),v=Fo(h,x),{padInfo:w,outHeight:E,outWidth:T}=function(e,t,n,r,a,s,o,i,u){let l,c,p;if("number"==typeof e){l={top:e,bottom:e,left:e,right:e,type:0===e?"VALID":"NUMBER"};const a=function(e,t,n,r,a){null==r&&(r=Oo(e,t,n));const s=e[0],o=e[1],i=Lo((s-t+2*r)/n+1,a),u=Lo((o-t+2*r)/n+1,a);return[i,u]}([t,n],s,r,e,i);c=a[0],p=a[1]}else if("same"===e){c=Math.ceil(t/r),p=Math.ceil(n/a);const e=Math.max(0,(c-1)*r+s-t),i=Math.max(0,(p-1)*a+o-n),u=Math.floor(e/2),d=e-u,h=Math.floor(i/2);l={top:u,bottom:d,left:h,right:i-h,type:"SAME"}}else if("valid"===e)l={top:0,bottom:0,left:0,right:0,type:"VALID"},c=Math.ceil((t-s+1)/r),p=Math.ceil((n-o+1)/a);else{if("object"!=typeof e)throw Error(`Unknown padding parameter: ${e}`);{const d="channelsLast"===u?e[1][0]:e[2][0],h="channelsLast"===u?e[1][1]:e[2][1],f="channelsLast"===u?e[2][0]:e[3][0],m="channelsLast"===u?e[2][1]:e[3][1];l={top:d,bottom:h,left:f,right:m,type:0===d&&0===h&&0===f&&0===m?"VALID":"EXPLICIT"},c=Lo((t-s+d+h)/r+1,i),p=Lo((n-o+f+m)/a+1,i)}}return{padInfo:l,outHeight:c,outWidth:p}}(a,l,c,m,g,b,v,s,i),N=o?f*p:f;let k;return"channelsFirst"===i?k=[u,N,E,T]:"channelsLast"===i&&(k=[u,E,T,N]),{batchSize:u,dataFormat:i,inHeight:l,inWidth:c,inChannels:p,outHeight:E,outWidth:T,outChannels:N,padInfo:w,strideHeight:m,strideWidth:g,filterHeight:d,filterWidth:h,effectiveFilterHeight:b,effectiveFilterWidth:v,dilationHeight:y,dilationWidth:x,inShape:e,outShape:k,filterShape:t}}function Ro(e,t,n,r,a,s=!1,o="channelsLast",i){let[u,l,c,p,d]=[-1,-1,-1,-1,-1];if("channelsLast"===o)[u,l,c,p,d]=e;else{if("channelsFirst"!==o)throw new Error(`Unknown dataFormat ${o}`);[u,d,l,c,p]=e}const[h,f,m,,g]=t,[y,x,b]=Do(n),[v,w,E]=Do(r),T=Fo(h,v),N=Fo(f,w),k=Fo(m,E),{padInfo:$,outDepth:I,outHeight:S,outWidth:_}=function(e,t,n,r,a,s,o,i,u,l,c){let p,d,h,f;if("number"==typeof e){p={top:e,bottom:e,left:e,right:e,front:e,back:e,type:0===e?"VALID":"NUMBER"};const s=function(e,t,n,r,a,s){null==a&&(a=Oo(e,t,r));const o=e[0],i=e[1],u=e[2],l=Lo((o-t+2*a)/r+1,s),c=Lo((i-t+2*a)/r+1,s),p=Lo((u-t+2*a)/r+1,s);return[l,c,p,n]}([t,n,r,1],i,1,a,e,c);d=s[0],h=s[1],f=s[2]}else if("same"===e){d=Math.ceil(t/a),h=Math.ceil(n/s),f=Math.ceil(r/o);const e=(d-1)*a+i-t,c=(h-1)*s+u-n,m=(f-1)*o+l-r,g=Math.floor(e/2),y=e-g,x=Math.floor(c/2),b=c-x,v=Math.floor(m/2);p={top:x,bottom:b,left:v,right:m-v,front:g,back:y,type:"SAME"}}else{if("valid"!==e)throw Error(`Unknown padding parameter: ${e}`);p={top:0,bottom:0,left:0,right:0,front:0,back:0,type:"VALID"},d=Math.ceil((t-i+1)/a),h=Math.ceil((n-u+1)/s),f=Math.ceil((r-l+1)/o)}return{padInfo:p,outDepth:d,outHeight:h,outWidth:f}}(a,l,c,p,y,x,b,T,N,k,i),C=s?g*d:g;let A;return"channelsFirst"===o?A=[u,C,I,S,_]:"channelsLast"===o&&(A=[u,I,S,_,C]),{batchSize:u,dataFormat:o,inDepth:l,inHeight:c,inWidth:p,inChannels:d,outDepth:I,outHeight:S,outWidth:_,outChannels:C,padInfo:$,strideDepth:y,strideHeight:x,strideWidth:b,filterDepth:h,filterHeight:f,filterWidth:m,effectiveFilterDepth:T,effectiveFilterHeight:N,effectiveFilterWidth:k,dilationDepth:v,dilationHeight:w,dilationWidth:E,inShape:e,outShape:A,filterShape:t}}function Oo(e,t,n,r=1){const a=Fo(t,r);return Math.floor((e[0]*(n-1)-n+a)/2)}function Mo(e){return"number"==typeof e?[e,e,e]:2===e.length?[e[0],e[1],1]:e}function Do(e){return"number"==typeof e?[e,e,e]:e}function Fo(e,t){return t<=1?e:e+(e-1)*(t-1)}function Lo(e,t){if(!t)return Math.trunc(e);switch(t){case"round":return Math.round(e);case"ceil":return Math.ceil(e);case"floor":return Math.floor(e);default:throw new Error(`Unknown roundingMode ${t}`)}}function Bo(e){const[t,n,r]=Mo(e);return 1===t&&1===n&&1===r}function Po(e,t){return Bo(e)||Bo(t)}function Vo(e){if("NHWC"===e)return"channelsLast";if("NCHW"===e)return"channelsFirst";throw new Error(`Unknown dataFormat ${e}`)}const Uo=ma({reshape_:function(e,t){const n={x:da(e,"x","reshape","string_or_numeric")},r={shape:t};return ra.runKernel(Ft,n,r)}});const zo=ma({avgPool_:function(e,t,n,r,a){const s=da(e,"x","avgPool","float32");i(Po(n,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`));let o=s,u=!1;3===s.rank&&(u=!0,o=Uo(s,[1,s.shape[0],s.shape[1],s.shape[2]])),i(4===o.rank,(()=>`Error in avgPool: x must be rank 4 but got rank ${o.rank}.`)),null!=a&&i(h(r),(()=>`Error in avgPool: pad must be an integer when using, dimRoundingMode ${a} but got pad ${r}.`));const l={x:o},c={filterSize:t,strides:n,pad:r,dimRoundingMode:a};let p=ra.runKernel(le,l,c);return p=ms(p,s.dtype),u?Uo(p,[p.shape[1],p.shape[2],p.shape[3]]):p}});const Wo=ma({avgPool3d_:function(e,t,n,r,a,s="NDHWC"){const o=da(e,"x","avgPool3d","float32");let u=o,l=!1;4===o.rank&&(l=!0,u=Uo(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),i(5===u.rank,(()=>`Error in avgPool3d: x must be rank 5 but got rank ${u.rank}.`)),i("NDHWC"===s,(()=>`Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${s}`)),null!=a&&i(h(r),(()=>`Error in avgPool3d: pad must be an integer when using, dimRoundingMode ${a} but got pad ${r}.`));const c={x:u},p={filterSize:t,strides:n,pad:r,dimRoundingMode:a,dataFormat:s};let d=ra.runKernel(ce,c,p);return d=ms(d,u.dtype),l?Uo(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}});const Go=ma({clone_:function(e){const t={x:da(e,"x","clone","string_or_numeric")};return ra.runKernel(Qe,t)}});const Ho=ma({concat_:function(e,t=0){i(e.length>=1,(()=>"Pass at least one tensor to concat"));const n=ha(e,"tensors","concat","string_or_numeric");if("complex64"===n[0].dtype&&n.forEach((e=>{if("complex64"!==e.dtype)throw new Error(`Cannot concatenate complex64 tensors with a tensor\n          with dtype ${e.dtype}. `)})),1===n.length)return Go(n[0]);const r=n,a={axis:t};return ra.runKernel(be,r,a)}});const jo=ma({sigmoid_:function(e){const t={x:da(e,"x","sigmoid")};return ra.runKernel(Xt,t)}});const Ko=ma({slice_:function(e,t,n){const r=da(e,"x","slice","string_or_numeric");if(0===r.rank)throw new Error("Slicing scalar is not possible");const a={x:r},s={begin:t,size:n};return ra.runKernel(jt,a,s)}});const qo=ma({tanh_:function(e){const t={x:da(e,"x","tanh")};return ra.runKernel(fn,t)}});const Xo=ma({basicLSTMCell_:function(e,t,n,r,a,s){const o=da(e,"forgetBias","basicLSTMCell"),i=da(t,"lstmKernel","basicLSTMCell"),u=da(n,"lstmBias","basicLSTMCell"),l=da(r,"data","basicLSTMCell"),c=da(a,"c","basicLSTMCell"),p=da(s,"h","basicLSTMCell"),d=Ho([l,p],1),h=gs(d,i),f=ho(h,u),m=f.shape[0],g=f.shape[1]/4,y=[m,g],x=Ko(f,[0,0],y),b=Ko(f,[0,g],y),v=Ko(f,[0,2*g],y),w=Ko(f,[0,3*g],y),E=ho(go(jo(x),qo(b)),go(c,jo(ho(o,v))));return[E,go(qo(E),jo(w))]}});const Yo=ma({batchToSpaceND_:function(e,t,n){const r=da(e,"x","batchToSpaceND"),a=t.reduce(((e,t)=>e*t));i(r.rank>=1+t.length,(()=>`input rank is ${r.rank} but should be > than blockShape.length ${t.length}`)),i(n.length===t.length,(()=>`crops.length is ${n.length} but should be equal to blockShape.length  ${t.length}`)),i(r.shape[0]%a==0,(()=>`input tensor batch is ${r.shape[0]} but is not divisible by the product of the elements of blockShape ${t.join(" * ")} === ${a}`));const s={x:r},o={blockShape:t,crops:n};return ra.runKernel(de,s,o)}});const Qo=ma({batchNorm_:function(e,t,n,r,a,s){null==s&&(s=.001);const o=da(e,"x","batchNorm"),u=da(t,"mean","batchNorm"),l=da(n,"variance","batchNorm");let c,p;null!=a&&(c=da(a,"scale","batchNorm")),null!=r&&(p=da(r,"offset","batchNorm")),i(u.rank===l.rank,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),i(null==p||u.rank===p.rank,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),i(null==c||u.rank===c.rank,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));const d={x:function(e){let t;return t=0===e.rank||1===e.rank?Uo(e,[1,1,1,e.size]):2===e.rank?Uo(e,[1,1,e.shape[0],e.shape[1]]):3===e.rank?Uo(e,[1,e.shape[0],e.shape[1],e.shape[2]]):e,t}(o),scale:c,offset:p,mean:u,variance:l},h={varianceEpsilon:s},f=ra.runKernel(je,d,h);return Uo(f,o.shape)}});const Zo=ma({batchNorm2d_:function(e,t,n,r,a,s){const o=da(e,"x","batchNorm"),u=da(t,"mean","batchNorm"),l=da(n,"variance","batchNorm");let c,p;return null!=a&&(c=da(a,"scale","batchNorm")),null!=r&&(p=da(r,"offset","batchNorm")),i(2===o.rank,(()=>`Error in batchNorm2D: x must be rank 2 but got rank ${o.rank}.`)),i(2===u.rank||1===u.rank,(()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${u.rank}.`)),i(2===l.rank||1===l.rank,(()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${l.rank}.`)),null!=c&&i(2===c.rank||1===c.rank,(()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${c.rank}.`)),null!=p&&i(2===p.rank||1===p.rank,(()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${p.rank}.`)),Qo(o,u,l,p,c,s)}});const Jo=ma({batchNorm3d_:function(e,t,n,r,a,s){const o=da(e,"x","batchNorm"),u=da(t,"mean","batchNorm"),l=da(n,"variance","batchNorm");let c,p;return null!=a&&(c=da(a,"scale","batchNorm")),null!=r&&(p=da(r,"offset","batchNorm")),i(3===o.rank,(()=>`Error in batchNorm3D: x must be rank 3 but got rank ${o.rank}.`)),i(3===u.rank||1===u.rank,(()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${u.rank}.`)),i(3===l.rank||1===l.rank,(()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${l.rank}.`)),null!=c&&i(3===c.rank||1===c.rank,(()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${c.rank}.`)),null!=p&&i(3===p.rank||1===p.rank,(()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${p.rank}.`)),Qo(o,u,l,p,c,s)}});const ei=ma({batchNorm4d_:function(e,t,n,r,a,s){const o=da(e,"x","batchNorm"),u=da(t,"mean","batchNorm"),l=da(n,"variance","batchNorm");let c,p;return null!=a&&(c=da(a,"scale","batchNorm")),null!=r&&(p=da(r,"offset","batchNorm")),i(4===o.rank,(()=>`Error in batchNorm4D: x must be rank 4 but got rank ${o.rank}.`)),i(4===u.rank||1===u.rank,(()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${u.rank}.`)),i(4===l.rank||1===l.rank,(()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${l.rank}.`)),null!=c&&i(4===c.rank||1===c.rank,(()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${c.rank}.`)),null!=p&&i(4===p.rank||1===p.rank,(()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${p.rank}.`)),Qo(o,u,l,p,c,s)}});const ti=ma({bincount_:function(e,t,n){const r=da(e,"x","bincount"),a=da(t,"weights","bincount");i("int32"===r.dtype,(()=>`Error in bincount: input dtype must be int32, but got ${r.dtype}`)),i(n>=0,(()=>`size must be non-negative, but got ${n}.`)),i(a.size===r.size||0===a.size,(()=>`Error in bincount: weights must have the same size as input or0-length, but got input shape: ${r.shape}, weights shape: ${a.shape}.`));const s={x:r,weights:a},o={size:n};return ra.runKernel(he,s,o)}});const ni=ma({broadcastTo_:function(e,t){let n=da(e,"broadcastTo","x");const r=n.shape;if(t.some((e=>!(e>0)||e%1!=0)))throw new Error(`broadcastTo(): Invalid broadcast shape [${t}].`);if(t.length<n.rank)throw new Error(`broadcastTo(): shape.length=${t.length} < input.rank=${n.rank}.`);if(t.length>n.rank){const e=n.shape.slice();for(;e.length<t.length;)e.unshift(1);n=Uo(n,e)}const a=n.shape,s=Array.from(t);for(let e=t.length-1;e>=0;e--)if(a[e]===t[e])s[e]=1;else if(1!==n.shape[e])throw new Error(`broadcastTo(): [${r}] cannot be broadcast to [${t}].`);if(0===s.map(((e,t)=>e>1?t:-1)).filter((e=>e>=0)).length)return Go(n);const o={x:n},i={reps:s};return ra.runKernel(mn,o,i)}});function ri(e,t="float32",n){return t=t||"float32",P(e),new Mr(e,t,n)}const ai=ma({ceil_:function(e){const t={x:da(e,"x","ceil")};return ra.runKernel(me,t)}});const si=ma({clipByValue_:function(e,t,n){const r=da(e,"x","clipByValue");i(t<=n,(()=>`Error in clip: min (${t}) must be less than or equal to max (${n}).`));const a={x:r},s={clipValueMin:t,clipValueMax:n};return ra.runKernel(ge,a,s)}});const oi=ma({concat1d_:function(e){return Ho(e,0)}});const ii=ma({concat2d_:function(e,t){return Ho(e,t)}});const ui=ma({concat3d_:function(e,t){return Ho(e,t)}});const li=ma({concat4d_:function(e,t){return Ho(e,t)}});const ci=ma({conv2d_:function(e,t,n,r,a="NHWC",s=[1,1],o){const u=da(e,"x","conv2d"),l=da(t,"filter","conv2d");let c=u,p=!1;3===u.rank&&(p=!0,c=Uo(u,[1,u.shape[0],u.shape[1],u.shape[2]])),i(4===c.rank,(()=>`Error in conv2d: input must be rank 4, but got rank ${c.rank}.`)),i(4===l.rank,(()=>`Error in conv2d: filter must be rank 4, but got rank ${l.rank}.`)),null!=o&&i(h(r),(()=>`Error in conv2d: pad must be an integer when using, dimRoundingMode ${o} but got pad ${r}.`));const d="NHWC"===a?c.shape[3]:c.shape[1];i(d===l.shape[2],(()=>`Error in conv2d: depth of input (${d}) must match input depth for filter ${l.shape[2]}.`)),i(Po(n,s),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${s}'`));const f={x:c,filter:l},m={strides:n,pad:r,dataFormat:a,dilations:s,dimRoundingMode:o},g=ra.runKernel(ve,f,m);return p?Uo(g,[g.shape[1],g.shape[2],g.shape[3]]):g}});const pi=ma({conv1d_:function(e,t,n,r,a="NWC",s=1,o){const u=da(e,"x","conv1d"),l=da(t,"filter","conv1d");let c=u,p=!1;2===u.rank&&(p=!0,c=Uo(u,[1,u.shape[0],u.shape[1]])),i(3===c.rank,(()=>`Error in conv1d: input must be rank 3, but got rank ${c.rank}.`)),i(3===l.rank,(()=>`Error in conv1d: filter must be rank 3, but got rank ${l.rank}.`)),null!=o&&i(h(r),(()=>`Error in conv1d: pad must be an integer when using, dimRoundingMode ${o} but got pad ${r}.`)),i(c.shape[2]===l.shape[1],(()=>`Error in conv1d: depth of input (${c.shape[2]}) must match input depth for filter ${l.shape[1]}.`)),i(Po(n,s),(()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${n} and dilation '${s}'`)),i("NWC"===a,(()=>`Error in conv1d: got dataFormat of ${a} but only NWC is currently supported.`));const d=Uo(l,[1,l.shape[0],l.shape[1],l.shape[2]]),f=Uo(c,[c.shape[0],1,c.shape[1],c.shape[2]]),m=ci(f,d,[1,n],r,"NHWC",[1,s],o);return Uo(m,p?[m.shape[2],m.shape[3]]:[m.shape[0],m.shape[2],m.shape[3]])}});const di=ma({conv2DBackpropInput_:function(e,t,n,r,a,s="NHWC",o){i(e.length===t.rank,(()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`));let u=e,l=t,c=!1;3===t.rank&&(c=!0,l=Uo(t,[1,t.shape[0],t.shape[1],t.shape[2]]),u=[1,e[0],e[1],e[2]]),i(4===u.length,(()=>`Error in conv2dDerInput: inShape must be length 4, but got length ${u.length}.`)),i(4===l.rank,(()=>`Error in conv2dDerInput: dy must be rank 4, but got rank ${l.rank}`)),i(4===n.rank,(()=>`Error in conv2dDerInput: filter must be rank 4, but got rank ${n.rank}`));const p="NHWC"===s?u[3]:u[1],d="NHWC"===s?l.shape[3]:l.shape[1];i(p===n.shape[2],(()=>`Error in conv2dDerInput: depth of input (${p}) must match input depth for filter ${n.shape[2]}.`)),i(d===n.shape[3],(()=>`Error in conv2dDerInput: depth of output (${d}) must match output depth for filter ${n.shape[3]}.`)),null!=o&&i(h(a),(()=>`Error in conv2dDerInput: pad must be an integer when using, dimRoundingMode ${o} but got pad ${a}.`));const f={dy:l,filter:n},m={strides:r,pad:a,dataFormat:s,dimRoundingMode:o,inputShape:u},g=ra.runKernel(Ee,f,m);return c?Uo(g,[g.shape[1],g.shape[2],g.shape[3]]):g}});const hi=ma({conv2dTranspose_:function(e,t,n,r,a,s){const o=da(e,"x","conv2dTranspose"),i=da(t,"filter","conv2dTranspose");return di(n,o,i,r,a,"NHWC",s)}});const fi=ma({conv3d_:function(e,t,n,r,a="NDHWC",s=[1,1,1]){const o=da(e,"x","conv3d"),u=da(t,"filter","conv3d");let l=o,c=!1;4===o.rank&&(c=!0,l=Uo(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),i(5===l.rank,(()=>`Error in conv3d: input must be rank 5, but got rank ${l.rank}.`)),i(5===u.rank,(()=>`Error in conv3d: filter must be rank 5, but got rank ${u.rank}.`)),i(l.shape[4]===u.shape[3],(()=>`Error in conv3d: depth of input (${l.shape[4]}) must match input depth for filter ${u.shape[3]}.`)),i(Po(n,s),(()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${n} and dilations '${s}'`)),i("NDHWC"===a,(()=>`Error in conv3d: got dataFormat of ${a} but only NDHWC is currently supported.`));const p={x:l,filter:u},d={strides:n,pad:r,dataFormat:a,dilations:s},h=ra.runKernel(Te,p,d);return c?Uo(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}});const mi=ma({conv3DBackpropInput_:function(e,t,n,r,a){i(e.length===t.rank,(()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`));let s=e,o=t,u=!1;4===t.rank&&(u=!0,o=Uo(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]),s=[1,e[0],e[1],e[2],e[3]]);const l=s[4],c=o.shape[4];i(5===s.length,(()=>`Error in conv3dDerInput: inShape must be length 5, but got length ${s.length}.`)),i(5===o.rank,(()=>`Error in conv3dDerInput: dy must be rank 5, but got rank ${o.rank}`)),i(5===n.rank,(()=>`Error in conv3dDerInput: filter must be rank 5, but got rank ${n.rank}`)),i(l===n.shape[3],(()=>`Error in conv3dDerInput: depth of input (${l}) must match input depth for filter ${n.shape[3]}.`)),i(c===n.shape[4],(()=>`Error in conv3dDerInput: depth of output (${c}) must match output depth for filter ${n.shape[4]}.`));const p={dy:o,filter:n},d={pad:a,strides:r,inputShape:s},h=ra.runKernel(Ne,p,d);return u?Uo(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}});const gi=ma({conv3dTranspose_:function(e,t,n,r,a){const s=da(e,"x","conv3dTranspose"),o=da(t,"filter","conv3dTranspose");return mi(n,s,o,r,a)}});const yi=ma({cos_:function(e){const t={x:da(e,"x","cos")};return ra.runKernel("Cos",t)}});const xi=ma({cosh_:function(e){const t={x:da(e,"x","cosh")};return ra.runKernel(ke,t)}});const bi=ma({cumsum_:function(e,t=0,n=!1,r=!1){const a={x:da(e,"x","cumsum")},s={axis:t,exclusive:n,reverse:r};return ra.runKernel($e,a,s)}});const vi=ma({denseBincount_:function(e,t,n,r=!1){const a=da(e,"x","denseBincount"),s=da(t,"weights","denseBincount");i("int32"===a.dtype,(()=>`Error in denseBincount: input dtype must be int32, but got ${a.dtype}`)),i(a.rank<=2,(()=>`Error in denseBincount: input must be at most rank 2, but got rank ${a.rank}.`)),i(n>=0,(()=>`size must be non-negative, but got ${n}.`)),i(s.size===a.size||0===s.size,(()=>`Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${a.shape}, weights shape: ${s.shape}.`));const o={x:a,weights:s},u={size:n,binaryOutput:r};return ra.runKernel(Se,o,u)}});const wi=ma({depthToSpace_:function(e,t,n="NHWC"){const r=da(e,"x","depthToSpace"),a="NHWC"===n?r.shape[1]:r.shape[2],s="NHWC"===n?r.shape[2]:r.shape[3],o="NHWC"===n?r.shape[3]:r.shape[1];i(a*t>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${a} and ${t}  for depthToSpace with input shape\n    ${r.shape}`)),i(s*t>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${s} and ${t} for depthToSpace with input shape\n        ${r.shape}`)),i(o%(t*t)==0,(()=>`Dimension size must be evenly divisible by ${t*t} but is ${o} for depthToSpace with input shape ${r.shape}`));const u={x:r},l={blockSize:t,dataFormat:n};return ra.runKernel(_e,u,l)}});const Ei=ma({depthwiseConv2d_:function(e,t,n,r,a="NHWC",s=[1,1],o){const u=da(e,"x","depthwiseConv2d"),l=da(t,"filter","depthwiseConv2d");let c=u,p=!1;3===u.rank&&(p=!0,c=Uo(u,[1,u.shape[0],u.shape[1],u.shape[2]])),i(4===c.rank,(()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${c.rank}.`)),i(4===l.rank,(()=>`Error in depthwiseConv2d: filter must be rank 4, but got rank ${l.rank}.`)),i(c.shape[3]===l.shape[2],(()=>`Error in depthwiseConv2d: number of input channels (${c.shape[3]}) must match the inChannels dimension in filter ${l.shape[2]}.`)),null!=o&&i(h(r),(()=>`Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode ${o} but got pad ${r}.`));const d={x:c,filter:l},f={strides:n,pad:r,dataFormat:a,dilations:s,dimRoundingMode:o},m=ra.runKernel(Ce,d,f);return p?Uo(m,[m.shape[1],m.shape[2],m.shape[3]]):m}});const Ti=ma({diag_:function(e){const t={x:da(e,"x","diag")};return ra.runKernel(Oe,t)}});const Ni=ma({dilation2d_:function(e,t,n,r,a=[1,1],s="NHWC"){const o=da(e,"x","dilation2d"),u=da(t,"filter","dilation2d");i(3===o.rank||4===o.rank,(()=>`Error in dilation2d: input must be rank 3 or 4, but got rank ${o.rank}.`)),i(3===u.rank,(()=>`Error in dilation2d: filter must be rank 3, but got rank ${u.rank}.`)),i("NHWC"===s,(()=>`Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${s}`));let l=o,c=!1;3===o.rank&&(l=Uo(o,[1,o.shape[0],o.shape[1],o.shape[2]]),c=!0);const p={x:l,filter:u},d={strides:n,pad:r,dilations:a},h=ra.runKernel(Me,p,d);return c?Uo(h,[h.shape[1],h.shape[2],h.shape[3]]):h}});function ki(e,t){const n=e.length,r=[];for(let a=0;a<n;a++){const s=n-1-a,o=e[s]||1;(t[t.length-1-a]||1)>1&&1===o&&r.unshift(s)}return r}function $i(e,t){const n=[];for(let r=0;r<t.length;r++){const a=e[e.length-r-1],s=t.length-r-1,o=t[s];(null==a||1===a&&o>1)&&n.unshift(s)}return n}function Ii(e,t){const n=[],r=Math.max(e.length,t.length);for(let a=0;a<r;a++){let r=e[e.length-a-1];null==r&&(r=1);let s=t[t.length-a-1];if(null==s&&(s=1),1===r)n.unshift(s);else if(1===s)n.unshift(r);else{if(r!==s){throw Error(`Operands could not be broadcast together with shapes ${e} and ${t}.`)}n.unshift(r)}}return n}const Si=ma({equal_:function(e,t){let n=da(e,"a","equal","string_or_numeric"),r=da(t,"b","equal","string_or_numeric");[n,r]=qr(n,r),Ii(n.shape,r.shape);const a={a:n,b:r};return ra.runKernel(Be,a)}});const _i=ma({where_:function(e,t,n){const r=da(t,"a","where"),a=da(n,"b","where"),s=da(e,"condition","where","bool"),o=Ii(Ii(s.shape,r.shape),a.shape),i={condition:ni(s,o),t:ni(r,o),e:ni(a,o)};return ra.runKernel(Gt,i)}});const Ci=ma({zerosLike_:function(e){const t={x:da(e,"x","zerosLike")};return ra.runKernel(En,t)}});const Ai=ma({divNoNan_:function(e,t){let n=da(e,"a","div"),r=da(t,"b","div");[n,r]=qr(n,r);const a=mo(n,r),s=Ci(a),o=Si(r,s);return _i(o,s,a)}});const Ri=ma({dot_:function(e,t){const n=da(e,"t1","dot"),r=da(t,"t2","dot");i(!(1!==n.rank&&2!==n.rank||1!==r.rank&&2!==r.rank),(()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${n.rank} and ${r.rank}.`));const a=1===n.rank?n.size:n.shape[1],s=1===r.rank?r.size:r.shape[0];if(i(a===s,(()=>`Error in dot: inner dimensions of inputs must match, but got ${a} and ${s}.`)),1===n.rank&&1===r.rank){const e=Uo(n,[1,-1]),t=Uo(r,[-1,1]),a=gs(e,t);return Uo(a,[])}if(1===n.rank&&2===r.rank){const e=Uo(n,[1,-1]),t=Uo(r,[r.shape[0],r.shape[1]]),a=gs(e,t);return Uo(a,[a.size])}if(2===n.rank&&1===r.rank){const e=Uo(r,[-1,1]),t=gs(n,e);return Uo(t,[t.size])}{const e=Uo(r,[r.shape[0],r.shape[1]]);return gs(n,e)}}});const Oi=ma({einsum_:function(e,...t){const n=t.map(((e,t)=>da(e,`tensors${t}`,"einsum"))),r={equation:e};return ra.runKernel(Fe,n,r)}});const Mi=ma({elu_:function(e){const t={x:da(e,"x","elu")};return ra.runKernel(Le,t)}});const Di=ma({erf_:function(e){let t=da(e,"x","erf");i("int32"===t.dtype||"float32"===t.dtype,(()=>"Input dtype must be `int32` or `float32`.")),"int32"===t.dtype&&(t=ms(t,"float32"));const n={x:t};return ra.runKernel("Erf",n)}});const Fi=ma({exp_:function(e){const t={x:da(e,"x","exp")};return ra.runKernel(Pe,t)}});const Li=ma({expandDims_:function(e,t=0){const n=da(e,"x","expandDims","string_or_numeric");i(t<=n.rank,(()=>"Axis must be <= rank of the tensor"));const r={input:n},a={dim:t};return ra.runKernel(Ve,r,a)}});const Bi=ma({expm1_:function(e){const t={x:da(e,"x","expm1")};return ra.runKernel(Ue,t)}});const Pi=ma({tile_:function(e,t){const n=da(e,"x","tile","string_or_numeric");i(n.rank===t.length,(()=>`Error in transpose: rank of input ${n.rank} must match length of reps ${t}.`));const r={x:n},a={reps:t};return ra.runKernel(mn,r,a)}});const Vi=ma({eye_:function(e,t,n,r="float32"){null==t&&(t=e);const a=ri([e,t],r),s=e<=t?e:t;for(let e=0;e<s;++e)a.set(1,e,e);const o=Uo(a.toTensor(),[e,t]);if(null==n)return o;if(1===n.length)return Pi(Li(o,0),[n[0],1,1]);if(2===n.length)return Pi(Li(Li(o,0),0),[n[0],n[1],1,1]);if(3===n.length)return Pi(Li(Li(Li(o,0),0),0),[n[0],n[1],n[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${n.length}D.`)}});function Ui(e,t,n){const r={shape:e,value:t,dtype:n};return ra.runKernel(ze,{},r)}const zi=ma({floor_:function(e){const t={x:da(e,"x","floor")};return ra.runKernel(Ge,t)}});const Wi=ma({gather_:function(e,t,n=0,r=0){const a={x:da(e,"x","gather"),indices:da(t,"indices","gather","int32")},s={axis:n,batchDims:r};return ra.runKernel(Ke,a,s)}});const Gi=ma({greater_:function(e,t){let n=da(e,"a","greater","string_or_numeric"),r=da(t,"b","greater","string_or_numeric");[n,r]=qr(n,r),Ii(n.shape,r.shape);const a={a:n,b:r};return ra.runKernel(Xe,a)}});const Hi=ma({greaterEqual_:function(e,t){let n=da(e,"a","greaterEqual","string_or_numeric"),r=da(t,"b","greaterEqual","string_or_numeric");[n,r]=qr(n,r),Ii(n.shape,r.shape);const a={a:n,b:r};return ra.runKernel(Ye,a)}});const ji=ma({imag_:function(e){const t={input:da(e,"input","imag")};return ra.runKernel(Je,t)}});const Ki=ma({isFinite_:function(e){const t={x:da(e,"x","isFinite")};return ra.runKernel(et,t)}});const qi=ma({isInf_:function(e){const t={x:da(e,"x","isInf")};return ra.runKernel(tt,t)}});const Xi=ma({isNaN_:function(e){const t={x:da(e,"x","isNaN")};return ra.runKernel(nt,t)}});const Yi=ma({leakyRelu_:function(e,t=.2){const n={x:da(e,"x","leakyRelu")},r={alpha:t};return ra.runKernel(rt,n,r)}});const Qi=ma({less_:function(e,t){let n=da(e,"a","less","string_or_numeric"),r=da(t,"b","less","string_or_numeric");[n,r]=qr(n,r),Ii(n.shape,r.shape);const a={a:n,b:r};return ra.runKernel(at,a)}});const Zi=ma({lessEqual_:function(e,t){let n=da(e,"a","lessEqual","string_or_numeric"),r=da(t,"b","lessEqual","string_or_numeric");[n,r]=qr(n,r),Ii(n.shape,r.shape);const a={a:n,b:r};return ra.runKernel(st,a)}});const Ji=ma({localResponseNormalization_:function(e,t=5,n=1,r=1,a=.5){const s=da(e,"x","localResponseNormalization");i(4===s.rank||3===s.rank,(()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${s.rank}.`)),i(h(t),(()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${t}.`));let o=s,u=!1;3===s.rank&&(u=!0,o=Uo(s,[1,s.shape[0],s.shape[1],s.shape[2]]));const l={x:o},c={depthRadius:t,bias:n,alpha:r,beta:a},p=ra.runKernel("LRN",l,c);return u?Uo(p,[p.shape[1],p.shape[2],p.shape[3]]):p}});const eu=ma({log_:function(e){const t={x:da(e,"x","log")};return ra.runKernel(it,t)}});const tu=ma({log1p_:function(e){const t={x:da(e,"x","log1p")};return ra.runKernel(ut,t)}});function nu(e,t){i(R(e),(()=>"The f passed in variableGrads(f) must be a function")),i(null==t||Array.isArray(t)&&t.every((e=>e instanceof Pr)),(()=>"The varList passed in variableGrads(f, varList) must be an array of variables"));const n=null!=t;if(!n){t=[];for(const e in ra.registeredVariables)t.push(ra.registeredVariables[e])}const r=n?t.filter((e=>!e.trainable)):null,a=t.length;i((t=t.filter((e=>e.trainable))).length>0,(()=>`variableGrads() expects at least one of the input variables to be trainable, but none of the ${a} variables is trainable.`));const{value:s,grads:o}=ra.gradients(e,t,null,!0);i(o.some((e=>null!=e)),(()=>"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize().")),i(0===s.rank,(()=>`The f passed in variableGrads(f) must return a scalar, but it returned a rank-${s.rank} tensor`));const u={};return t.forEach(((e,t)=>{null!=o[t]&&(u[e.name]=o[t])})),null!=r&&r.forEach((e=>u[e.name]=null)),{value:s,grads:u}}function ru(e){return ra.customGrad(e)}function au(e){if(e.filter((e=>null==e)).length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that\n    the f you passed encloses all operations that lead from x to y.")}const su=ma({neg_:function(e){const t={x:da(e,"x","neg")};return ra.runKernel(wt,t)}});const ou=ma({softplus_:function(e){const t={x:da(e,"x","softplus")};return ra.runKernel(Yt,t)}});const iu=ma({logSigmoid_:function(e){const t=da(e,"x","logSigmoid");return ru((e=>({value:su(ou(su(e))),gradFunc:t=>go(t,jo(su(e)))})))(t)}});const uu=ma({max_:function(e,t=null,n=!1){const r={x:da(e,"x","max")},a={reductionIndices:t,keepDims:n};return ra.runKernel("Max",r,a)}});const lu=ma({sub_:function(e,t){let n=da(e,"a","sub"),r=da(t,"b","sub");[n,r]=qr(n,r);const a={a:n,b:r};return ra.runKernel(hn,a)}});const cu=ma({sum_:function(e,t=null,n=!1){let r=da(e,"x","sum");"bool"===r.dtype&&(r=ms(r,"int32"));const a={x:r},s={axis:t,keepDims:n};return ra.runKernel(Zt,a,s)}});const pu=ma({logSoftmax_:function(e,t=-1){const n=da(e,"logits","logSoftmax");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and axis was ${t}`);return ru(((e,n)=>{const r=uu(e,t,!0),a=lu(e,r),s=lu(ms(a,"float32"),eu(cu(Fi(a),t,!0)));n([s]);return{value:s,gradFunc:(e,n)=>{const[r]=n,a=Fi(r);return lu(e,go(cu(e,t,!0),a))}}}))(n)}});function du(e,t){for(let n=0;n<e.length;++n)if(e[e.length-n-1]!==t-1-n)return!1;return!0}function hu(e,t,n){const r=e.length+t.length,a=[];let s=0,o=0;for(let i=0;i<r;i++)-1===n.indexOf(i)?a.push(e[s++]):a.push(t[o++]);return a}function fu(e,t){const n=[],r=e.length;for(let a=0;a<r;a++)-1===t.indexOf(a)&&n.push(e[a]);return[n,t.map((t=>e[t]))]}function mu(e,t){return hu(e,t.map((e=>1)),t)}function gu(e,t,n){i(du(t,n),(()=>`${e} supports only inner-most axes for now. Got axes ${t} and rank-${n} input.`))}function yu(e,t){if(du(e,t))return null;const n=[];for(let r=0;r<t;++r)-1===e.indexOf(r)&&n.push(r);return e.forEach((e=>n.push(e))),n}function xu(e,t){const n=[];for(let r=t-e;r<t;++r)n.push(r);return n}const bu=ma({logSumExp_:function(e,t=null,n=!1){const r=da(e,"x","logSumExp"),a=x(t,r.shape),s=uu(r,a,!0),o=lu(r,s),i=Fi(o),u=cu(i,a),l=eu(u),c=ho(Uo(s,l.shape),l);if(n){const e=mu(c.shape,a);return Uo(c,e)}return c}});const vu=ma({logicalAnd_:function(e,t){const n=da(e,"a","logicalAnd","bool"),r=da(t,"b","logicalAnd","bool");Ii(n.shape,r.shape);const a={a:n,b:r};return ra.runKernel(lt,a)}});const wu=ma({logicalNot_:function(e){const t={x:da(e,"x","logicalNot","bool")};return ra.runKernel(ct,t)}});const Eu=ma({logicalOr_:function(e,t){const n=da(e,"a","logicalOr","bool"),r=da(t,"b","logicalOr","bool");Ii(n.shape,r.shape);const a={a:n,b:r};return ra.runKernel(pt,a)}});const Tu=ma({logicalXor_:function(e,t){const n=da(e,"a","logicalXor","bool"),r=da(t,"b","logicalXor","bool");return Ii(n.shape,r.shape),vu(Eu(e,t),wu(vu(e,t)))}});const Nu=ma({maxPool_:function(e,t,n,r,a){const s=da(e,"x","maxPool");let o=s,u=!1;3===s.rank&&(u=!0,o=Uo(s,[1,s.shape[0],s.shape[1],s.shape[2]])),i(4===o.rank,(()=>`Error in maxPool: input must be rank 4 but got rank ${o.rank}.`)),i(Po(n,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`)),null!=a&&i(h(r),(()=>`Error in maxPool: pad must be an integer when using, dimRoundingMode ${a} but got pad ${r}.`));const l={x:o},c={filterSize:t,strides:n,pad:r,dimRoundingMode:a},p=ra.runKernel(ht,l,c);return u?Uo(p,[p.shape[1],p.shape[2],p.shape[3]]):p}});const ku=ma({maxPool3d_:function(e,t=[1,1,1],n,r,a,s="NDHWC"){const o=da(e,"x","maxPool3d");let u=o,l=!1;4===o.rank&&(l=!0,u=Uo(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),i(5===u.rank,(()=>`Error in maxPool3d: x must be rank 5 but got rank ${u.rank}.`)),i("NDHWC"===s,(()=>`Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${s}`)),null!=a&&i(h(r),(()=>`Error in maxPool3d: pad must be an integer when using, dimRoundingMode ${a} but got pad ${r}.`));const c={x:u},p={filterSize:t,strides:n,pad:r,dimRoundingMode:a,dataFormat:s},d=ra.runKernel(ft,c,p);return l?Uo(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}});const $u=ma({maxPoolWithArgmax_:function(e,t,n,r,a=!1){const s={x:da(e,"x","maxPoolWithArgmax")},o={filterSize:t,strides:n,pad:r,includeBatchInIndex:a},i=ra.runKernel(mt,s,o);return{result:i[0],indexes:i[1]}}});const Iu=ma({maximum_:function(e,t){let n=da(e,"a","maximum"),r=da(t,"b","maximum");[n,r]=qr(n,r),"bool"===n.dtype&&(n=ms(n,"int32"),r=ms(r,"int32")),Ii(n.shape,r.shape);const a={a:n,b:r};return ra.runKernel(dt,a)}});const Su=ma({mean_:function(e,t=null,n=!1){const r={x:da(e,"x","mean")},a={axis:t,keepDims:n};return ra.runKernel(gt,r,a)}});function _u(e,t="float32"){if("complex64"===t){const t=_u(e,"float32"),n=_u(e,"float32");return ga(t,n)}const n=B(p(e),t);return ra.makeTensor(n,e,t)}function Cu(e,t="float32"){if("complex64"===t){const t=Cu(e,"float32"),n=_u(e,"float32");return ga(t,n)}const n=L(p(e),t);return ra.makeTensor(n,e,t)}const Au=ma({min_:function(e,t=null,n=!1){const r={x:da(e,"x","min")},a={axis:t,keepDims:n};return ra.runKernel("Min",r,a)}});const Ru=ma({minimum_:function(e,t){let n=da(e,"a","minimum"),r=da(t,"b","minimum");[n,r]=qr(n,r),"bool"===n.dtype&&(n=ms(n,"int32"),r=ms(r,"int32")),Ii(n.shape,r.shape);const a={a:n,b:r};return ra.runKernel(yt,a)}});const Ou=ma({mirrorPad_:function(e,t,n){i("reflect"===n||"symmetric"===n,(()=>`Invalid mode. Mode must be either reflect or symmetric. Got ${n}.`));const r=da(e,"x","mirrorPad");if(0===r.rank)throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");i(t.length===r.rank,(()=>`Padding doesn't match input. Must be ${r.rank}. Got ${t.length}.`));const a="reflect"===n?1:0;for(let e=0;e<r.rank;e++)i(2===t[e].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),i(t[e][0]>=0&&t[e][0]<=r.shape[e]-a&&t[e][1]>=0&&t[e][1]<=r.shape[e]-a,(()=>`Padding in dimension ${e} cannot be greater than or equal to ${r.shape[e]-a} or less than 0 for input of shape ${r.shape}`));const s={paddings:t,mode:n},o={x:r};return ra.runKernel(xt,o,s)}});const Mu=ma({mod_:function(e,t){let n=da(e,"a","mod"),r=da(t,"b","mod");[n,r]=qr(n,r);const a={a:n,b:r};return ra.runKernel("Mod",a)}});const Du=ma({square_:function(e){const t=da(e,"x","square");return ra.runKernel("Square",{x:t},{})}});const Fu=ma({moments_:function(e,t=null,n=!1){const r=x(t,(e=da(e,"x","moments")).shape),a=Su(e,r,n);let s=a.shape;n||(s=mu(a.shape,r));const o=Du(lu(ms(e,"float32"),Uo(a,s)));return{mean:a,variance:Su(o,r,n)}}});const Lu=ma({multiRNNCell_:function(e,t,n,r){const a=da(t,"data","multiRNNCell"),s=ha(n,"c","multiRNNCell"),o=ha(r,"h","multiRNNCell");let i=a;const u=[];for(let t=0;t<e.length;t++){const n=e[t](i,s[t],o[t]);u.push(n[0]),u.push(n[1]),i=n[1]}const l=[],c=[];for(let e=0;e<u.length;e+=2)l.push(u[e]),c.push(u[e+1]);return[l,c]}});const Bu=ma({multinomial_:function(e,t,n,r=!1){const a=da(e,"logits","multinomial"),s=a.size,o=a.rank;if(s<2)throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ${s}.`);if(o>2)throw new Error(`Rank of probabilities must be 1 or 2, but is ${o}`);n=n||Math.random();const i={logits:1===o?Uo(a,[1,-1]):a},u={numSamples:t,seed:n,normalized:r},l=ra.runKernel(bt,i,u);return 1===o?Uo(l,[l.size]):l}});const Pu=ma({notEqual_:function(e,t){let n=da(e,"a","notEqual","string_or_numeric"),r=da(t,"b","notEqual","string_or_numeric");[n,r]=qr(n,r),Ii(n.shape,r.shape);const a={a:n,b:r};return ra.runKernel(Et,a)}});const Vu=ma({onesLike_:function(e){const t={x:da(e,"x","onesLike")};return ra.runKernel($t,t)}});const Uu=ma({outerProduct_:function(e,t){const n=da(e,"v1","outerProduct"),r=da(t,"v2","outerProduct");i(1===n.rank&&1===r.rank,(()=>`Error in outerProduct: inputs must be rank 1, but got ranks ${n.rank} and ${r.rank}.`));const a=Uo(n,[-1,1]),s=Uo(r,[1,-1]);return gs(a,s)}});const zu=ma({pad_:function(e,t,n=0){const r=da(e,"x","pad");if(0===r.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");const a={paddings:t,constantValue:n},s={x:r};return ra.runKernel(_t,s,a)}});const Wu=ma({pad1d_:function(e,t,n=0){return i(2===t.length,(()=>"Invalid number of paddings. Must be length of 2.")),zu(e,[t],n)}});const Gu=ma({pad2d_:function(e,t,n=0){return i(2===t.length&&2===t[0].length&&2===t[1].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),zu(e,t,n)}});const Hu=ma({pad3d_:function(e,t,n=0){return i(3===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),zu(e,t,n)}});const ju=ma({pad4d_:function(e,t,n=0){return i(4===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length&&2===t[3].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),zu(e,t,n)}});const Ku=ma({spaceToBatchND_:function(e,t,n){const r=da(e,"x","spaceToBatchND");i(r.rank>=1+t.length,(()=>`input rank ${r.rank} should be > than [blockShape] ${t.length}`)),i(n.length===t.length,(()=>`paddings.shape[0] ${n.length} must be equal to [blockShape] ${t.length}`)),i(r.shape.reduce(((e,r,a)=>a>0&&a<=t.length?e&&(r+n[a-1][0]+n[a-1][1])%t[a-1]==0:e),!0),(()=>`input spatial dimensions ${r.shape.slice(1)} with paddings ${n.toString()} must be divisible by blockShapes ${t.toString()}`));const a={x:r},s={blockShape:t,paddings:n};return ra.runKernel(Jt,a,s)}});const qu=ma({pool_:function(e,t,n,r,a,s){null==a&&(a=[1,1]),null==s&&(s=1),0===r&&(r="valid");const o=da(e,"x","maxPool");let u=o,l=!1;3===o.rank&&(l=!0,u=Uo(o,[1,o.shape[0],o.shape[1],o.shape[2]])),i(Po(s,a),(()=>`Error in pool: Either strides or dilations must be 1. Got strides ${s} and dilations '${a}'`));const c=Co(u.shape,t,s,a,r),p=[c.dilationHeight,c.dilationWidth];let d;d="same"===r?function(e,t){const n=e.map(((e,n)=>e+(e-1)*(t[n]-1))).map((e=>e-1)),r=n.map((e=>Math.floor(e/2))),a=n.map(((e,t)=>e-r[t]));return n.map(((e,t)=>[r[t],a[t]]))}([c.filterHeight,c.filterWidth],p):[[0,0],[0,0]];const h=1===p[0]&&1===p[1],[f,m]=function(e,t,n){const r=n.map((e=>e[0])),a=n.map((e=>e[1])),s=e.concat(r,a),o=t.map(((e,t)=>(e-s[t]%e)%e)),i=a.map(((e,t)=>e+o[t])),u=t.map(((e,t)=>[r[t],i[t]])),l=t.map(((e,t)=>[0,o[t]]));return[u,l]}([c.inHeight,c.inWidth],p,d),g=h?r:"valid",y=h?u:Ku(u,p,f),x=("avg"===n?()=>zo(y,t,s,g):()=>Nu(y,t,s,g))(),b=h?x:Yo(x,p,m);return l?Uo(b,[b.shape[1],b.shape[2],b.shape[3]]):b}});const Xu=ma({pow_:function(e,t){let n=da(e,"base","pow"),r=da(t,"exp","pow");[n,r]=qr(n,r);const a={a:n,b:r};return ra.runKernel("Pow",a)}});const Yu=ma({prelu_:function(e,t){const n={x:da(e,"x","prelu"),alpha:da(t,"alpha","prelu")};return ra.runKernel(Ct,n)}});function Qu(e,t=!1){console.log(e.toString(t))}const Zu=ma({prod_:function(e,t=null,n=!1){let r=da(e,"x","prod");"bool"===r.dtype&&(r=ms(r,"int32"));const a={x:r},s={axis:t,keepDims:n};return ra.runKernel(At,a,s)}});const Ju=ma({rand_:function(e,t,n){const r=p(e);let a=null;if(null==n||"float32"===n)a=new Float32Array(r);else if("int32"===n)a=new Int32Array(r);else{if("bool"!==n)throw new Error(`Unknown data type ${n}`);a=new Uint8Array(r)}for(let e=0;e<r;e++)a[e]=t();return ra.makeTensor(a,e,n)}});"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self&&self;function el(e){if(e.__esModule)return e;var t=Object.defineProperty({},"__esModule",{value:!0});return Object.keys(e).forEach((function(n){var r=Object.getOwnPropertyDescriptor(e,n);Object.defineProperty(t,n,r.get?r:{enumerable:!0,get:function(){return e[n]}})})),t}function tl(e){var t={exports:{}};return e(t,t.exports),t.exports}var nl=tl((function(e){!function(e,t,n){function r(e){var t,n=this,r=(t=4022871197,function(e){e=e.toString();for(var n=0;n<e.length;n++){var r=.02519603282416938*(t+=e.charCodeAt(n));r-=t=r>>>0,t=(r*=t)>>>0,t+=4294967296*(r-=t)}return 2.3283064365386963e-10*(t>>>0)});n.next=function(){var e=2091639*n.s0+2.3283064365386963e-10*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=e-(n.c=0|e)},n.c=1,n.s0=r(" "),n.s1=r(" "),n.s2=r(" "),n.s0-=r(e),n.s0<0&&(n.s0+=1),n.s1-=r(e),n.s1<0&&(n.s1+=1),n.s2-=r(e),n.s2<0&&(n.s2+=1),r=null}function a(e,t){return t.c=e.c,t.s0=e.s0,t.s1=e.s1,t.s2=e.s2,t}function s(e,t){var n=new r(e),s=t&&t.state,o=n.next;return o.int32=function(){return 4294967296*n.next()|0},o.double=function(){return o()+11102230246251565e-32*(2097152*o()|0)},o.quick=o,s&&("object"==typeof s&&a(s,n),o.state=function(){return a(n,{})}),o}t&&t.exports?t.exports=s:n&&n.amd?n((function(){return s})):this.alea=s}(0,e,!1)})),rl=tl((function(e){!function(e,t,n){function r(e){var t=this,n="";t.x=0,t.y=0,t.z=0,t.w=0,t.next=function(){var e=t.x^t.x<<11;return t.x=t.y,t.y=t.z,t.z=t.w,t.w^=t.w>>>19^e^e>>>8},e===(0|e)?t.x=e:n+=e;for(var r=0;r<n.length+64;r++)t.x^=0|n.charCodeAt(r),t.next()}function a(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t}function s(e,t){var n=new r(e),s=t&&t.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},o.int32=n.next,o.quick=o,s&&("object"==typeof s&&a(s,n),o.state=function(){return a(n,{})}),o}t&&t.exports?t.exports=s:n&&n.amd?n((function(){return s})):this.xor128=s}(0,e,!1)})),al=tl((function(e){!function(e,t,n){function r(e){var t=this,n="";t.next=function(){var e=t.x^t.x>>>2;return t.x=t.y,t.y=t.z,t.z=t.w,t.w=t.v,(t.d=t.d+362437|0)+(t.v=t.v^t.v<<4^e^e<<1)|0},t.x=0,t.y=0,t.z=0,t.w=0,t.v=0,e===(0|e)?t.x=e:n+=e;for(var r=0;r<n.length+64;r++)t.x^=0|n.charCodeAt(r),r==n.length&&(t.d=t.x<<10^t.x>>>4),t.next()}function a(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t.v=e.v,t.d=e.d,t}function s(e,t){var n=new r(e),s=t&&t.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},o.int32=n.next,o.quick=o,s&&("object"==typeof s&&a(s,n),o.state=function(){return a(n,{})}),o}t&&t.exports?t.exports=s:n&&n.amd?n((function(){return s})):this.xorwow=s}(0,e,!1)})),sl=tl((function(e){!function(e,t,n){function r(e){var t=this;t.next=function(){var e,n,r=t.x,a=t.i;return e=r[a],n=(e^=e>>>7)^e<<24,n^=(e=r[a+1&7])^e>>>10,n^=(e=r[a+3&7])^e>>>3,n^=(e=r[a+4&7])^e<<7,e=r[a+7&7],n^=(e^=e<<13)^e<<9,r[a]=n,t.i=a+1&7,n},function(e,t){var n,r=[];if(t===(0|t))r[0]=t;else for(t=""+t,n=0;n<t.length;++n)r[7&n]=r[7&n]<<15^t.charCodeAt(n)+r[n+1&7]<<13;for(;r.length<8;)r.push(0);for(n=0;n<8&&0===r[n];++n);for(8==n?r[7]=-1:r[n],e.x=r,e.i=0,n=256;n>0;--n)e.next()}(t,e)}function a(e,t){return t.x=e.x.slice(),t.i=e.i,t}function s(e,t){null==e&&(e=+new Date);var n=new r(e),s=t&&t.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},o.int32=n.next,o.quick=o,s&&(s.x&&a(s,n),o.state=function(){return a(n,{})}),o}t&&t.exports?t.exports=s:n&&n.amd?n((function(){return s})):this.xorshift7=s}(0,e,!1)})),ol=tl((function(e){!function(e,t,n){function r(e){var t=this;t.next=function(){var e,n,r=t.w,a=t.X,s=t.i;return t.w=r=r+1640531527|0,n=a[s+34&127],e=a[s=s+1&127],n^=n<<13,e^=e<<17,n^=n>>>15,e^=e>>>12,n=a[s]=n^e,t.i=s,n+(r^r>>>16)|0},function(e,t){var n,r,a,s,o,i=[],u=128;for(t===(0|t)?(r=t,t=null):(t+="\0",r=0,u=Math.max(u,t.length)),a=0,s=-32;s<u;++s)t&&(r^=t.charCodeAt((s+32)%t.length)),0===s&&(o=r),r^=r<<10,r^=r>>>15,r^=r<<4,r^=r>>>13,s>=0&&(o=o+1640531527|0,a=0==(n=i[127&s]^=r+o)?a+1:0);for(a>=128&&(i[127&(t&&t.length||0)]=-1),a=127,s=512;s>0;--s)r=i[a+34&127],n=i[a=a+1&127],r^=r<<13,n^=n<<17,r^=r>>>15,n^=n>>>12,i[a]=r^n;e.w=o,e.X=i,e.i=a}(t,e)}function a(e,t){return t.i=e.i,t.w=e.w,t.X=e.X.slice(),t}function s(e,t){null==e&&(e=+new Date);var n=new r(e),s=t&&t.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},o.int32=n.next,o.quick=o,s&&(s.X&&a(s,n),o.state=function(){return a(n,{})}),o}t&&t.exports?t.exports=s:n&&n.amd?n((function(){return s})):this.xor4096=s}(0,e,!1)})),il=tl((function(e){!function(e,t,n){function r(e){var t=this,n="";t.next=function(){var e=t.b,n=t.c,r=t.d,a=t.a;return e=e<<25^e>>>7^n,n=n-r|0,r=r<<24^r>>>8^a,a=a-e|0,t.b=e=e<<20^e>>>12^n,t.c=n=n-r|0,t.d=r<<16^n>>>16^a,t.a=a-e|0},t.a=0,t.b=0,t.c=-1640531527,t.d=1367130551,e===Math.floor(e)?(t.a=e/4294967296|0,t.b=0|e):n+=e;for(var r=0;r<n.length+20;r++)t.b^=0|n.charCodeAt(r),t.next()}function a(e,t){return t.a=e.a,t.b=e.b,t.c=e.c,t.d=e.d,t}function s(e,t){var n=new r(e),s=t&&t.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},o.int32=n.next,o.quick=o,s&&("object"==typeof s&&a(s,n),o.state=function(){return a(n,{})}),o}t&&t.exports?t.exports=s:n&&n.amd?n((function(){return s})):this.tychei=s}(0,e,!1)})),ul=el(Object.freeze({__proto__:null,default:{}})),ll=tl((function(e){!function(t,n){var r,a=this,s=256,o=n.pow(s,6),i=n.pow(2,52),u=2*i,l=255;function c(e,l,c){var g=[],y=f(h((l=1==l?{entropy:!0}:l||{}).entropy?[e,m(t)]:null==e?function(){try{var e;return r&&(e=r.randomBytes)?e=e(s):(e=new Uint8Array(s),(a.crypto||a.msCrypto).getRandomValues(e)),m(e)}catch(e){var n=a.navigator,o=n&&n.plugins;return[+new Date,a,o,a.screen,m(t)]}}():e,3),g),x=new p(g),b=function(){for(var e=x.g(6),t=o,n=0;e<i;)e=(e+n)*s,t*=s,n=x.g(1);for(;e>=u;)e/=2,t/=2,n>>>=1;return(e+n)/t};return b.int32=function(){return 0|x.g(4)},b.quick=function(){return x.g(4)/4294967296},b.double=b,f(m(x.S),t),(l.pass||c||function(e,t,r,a){return a&&(a.S&&d(a,x),e.state=function(){return d(x,{})}),r?(n.random=e,t):e})(b,y,"global"in l?l.global:this==n,l.state)}function p(e){var t,n=e.length,r=this,a=0,o=r.i=r.j=0,i=r.S=[];for(n||(e=[n++]);a<s;)i[a]=a++;for(a=0;a<s;a++)i[a]=i[o=l&o+e[a%n]+(t=i[a])],i[o]=t;(r.g=function(e){for(var t,n=0,a=r.i,o=r.j,i=r.S;e--;)t=i[a=l&a+1],n=n*s+i[l&(i[a]=i[o=l&o+t])+(i[o]=t)];return r.i=a,r.j=o,n})(s)}function d(e,t){return t.i=e.i,t.j=e.j,t.S=e.S.slice(),t}function h(e,t){var n,r=[],a=typeof e;if(t&&"object"==a)for(n in e)try{r.push(h(e[n],t-1))}catch(e){}return r.length?r:"string"==a?e:e+"\0"}function f(e,t){for(var n,r=e+"",a=0;a<r.length;)t[l&a]=l&(n^=19*t[l&a])+r.charCodeAt(a++);return m(t)}function m(e){return String.fromCharCode.apply(0,e)}if(n.seedrandom=c,f(n.random(),t),e.exports){e.exports=c;try{r=ul}catch(e){}}else 0}([],Math)}));ll.alea=nl,ll.xor128=rl,ll.xorwow=al,ll.xorshift7=sl,ll.xor4096=ol,ll.tychei=il;var cl=ll;class pl{constructor(e,t,n,r,a){this.mean=e,this.stdDev=t,this.dtype=n,this.nextVal=NaN,this.truncated=r,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);const s=a||Math.random();this.random=cl.alea(s.toString())}nextValue(){if(!isNaN(this.nextVal)){const e=this.nextVal;return this.nextVal=NaN,e}let e,t,n=!1;for(;!n;){let r,a,s;do{r=2*this.random()-1,a=2*this.random()-1,s=r*r+a*a}while(s>=1||0===s);const o=Math.sqrt(-2*Math.log(s)/s);e=this.mean+this.stdDev*r*o,t=this.mean+this.stdDev*a*o,this.truncated&&!this.isValidTruncated(e)||(n=!0)}return this.truncated&&!this.isValidTruncated(t)||(this.nextVal=this.convertValue(t)),this.convertValue(e)}convertValue(e){return null==this.dtype||"float32"===this.dtype?e:Math.round(e)}isValidTruncated(e){return e<=this.upper&&e>=this.lower}}class dl{constructor(e,t,n,r){this.alpha=e,this.beta=1/t,this.dtype=n;const a=r||Math.random();this.randu=cl.alea(a.toString()),this.randn=new pl(0,1,n,!1,this.randu()),this.d=e<1?e+2/3:e-1/3,this.c=1/Math.sqrt(9*this.d)}nextValue(){let e,t,n,r,a,s;for(;;){do{r=this.randn.nextValue(),s=1+this.c*r}while(s<=0);if(s*=s*s,e=r*r,t=1-.331*e*e,n=.5*e+this.d*(1-s+Math.log(s)),a=this.randu(),a<t||Math.log(a)<n)break}return s=1/this.beta*this.d*s,this.alpha<1&&(s*=Math.pow(this.randu(),1/this.alpha)),this.convertValue(s)}convertValue(e){return"float32"===this.dtype?e:Math.round(e)}}class hl{constructor(e=0,t=1,n,r){if(this.canReturnFloat=()=>null==this.dtype||"float32"===this.dtype,this.min=e,this.range=t-e,this.dtype=n,null==r&&(r=Math.random()),"number"==typeof r&&(r=r.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${e} - ${t} <= 1 and dtype is not float`);this.random=cl.alea(r)}convertValue(e){return this.canReturnFloat()?e:Math.round(e)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}const fl=ma({randomGamma_:function(e,t,n=1,r="float32",a){if(null==n&&(n=1),null==r&&(r="float32"),"float32"!==r&&"int32"!==r)throw new Error(`Unsupported data type ${r}`);const s=new dl(t,n,r,a),o=ri(e,r);for(let e=0;e<o.values.length;e++)o.values[e]=s.nextValue();return o.toTensor()}});const ml=ma({randomNormal_:function(e,t=0,n=1,r,a){if(null!=r&&"bool"===r)throw new Error(`Unsupported data type ${r}`);const s=new pl(t,n,r,!1,a),o=ri(e,r);for(let e=0;e<o.values.length;e++)o.values[e]=s.nextValue();return o.toTensor()}});const gl=ma({randomUniform_:function(e,t=0,n=1,r="float32",a){const s=ri(e,r),o=new hl(t,n,null,a);for(let e=0;e<s.values.length;e++)s.values[e]=o.nextValue();return s.toTensor()}});function yl(e,t,n=1,r="float32"){if(0===n)throw new Error("Cannot have a step of zero");const a={start:e,stop:t,step:n,dtype:r};return ra.runKernel(Rt,{},a)}const xl=ma({real_:function(e){const t={input:da(e,"input","real")};return ra.runKernel(Ot,t)}});const bl=ma({reciprocal_:function(e){const t={x:da(e,"x","reciprocal")};return ra.runKernel(Mt,t)}});const vl=ma({relu_:function(e){const t={x:da(e,"x","relu")};return ra.runKernel(Dt,t)}});const wl=ma({relu6_:function(e){const t={x:da(e,"x","relu6")};return ra.runKernel(Pt,t)}});const El=ma({reverse_:function(e,t){const n={x:da(e,"x","reverse")},r={dims:t};return ra.runKernel(Vt,n,r)}});const Tl=ma({reverse1d_:function(e){const t=da(e,"x","reverse");return i(1===t.rank,(()=>`Error in reverse1D: x must be rank 1 but got rank ${t.rank}.`)),El(t,0)}});const Nl=ma({reverse2d_:function(e,t){const n=da(e,"x","reverse");return i(2===n.rank,(()=>`Error in reverse2D: x must be rank 2 but got rank ${n.rank}.`)),El(n,t)}});const kl=ma({reverse3d_:function(e,t){const n=da(e,"x","reverse");return i(3===n.rank,(()=>`Error in reverse3D: x must be rank 3 but got rank ${n.rank}.`)),El(n,t)}});const $l=ma({reverse4d_:function(e,t){const n=da(e,"x","reverse");return i(4===n.rank,(()=>`Error in reverse4D: x must be rank 4 but got rank ${n.rank}.`)),El(n,t)}});const Il=ma({round_:function(e){const t={x:da(e,"x","round")};return ra.runKernel(Ut,t)}});const Sl=ma({rsqrt_:function(e){const t={x:da(e,"x","rsqrt")};return ra.runKernel(zt,t)}});function _l(e,t){if((k(e)&&"string"!==t||Array.isArray(e))&&"complex64"!==t)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===t&&k(e)&&!(e instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return ya(e,[],[],t)}const Cl=ma({selu_:function(e){const t={x:da(e,"x","selu")};return ra.runKernel(Ht,t)}});const Al=ma({separableConv2d_:function(e,t,n,r,a,s=[1,1],o="NHWC"){const u=da(e,"x","separableConv2d"),l=da(t,"depthwiseFilter","separableConv2d"),c=da(n,"pointwiseFilter","separableConv2d");let p=u,d=!1;if(3===u.rank&&(d=!0,p=Uo(u,[1,u.shape[0],u.shape[1],u.shape[2]])),"NCHW"===o)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");i(4===p.rank,(()=>`Error in separableConv2d: input must be rank 4, but got rank ${p.rank}.`)),i(4===l.rank,(()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${l.rank}.`)),i(4===c.rank,(()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${l.rank}.`)),i(1===c.shape[0],(()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${c.shape[0]}.`)),i(1===c.shape[1],(()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${c.shape[1]}.`));const h=l.shape[2],f=l.shape[3];i(c.shape[2]===h*f,(()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${h*f}, but got ${c.shape[2]}.`));const m=Ei(p,l,r,a,o,s),g=ci(m,c,1,"valid",o);return d?Uo(g,[g.shape[1],g.shape[2],g.shape[3]]):g}});const Rl=async function(e,t){const n=da(e,"x","setdiff1d"),r=da(t,"y","setdiff1d");i(n.dtype===r.dtype,(()=>`x and y should have the same dtype, but got x (${n.dtype}) and y (${r.dtype}).`)),i(1===n.rank,(()=>`x should be 1D tensor, but got x (${n.shape}).`)),i(1===r.rank,(()=>`y should be 1D tensor, but got y (${r.shape}).`));const a=await n.data(),s=await r.data(),o=new Set(s);let u=0;for(let e=0;e<a.length;e++)o.has(a[e])||u++;const l=new Mr([u],n.dtype),c=new Mr([u],"int32");for(let e=0,t=0;e<a.length;e++)o.has(a[e])||(l.values[t]=a[e],c.values[t]=e,t++);return[l.toTensor(),c.toTensor()]};const Ol=ma({sign_:function(e){const t={x:da(e,"x","sign")};return ra.runKernel(qt,t)}});const Ml=ma({sin_:function(e){const t={x:da(e,"x","sin")};return ra.runKernel("Sin",t)}});const Dl=ma({sinh_:function(e){const t={x:da(e,"x","sinh")};return ra.runKernel(Kt,t)}});const Fl=ma({slice1d_:function(e,t,n){const r=da(e,"x","slice1d");return i(1===r.rank,(()=>`slice1d expects a rank-1 tensor, but got a rank-${r.rank} tensor`)),Ko(r,[t],[n])}});const Ll=ma({slice2d_:function(e,t,n){const r=da(e,"x","slice2d");return i(2===r.rank,(()=>`slice2d expects a rank-2 tensor, but got a rank-${r.rank} tensor`)),Ko(r,t,n)}});const Bl=ma({slice3d_:function(e,t,n){const r=da(e,"x","slice3d");return i(3===r.rank,(()=>`slice3d expects a rank-3 tensor, but got a rank-${r.rank} tensor`)),Ko(r,t,n)}});const Pl=ma({slice4d_:function(e,t,n){const r=da(e,"x","slice4d");return i(4===r.rank,(()=>`slice4d expects a rank-4 tensor, but got a rank-${r.rank} tensor`)),Ko(r,t,n)}});const Vl=ma({softmax_:function(e,t=-1){const n=da(e,"logits","softmax","float32");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and dim was ${t}`);const r={logits:n},a={dim:t};return ra.runKernel(tn,r,a)}});const Ul=ma({fft_:function(e){i("complex64"===e.dtype,(()=>`The dtype for tf.spectral.fft() must be complex64 but got ${e.dtype}.`));const t={input:e};return ra.runKernel("FFT",t)}});const zl=ma({ifft_:function(e){i("complex64"===e.dtype,(()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${e.dtype}.`));const t={input:e};return ra.runKernel(Ze,t)}});const Wl=ma({irfft_:function(e){const t=e.shape[e.shape.length-1],n=e.size/t;let r;if(t<=2){const a=Uo(e,[n,t]);r=zl(a)}else{const a=[n,2*(t-1)],s=Uo(xl(e),[n,t]),o=Uo(ji(e),[n,t]),i=El(Ko(s,[0,1],[n,t-2]),1),u=go(El(Ko(o,[0,1],[n,t-2]),1),_l(-1)),l=Ho([s,i],1),c=Ho([o,u],1),p=Uo(ga(l,c),[a[0],a[1]]);r=zl(p)}if(r=xl(r),3===e.rank&&0!==e.shape[0]){const t=r,n=e.shape[0];r=Uo(r,[n,r.shape[0]/n,r.shape[1]]),t.dispose()}return r}});const Gl=ma({split_:function(e,t,n=0){const r={x:da(e,"x","split")},a={numOrSizeSplits:t,axis:n};return ra.runKernel(en,r,a)}});const Hl=ma({rfft_:function(e,t){i("float32"===e.dtype,(()=>`The dtype for rfft() must be real value but got ${e.dtype}`));let n=e.shape[e.shape.length-1];const r=e.size/n;let a;if(null!=t&&t<n){const r=e.shape.map((e=>0)),s=e.shape.map((e=>e));s[e.shape.length-1]=t,a=Ko(e,r,s),n=t}else if(null!=t&&t>n){const r=e.shape.map((e=>e));r[e.shape.length-1]=t-n,a=Ho([e,_u(r)],e.shape.length-1),n=t}else a=e;const s=Ci(a),o=Uo(ga(a,s),[r,n]),u=Ul(o),l=Math.floor(n/2)+1,c=xl(u),p=ji(u),d=Gl(c,[l,n-l],c.shape.length-1),h=Gl(p,[l,n-l],p.shape.length-1),f=a.shape.slice();return f[a.shape.length-1]=l,Uo(ga(d[0],h[0]),f)}});const jl=ma({sqrt_:function(e){const t={x:da(e,"x","sqrt")};return ra.runKernel(Qt,t)}});const Kl=ma({squaredDifference_:function(e,t){let n=da(e,"a","squaredDifference"),r=da(t,"b","squaredDifference");[n,r]=qr(n,r),Ii(n.shape,r.shape);const a={a:n,b:r};return ra.runKernel(un,a,{})}});const ql=ma({squeeze_:function(e,t){const n=da(e,"x","squeeze");return Uo(n,b(n.shape,t).newShape)}});const Xl=ma({stack_:function(e,t=0){const n=ha(e,"tensors","stack","string_or_numeric");i(n.length>=1,(()=>"Pass at least one tensor to tf.stack")),n.length>0&&i(t<=n[0].rank,(()=>"Axis must be <= rank of the tensor"));const r=n,a={axis:t};return ra.runKernel(St,r,a)}});const Yl=ma({step_:function(e,t=0){const n={x:da(e,"x","step")},r={alpha:t};return ra.runKernel(Tn,n,r)}});const Ql=ma({stridedSlice_:function(e,t,n,r,a=0,s=0,o=0,i=0,u=0){const l={x:da(e,"x","stridedSlice","string_or_numeric")},c={begin:t,end:n,strides:r,beginMask:a,endMask:s,ellipsisMask:o,newAxisMask:i,shrinkAxisMask:u};return ra.runKernel(ln,l,c)}});const Zl=ma({tan_:function(e){const t={x:da(e,"x","tan")};return ra.runKernel("Tan",t)}});function Jl(e,t){l(e);const n=la(e,t);if(1!==n.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return ya(e,null,n,t)}function ec(e,t,n){if(l(e),null!=t&&2!==t.length)throw new Error("tensor2d() requires shape to have two numbers");const r=la(e,n);if(2!==r.length&&1!==r.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return ya(e,t,r,n)}const tc=ma({topk_:function(e,t=1,n=!0){const r=da(e,"x","topk");if(0===r.rank)throw new Error("topk() expects the input to be of rank 1 or higher");const a=r.shape[r.shape.length-1];if(t>a)throw new Error(`'k' passed to topk() must be <= the last dimension (${a}) but got ${t}`);const s={x:r},o={k:t,sorted:n},[i,u]=ra.runKernel(gn,s,o);return{values:i,indices:u}}});const nc=ma({truncatedNormal_:function(e,t=0,n=1,r,a){if(null!=r&&"bool"===r)throw new Error("Unsupported data type $ { dtype }");const s=new pl(t,n,r,!0,a),o=ri(e,r);for(let e=0;e<o.values.length;e++)o.values[e]=s.nextValue();return o.toTensor()}});const rc=ma({unique_:function(e,t=0){const n=da(e,"x","unique","string_or_numeric");i(n.rank>0,(()=>"The input tensor must be at least 1D"));const r={x:n},a={axis:t},[s,o]=ra.runKernel(bn,r,a);return{values:s,indices:o}}});const ac=ma({unsortedSegmentSum_:function(e,t,n){const r=da(e,"x","unsortedSegmentSum"),a=da(t,"segmentIds","unsortedSegmentSum","int32");i(h(n),(()=>"numSegments must be of dtype int"));const s={x:r,segmentIds:a},o={numSegments:n};return ra.runKernel(wn,s,o)}});const sc=ma({unstack_:function(e,t=0){const n=da(e,"x","unstack","string_or_numeric");i(t>=-n.shape.length&&t<n.shape.length,(()=>`Axis = ${t} is not in [-${n.shape.length}, ${n.shape.length})`));const r={value:n},a={axis:t};return ra.runKernel(vn,r,a)}});function oc(e,t){const n=[];for(let e=0;e<t.length;e++)t[e]&&n.push(e);const r=ri(e,"int32"),a=ri([n.length,e.length],"int32");for(let t=0;t<n.length;t++){const s=r.indexToLoc(n[t]),o=t*e.length;a.values.set(s,o)}return a.toTensor()}const ic=async function(e){const t=da(e,"condition","whereAsync","bool"),n=await t.data(),r=oc(t.shape,n);return e!==t&&t.dispose(),r};const uc=async function(e,t,n){const r=da(e,"tensor","boolMask"),a=da(t,"mask","boolMask","bool"),s=null==n?0:n,o=a.rank,l=r.shape;i(o>0,(()=>"mask cannot be scalar")),u(l.slice(s,s+o),a.shape,"mask's shape must match the first K dimensions of tensor's shape,");let c=1;for(let e=s;e<s+o;e++)c*=l[e];const p=l.slice(0,s).concat([c],l.slice(s+o)),d=Uo(r,p),h=Uo(a,[-1]),f=await ic(h),m=ql(f,[1]),g=Wi(d,m,s);return e!==r&&r.dispose(),t!==a&&a.dispose(),m.dispose(),d.dispose(),h.dispose(),f.dispose(),g};function lc(e,t,n=null){if(0===e.rank)return yo(e);if(1!==e.rank&&null===n)return lc(Uo(e,[-1]),t,n);if(1===e.rank||"number"==typeof n||Array.isArray(n)&&1===n.length){if(1===t)return cu(yo(e),n);if(t===1/0)return uu(yo(e),n);if(t===-1/0)return Au(yo(e),n);if("euclidean"===t||2===t)return jl(cu(Xu(yo(e),_l(2,"int32")),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}if(Array.isArray(n)&&2===n.length){if(1===t)return uu(cu(yo(e),n[0]),n[1]-1);if(t===1/0)return uu(cu(yo(e),n[1]),n[0]);if(t===-1/0)return Au(cu(yo(e),n[1]),n[0]);if("fro"===t||"euclidean"===t)return jl(cu(Du(e),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}throw new Error(`Error in norm: invalid axis: ${n}`)}const cc=ma({norm_:function(e,t="euclidean",n=null,r=!1){const a=lc(e=da(e,"x","norm"),t,n);let s=a.shape;if(r){const t=x(n,e.shape);s=mu(a.shape,t)}return Uo(a,s)}});const pc=ma({movingAverage_:function(e,t,n,r,a=!0){const s=da(e,"v","movingAverage"),o=da(t,"x","movingAverage"),u=da(n,"decay","movingAverage");Xr(s,o),i(d(s.shape,o.shape),(()=>"Shape mismatch in v and x"));const l=_l(1),c=lu(l,u);let p=go(lu(o,s),c);if(a){i(null!=r,(()=>"When using zeroDebias: true, step is required."));const e=da(r,"step","movingAverage");p=mo(p,lu(l,Xu(u,e)))}return ho(s,p)}});const dc=ma({scatterND_:function(e,t,n){const r=da(e,"indices","scatterND","int32"),a=da(t,"updates","scatterND");Cs(a,r,n);const s={indices:r,updates:a},o={shape:n};return ra.runKernel(Wt,s,o)}});const hc=ma({sparseToDense_:function(e,t,n,r=0){const a=da(e,"sparseIndices","sparseToDense","int32"),s=da(t,"sparseValues","sparseToDense"),o=da(r,"defaultValue","sparseToDense",s.dtype);!function(e,t,n,r){if("int32"!==e.dtype)throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${e.dtype}.`);if(e.rank>2)throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${e.shape}.`);const a=e.rank>0?e.shape[0]:1,s=e.rank>1?e.shape[1]:1;if(n.length!==s)throw new Error(`outputShape has incorrect number of elements:, ${n.length}, should be: ${s}.`);const o=t.size;if(0!==t.rank&&(1!==t.rank||o!==a))throw new Error(`sparseValues has incorrect shape ${t.shape}, should be [] or [${a}]`);if(t.dtype!==r.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}(a,s,n,o);const i={sparseIndices:a,sparseValues:s,defaultValue:o},u={outputShape:n};return ra.runKernel(on,i,u)}});const fc=ma({gatherND_:function(e,t){const n=da(t,"indices","gatherND","int32"),r={params:da(e,"x","gatherND","string_or_numeric"),indices:n};return ra.runKernel(qe,r)}});const mc=ma({dropout_:function(e,t,n,r){const a=da(e,"x","dropout");if(i("float32"===a.dtype,(()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${a.dtype} tensor instead.`)),i(t>=0&&t<1,(()=>`rate must be a float in the range [0, 1), but got ${t}.`)),0===t)return e instanceof Br?a.clone():a;const s=function(e,t){if(null==t)return e.shape.slice();if(d(e.shape,t))return t;if(e.shape.length===t.length){const n=[];for(let r=0;r<e.shape.length;r++)null==t[r]&&null!=e.shape[r]?n.push(e.shape[r]):n.push(t[r]);return n}return t}(a,n),o=1-t,u=mo(zi(ho(gl(s,0,1,"float32",r),o)),o);return go(a,u)}});function gc(e){return Math.floor(Math.pow(2,Math.ceil(Math.log(e)/Math.log(2))))}function yc(e,t,n){const r=1-e%2,a=new Float32Array(e);for(let s=0;s<e;++s){const o=2*Math.PI*s/(e+r-1);a[s]=t-n*Math.cos(o)}return Jl(a,"float32")}const xc=async function(e,t,n=1){const r=da(e,"predictions","inTopK"),a=da(t,"targets","inTopK");i(r.rank>1,(()=>`inTopK() expects the predictions to be of rank 2 or higher, but got ${r.rank}`)),i(r.rank-1===a.rank,(()=>`predictions rank should be 1 larger than targets rank, but got predictions rank ${r.rank} and targets rank ${a.rank}`)),u(r.shape.slice(0,r.shape.length-1),a.shape,"predictions's shape should be align with the targets' shape, except the last dimension.");const s=r.shape[r.shape.length-1];i(n>0&&n<=s,(()=>`'k' passed to inTopK() must be > 0 && <= the predictions last dimension (${s}), but got ${n}`));const o=await r.data(),l=await a.data(),[c,p]=[o.length/s,s],d=v("bool",c);for(let e=0;e<c;e++){const t=e*p,r=o.subarray(t,t+p),a=[];for(let e=0;e<r.length;e++)a.push({value:r[e],index:e});a.sort(((e,t)=>t.value-e.value)),d[e]=0;for(let t=0;t<n;t++)if(a[t].index===l[e]){d[e]=1;break}}return e!==r&&r.dispose(),t!==a&&a.dispose(),xa(d,a.shape,"bool")};const bc=ma({conv2DBackpropFilter_:function(e,t,n,r,a,s="NHWC",o){let u=e;3===e.rank&&(u=Uo(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let l=t;3===l.rank&&(l=Uo(t,[1,t.shape[0],t.shape[1],t.shape[2]])),i(4===u.rank,(()=>`Error in conv2dDerFilter: input must be rank 4, but got shape ${u.shape}.`)),i(4===l.rank,(()=>`Error in conv2dDerFilter: dy must be rank 4, but got shape ${l.shape}.`)),i(4===n.length,(()=>`Error in conv2dDerFilter: filterShape must be length 4, but got ${n}.`));const c="NHWC"===s?u.shape[3]:u.shape[1],p="NHWC"===s?l.shape[3]:l.shape[1];i(c===n[2],(()=>`Error in conv2dDerFilter: depth of input ${c}) must match input depth in filter (${n[2]}.`)),i(p===n[3],(()=>`Error in conv2dDerFilter: depth of dy (${p}) must match output depth for filter (${n[3]}).`)),null!=o&&i(h(a),(()=>`Error in conv2dDerFilter: pad must be an integer when using, dimRoundingMode ${o} but got pad ${a}.`));const d={x:u,dy:l},f={strides:r,pad:a,dataFormat:s,dimRoundingMode:o,filterShape:n};return ra.runKernel(we,d,f)}});function vc(e,t,n){if(null==n||"linear"===n)return e;if("relu"===n)return go(e,Yl(t));throw new Error(`Cannot compute gradient for fused activation ${n}.`)}function wc(e,t){let n=t;const r=$i(e.shape,t.shape);return r.length>0&&(n=cu(n,r)),Uo(n,e.shape)}function Ec(e,t,n,r){if("linear"===t)return e;if("relu"===t)return vl(e);if("elu"===t)return Mi(e);if("relu6"===t)return wl(e);if("prelu"===t)return Yu(e,n);if("leakyrelu"===t)return Yi(e,r);if("sigmoid"===t)return jo(e);throw new Error(`Unknown fused activation ${t}.`)}const Tc=(e,t)=>!(e>0)||"linear"===t;const Nc=ma({fusedConv2d_:function({x:e,filter:t,strides:n,pad:r,dataFormat:a="NHWC",dilations:s=[1,1],dimRoundingMode:o,bias:u,activation:l="linear",preluActivationWeights:c,leakyreluAlpha:p}){if(l=l||"linear",!1===Tc(ra.state.gradientDepth,l)){let i=ci(e,t,n,r,a,s,o);return null!=u&&(i=ho(i,u)),Ec(i,l,c,p)}const d=da(e,"x","conv2d"),f=da(t,"filter","conv2d");let m=d,g=!1;3===d.rank&&(g=!0,m=Uo(d,[1,d.shape[0],d.shape[1],d.shape[2]])),i(4===m.rank,(()=>`Error in fused conv2d: input must be rank 4, but got rank ${m.rank}.`)),i(4===f.rank,(()=>`Error in fused conv2d: filter must be rank 4, but got rank ${f.rank}.`)),null!=o&&i(h(r),(()=>`Error in fused conv2d: pad must be an integer when using, dimRoundingMode ${o} but got pad ${r}.`)),i(m.shape[3]===f.shape[2],(()=>`Error in conv2d: depth of input (${m.shape[3]}) must match input depth for filter ${f.shape[2]}.`)),i(Po(n,s),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${s}'`)),i("NHWC"===a,(()=>`Error in conv2d: got dataFormat of ${a} but only NHWC is currently supported.`));const y=Ao(m.shape,f.shape,n,s,r,o);let x,b;null!=u&&(x=da(u,"bias","fused conv2d"),[x]=qr(x,d),Ii(y.outShape,x.shape)),null!=c&&(b=da(c,"prelu weights","fused conv2d"));const v=(e,t)=>{const[a,o,u,c]=t,p=vc(e,u,l);i(Bo(s),(()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${s}'`));const d=[di(o.shape,p,a,n,r),bc(o,p,a.shape,n,r)];if(null!=c){const e=wc(c,p);d.push(e)}return d},w={x:m,filter:f,bias:x,preluActivationWeights:b},E={strides:n,pad:r,dataFormat:a,dilations:s,dimRoundingMode:o,activation:l,leakyreluAlpha:p};if(null==u){return ru(((e,t,n)=>{let r=ra.runKernel(In,w,E);return n([t,e,r]),g&&(r=Uo(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:v}}))(m,f)}return ru(((e,t,n,r)=>{let a=ra.runKernel(In,w,E);return r([t,e,a,n]),g&&(a=Uo(a,[a.shape[1],a.shape[2],a.shape[3]])),{value:a,gradFunc:v}}))(m,f,x)}});const kc=ma({depthwiseConv2dNativeBackpropFilter_:function(e,t,n,r,a,s=[1,1],o){let i=e;3===e.rank&&(i=Uo(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let u=t;3===u.rank&&(u=Uo(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const l={x:i,dy:u},c={strides:r,pad:a,dimRoundingMode:o,dilations:s,filterShape:n};return ra.runKernel(Ae,l,c)}});const $c=ma({depthwiseConv2dNativeBackpropInput_:function(e,t,n,r,a,s=[1,1],o){let i=t,u=!1;3===t.rank&&(u=!0,i=Uo(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const l={dy:i,filter:n},c={strides:r,pad:a,dimRoundingMode:o,dilations:s,inputShape:e},p=ra.runKernel(Re,l,c);return u?Uo(p,[p.shape[1],p.shape[2],p.shape[3]]):p}});const Ic=ma({fusedDepthwiseConv2d_:function({x:e,filter:t,strides:n,pad:r,dataFormat:a="NHWC",dilations:s=[1,1],dimRoundingMode:o,bias:u,activation:l="linear",preluActivationWeights:c,leakyreluAlpha:p}){if(!1===Tc(ra.state.gradientDepth,l)){let i=Ei(e,t,n,r,a,s,o);return null!=u&&(i=ho(i,u)),Ec(i,l,c,p)}const d=da(e,"x","depthwiseConv2d"),f=da(t,"filter","depthwiseConv2d");let m=d,g=!1;3===d.rank&&(g=!0,m=Uo(d,[1,d.shape[0],d.shape[1],d.shape[2]])),i(4===m.rank,(()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${m.rank}.`)),i(4===f.rank,(()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${f.rank}.`)),i(m.shape[3]===f.shape[2],(()=>`Error in fused depthwiseConv2d: number of input channels (${m.shape[3]}) must match the inChannels dimension in filter ${f.shape[2]}.`)),null==s&&(s=[1,1]),i(Po(n,s),(()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${n} and dilations '${s}'`)),null!=o&&i(h(r),(()=>`Error in fused depthwiseConv2d: pad must be an integer when using dimRoundingMode ${o} but got pad ${r}.`));const y=Ao(m.shape,f.shape,n,s,r,o,!0);let x,b;null!=u&&(x=da(u,"bias","fused conv2d"),[x]=qr(x,d),Ii(y.outShape,x.shape)),null!=c&&(b=da(c,"prelu weights","fused depthwiseConv2d"));const v=(e,t)=>{i(Bo(s),(()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${s}'`));const[a,u,c,p]=t,d=vc(e,c,l),h=$c(u.shape,d,a,n,r,s,o),f=kc(u,d,a.shape,n,r,s,o);if(null!=p){return[h,f,wc(x,d)]}return[h,f]},w={x:m,filter:f,bias:x,preluActivationWeights:b},E={strides:n,pad:r,dataFormat:a,dilations:s,dimRoundingMode:o,activation:l,leakyreluAlpha:p};if(null==u){return ru(((e,t,n)=>{let r=ra.runKernel(Sn,w,E);return n([t,e,r]),g&&(r=Uo(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:v}}))(m,f)}return ru(((e,t,n,r)=>{let a=ra.runKernel(Sn,w,E);return r([t,e,a,n]),g&&(a=Uo(a,[a.shape[1],a.shape[2],a.shape[3]])),{value:a,gradFunc:v}}))(m,f,x)}});const Sc=ma({fusedMatMul_:function({a:e,b:t,transposeA:n=!1,transposeB:r=!1,bias:a,activation:s="linear",preluActivationWeights:o,leakyreluAlpha:u}){if(!1===Tc(ra.state.gradientDepth,s)){let i=gs(e,t,n,r);return null!=a&&(i=ho(i,a)),Ec(i,s,o,u)}let l=da(e,"a","fused matMul"),c=da(t,"b","fused matMul");[l,c]=qr(l,c);const h=n?l.shape[l.rank-2]:l.shape[l.rank-1],f=r?c.shape[c.rank-1]:c.shape[c.rank-2],m=n?l.shape[l.rank-1]:l.shape[l.rank-2],g=r?c.shape[c.rank-2]:c.shape[c.rank-1],y=l.shape.slice(0,-2),x=c.shape.slice(0,-2),b=p(y),v=p(x);i(l.rank>=2&&c.rank>=2&&l.rank===c.rank,(()=>`Error in fused matMul: inputs must have the same rank of at least 2, got ranks ${l.rank} and ${c.rank}.`)),i(d(y,x),(()=>`Error in fused matMul: outer dimensions (${y}) and (${x}) of Tensors with shapes ${l.shape} and ${c.shape} must match.`)),i(h===f,(()=>`Error in fused matMul: inner shapes (${h}) and (${f}) of Tensors with shapes ${l.shape} and ${c.shape} and transposeA=${n} and transposeB=${r} must match.`));const w=l.shape.slice(0,-2).concat([m,g]),E=Uo(l,n?[b,h,m]:[b,m,h]),T=Uo(c,r?[v,g,f]:[v,f,g]);let N,k;null!=a&&(N=da(a,"bias","fused matMul"),[N]=qr(N,l),Ii(w,N.shape)),null!=o&&(k=da(o,"prelu weights","fused matMul"));const $=(e,t)=>{const[o,i,u,l]=t,c=vc(Uo(e,u.shape),u,s);let p,d;if(n||r?!n&&r?(p=gs(c,i,!1,!1),d=gs(c,o,!0,!1)):n&&!r?(p=gs(i,c,!1,!0),d=gs(o,c,!1,!1)):(p=gs(i,c,!0,!0),d=gs(c,o,!0,!0)):(p=gs(c,i,!1,!0),d=gs(o,c,!0,!1)),null!=a){return[p,d,wc(l,c)]}return[p,d]},I={a:E,b:T,bias:N,preluActivationWeights:k},S={transposeA:n,transposeB:r,activation:s,leakyreluAlpha:u};if(null==a){return ru(((e,t,n)=>{const r=ra.runKernel($n,I,S);return n([e,t,r]),{value:Uo(r,w),gradFunc:$}}))(E,T)}return ru(((e,t,n,r)=>{const a=ra.runKernel($n,I,S);return r([e,t,a,n]),{value:Uo(a,w),gradFunc:$}}))(E,T,N)}});var _c=Object.freeze({__proto__:null,conv2d:Nc,depthwiseConv2d:Ic,matMul:Sc});const Cc=ma({hammingWindow_:function(e){return yc(e,.54,.46)}});const Ac=ma({hannWindow_:function(e){return yc(e,.5,.5)}});const Rc=ma({frame_:function(e,t,n,r=!1,a=0){let s=0;const o=[];for(;s+t<=e.size;)o.push(Ko(e,s,t)),s+=n;if(r)for(;s<e.size;){const r=s+t-e.size,i=Ho([Ko(e,s,t-r),Ui([r],a)]);o.push(i),s+=n}return 0===o.length?ec([],[0,t]):Uo(Ho(o),[o.length,t])}});const Oc=ma({stft_:function(e,t,n,r,a=Ac){null==r&&(r=gc(t));const s=Rc(e,t,n),o=go(s,a(t));return Hl(o,r)}});const Mc=ma({cropAndResize_:function(e,t,n,r,a="bilinear",s=0){const o=da(e,"image","cropAndResize"),u=da(t,"boxes","cropAndResize","float32"),l=da(n,"boxInd","cropAndResize","int32"),c=u.shape[0];i(4===o.rank,(()=>`Error in cropAndResize: image must be rank 4,but got rank ${o.rank}.`)),i(2===u.rank&&4===u.shape[1],(()=>`Error in cropAndResize: boxes must be have size [${c},4] but had shape ${u.shape}.`)),i(1===l.rank&&l.shape[0]===c,(()=>`Error in cropAndResize: boxInd must be have size [${c}] but had shape ${u.shape}.`)),i(2===r.length,(()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${r.length}.`)),i(r[0]>=1&&r[1]>=1,(()=>`cropSize must be atleast [1,1], but was ${r}`)),i("bilinear"===a||"nearest"===a,(()=>`method must be bilinear or nearest, but was ${a}`));const p={image:o,boxes:u,boxInd:l},d={method:a,extrapolationValue:s,cropSize:r};return ra.runKernel(Ie,p,d)}});const Dc=ma({flipLeftRight_:function(e){const t=da(e,"image","flipLeftRight","float32");i(4===t.rank,(()=>`Error in flipLeftRight: image must be rank 4,but got rank ${t.rank}.`));const n={image:t};return ra.runKernel(We,n,{})}});const Fc=ma({rotateWithOffset_:function(e,t,n=0,r=.5){const a=da(e,"image","rotateWithOffset","float32");i(4===a.rank,(()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${a.rank}.`));const s={image:a},o={radians:t,fillValue:n,center:r};return ra.runKernel(kn,s,o)}});function Lc(e,t,n,r,a,s){null==r&&(r=.5),null==a&&(a=Number.NEGATIVE_INFINITY),null==s&&(s=0);const o=e.shape[0];return n=Math.min(n,o),i(0<=r&&r<=1,(()=>`iouThreshold must be in [0, 1], but was '${r}'`)),i(2===e.rank,(()=>`boxes must be a 2D tensor, but was of rank '${e.rank}'`)),i(4===e.shape[1],(()=>`boxes must have 4 columns, but 2nd dimension was ${e.shape[1]}`)),i(1===t.rank,(()=>"scores must be a 1D tensor")),i(t.shape[0]===o,(()=>`scores has incompatible shape with boxes. Expected ${o}, but was ${t.shape[0]}`)),i(0<=s&&s<=1,(()=>`softNmsSigma must be in [0, 1], but was '${s}'`)),{maxOutputSize:n,iouThreshold:r,scoreThreshold:a,softNmsSigma:s}}const Bc=ma({nonMaxSuppression_:function(e,t,n,r=.5,a=Number.NEGATIVE_INFINITY){const s=da(e,"boxes","nonMaxSuppression"),o=da(t,"scores","nonMaxSuppression"),i=Lc(s,o,n,r,a),u={maxOutputSize:n=i.maxOutputSize,iouThreshold:r=i.iouThreshold,scoreThreshold:a=i.scoreThreshold};return ra.runKernel(Tt,{boxes:s,scores:o},u)}});function Pc(e,t,n){const r=function(e,t,n){return function(e,t,n){let r=0,a=e.length,s=0,o=!1;for(;r<a;){s=r+(a-r>>>1);const i=n(t,e[s]);i>0?r=s+1:(a=s,o=!i)}return o?r:-r-1}(e,t,n||Vc)}(e,t,n),a=r<0?-(r+1):r;e.splice(a,0,t)}function Vc(e,t){return e>t?1:e<t?-1:0}function Uc(e,t,n,r,a){return Gc(e,t,n,r,a,0)}function zc(e,t,n,r,a,s){return Gc(e,t,n,r,a,0,!1,s,!0)}function Wc(e,t,n,r,a,s){return Gc(e,t,n,r,a,s,!0)}function Gc(e,t,n,r,a,s,o=!1,i=!1,u=!1){const l=[];for(let e=0;e<t.length;e++)t[e]>a&&l.push({score:t[e],boxIndex:e,suppressBeginIndex:0});l.sort(Kc);const c=s>0?-.5/s:0,p=[],d=[];for(;p.length<n&&l.length>0;){const t=l.pop(),{score:n,boxIndex:s,suppressBeginIndex:o}=t;if(n<a)break;let i=!1;for(let n=p.length-1;n>=o;--n){const o=Hc(e,s,p[n]);if(o>=r){i=!0;break}if(t.score=t.score*jc(r,c,o),t.score<=a)break}t.suppressBeginIndex=p.length,i||(t.score===n?(p.push(s),d.push(t.score)):t.score>a&&Pc(l,t,Kc))}const h=p.length,f=n-h;i&&f>0&&(p.push(...new Array(f).fill(0)),d.push(...new Array(f).fill(0)));const m={selectedIndices:p};return o&&(m.selectedScores=d),u&&(m.validOutputs=h),m}function Hc(e,t,n){const r=e.subarray(4*t,4*t+4),a=e.subarray(4*n,4*n+4),s=Math.min(r[0],r[2]),o=Math.min(r[1],r[3]),i=Math.max(r[0],r[2]),u=Math.max(r[1],r[3]),l=Math.min(a[0],a[2]),c=Math.min(a[1],a[3]),p=Math.max(a[0],a[2]),d=Math.max(a[1],a[3]),h=(i-s)*(u-o),f=(p-l)*(d-c);if(h<=0||f<=0)return 0;const m=Math.max(s,l),g=Math.max(o,c),y=Math.min(i,p),x=Math.min(u,d),b=Math.max(y-m,0)*Math.max(x-g,0);return b/(h+f-b)}function jc(e,t,n){const r=Math.exp(t*n*n);return n<=e?r:0}function Kc(e,t){return e.score-t.score||e.score===t.score&&t.boxIndex-e.boxIndex}const qc=async function(e,t,n,r=.5,a=Number.NEGATIVE_INFINITY){const s=da(e,"boxes","nonMaxSuppressionAsync"),o=da(t,"scores","nonMaxSuppressionAsync"),i=Lc(s,o,n,r,a);n=i.maxOutputSize,r=i.iouThreshold,a=i.scoreThreshold;const u=await Promise.all([s.data(),o.data()]),l=u[0],c=u[1],{selectedIndices:p}=Uc(l,c,n,r,a);return s!==e&&s.dispose(),o!==t&&o.dispose(),Jl(p,"int32")};const Xc=ma({nonMaxSuppressionWithScore_:function(e,t,n,r=.5,a=Number.NEGATIVE_INFINITY,s=0){const o=da(e,"boxes","nonMaxSuppression"),i=da(t,"scores","nonMaxSuppression"),u=Lc(o,i,n,r,a,s),l={boxes:o,scores:i},c={maxOutputSize:n=u.maxOutputSize,iouThreshold:r=u.iouThreshold,scoreThreshold:a=u.scoreThreshold,softNmsSigma:s=u.softNmsSigma},p=ra.runKernel(kt,l,c);return{selectedIndices:p[0],selectedScores:p[1]}}});const Yc=async function(e,t,n,r=.5,a=Number.NEGATIVE_INFINITY,s=0){const o=da(e,"boxes","nonMaxSuppressionAsync"),i=da(t,"scores","nonMaxSuppressionAsync"),u=Lc(o,i,n,r,a,s);n=u.maxOutputSize,r=u.iouThreshold,a=u.scoreThreshold,s=u.softNmsSigma;const l=await Promise.all([o.data(),i.data()]),c=l[0],p=l[1],{selectedIndices:d,selectedScores:h}=Wc(c,p,n,r,a,s);return o!==e&&o.dispose(),i!==t&&i.dispose(),{selectedIndices:Jl(d,"int32"),selectedScores:Jl(h)}};const Qc=ma({nonMaxSuppressionPadded_:function(e,t,n,r=.5,a=Number.NEGATIVE_INFINITY,s=!1){const o=da(e,"boxes","nonMaxSuppression"),i=da(t,"scores","nonMaxSuppression"),u=Lc(o,i,n,r,a,null),l={boxes:o,scores:i},c={maxOutputSize:u.maxOutputSize,iouThreshold:u.iouThreshold,scoreThreshold:u.scoreThreshold,padToMaxOutputSize:s},p=ra.runKernel(Nt,l,c);return{selectedIndices:p[0],validOutputs:p[1]}}});const Zc=async function(e,t,n,r=.5,a=Number.NEGATIVE_INFINITY,s=!1){const o=da(e,"boxes","nonMaxSuppressionAsync"),i=da(t,"scores","nonMaxSuppressionAsync"),u=Lc(o,i,n,r,a,null),l=u.maxOutputSize,c=u.iouThreshold,p=u.scoreThreshold,[d,h]=await Promise.all([o.data(),i.data()]),{selectedIndices:f,validOutputs:m}=zc(d,h,l,c,p,s);return o!==e&&o.dispose(),i!==t&&i.dispose(),{selectedIndices:Jl(f,"int32"),validOutputs:_l(m,"int32")}};const Jc=ma({resizeBilinear_:function(e,t,n=!1,r=!1){const a=da(e,"images","resizeBilinear");i(3===a.rank||4===a.rank,(()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${a.rank}.`)),i(2===t.length,(()=>`Error in resizeBilinear: new shape must 2D, but got shape ${t}.`)),i(!1===r||!1===n,(()=>"Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false."));let s=a,o=!1;3===a.rank&&(o=!0,s=Uo(a,[1,a.shape[0],a.shape[1],a.shape[2]]));const[]=t,u={images:s},l={alignCorners:n,halfPixelCenters:r,size:t},c=ra.runKernel(Bt,u,l);return o?Uo(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const ep=ma({resizeNearestNeighbor_:function(e,t,n=!1,r=!1){const a=da(e,"images","resizeNearestNeighbor");i(3===a.rank||4===a.rank,(()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${a.rank}.`)),i(2===t.length,(()=>`Error in resizeNearestNeighbor: new shape must 2D, but got shape ${t}.`)),i("float32"===a.dtype||"int32"===a.dtype,(()=>"`images` must have `int32` or `float32` as dtype")),i(!1===r||!1===n,(()=>"Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false."));let s=a,o=!1;3===a.rank&&(o=!0,s=Uo(a,[1,a.shape[0],a.shape[1],a.shape[2]]));const[]=t,u={images:s},l={alignCorners:n,halfPixelCenters:r,size:t},c=ra.runKernel(Lt,u,l);return o?Uo(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const tp=ma({threshold_:function(e,t="binary",n=!1,r=.5){const a=da(e,"image","threshold"),s=a.shape[0]*a.shape[1];let o,u,l,c,p=go(Jl([r]),255);if(i(3===a.rank,(()=>`Error in threshold: image must be rank 3,but got rank ${a.rank}.`)),i(3===a.shape[2]||1===a.shape[2],(()=>`Error in threshold: image color channel must be equal to 3 or 1but got ${a.shape[2]}.`)),i("int32"===a.dtype||"float32"===a.dtype,(()=>`Error in dtype: image dtype must be int32 or float32,but got dtype ${a.dtype}.`)),i("otsu"===t||"binary"===t,(()=>`Method must be binary or otsu, but was ${t}`)),3===a.shape[2]){[o,u,l]=Gl(a,[1,1,1],-1);const e=go(o,.2989),t=go(u,.587),n=go(l,.114);c=ho(ho(e,t),n)}else c=e;if("otsu"===t){p=function(e,t){let n,r,a,s,o,i,u=Jl([-1]),l=Jl([0]),c=Jl([0]);for(let p=0;p<e.size-1;p++){n=Ko(e,0,p+1),r=Ko(e,p+1),o=mo(cu(n),t),i=mo(cu(r),t);const d=cu(go(n,yl(0,n.size)));a=mo(d,cu(n));const h=Ui(r.shape,n.size),f=ho(yl(0,r.size),h),m=go(r,f);s=mo(cu(m),cu(r));const g=lu(a,s),y=lu(a,s),x=go(o,i);c=go(go(x,g),y);const b=Gi(c,l);l=_i(b,c,l),u=_i(b,Jl([p]),u)}return u}(ti(ms(Il(c),"int32"),xa([]),256),s)}const d=n?Zi(c,p):Gi(c,p);return ms(go(d,255),"int32")}});const np=ma({transform_:function(e,t,n="nearest",r="constant",a=0,s){const o=da(e,"image","transform","float32"),u=da(t,"transforms","transform","float32");i(4===o.rank,(()=>`Error in transform: image must be rank 4,but got rank ${o.rank}.`)),i(2===u.rank&&(u.shape[0]===o.shape[0]||1===u.shape[0])&&8===u.shape[1],(()=>"Error in transform: Input transform should be batch x 8 or 1 x 8")),i(null==s||2===s.length,(()=>`Error in transform: outputShape must be [height, width] or null, but got ${s}.`));const l={image:o,transforms:u},c={interpolation:n,fillMode:r,fillValue:a,outputShape:s};return ra.runKernel(yn,l,c)}});const rp=ma({bandPart_:function(e,t,n){i(t%1==0,(()=>`bandPart(): numLower must be an integer, got ${t}.`)),i(n%1==0,(()=>`bandPart(): numUpper must be an integer, got ${n}.`));const r=da(e,"a","bandPart");i(r.rank>=2,(()=>`bandPart(): Rank must be at least 2, got ${r.rank}.`));const a=r.shape,[s,o]=r.shape.slice(-2);if(!(t<=s))throw new Error(`bandPart(): numLower (${t}) must not be greater than the number of rows (${s}).`);if(!(n<=o))throw new Error(`bandPart(): numUpper (${n}) must not be greater than the number of columns (${o}).`);t<0&&(t=s),n<0&&(n=o);const u=Uo(yl(0,s,1,"int32"),[-1,1]),l=yl(0,o,1,"int32"),c=lu(u,l),p=vu(Zi(c,_l(+t,"int32")),Hi(c,_l(-n,"int32"))),d=_u([s,o],r.dtype);return Uo(Xl(sc(Uo(r,[-1,s,o])).map((e=>_i(p,e,d)))),a)}});const ap=ma({gramSchmidt_:function(e){let t;if(Array.isArray(e)){t=!1,i(null!=e&&e.length>0,(()=>"Gram-Schmidt process: input must not be null, undefined, or empty"));const n=e[0].shape[0];for(let t=1;t<e.length;++t)i(e[t].shape[0]===n,(()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${e[t].shape[0]} vs. ${n})`))}else t=!0,e=Gl(e,e.shape[0],0).map((e=>ql(e,[0])));i(e.length<=e[0].shape[0],(()=>`Gram-Schmidt: Number of vectors (${e.length}) exceeds number of dimensions (${e[0].shape[0]}).`));const n=[],r=e;for(let t=0;t<e.length;++t)n.push(ra.tidy((()=>{let e=r[t];if(t>0)for(let r=0;r<t;++r){const t=go(cu(go(n[r],e)),n[r]);e=lu(e,t)}return mo(e,cc(e,"euclidean"))})));return t?Xl(n,0):n}});function sp(e,t=!1){return ra.tidy((()=>{i(2===e.shape.length,(()=>`qr2d() requires a 2D Tensor, but got a ${e.shape.length}D Tensor.`));const n=e.shape[0],r=e.shape[1];let a=Vi(n),s=Go(e);const o=ec([[1]],[1,1]);let u=Go(o);const l=n>=r?r:n;for(let e=0;e<l;++e){const t=s,i=u,l=a;[u,s,a]=ra.tidy((()=>{const t=Ko(s,[e,e],[n-e,1]),i=cc(t),l=Ko(s,[e,e],[1,1]),c=_i(Gi(l,0),ec([[-1]]),ec([[1]])),p=lu(l,go(c,i)),d=mo(t,p);u=1===d.shape[0]?Go(o):Ho([o,Ko(d,[1,0],[d.shape[0]-1,d.shape[1]])],0);const h=su(mo(gs(c,p),i)),f=Ko(s,[e,0],[n-e,r]),m=go(h,u),g=xs(u);if(0===e)s=lu(f,gs(m,gs(g,f)));else{const t=lu(f,gs(m,gs(g,f)));s=Ho([Ko(s,[0,0],[e,r]),t],0)}const y=xs(m),x=Ko(a,[0,e],[n,a.shape[1]-e]);if(0===e)a=lu(x,gs(gs(x,u),y));else{const t=lu(x,gs(gs(x,u),y));a=Ho([Ko(a,[0,0],[n,e]),t],1)}return[u,s,a]})),uo([t,i,l])}return!t&&n>r&&(a=Ko(a,[0,0],[n,r]),s=Ko(s,[0,0],[r,r])),[a,s]}))}const op=ma({qr_:function(e,t=!1){if(i(e.rank>=2,(()=>`qr() requires input tensor to have a rank >= 2, but got rank ${e.rank}`)),2===e.rank)return sp(e,t);{const n=e.shape.slice(0,e.shape.length-2).reduce(((e,t)=>e*t)),r=sc(Uo(e,[n,e.shape[e.shape.length-2],e.shape[e.shape.length-1]]),0),a=[],s=[];r.forEach((e=>{const[n,r]=sp(e,t);a.push(n),s.push(r)}));return[Uo(Xl(a,0),e.shape),Uo(Xl(s,0),e.shape)]}}});var ip;!function(e){e[e.NONE=0]="NONE",e[e.MEAN=1]="MEAN",e[e.SUM=2]="SUM",e[e.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS"}(ip||(ip={}));const up=ma({computeWeightedLoss_:function(e,t,n=ip.SUM_BY_NONZERO_WEIGHTS){const r=da(e,"losses","computeWeightedLoss");let a=null;null!=t&&(a=da(t,"weights","computeWeightedLoss"));const s=null==a?r:go(r,a);if(n===ip.NONE)return s;if(n===ip.SUM)return cu(s);if(n===ip.MEAN){if(null==a)return Su(s);{const e=r.size/a.size,t=mo(cu(s),cu(a));return e>1?mo(t,_l(e)):t}}if(n===ip.SUM_BY_NONZERO_WEIGHTS){if(null==a)return mo(cu(s),_l(r.size));{const e=go(a,Cu(r.shape)),t=ms(cu(Pu(e,_l(0))),"float32");return mo(cu(s),t)}}throw Error(`Unknown reduction: ${n}`)}});const lp=ma({absoluteDifference_:function(e,t,n,r=ip.SUM_BY_NONZERO_WEIGHTS){const a=da(e,"labels","absoluteDifference"),s=da(t,"predictions","absoluteDifference");let o=null;null!=n&&(o=da(n,"weights","absoluteDifference")),u(a.shape,s.shape,"Error in absoluteDifference: ");const i=yo(lu(a,s));return up(i,o,r)}});const cp=ma({cosineDistance_:function(e,t,n,r,a=ip.SUM_BY_NONZERO_WEIGHTS){const s=da(e,"labels","cosineDistance"),o=da(t,"predictions","cosineDistance");let i=null;null!=r&&(i=da(r,"weights","cosineDistance")),u(s.shape,o.shape,"Error in cosineDistance: ");const l=_l(1),c=lu(l,cu(go(s,o),n,!0));return up(c,i,a)}});const pp=ma({hingeLoss_:function(e,t,n,r=ip.SUM_BY_NONZERO_WEIGHTS){let a=da(e,"labels","hingeLoss");const s=da(t,"predictions","hingeLoss");let o=null;null!=n&&(o=da(n,"weights","hingeLoss")),u(a.shape,s.shape,"Error in hingeLoss: ");const i=_l(1);a=lu(go(_l(2),a),i);const l=vl(lu(i,go(a,s)));return up(l,o,r)}});const dp=ma({huberLoss_:function(e,t,n,r=1,a=ip.SUM_BY_NONZERO_WEIGHTS){const s=da(e,"labels","huberLoss"),o=da(t,"predictions","huberLoss");let i=null;null!=n&&(i=da(n,"weights","huberLoss")),u(s.shape,o.shape,"Error in huberLoss: ");const l=_l(r),c=yo(lu(o,s)),p=Ru(c,l),d=lu(c,p),h=ho(go(_l(.5),Du(p)),go(l,d));return up(h,i,a)}});const hp=ma({logLoss_:function(e,t,n,r=1e-7,a=ip.SUM_BY_NONZERO_WEIGHTS){const s=da(e,"labels","logLoss"),o=da(t,"predictions","logLoss");let i=null;null!=n&&(i=da(n,"weights","logLoss")),u(s.shape,o.shape,"Error in logLoss: ");const l=_l(1),c=_l(r),p=su(go(s,eu(ho(o,c)))),d=go(lu(l,s),eu(ho(lu(l,o),c))),h=lu(p,d);return up(h,i,a)}});const fp=ma({meanSquaredError_:function(e,t,n,r=ip.SUM_BY_NONZERO_WEIGHTS){const a=da(e,"labels","meanSquaredError"),s=da(t,"predictions","meanSquaredError");let o=null;null!=n&&(o=da(n,"weights","meanSquaredError")),u(a.shape,s.shape,"Error in meanSquaredError: ");const i=Kl(a,s);return up(i,o,r)}});const mp=ma({sigmoidCrossEntropy_:function(e,t,n,r=0,a=ip.SUM_BY_NONZERO_WEIGHTS){let s=da(e,"multiClassLabels","sigmoidCrossEntropy");const o=da(t,"logits","sigmoidCrossEntropy");let i=null;if(null!=n&&(i=da(n,"weights","sigmoidCrossEntropy")),u(s.shape,o.shape,"Error in sigmoidCrossEntropy: "),r>0){const e=_l(r),t=_l(1),n=_l(.5);s=ho(go(s,lu(t,e)),go(n,e))}const l=function(e,t){const n=da(e,"labels","sigmoidCrossEntropyWithLogits"),r=da(t,"logits","sigmoidCrossEntropyWithLogits");u(n.shape,r.shape,"Error in sigmoidCrossEntropyWithLogits: ");const a=vl(r),s=go(r,n),o=tu(Fi(su(yo(r))));return ho(lu(a,s),o)}(s,o);return up(l,i,a)}});const gp=ma({softmaxCrossEntropy_:function(e,t,n,r=0,a=ip.SUM_BY_NONZERO_WEIGHTS){let s=da(e,"onehotLabels","softmaxCrossEntropy");const o=da(t,"logits","softmaxCrossEntropy");let i=null;if(null!=n&&(i=da(n,"weights","softmaxCrossEntropy")),u(s.shape,o.shape,"Error in softmaxCrossEntropy: "),r>0){const e=_l(r),t=_l(1),n=_l(s.shape[1]);s=ho(go(s,lu(t,e)),mo(e,n))}const l=function(e,t,n=-1){if(-1===n&&(n=t.rank-1),n!==t.rank-1)throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${t.rank} and dim was ${n}`);return ru(((e,t,r)=>{const a=bu(t,[n],!0),s=lu(ms(t,"float32"),a);r([e,s]);const o=su(go(s,e));return{value:cu(o,[n]),gradFunc:(e,t)=>{const[r,a]=t,s=mu(e.shape,[n]);return[go(Uo(e,s),lu(ms(r,"float32"),Fi(a))),go(Uo(e,s),lu(Fi(a),ms(r,"float32")))]}}}))(e,t)}(s,o);return up(l,i,a)}});const yp=ma({sparseFillEmptyRows_:function(e,t,n,r){const a=da(e,"indices","sparseFillEmptyRows"),s=da(t,"values","sparseFillEmptyRows"),o=da(n,"denseShape","sparseFillEmptyRows"),i=da(r,"defaultValue","sparseFillEmptyRows",s.dtype);if(2!==a.rank)throw new Error(`Indices should be Tensor2D but received shape\n        ${a.shape}`);if(1!==s.rank)throw new Error(`Values should be Tensor1D but received shape ${s.shape}`);if(1!==o.rank)throw new Error(`Dense shape should be Tensor1D but received shape ${o.shape}`);if(0!==i.rank)throw new Error(`Default value should be a scalar but received shape ${i.shape}`);const u={indices:a,values:s,denseShape:o,defaultValue:i},l=ra.runKernel(nn,u);return{outputIndices:l[0],outputValues:l[1],emptyRowIndicator:l[2],reverseIndexMap:l[3]}}});const xp=ma({sparseReshape_:function(e,t,n){const r=da(e,"inputIndices","sparseReshape"),a=da(t,"inputShape","sparseReshape"),s=da(n,"newShape","sparseReshape");if(2!==r.rank)throw new Error(`Input indices should be Tensor2D but received shape\n        ${r.shape}`);if(1!==a.rank)throw new Error(`Input shape should be Tensor1D but received shape ${a.shape}`);if(1!==s.rank)throw new Error(`New shape should be Tensor1D but received shape ${s.shape}`);const o={inputIndices:r,inputShape:a,newShape:s},i=ra.runKernel(rn,o);return{outputIndices:i[0],outputShape:i[1]}}});const bp=ma({sparseSegmentMean_:function(e,t,n){const r=da(e,"data","sparseSegmentMean"),a=da(t,"indices","sparseSegmentMean"),s=da(n,"segmentIds","sparseSegmentMean");if(r.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==a.rank)throw new Error(`Indices should be Tensor1D but received shape\n          ${a.shape}`);if(1!==s.rank)throw new Error(`Segment ids should be Tensor1D but received shape\n          ${s.shape}`);const o={data:r,indices:a,segmentIds:s};return ra.runKernel(an,o)}});const vp=ma({sparseSegmentSum_:function(e,t,n){const r=da(e,"data","sparseSegmentSum"),a=da(t,"indices","sparseSegmentSum"),s=da(n,"segmentIds","sparseSegmentSum");if(r.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==a.rank)throw new Error(`Indices should be Tensor1D but received shape\n         ${a.shape}`);if(1!==s.rank)throw new Error(`Segment ids should be Tensor1D but received shape\n         ${s.shape}`);const o={data:r,indices:a,segmentIds:s};return ra.runKernel(sn,o)}});const wp=ma({stringNGrams_:function(e,t,n,r,a,s,o,i){const u=da(e,"data","stringNGrams","string");if("string"!==u.dtype)throw new Error("Data must be of datatype string");if(1!==u.shape.length)throw new Error(`Data must be a vector, saw: ${u.shape}`);const l=da(t,"dataSplits","stringNGrams");if("int32"!==l.dtype)throw new Error("Data splits must be of datatype int32");const c={separator:n,nGramWidths:r,leftPad:a,rightPad:s,padWidth:o,preserveShortSequences:i},p={data:u,dataSplits:l},d=ra.runKernel(cn,p,c);return{nGrams:d[0],nGramsSplits:d[1]}}});const Ep=ma({stringSplit_:function(e,t,n=!0){const r=da(e,"input","stringSplit","string"),a=da(t,"delimiter","stringSplit","string");if(1!==r.rank)throw new Error(`Input should be Tensor1D but received shape ${r.shape}`);if(0!==a.rank)throw new Error(`Delimiter should be a scalar but received shape ${a.shape}`);const s={skipEmpty:n},o={input:r,delimiter:a},i=ra.runKernel(pn,o,s);return{indices:i[0],values:i[1],shape:i[2]}}});const Tp=ma({stringToHashBucketFast_:function(e,t){const n=da(e,"input","stringToHashBucketFast","string"),r={numBuckets:t};if(t<=0)throw new Error("Number of buckets must be at least 1");const a={input:n};return ra.runKernel(dn,a,r)}}),Np={fft:Ul,ifft:zl,rfft:Hl,irfft:Wl},kp={hammingWindow:Cc,hannWindow:Ac,frame:Rc,stft:Oc},$p={flipLeftRight:Dc,resizeNearestNeighbor:ep,resizeBilinear:Jc,rotateWithOffset:Fc,cropAndResize:Mc,nonMaxSuppression:Bc,nonMaxSuppressionAsync:qc,nonMaxSuppressionWithScore:Xc,nonMaxSuppressionWithScoreAsync:Yc,nonMaxSuppressionPadded:Qc,nonMaxSuppressionPaddedAsync:Zc,threshold:tp,transform:np},Ip={bandPart:rp,gramSchmidt:ap,qr:op},Sp={absoluteDifference:lp,computeWeightedLoss:up,cosineDistance:cp,hingeLoss:pp,huberLoss:dp,logLoss:hp,meanSquaredError:fp,sigmoidCrossEntropy:mp,softmaxCrossEntropy:gp},_p={sparseFillEmptyRows:yp,sparseReshape:xp,sparseSegmentMean:bp,sparseSegmentSum:vp},Cp={stringNGrams:wp,stringSplit:Ep,stringToHashBucketFast:Tp};class Ap extends Ys{minimize(e,t=!1,n){const{value:r,grads:a}=this.computeGradients(e,n);if(null!=n){const e=n.map((e=>({name:e.name,tensor:a[e.name]})));this.applyGradients(e)}else this.applyGradients(a);return uo(a),t?r:(r.dispose(),null)}get iterations(){return null==this.iterations_&&(this.iterations_=0),this.iterations_}incrementIterations(){this.iterations_=this.iterations+1}computeGradients(e,t){return nu(e,t)}dispose(){null!=this.iterations_&&uo(this.iterations_)}async saveIterations(){return null==this.iterations_&&(this.iterations_=0),{name:"iter",tensor:_l(this.iterations_,"int32")}}async getWeights(){throw new Error("getWeights() is not implemented for this optimizer yet.")}async setWeights(e){throw new Error(`setWeights() is not implemented for this optimizer class ${this.getClassName()}`)}async extractIterations(e){return this.iterations_=(await e[0].tensor.data())[0],e.slice(1)}}Object.defineProperty(Ap,Symbol.hasInstance,{value:e=>null!=e.minimize&&null!=e.computeGradients&&null!=e.applyGradients});class Rp extends Ap{constructor(e,t,n=null){super(),this.learningRate=e,this.rho=t,this.epsilon=n,this.accumulatedGrads=[],this.accumulatedUpdates=[],null==n&&(this.epsilon=ra.backend.epsilon())}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const r=ra.registeredVariables[t];null==this.accumulatedGrads[n]&&(this.accumulatedGrads[n]={originalName:`${t}/accum_grad`,variable:io((()=>Ci(r).variable(false)))}),null==this.accumulatedUpdates[n]&&(this.accumulatedUpdates[n]={originalName:`${t}/accum_var`,variable:io((()=>Ci(r).variable(false)))});const a=Array.isArray(e)?e[n].tensor:e[t];if(null==a)return;const s=this.accumulatedGrads[n].variable,o=this.accumulatedUpdates[n].variable;io((()=>{const e=ho(go(s,this.rho),go(Du(a),1-this.rho)),t=go(mo(jl(ho(o,this.epsilon)),jl(ho(s,this.epsilon))),a),n=ho(go(o,this.rho),go(Du(t),1-this.rho));s.assign(e),o.assign(n);const i=ho(go(t,-this.learningRate),r);r.assign(i)}))})),this.incrementIterations()}dispose(){null!=this.accumulatedUpdates&&(uo(this.accumulatedGrads.map((e=>e.variable))),uo(this.accumulatedUpdates.map((e=>e.variable))))}async getWeights(){const e=[...this.accumulatedGrads,...this.accumulatedUpdates];return[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){const t=(e=await this.extractIterations(e)).length/2;this.accumulatedGrads=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(false)}))),this.accumulatedUpdates=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.rho,t.epsilon)}}Rp.className="Adadelta",Zs(Rp);class Op extends Ap{constructor(e,t=.1){super(),this.learningRate=e,this.initialAccumulatorValue=t,this.accumulatedGrads=[]}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const r=ra.registeredVariables[t];if(null==this.accumulatedGrads[n]){const e=!1;this.accumulatedGrads[n]={originalName:`${t}/accumulator`,variable:io((()=>Ui(r.shape,this.initialAccumulatorValue).variable(e)))}}const a=Array.isArray(e)?e[n].tensor:e[t];if(null==a)return;const s=this.accumulatedGrads[n].variable;io((()=>{const e=ho(s,Du(a));s.assign(e);const t=ho(go(mo(a,jl(ho(e,ra.backend.epsilon()))),-this.learningRate),r);r.assign(t)}))})),this.incrementIterations()}dispose(){null!=this.accumulatedGrads&&uo(this.accumulatedGrads.map((e=>e.variable)))}async getWeights(){return[await this.saveIterations()].concat(this.accumulatedGrads.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e);this.accumulatedGrads=e.map((e=>({originalName:e.name,variable:e.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}}static fromConfig(e,t){return new e(t.learningRate,t.initialAccumulatorValue)}}Op.className="Adagrad",Zs(Op);class Mp extends Ap{constructor(e,t,n,r=null){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=r,this.accumulatedFirstMoment=[],this.accumulatedSecondMoment=[],io((()=>{this.accBeta1=_l(t).variable(),this.accBeta2=_l(n).variable()})),null==r&&(this.epsilon=ra.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);io((()=>{const n=lu(1,this.accBeta1),r=lu(1,this.accBeta2);t.forEach(((t,a)=>{const s=ra.registeredVariables[t];null==this.accumulatedFirstMoment[a]&&(this.accumulatedFirstMoment[a]={originalName:`${t}/m`,variable:io((()=>Ci(s).variable(false)))}),null==this.accumulatedSecondMoment[a]&&(this.accumulatedSecondMoment[a]={originalName:`${t}/v`,variable:io((()=>Ci(s).variable(false)))});const o=Array.isArray(e)?e[a].tensor:e[t];if(null==o)return;const i=this.accumulatedFirstMoment[a].variable,u=this.accumulatedSecondMoment[a].variable,l=ho(go(i,this.beta1),go(o,1-this.beta1)),c=ho(go(u,this.beta2),go(Du(o),1-this.beta2)),p=mo(l,n),d=mo(c,r);i.assign(l),u.assign(c);const h=ho(go(mo(p,ho(jl(d),this.epsilon)),-this.learningRate),s);s.assign(h)})),this.accBeta1.assign(go(this.accBeta1,this.beta1)),this.accBeta2.assign(go(this.accBeta2,this.beta2))})),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.accBeta2.dispose(),null!=this.accumulatedFirstMoment&&uo(this.accumulatedFirstMoment.map((e=>e.variable))),null!=this.accumulatedSecondMoment&&uo(this.accumulatedSecondMoment.map((e=>e.variable)))}async getWeights(){const e=[...this.accumulatedFirstMoment,...this.accumulatedSecondMoment];return[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e),io((()=>{this.accBeta1.assign(Xu(this.beta1,this.iterations_+1)),this.accBeta2.assign(Xu(this.beta2,this.iterations_+1))}));const t=e.length/2;this.accumulatedFirstMoment=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(false)}))),this.accumulatedSecondMoment=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon)}}Mp.className="Adam",Zs(Mp);class Dp extends Ap{constructor(e,t,n,r=null,a=0){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=r,this.decay=a,this.accumulatedFirstMoment=[],this.accumulatedWeightedInfNorm=[],io((()=>{this.iteration=_l(0).variable(),this.accBeta1=_l(t).variable()})),null==r&&(this.epsilon=ra.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);io((()=>{const n=lu(1,this.accBeta1),r=mo(-this.learningRate,ho(go(this.iteration,this.decay),1));t.forEach(((t,a)=>{const s=ra.registeredVariables[t];null==this.accumulatedFirstMoment[a]&&(this.accumulatedFirstMoment[a]={originalName:`${t}/m`,variable:Ci(s).variable(false)}),null==this.accumulatedWeightedInfNorm[a]&&(this.accumulatedWeightedInfNorm[a]={originalName:`${t}/v`,variable:Ci(s).variable(false)});const o=Array.isArray(e)?e[a].tensor:e[t];if(null==o)return;const i=this.accumulatedFirstMoment[a].variable,u=this.accumulatedWeightedInfNorm[a].variable,l=ho(go(i,this.beta1),go(o,1-this.beta1)),c=go(u,this.beta2),p=yo(o),d=Iu(c,p);i.assign(l),u.assign(d);const h=ho(go(mo(r,n),mo(l,ho(d,this.epsilon))),s);s.assign(h)})),this.iteration.assign(ho(this.iteration,1)),this.accBeta1.assign(go(this.accBeta1,this.beta1))})),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.iteration.dispose(),null!=this.accumulatedFirstMoment&&uo(this.accumulatedFirstMoment.map((e=>e.variable))),null!=this.accumulatedWeightedInfNorm&&uo(this.accumulatedWeightedInfNorm.map((e=>e.variable)))}async getWeights(){throw new Error("getWeights() is not implemented for Adamax yet.")}async setWeights(e){throw new Error("setWeights() is not implemented for Adamax yet.")}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon,t.decay)}}Dp.className="Adamax",Zs(Dp);class Fp extends Ap{constructor(e){super(),this.learningRate=e,this.setLearningRate(e)}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const r=Array.isArray(e)?e[n].tensor:e[t];if(null==r)return;const a=ra.registeredVariables[t];io((()=>{const e=ho(go(this.c,r),a);a.assign(e)}))})),this.incrementIterations()}setLearningRate(e){this.learningRate=e,null!=this.c&&this.c.dispose(),this.c=lo(_l(-e))}dispose(){this.c.dispose()}async getWeights(){return[await this.saveIterations()]}async setWeights(e){if(0!==(e=await this.extractIterations(e)).length)throw new Error("SGD optimizer does not have settable weights.")}getConfig(){return{learningRate:this.learningRate}}static fromConfig(e,t){return new e(t.learningRate)}}Fp.className="SGD",Zs(Fp);class Lp extends Fp{constructor(e,t,n=!1){super(e),this.learningRate=e,this.momentum=t,this.useNesterov=n,this.accumulations=[],this.m=_l(this.momentum)}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const r=ra.registeredVariables[t];if(null==this.accumulations[n]){const e=!1;this.accumulations[n]={originalName:`${t}/momentum`,variable:io((()=>Ci(r).variable(e)))}}const a=this.accumulations[n].variable,s=Array.isArray(e)?e[n].tensor:e[t];null!=s&&io((()=>{let e;const t=ho(go(this.m,a),s);e=this.useNesterov?ho(go(this.c,ho(s,go(t,this.m))),r):ho(go(this.c,t),r),a.assign(t),r.assign(e)}))})),this.incrementIterations()}dispose(){this.m.dispose(),null!=this.accumulations&&uo(this.accumulations.map((e=>e.variable)))}setMomentum(e){this.momentum=e}async getWeights(){return[await this.saveIterations()].concat(this.accumulations.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e);this.accumulations=e.map((e=>({originalName:e.name,variable:e.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}}static fromConfig(e,t){return new e(t.learningRate,t.momentum,t.useNesterov)}}Lp.className="Momentum",Zs(Lp);class Bp extends Ap{constructor(e,t=.9,n=0,r=null,a=!1){if(super(),this.learningRate=e,this.decay=t,this.momentum=n,this.epsilon=r,this.accumulatedMeanSquares=[],this.accumulatedMoments=[],this.accumulatedMeanGrads=[],this.centered=a,null==r&&(this.epsilon=ra.backend.epsilon()),null==e)throw new Error("learningRate for RMSPropOptimizer must be defined.")}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const r=ra.registeredVariables[t],a=!1;null==this.accumulatedMeanSquares[n]&&(this.accumulatedMeanSquares[n]={originalName:`${t}/rms`,variable:io((()=>Ci(r).variable(a)))}),null==this.accumulatedMoments[n]&&(this.accumulatedMoments[n]={originalName:`${t}/momentum`,variable:io((()=>Ci(r).variable(a)))}),null==this.accumulatedMeanGrads[n]&&this.centered&&(this.accumulatedMeanGrads[n]={originalName:`${t}/mg`,variable:io((()=>Ci(r).variable(a)))});const s=Array.isArray(e)?e[n].tensor:e[t];if(null==s)return;const o=this.accumulatedMeanSquares[n].variable,i=this.accumulatedMoments[n].variable;io((()=>{const e=ho(go(o,this.decay),go(Du(s),1-this.decay));if(this.centered){const t=this.accumulatedMeanGrads[n].variable,a=ho(go(t,this.decay),go(s,1-this.decay)),u=mo(go(s,this.learningRate),jl(lu(e,ho(Du(a),this.epsilon)))),l=ho(go(i,this.momentum),u);o.assign(e),t.assign(a),i.assign(l);const c=lu(r,l);r.assign(c)}else{const e=ho(go(o,this.decay),go(Du(s),1-this.decay)),t=ho(go(i,this.momentum),mo(go(s,this.learningRate),jl(ho(e,this.epsilon))));o.assign(e),i.assign(t);const n=lu(r,t);r.assign(n)}}))})),this.incrementIterations()}dispose(){null!=this.accumulatedMeanSquares&&uo(this.accumulatedMeanSquares.map((e=>e.variable))),null!=this.accumulatedMeanGrads&&this.centered&&uo(this.accumulatedMeanGrads.map((e=>e.variable))),null!=this.accumulatedMoments&&uo(this.accumulatedMoments.map((e=>e.variable)))}async getWeights(){const e=[...this.accumulatedMeanSquares,...this.accumulatedMoments];return this.centered&&e.push(...this.accumulatedMeanGrads),[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e);const t=this.centered?e.length/3:e.length/2,n=!1;this.accumulatedMeanSquares=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))),this.accumulatedMoments=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))),this.centered&&(this.accumulatedMeanGrads=e.slice(2*t,3*t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))))}getConfig(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}}static fromConfig(e,t){return new e(t.learningRate,t.decay,t.momentum,t.epsilon,t.centered)}}Bp.className="RMSProp",Zs(Bp);class Pp{static sgd(e){return new Fp(e)}static momentum(e,t,n=!1){return new Lp(e,t,n)}static rmsprop(e,t=.9,n=0,r=null,a=!1){return new Bp(e,t,n,r,a)}static adam(e=.001,t=.9,n=.999,r=null){return new Mp(e,t,n,r)}static adadelta(e=.001,t=.95,n=null){return new Rp(e,t,n)}static adamax(e=.002,t=.9,n=.999,r=null,a=0){return new Dp(e,t,n,r,a)}static adagrad(e,t=.1){return new Op(e,t)}}const Vp={sgd:Pp.sgd,momentum:Pp.momentum,adadelta:Pp.adadelta,adagrad:Pp.adagrad,rmsprop:Pp.rmsprop,adamax:Pp.adamax,adam:Pp.adam},Up="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:"undefined"!=typeof setImmediate?setImmediate:e=>e();function zp(e,t){const n=e[0].length;e.forEach(((e,t)=>{i(e.length===n,(()=>`Error in concat${n}D: rank of tensors[${t}] must be the same as the rank of the rest (${n})`))})),i(t>=0&&t<n,(()=>`Error in concat${n}D: axis must be between 0 and ${n-1}.`));const r=e[0];e.forEach(((e,a)=>{for(let s=0;s<n;s++)i(s===t||e[s]===r[s],(()=>`Error in concat${n}D: Shape of tensors[${a}] (${e}) does not match the shape of the rest (${r}) along the non-concatenated axis ${a}.`))}))}function Wp(e,t){const n=e[0].slice();for(let r=1;r<e.length;r++)n[t]+=e[r][t];return n}function Gp(e){return e<=30?e:O(e,Math.floor(Math.sqrt(e)))}function Hp(e,t,n){return[n*("number"==typeof e?e:e[0]),t*("number"==typeof e?e:e[1])]}function jp(...e){j().getBool("IS_TEST")||console.warn(...e)}function Kp(e,t){if(e.length!==t.length)throw new Error(`Cannot merge real and imag arrays of different lengths. real:${e.length}, imag: ${t.length}.`);const n=new Float32Array(2*e.length);for(let r=0;r<n.length;r+=2)n[r]=e[r/2],n[r+1]=t[r/2];return n}const qp="->",Xp=/->/g;function Yp(e,t){const n=[];for(let r=0;r<e.length;++r)0!==e[r].length&&-1===e[r].indexOf(t)&&-1!==t||n.push(r);return n}var Qp=Object.freeze({__proto__:null,segOpComputeOptimalWindowSize:function(e,t){let n,r=!1;for(e<=30?(n=e,r=!0):n=O(e,Math.floor(Math.sqrt(e)));!r;)n>t||n===e?r=!0:n=O(e,n+1);return n},computeOutShape:function(e,t,n){const r=[],a=e.length;for(let s=0;s<a;s++)s!==t?r.push(e[s]):r.push(n);return r},collectGatherOpShapeInfo:function(e,t,n,r){const a=t.shape.length,s=e.shape.length;if(0!==r&&(r<-a||r>a))throw new Error(`Expect batchDims in the range of [-${a}, ${a}], but got ${r}`);if(r<0&&(r+=a),r>s)throw new Error(`batchDims (${r}) must be less than rank(x) (\n    ${s}).`);if(n<r)throw new Error(`batchDims (${r}) must be less than or equal to axis (${n}).`);for(let n=0;n<r;++n)if(e.shape[n]!==t.shape[n])throw new Error(`x.shape[${n}]: ${e.shape[n]} should be equal to indices.shape[${n}]: ${t.shape[n]}.`);const o=e.shape[n],i=[];let u=1,l=1,c=1;for(let t=0;t<r;++t)i.push(e.shape[t]),u*=e.shape[t];for(let t=r;t<n;t++)i.push(e.shape[t]),l*=e.shape[t];for(let e=r;e<a;e++)i.push(t.shape[e]);for(let t=n+1;t<s;t++)i.push(e.shape[t]),c*=e.shape[t];return{batchSize:u,sliceSize:c,outerSize:l,dimSize:o,outputShape:i}}});function Zp(e){try{return e.map((e=>Nr(e)))}catch(e){throw new Error(`Failed to decode encoded string bytes into utf-8, error: ${e}`)}}function Jp(e){return e.map((e=>Tr(e)))}var ed=Object.freeze({__proto__:null,slice_util:Xs,segment_util:Qp,fromUint8ToStringArray:Zp,fromStringArrayToUint8:Jp,upcastType:jr,axesAreInnerMostDims:du,combineLocations:hu,computeOutAndReduceShapes:fu,expandShapeToKeepDim:mu,assertAxesAreInnerMostDims:gu,getAxesPermutation:yu,getUndoAxesPermutation:function(e){return e.map(((e,t)=>[t,e])).sort(((e,t)=>e[1]-t[1])).map((e=>e[0]))},getInnerMostAxes:xu,getBroadcastDims:ki,getReductionAxes:$i,assertAndGetBroadcastShape:Ii,assertParamsConsistent:zp,computeOutShape:Wp,computeDilation2DInfo:function(e,t,n,r,a="NHWC",s){return Ao(e,[...t,e[3]],n,s,r,null,null,Vo(a))},computePool2DInfo:Co,computePool3DInfo:function(e,t,n,r,a,s,o="NDHWC"){const[i,u,l]=Do(t);let c,p;if("NDHWC"===o)p="channelsLast",c=[i,u,l,e[4],e[4]];else{if("NCDHW"!==o)throw new Error(`Unknown dataFormat ${o}`);p="channelsFirst",c=[i,u,l,e[1],e[1]]}return Ro(e,c,n,r,a,!1,p,s)},computeConv2DInfo:Ao,computeConv3DInfo:Ro,computeDefaultPad:Oo,tupleValuesAreOne:Bo,eitherStridesOrDilationsAreOne:Po,convertConv2DDataFormat:Vo,getFusedDyActivation:vc,getFusedBiasGradient:wc,applyActivation:Ec,shouldFuse:Tc,PARALLELIZE_THRESHOLD:30,computeOptimalWindowSize:Gp,getImageCenter:Hp,getReshaped:function(e,t,n,r=!0){let a=[];if(r)a=a.concat(t.slice(0)),a.push(e[0]/n),a=a.concat(e.slice(1));else{a=a.concat(e[0]);const n=t.length;for(let r=0;r<n;++r)a=a.concat([e[r+1]/t[r],t[r]]);a=a.concat(e.slice(n+1))}return a},getPermuted:function(e,t,n=!0){const r=[];if(n){r.push(t);for(let n=t+1;n<e;++n)n<=2*t?(r.push(n),r.push(n-(t+1))):r.push(n)}else{const n=[],a=[];for(let r=1;r<e;++r)r>=2*t+1||r%2==1?a.push(r):n.push(r);r.push(...n),r.push(0),r.push(...a)}return r},getReshapedPermuted:function(e,t,n,r=!0){const a=[];r?a.push(e[0]/n):a.push(e[0]*n);for(let n=1;n<e.length;++n)n<=t.length?r?a.push(t[n-1]*e[n]):a.push(e[n]/t[n-1]):a.push(e[n]);return a},getSliceBeginCoords:function(e,t){const n=[0];for(let r=0;r<t;++r)n.push(e[r][0]);return n},getSliceSize:function(e,t,n){const r=e.slice(0,1);for(let a=0;a<n;++a)r.push(e[a+1]-t[a][0]-t[a][1]);return r},prepareAndValidate:Is,validateUpdateShape:_s,validateInput:Cs,calculateShapes:As,SELU_SCALEALPHA:1.7580993408473768,SELU_SCALE:1.0507009873554805,ERF_P:.3275911,ERF_A1:.254829592,ERF_A2:-.284496736,ERF_A3:1.421413741,ERF_A4:-1.453152027,ERF_A5:1.061405429,warn:jp,log:function(...e){j().getBool("IS_TEST")||console.log(...e)},mergeRealAndImagArrays:Kp,splitRealAndImagArrays:function(e){const t=new Float32Array(e.length/2),n=new Float32Array(e.length/2);for(let r=0;r<e.length;r+=2)t[r/2]=e[r],n[r/2]=e[r+1];return{real:t,imag:n}},complexWithEvenIndex:function(e){const t=Math.ceil(e.length/4),n=new Float32Array(t),r=new Float32Array(t);for(let t=0;t<e.length;t+=4)n[Math.floor(t/4)]=e[t],r[Math.floor(t/4)]=e[t+1];return{real:n,imag:r}},complexWithOddIndex:function(e){const t=Math.floor(e.length/4),n=new Float32Array(t),r=new Float32Array(t);for(let t=2;t<e.length;t+=4)n[Math.floor(t/4)]=e[t],r[Math.floor(t/4)]=e[t+1];return{real:n,imag:r}},getComplexWithIndex:function(e,t){return{real:e[2*t],imag:e[2*t+1]}},assignToTypedArray:function(e,t,n,r){e[2*r]=t,e[2*r+1]=n},exponents:function(e,t){const n=new Float32Array(e/2),r=new Float32Array(e/2);for(let a=0;a<Math.ceil(e/2);a++){const s=(t?2:-2)*Math.PI*(a/e);n[a]=Math.cos(s),r[a]=Math.sin(s)}return{real:n,imag:r}},exponent:function(e,t,n){const r=(n?2:-2)*Math.PI*(e/t);return{real:Math.cos(r),imag:Math.sin(r)}},decodeEinsumEquation:function(e,t){const n=((e=e.replace(/\s/g,"")).length-e.replace(Xp,"").length)/qp.length;if(n<1)throw new Error("Equations without an arrow are not supported.");if(n>1)throw new Error('Equation must contain exactly one arrow ("->").');const[r,a]=e.split(qp);i(-1===r.indexOf("..."),(()=>'The ellipsis notation ("...") is not supported yet.'));const s=r.split(","),o=s.length;if(t!==o)throw new Error(`Expected ${o} input tensors, received ${t}`);if(o>2)throw new Error("Support for more than 2 input tensors is not implemented yet.");const u=[];for(let e=0;e<a.length;++e){const t=a[e];if(!s.some((e=>-1!==e.indexOf(t))))throw new Error(`Output subscripts contain the label ${t} not present in the input subscripts.`);-1===u.indexOf(t)&&u.push(t)}for(let e=0;e<r.length;++e){const t=r[e];-1===u.indexOf(t)&&","!==t&&u.push(t)}const l=new Array(s.length);for(let e=0;e<o;++e){if(new Set(s[e].split("")).size!==s[e].length)throw new Error(`Found duplicate axes in input component ${s[e]}. Support for duplicate axes in input is not implemented yet.`);l[e]=[];for(let t=0;t<s[e].length;++t)l[e].push(u.indexOf(s[e][t]))}const c=u.length,p=[];for(let e=a.length;e<c;++e)p.push(e);return{allDims:u,summedDims:p,idDims:l}},getEinsumPermutation:function(e,t){let n=new Array(e);n.fill(-1);for(let e=0;e<t.length;++e)n[t[e]]=e;const r=[];for(let t=0;t<e;++t)-1===n[t]&&r.push(t);return n=n.filter((e=>-1!==e)),{permutationIndices:n,expandDims:r}},checkEinsumDimSizes:function(e,t,n){const r=new Array(e);for(let e=0;e<n.length;++e){const a=n[e].shape;for(let n=0;n<t[e].length;++n)void 0===r[t[e][n]]?r[t[e][n]]=a[n]:i(r[t[e][n]]===a[n],(()=>`Expected dimension ${r[t[e][n]]} at axis ${n} of input shaped ${JSON.stringify(a)}, but got dimension ${a[n]}`))}},getEinsumComputePath:function(e,t){const n=e,r=[];let a=0;0===e.length&&n.push(-1),a=e.length+1;for(let e=0;e<a;++e)r.push([]);const s=[];for(let e=0;e<n.length;++e){const a=Yp(t,n[e]);for(const t of a)-1===s.indexOf(t)&&(r[e].push(t),s.push(t))}return{path:n,steps:r}},isIdentityPermutation:function(e){return e.every(((e,t)=>e===t))},prepareSplitSize:function(e,t,n=0){let r=[];if("number"==typeof t)i(e.shape[n]%t==0,(()=>"Number of splits must evenly divide the axis.")),r=new Array(t).fill(e.shape[n]/t);else{i(t.reduce(((e,t)=>(-1===t&&(e+=1),e)),0)<=1,(()=>"There should be only one negative value in split array."));const a=t.indexOf(-1);if(-1!==a){const r=t.reduce(((e,t)=>t>0?e+t:e));t[a]=e.shape[n]-r}i(e.shape[n]===t.reduce(((e,t)=>e+t)),(()=>"The sum of sizes must match the size of the axis dimension.")),r=t}return r}}),td=Object.freeze({__proto__:null,nonMaxSuppressionV3Impl:Uc,nonMaxSuppressionV4Impl:zc,nonMaxSuppressionV5Impl:Wc,whereImpl:oc});class nd{fetch(e,t){return fetch(e,t)}now(){return performance.now()}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Browser's encoder only supports utf-8, but got ${t}`);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(e)}decode(e,t){return new TextDecoder(t).decode(e)}}if(j().get("IS_BROWSER")){j().setPlatform("browser",new nd);try{ps.registerManager(qa.URL_SCHEME,new Ya)}catch(e){}try{ps.registerManager(Fa.URL_SCHEME,new Ba)}catch(e){}}const rd=()=>require("node-fetch");let ad;class sd{constructor(){this.util=require("util"),this.textEncoder=new this.util.TextEncoder}fetch(e,t){return null!=j().global.fetch?j().global.fetch(e,t):(null==ad&&(ad=rd()),ad(e,t))}now(){const e=process.hrtime();return 1e3*e[0]+e[1]/1e6}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Node built-in encoder only supports utf-8, but got ${t}`);return this.textEncoder.encode(e)}decode(e,t){return 0===e.length?"":new this.util.TextDecoder(t).decode(e)}}j().get("IS_NODE")&&j().setPlatform("node",new sd),na();var od,id;Fr={buffer:ri,cast:ms,clone:Go,print:Qu},function(e){e[e.DT_INVALID=0]="DT_INVALID",e[e.DT_FLOAT=1]="DT_FLOAT",e[e.DT_DOUBLE=2]="DT_DOUBLE",e[e.DT_INT32=3]="DT_INT32",e[e.DT_UINT8=4]="DT_UINT8",e[e.DT_INT16=5]="DT_INT16",e[e.DT_INT8=6]="DT_INT8",e[e.DT_STRING=7]="DT_STRING",e[e.DT_COMPLEX64=8]="DT_COMPLEX64",e[e.DT_INT64=9]="DT_INT64",e[e.DT_BOOL=10]="DT_BOOL",e[e.DT_QINT8=11]="DT_QINT8",e[e.DT_QUINT8=12]="DT_QUINT8",e[e.DT_QINT32=13]="DT_QINT32",e[e.DT_BFLOAT16=14]="DT_BFLOAT16",e[e.DT_FLOAT_REF=101]="DT_FLOAT_REF",e[e.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",e[e.DT_INT32_REF=103]="DT_INT32_REF",e[e.DT_UINT8_REF=104]="DT_UINT8_REF",e[e.DT_INT16_REF=105]="DT_INT16_REF",e[e.DT_INT8_REF=106]="DT_INT8_REF",e[e.DT_STRING_REF=107]="DT_STRING_REF",e[e.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",e[e.DT_INT64_REF=109]="DT_INT64_REF",e[e.DT_BOOL_REF=110]="DT_BOOL_REF",e[e.DT_QINT8_REF=111]="DT_QINT8_REF",e[e.DT_QUINT8_REF=112]="DT_QUINT8_REF",e[e.DT_QINT32_REF=113]="DT_QINT32_REF",e[e.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF"}(od||(od={})),function(e){let t;!function(e){e[e.LEGACY=0]="LEGACY",e[e.V1=1]="V1",e[e.V2=2]="V2"}(t=e.CheckpointFormatVersion||(e.CheckpointFormatVersion={}))}(id||(id={}));const ud={};function ld(e){return ud[e]}function cd(e,t,n,r,a){const s=t.inputParams[e];if(s&&void 0!==s.inputIndexStart){const e=s.inputIndexStart,o=0===s.inputIndexEnd?void 0:void 0===s.inputIndexEnd?e+1:s.inputIndexEnd;if("tensor"===s.type)return pd(t.inputNames[s.inputIndexStart],n,r,a);if("tensors"===s.type){return t.inputNames.slice(e,o).map((e=>pd(e,n,r,a)))}const i=pd(t.inputNames.slice(e)[0],n,r,a),u=i.dataSync();return"number"===s.type?u[0]:F(i.shape,u)}const o=t.attrParams[e];return o&&o.value}function pd(e,t,n,r){const[a,s]=fd(e);if(null!=r){const e=r.getHashTableHandleByName(a);if(null!=e)return e}const o=n.currentContextIds.find((e=>!!t[hd(a,e)]));return void 0!==o?t[hd(a,o)][s]:void 0}function dd(e,t){const[n,r,a]=fd(e);return[hd(n,t&&t.currentContextId),r,a]}function hd(e,t){return t?`${e}-${t}`:e}function fd(e){const t=e.split(":");if(1===t.length)return[e,0,void 0];const n=t[0],r=3===t.length?t[1]:void 0;return[n,Number(t[t.length-1]),r]}function md(e,t,n){let r=cd("pad",e,t,n);if("explicit"===r){r=cd("explicitPaddings",e,t,n);const a=[[0,0],[0,0],[0,0],[0,0]];for(let e=0;e<4;e++)a[e][0]=r[2*e],a[e][1]=r[2*e+1];return a}return r}function gd(e){return e.kept?e:Go(e)}var yd=Object.freeze({__proto__:null,json:[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]});var xd=Object.freeze({__proto__:null,json:[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"clipValueMin",type:"number"},{start:2,name:"clipValueMax",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Prod",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axes",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsNan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]});var bd=Object.freeze({__proto__:null,json:[{tfOpName:"EmptyTensorList",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"maxNumElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]}]});var vd=Object.freeze({__proto__:null,json:[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[],notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number"}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]",notSupported:!0}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}]});var wd=Object.freeze({__proto__:null,json:[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}]});var Ed=Object.freeze({__proto__:null,json:[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]});var Td=Object.freeze({__proto__:null,json:[{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]},{tfOpName:"Unique",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"UniqueV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]}]});var Nd=Object.freeze({__proto__:null,json:[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}]});var kd=Object.freeze({__proto__:null,json:[{tfOpName:"HashTable",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"HashTableV2",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"LookupTableImport",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableImportV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFind",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFindV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableSize",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"LookupTableSizeV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]}]});var $d=Object.freeze({__proto__:null,json:[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]}]});var Id=Object.freeze({__proto__:null,json:[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]});var Sd=Object.freeze({__proto__:null,json:[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Einsum",category:"matrices",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"equation",name:"equation",type:"string"},{tfName:"N",name:"n",type:"number",defaultValue:2},{tfName:"T",name:"dtype",type:"dtype"}]}]});var _d=Object.freeze({__proto__:null,json:[{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"SparseToDense",category:"normalization",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!0,notSupported:!0}]}]});var Cd=Object.freeze({__proto__:null,json:[{tfOpName:"Bincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}]},{tfOpName:"DenseBincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}],attrs:[{tfName:"binary_output",name:"binaryOutput",type:"bool"}]},{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}]});var Ad=Object.freeze({__proto__:null,json:[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}],attrs:[{tfName:"batch_dims",name:"batchDims",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool[]"}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]}]});var Rd=Object.freeze({__proto__:null,json:[{tfOpName:"SparseFillEmptyRows",category:"sparse",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"denseShape",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}]},{tfOpName:"SparseReshape",category:"sparse",inputs:[{start:0,name:"inputIndices",type:"tensor"},{start:1,name:"inputShape",type:"tensor"},{start:2,name:"newShape",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SparseSegmentMean",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]},{tfOpName:"SparseSegmentSum",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]}]});var Od=Object.freeze({__proto__:null,json:[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}]});var Md=Object.freeze({__proto__:null,json:[{tfOpName:"StringNGrams",category:"string",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"dataSplits",type:"tensor"}],attrs:[{tfName:"separator",name:"separator",type:"string"},{tfName:"ngram_widths",name:"nGramWidths",type:"number[]"},{tfName:"left_pad",name:"leftPad",type:"string"},{tfName:"right_pad",name:"rightPad",type:"string"},{tfName:"pad_width",name:"padWidth",type:"number"},{tfName:"preserve_short_sequences",name:"preserveShortSequences",type:"bool"}],outputs:["ngrams","ngrams_splits"]},{tfOpName:"StringSplit",category:"string",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"delimiter",type:"tensor"}],attrs:[{tfName:"skip_empty",name:"skipEmpty",type:"bool"}],outputs:["indices","values","shape"]},{tfOpName:"StringToHashBucketFast",category:"string",inputs:[{start:0,name:"input",type:"tensor"}],attrs:[{tfName:"num_buckets",name:"numBuckets",type:"number"}]}]});var Dd=Object.freeze({__proto__:null,json:[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"MirrorPad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"mode",name:"mode",type:"string"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]}]});class Fd{static get Instance(){return this._instance||(this._instance=new this)}constructor(){const e=[].concat(...[yd,xd,bd,vd,wd,Ed,Td,Nd,kd,$d,Id,Sd,_d,Cd,Ad,Rd,Od,Md,Dd].map((e=>e.json)));this.opMappers=e.reduce(((e,t)=>(e[t.tfOpName]=t,e)),{})}transformGraph(e,t={}){const n=e.node,r=[],a=[],s=[],o=n.reduce(((e,t)=>(e[t.name]=this.mapNode(t),t.op.startsWith("Placeholder")?r.push(e[t.name]):"Const"===t.op?a.push(e[t.name]):null!=t.input&&0!==t.input.length||s.push(e[t.name]),e)),{});let i=[];const u=[];let l={},c={};null!=t&&(l=this.mapSignatureEntries(t.inputs),c=this.mapSignatureEntries(t.outputs));const p=Object.keys(o);p.forEach((e=>{const t=o[e];t.inputNames.forEach(((e,n)=>{const[r,,a]=dd(e),s=o[r];if(null!=s.outputs){const e=s.outputs.indexOf(a);if(-1!==e){const a=`${r}:${e}`;t.inputNames[n]=a}}t.inputs.push(s),s.children.push(t)}))})),0===Object.keys(c).length?p.forEach((e=>{const t=o[e];0===t.children.length&&u.push(t)})):Object.keys(c).forEach((e=>{const[t]=dd(e),n=o[t];null!=n&&(n.signatureKey=c[e],u.push(n))})),Object.keys(l).length>0?Object.keys(l).forEach((e=>{const[t]=dd(e),n=o[t];n&&(n.signatureKey=l[e],i.push(n))})):i=r;let d={};null!=e.library&&null!=e.library.function&&(d=e.library.function.reduce(((e,t)=>(e[t.signature.name]=this.mapFunction(t),e)),{}));const h={nodes:o,inputs:i,outputs:u,weights:a,placeholders:r,signature:t,functions:d};return s.length>0&&(h.initNodes=s),h}mapSignatureEntries(e){return Object.keys(e||{}).reduce(((t,n)=>(t[e[n].name]=n,t)),{})}mapNode(e){const t=ld(e.op)||this.opMappers[e.op]||{};null==e.attr&&(e.attr={});const n={name:e.name,op:e.op,category:t.category,inputNames:(e.input||[]).map((e=>e.startsWith("^")?e.substr(1):e)),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:e.attr,outputs:t.outputs};return null!=t.inputs&&(n.inputParams=t.inputs.reduce(((e,t)=>(e[t.name]={type:t.type,inputIndexStart:t.start,inputIndexEnd:t.end},e)),{})),null!=t.attrs&&(n.attrParams=t.attrs.reduce(((t,n)=>{const r=n.type;let a;switch(n.type){case"string":a=Bd(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=Bd(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"string[]":a=qd(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=qd(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"number":a=Vd(e.attr,n.tfName,n.defaultValue||0),void 0===a&&n.tfDeprecatedName&&(a=Vd(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"number[]":a=Kd(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=Kd(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool":a=Pd(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=Pd(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool[]":a=Yd(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=Yd(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape":a=jd(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=jd(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape[]":a=Xd(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=Xd(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype":a=Wd(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=Wd(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype[]":a=Gd(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=Gd(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"func":a=zd(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=zd(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"tensor":case"tensors":break;default:throw new Error(`Unsupported param type: ${n.type} for op: ${e.op}`)}return t[n.name]={value:a,type:r},t}),{})),n}mapFunction(e){const t=e.nodeDef,n=[];let r={};null!=t&&(r=t.reduce(((e,t)=>(e[t.name]=this.mapNode(t),"Const"===t.op&&n.push(e[t.name]),e)),{}));const a=[],s=[];e.signature.inputArg.forEach((e=>{const[t]=dd(e.name),n={name:t,op:"Placeholder",inputs:[],inputNames:[],category:"graph",inputParams:{},attrParams:{dtype:{value:Ud(e.type),type:"dtype"}},children:[]};n.signatureKey=e.name,a.push(n),r[t]=n}));Object.keys(r).forEach((e=>{const t=r[e];t.inputNames.forEach(((e,n)=>{const[a,,s]=dd(e),o=r[a];if(null!=o.outputs){const e=o.outputs.indexOf(s);if(-1!==e){const r=`${a}:${e}`;t.inputNames[n]=r}}t.inputs.push(o),o.children.push(t)}))}));const o=e.ret;e.signature.outputArg.forEach((e=>{const[t,n]=dd(o[e.name]),a=r[t];null!=a&&(a.defaultOutput=n,s.push(a))}));const i=this.mapArgsToSignature(e);return{nodes:r,inputs:a,outputs:s,weights:n,placeholders:[],signature:i}}mapArgsToSignature(e){return{methodName:e.signature.name,inputs:e.signature.inputArg.reduce(((e,t)=>(e[t.name]=this.mapArgToTensorInfo(t),e)),{}),outputs:e.signature.outputArg.reduce(((t,n)=>(t[n.name]=this.mapArgToTensorInfo(n,e.ret),t)),{})}}mapArgToTensorInfo(e,t){let n=e.name;return null!=t&&(n=t[n]),{name:n,dtype:e.type}}}function Ld(e,t){const n=Array.isArray(e)?String.fromCharCode.apply(null,e):function(e){const t=j().global;if(void 0!==t.atob)return t.atob(e);if("undefined"!=typeof Buffer)return new Buffer(e,"base64").toString();throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()")}(e);return t?n:n.toLowerCase()}function Bd(e,t,n,r=!1){const a=e[t];return null!=a?Ld(a.s,r):n}function Pd(e,t,n){const r=e[t];return r?r.b:n}function Vd(e,t,n){const r=e[t]||{},a=null!=r.i?r.i:null!=r.f?r.f:n;return"number"==typeof a?a:parseInt(a,10)}function Ud(e){switch("string"==typeof e&&(e=od[e]),e){case od.DT_FLOAT:return"float32";case od.DT_INT32:case od.DT_INT64:case od.DT_INT8:case od.DT_UINT8:return"int32";case od.DT_BOOL:return"bool";case od.DT_DOUBLE:return"float32";case od.DT_STRING:return"string";default:return null}}function zd(e,t,n){const r=e[t];return r&&r.func?r.func.name:n}function Wd(e,t,n){const r=e[t];return r&&r.type?Ud(r.type):n}function Gd(e,t,n){const r=e[t];return r&&r.list&&r.list.type?r.list.type.map((e=>Ud(e))):n}function Hd(e){if(!e.unknownRank)return null!=e.dim?e.dim.map((e=>"number"==typeof e.size?e.size:parseInt(e.size,10))):[]}function jd(e,t,n){const r=e[t];return r&&r.shape?Hd(r.shape):n}function Kd(e,t,n){const r=e[t];return r?((r.list.f&&r.list.f.length?r.list.f:r.list.i)||[]).map((e=>"number"==typeof e?e:parseInt(e,10))):n}function qd(e,t,n,r=!1){const a=e[t];return a&&a.list&&a.list.s?a.list.s.map((e=>Ld(e,r))):n}function Xd(e,t,n){const r=e[t];return r&&r.list&&r.list.shape?r.list.shape.map((e=>Hd(e))):n}function Yd(e,t,n){const r=e[t];return r&&r.list&&r.list.b?r.list.b:n}class Qd{constructor(e,t,n){this.node=e,this.tensorMap=t,this.context=n,this.inputs=[],this.attrs={},this.inputs=e.inputNames.map((e=>this.getInput(e))),null!=e.rawAttrs&&(this.attrs=Object.keys(e.rawAttrs).reduce(((e,t)=>(e[t]=this.getAttr(t),e)),{}))}getInput(e){return pd(e,this.tensorMap,this.context)}getAttr(e,t){const n=this.node.rawAttrs[e];if(null!=n.tensor)return pd(e,this.tensorMap,this.context);if(null!=n.i||null!=n.f)return Vd(this.node.rawAttrs,e,t);if(null!=n.s)return Bd(this.node.rawAttrs,e,t);if(null!=n.b)return Pd(this.node.rawAttrs,e,t);if(null!=n.shape)return jd(this.node.rawAttrs,e,t);if(null!=n.type)return Wd(this.node.rawAttrs,e,t);if(null!=n.list){if(null!=n.list.i||null!=n.list.f)return Kd(this.node.rawAttrs,e,t);if(null!=n.list.s)return qd(this.node.rawAttrs,e,t);if(null!=n.list.shape)return Xd(this.node.rawAttrs,e,t);if(null!=n.list.b)return Yd(this.node.rawAttrs,e,t);if(null!=n.list.type)return Gd(this.node.rawAttrs,e,t)}return t}}const Zd={conv2d:Nc};function Jd(e,t,n=""){if("number"!=typeof e&&"number"!=typeof t){i(e.length===t.length,(()=>n+` Shapes ${e} and ${t} must match`));for(let r=0;r<e.length;r++){const a=e[r],s=t[r];i(a<0||s<0||a===s,(()=>n+` Shapes ${e} and ${t} must match`))}}}function eh(e){return"number"!=typeof e&&!e.some((e=>e<0))}function th(e,t,n){let r=nh(e,n);const a=!eh(r);if(a&&0===t.length)throw new Error(`Tried to calculate elements of an empty list with non-fully-defined elementShape: ${r}`);if(a&&t.forEach((e=>{r=nh(e.shape,r)})),!eh(r))throw new Error(`Non-fully-defined elementShape: ${r}`);return r}function nh(e,t){if("number"==typeof e)return t;if("number"==typeof t)return e;if(e.length!==t.length)throw new Error(`Incompatible ranks during merge: ${e} vs. ${t}`);const n=[];for(let r=0;r<e.length;++r){const a=e[r],s=t[r];if(a>=0&&s>=0&&a!==s)throw new Error(`Incompatible shape during merge: ${e} vs. ${t}`);n[r]=a>=0?a:s}return n}class rh{constructor(e,t,n,r,a,s,o){this.name=e,this.dtype=t,this.maxSize=n,this.elementShape=r,this.identicalElementShapes=a,this.dynamicSize=s,this.clearAfterRead=o,this.tensors=[],this.closed_=!1,this.idTensor=_l(0),lo(this.idTensor)}get id(){return this.idTensor.id}get closed(){return this.closed_}clearAndClose(e){this.tensors.forEach((t=>{null!=e&&e.has(t.tensor.id)||t.tensor.dispose()})),this.tensors=[],this.closed_=!0,this.idTensor.dispose()}size(){return this.tensors.length}read(e){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||e>=this.size())throw new Error(`Tried to read from index ${e}, but array size is: ${this.size()}`);const t=this.tensors[e];if(t.cleared)throw new Error(`TensorArray ${this.name}: Could not read index ${e} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`);return this.clearAfterRead&&(t.cleared=!0),t.read=!0,t.tensor}readMany(e){return e.map((e=>this.read(e)))}write(e,t){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||!this.dynamicSize&&e>=this.maxSize)throw new Error(`Tried to write to index ${e}, but array is not resizeable and size is: ${this.maxSize}`);const n=this.tensors[e]||{};if(t.dtype!==this.dtype)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e},\n          because the value dtype is ${t.dtype}, but TensorArray dtype is ${this.dtype}.`);if(0!==this.size()||null!=this.elementShape&&0!==this.elementShape.length||(this.elementShape=t.shape),Jd(this.elementShape,t.shape,`TensorArray ${this.name}: Could not write to TensorArray index ${e}.`),n.read)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been read.`);if(n.written)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been written.`);n.tensor=t,lo(t),n.written=!0,this.tensors[e]=n}writeMany(e,t){if(e.length!==t.length)throw new Error(`TensorArray ${this.name}: could not write multiple tensors,because the index size: ${e.length} is not the same as tensors size: ${t.length}.`);e.forEach(((e,n)=>this.write(e,t[n])))}gather(e,t){if(t&&t!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${t}`);if(e)e=e.slice(0,this.size());else{e=[];for(let t=0;t<this.size();t++)e.push(t)}if(0===e.length)return xa([],[0].concat(this.elementShape));const n=this.readMany(e);return Jd(this.elementShape,n[0].shape,"TensorArray shape mismatch: "),Xl(n,0)}concat(e){if(e&&e!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${e}`);if(0===this.size())return xa([],[0].concat(this.elementShape));const t=[];for(let e=0;e<this.size();e++)t.push(e);const n=this.readMany(t);return Jd(this.elementShape,n[0].shape,`TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${n[0].shape})`),Ho(n,0)}scatter(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);if(e.length!==t.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${e.length} vs. ${t.shape[0]}`);const n=Math.max(...e);if(!this.dynamicSize&&n>=this.maxSize)throw new Error(`Max index must be < array size (${n}  vs. ${this.maxSize})`);this.writeMany(e,sc(t,0))}split(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);let n=0;const r=e.map((e=>(n+=e,n)));if(n!==t.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${n}, and tensor's shape is: ${t.shape}`);if(!this.dynamicSize&&e.length!==this.maxSize)throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${e.length}), and the TensorArray is not marked as dynamically resizeable`);const a=0===n?0:t.size/n,s=[];io((()=>{t=Uo(t,[1,n,a]);for(let n=0;n<e.length;++n){const o=[0,0===n?0:r[n-1],0],i=[1,e[n],a];s[n]=Uo(Ko(t,o,i),this.elementShape)}return s}));const o=[];for(let t=0;t<e.length;t++)o[t]=t;this.writeMany(o,s)}}class ah{constructor(e,t,n,r=-1){this.tensors=e,this.elementShape=t,this.elementDtype=n,null!=e&&e.forEach((e=>{if(n!==e.dtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${e.dtype}`);Jd(t,e.shape,"TensorList shape mismatch: "),lo(e)})),this.idTensor=_l(0),this.maxNumElements=r,lo(this.idTensor)}get id(){return this.idTensor.id}copy(){return new ah([...this.tensors],this.elementShape,this.elementDtype)}clearAndClose(e){this.tensors.forEach((t=>{null!=e&&e.has(t.id)||t.dispose()})),this.tensors.length=0,this.idTensor.dispose()}size(){return this.tensors.length}stack(e,t,n=-1){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(-1!==n&&this.tensors.length!==n)throw new Error(`Operation expected a list with ${n} elements but got a list with ${this.tensors.length} elements.`);Jd(e,this.elementShape,"TensorList shape mismatch: ");const r=th(this.elementShape,this.tensors,e);return io((()=>{const e=this.tensors.map((e=>Uo(e,r)));return Xl(e,0)}))}popBack(e,t){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(0===this.size())throw new Error("Trying to pop from an empty list.");const n=th(this.elementShape,this.tensors,e),r=this.tensors.pop();return Jd(r.shape,e,"TensorList shape mismatch: "),Uo(r,n)}pushBack(e){if(e.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${this.elementDtype}`);if(Jd(e.shape,this.elementShape,"TensorList shape mismatch: "),this.maxNumElements===this.size())throw new Error("Trying to push element into a full list.");lo(e),this.tensors.push(e)}resize(e){if(e<0)throw new Error(`TensorListResize expects size to be non-negative. Got: ${e}`);if(-1!==this.maxNumElements&&e>this.maxNumElements)throw new Error(`TensorListResize input size ${e} is greater maxNumElement ${this.maxNumElements}.`);this.tensors.length=e}getItem(e,t,n){if(n!==this.elementDtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${this.elementDtype}`);if(e<0||e>this.tensors.length)throw new Error(`Trying to access element ${e} in a list with ${this.tensors.length} elements.`);if(null==this.tensors[e])throw new Error(`element at index ${e} is null.`);Jd(this.tensors[e].shape,t,"TensorList shape mismatch: ");const r=th(this.elementShape,this.tensors,t);return Uo(this.tensors[e],r)}setItem(e,t){if(t.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${this.elementDtype}`);if(e<0||-1!==this.maxNumElements&&e>=this.maxNumElements)throw new Error(`Trying to set element ${e} in a list with max ${this.maxNumElements} elements.`);Jd(this.elementShape,t.shape,"TensorList shape mismatch: "),lo(t),this.tensors[e]=t}gather(e,t,n){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);Jd(this.elementShape,n,"TensorList shape mismatch: "),e=e.slice(0,this.size());const r=th(this.elementShape,this.tensors,n);return 0===e.length?xa([],[0].concat(r)):io((()=>{const t=e.map((e=>Uo(this.tensors[e],r)));return Xl(t,0)}))}concat(e,t){if(e&&e!==this.elementDtype)throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${e}`);Jd(this.elementShape,t,"TensorList shape mismatch: ");const n=th(this.elementShape,this.tensors,t);return 0===this.size()?xa([],[0].concat(n)):io((()=>{const e=this.tensors.map((e=>Uo(e,n)));return Ho(e,0)}))}}const sh=async(e,t,n)=>{switch(e.op){case"If":case"StatelessIf":{const r=cd("thenBranch",e,t,n),a=cd("elseBranch",e,t,n),s=cd("cond",e,t,n),o=cd("args",e,t,n);return(await s.data())[0]?n.functionMap[r].executeFunctionAsync(o,n.tensorArrayMap,n.tensorListMap):n.functionMap[a].executeFunctionAsync(o,n.tensorArrayMap,n.tensorListMap)}case"While":case"StatelessWhile":{const r=cd("body",e,t,n),a=cd("cond",e,t,n),s=cd("args",e,t,n),o=await n.functionMap[a].executeFunctionAsync(s,n.tensorArrayMap,n.tensorListMap),i=s.map((e=>e.id));let u=await o[0].data();o.forEach((e=>{e.kept||-1!==i.indexOf(e.id)||e.dispose()}));let l=s;for(;u[0];){const e=l;l=await n.functionMap[r].executeFunctionAsync(l,n.tensorArrayMap,n.tensorListMap);const t=l.map((e=>e.id));e.forEach((e=>{e.kept||-1!==i.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()}));const s=await n.functionMap[a].executeFunctionAsync(l,n.tensorArrayMap,n.tensorListMap);u=await s[0].data(),s.forEach((e=>{e.kept||-1!==i.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()}))}return l}case"LoopCond":return[gd(cd("pred",e,t,n))];case"Switch":{const r=cd("pred",e,t,n);let a=cd("data",e,t,n);return a.kept||(a=gd(a)),(await r.data())[0]?[void 0,a]:[a,void 0]}case"Merge":{const r=e.inputNames.find((e=>void 0!==pd(e,t,n)));if(r){return[gd(pd(r,t,n))]}return}case"Enter":{const r=cd("frameName",e,t,n),a=cd("tensor",e,t,n);return n.enterFrame(r),[gd(a)]}case"Exit":{const r=cd("tensor",e,t,n);return n.exitFrame(),[gd(r)]}case"NextIteration":{const r=cd("tensor",e,t,n);return n.nextIteration(),[gd(r)]}case"TensorArrayV3":{const r=cd("size",e,t,n),a=cd("dtype",e,t,n),s=cd("elementShape",e,t,n),o=cd("dynamicSize",e,t,n),i=cd("clearAfterRead",e,t,n),u=cd("identicalElementShapes",e,t,n),l=cd("name",e,t,n),c=new rh(l,a,r,s,u,o,i);return n.addTensorArray(c),[c.idTensor,_l(1)]}case"TensorArrayWriteV3":{const r=cd("tensorArrayId",e,t,n),a=cd("index",e,t,n),s=cd("tensor",e,t,n),o=n.getTensorArray(r.id);return o.write(a,s),[o.idTensor]}case"TensorArrayReadV3":{const r=cd("tensorArrayId",e,t,n),a=cd("index",e,t,n);return[n.getTensorArray(r.id).read(a)]}case"TensorArrayGatherV3":{const r=cd("tensorArrayId",e,t,n),a=cd("indices",e,t,n),s=cd("dtype",e,t,n);return[n.getTensorArray(r.id).gather(a,s)]}case"TensorArrayScatterV3":{const r=cd("tensorArrayId",e,t,n),a=cd("indices",e,t,n),s=cd("tensor",e,t,n),o=n.getTensorArray(r.id);return o.scatter(a,s),[o.idTensor]}case"TensorArrayConcatV3":{const r=cd("tensorArrayId",e,t,n),a=n.getTensorArray(r.id),s=cd("dtype",e,t,n);return[a.concat(s)]}case"TensorArraySplitV3":{const r=cd("tensorArrayId",e,t,n),a=cd("tensor",e,t,n),s=cd("lengths",e,t,n),o=n.getTensorArray(r.id);return o.split(s,a),[o.idTensor]}case"TensorArraySizeV3":{const r=cd("tensorArrayId",e,t,n);return[_l(n.getTensorArray(r.id).size(),"int32")]}case"TensorArrayCloseV3":{const r=cd("tensorArrayId",e,t,n),a=n.getTensorArray(r.id);return a.clearAndClose(),[a.idTensor]}case"TensorListSetItem":{const r=cd("tensorListId",e,t,n),a=cd("index",e,t,n),s=cd("tensor",e,t,n),o=n.getTensorList(r.id);return o.setItem(a,s),[o.idTensor]}case"TensorListGetItem":{const r=cd("tensorListId",e,t,n),a=cd("index",e,t,n),s=cd("elementShape",e,t,n),o=cd("elementDType",e,t,n);return[n.getTensorList(r.id).getItem(a,s,o)]}case"TensorListScatterV2":case"TensorListScatter":{const r=cd("indices",e,t,n),a=function(e,t,n,r){if(t.length!==e.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${e.shape[0]}`);const a=Math.max(...t);if(null!=r&&-1!==r&&a>=r)throw new Error(`Max index must be < array size (${a}  vs. ${r})`);const s=new ah([],n,e.dtype,r),o=sc(e,0);return t.forEach(((e,t)=>{s.setItem(e,o[t])})),s}(cd("tensor",e,t,n),r,cd("elementShape",e,t,n),cd("numElements",e,t,n));return n.addTensorList(a),[a.idTensor]}case"TensorListReserve":case"EmptyTensorList":{const r=cd("elementShape",e,t,n),a=cd("elementDType",e,t,n);let s;s="TensorListReserve"===e.op?"numElements":"maxNumElements";const o=function(e,t,n){return new ah([],e,t,n)}(r,a,cd(s,e,t,n));return n.addTensorList(o),[o.idTensor]}case"TensorListGather":{const r=cd("tensorListId",e,t,n),a=cd("indices",e,t,n),s=cd("elementShape",e,t,n),o=cd("elementDType",e,t,n);return[n.getTensorList(r.id).gather(a,o,s)]}case"TensorListStack":{const r=cd("tensorListId",e,t,n),a=cd("elementShape",e,t,n),s=cd("elementDType",e,t,n),o=cd("numElements",e,t,n);return[n.getTensorList(r.id).stack(a,s,o)]}case"TensorListFromTensor":{const r=function(e,t,n){const r=e.dtype;if(e.shape.length<1)throw new Error(`Tensor must be at least a vector, but saw shape: ${e.shape}`);if(e.dtype!==n)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${n}`);Jd(e.shape.slice(1),t,"TensorList shape mismatch: ");const a=sc(e);return new ah(a,t,r)}(cd("tensor",e,t,n),cd("elementShape",e,t,n),cd("elementDType",e,t,n));return n.addTensorList(r),[r.idTensor]}case"TensorListConcat":{const r=cd("tensorListId",e,t,n),a=n.getTensorList(r.id),s=cd("dtype",e,t,n),o=cd("elementShape",e,t,n);return[a.concat(s,o)]}case"TensorListPushBack":{const r=cd("tensorListId",e,t,n),a=cd("tensor",e,t,n),s=n.getTensorList(r.id);return s.pushBack(a),[s.idTensor]}case"TensorListPopBack":{const r=cd("tensorListId",e,t,n),a=cd("elementShape",e,t,n),s=cd("elementDType",e,t,n);return[n.getTensorList(r.id).popBack(a,s)]}case"TensorListSplit":{const r=cd("tensor",e,t,n),a=cd("elementShape",e,t,n),s=function(e,t,n){let r=0;const a=t.map((e=>(r+=e,r)));if(r!==e.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${r}, and tensor's shape is: ${e.shape}`);const s=nh(e.shape.slice(1),n),o=0===r?0:e.size/r,i=io((()=>{const n=[];e=Uo(e,[1,r,o]);for(let r=0;r<t.length;++r){const i=[0,0===r?0:a[r-1],0],u=[1,t[r],o];n[r]=Uo(Ko(e,i,u),s)}return e.dispose(),n})),u=new ah([],n,e.dtype,t.length);for(let e=0;e<i.length;e++)u.setItem(e,i[e]);return u}(r,cd("lengths",e,t,n),a);return n.addTensorList(s),[s.idTensor]}default:throw TypeError(`Node type ${e.op} is not implemented`)}};function oh(e,t,n){const[r,a]=cd("fusedOps",e,t,n),s="biasadd"===r,o=!s,i="prelu"===a,u="fusedbatchnorm"===r,l=cd("numArgs",e,t,n);if(s){if(i&&2!==l)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&s&&1!==l)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.")}if(u)throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported");const c=cd("strides",e,t,n),p=md(e,t,n),d=cd("dataFormat",e,t,n).toUpperCase(),h=cd("dilations",e,t,n);let[f,m]=cd("args",e,t,n);o&&(m=f,f=void 0);return{stride:c,pad:p,dataFormat:d,dilations:h,biasArg:f,preluArg:m,activationFunc:a,leakyreluAlpha:cd("leakyreluAlpha",e,t,n)}}function ih(e,t,n){return{boxes:cd("boxes",e,t,n),scores:cd("scores",e,t,n),maxOutputSize:cd("maxOutputSize",e,t,n),iouThreshold:cd("iouThreshold",e,t,n),scoreThreshold:cd("scoreThreshold",e,t,n),softNmsSigma:cd("softNmsSigma",e,t,n)}}class uh{constructor(e,t){this.keyDType=e,this.valueDType=t,this.handle=_l(0),this.tensorMap=new Map,lo(this.handle)}get id(){return this.handle.id}clearAndClose(){this.tensorMap.forEach((e=>e.dispose())),this.tensorMap.clear(),this.handle.dispose()}size(){return this.tensorMap.size}tensorSize(){return _l(this.size(),"int32")}async import(e,t){this.checkKeyAndValueTensor(e,t);const n=await e.data();return this.tensorMap.forEach((e=>e.dispose())),this.tensorMap.clear(),io((()=>{const e=sc(t),r=n.length,a=e.length;i(r===a,(()=>`The number of elements doesn't match, keys has ${r} elements, the values has ${a} elements.`));for(let t=0;t<r;t++){const r=n[t],a=e[t];lo(a),this.tensorMap.set(r,a)}return this.handle}))}async find(e,t){this.checkKeyAndValueTensor(e,t);const n=await e.data();return io((()=>{const e=[];for(let r=0;r<n.length;r++){const a=n[r],s=this.findWithDefault(a,t);e.push(s)}return Xl(e)}))}findWithDefault(e,t){const n=this.tensorMap.get(e);return null!=n?n:t}checkKeyAndValueTensor(e,t){if(e.dtype!==this.keyDType)throw new Error(`Expect key dtype ${this.keyDType}, but got ${e.dtype}`);if(t.dtype!==this.valueDType)throw new Error(`Expect value dtype ${this.valueDType}, but got ${t.dtype}`)}}function lh(e,t,n,r){const a=((e,t,n)=>{switch(e.category){case"arithmetic":return io((()=>((e,t,n)=>{switch(e.op){case"BiasAdd":case"AddV2":case"Add":return[ho(cd("a",e,t,n),cd("b",e,t,n))];case"AddN":return[(void 0)(cd("tensors",e,t,n))];case"FloorMod":case"Mod":case"Mul":return[(void 0)(cd("a",e,t,n),cd("b",e,t,n))];case"RealDiv":case"Div":case"DivNoNan":case"FloorDiv":case"Sub":case"Minimum":case"Maximum":case"Pow":case"SquaredDifference":return[(void 0)(cd("a",e,t,n),cd("b",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"basic_math":return io((()=>((e,t,n)=>{switch(e.op){case"Abs":case"ComplexAbs":case"Acos":case"Acosh":case"Asin":case"Asinh":case"Atan":return[(void 0)(cd("x",e,t,n))];case"Atan2":return[(void 0)(cd("x",e,t,n),cd("y",e,t,n))];case"Atanh":case"Ceil":return[(void 0)(cd("x",e,t,n))];case"Complex":return[(void 0)(cd("real",e,t,n),cd("imag",e,t,n))];case"Cos":case"Cosh":case"Elu":case"Erf":case"Exp":case"Expm1":case"Floor":case"Log":case"Log1p":case"Imag":case"Neg":case"Reciprocal":case"Real":return[(void 0)(cd("x",e,t,n))];case"Relu":return[vl(cd("x",e,t,n))];case"Round":case"Selu":return[(void 0)(cd("x",e,t,n))];case"Sigmoid":return[jo(cd("x",e,t,n))];case"Sin":case"Sign":case"Sinh":case"Softplus":case"Sqrt":case"Square":case"Tanh":case"Tan":return[(void 0)(cd("x",e,t,n))];case"ClipByValue":return[(void 0)(cd("x",e,t,n),cd("clipValueMin",e,t,n),cd("clipValueMax",e,t,n))];case"Relu6":return[(void 0)(cd("x",e,t,n))];case"Rsqrt":return[(void 0)(pd(e.inputNames[0],t,n))];case"Prod":return[(void 0)(cd("x",e,t,n),cd("axes",e,t,n))];case"LeakyRelu":return[(void 0)(cd("x",e,t,n),cd("alpha",e,t,n))];case"Prelu":return[Yu(cd("x",e,t,n),cd("alpha",e,t,n))];case"IsNan":return[(void 0)(pd(e.inputNames[0],t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"control":return sh(e,t,n);case"convolution":return io((()=>((e,t,n)=>{switch(e.op){case"Conv1D":{const r=cd("stride",e,t,n),a=cd("pad",e,t,n),s=cd("dataFormat",e,t,n).toUpperCase(),o=cd("dilation",e,t,n);return[(void 0)(cd("x",e,t,n),cd("filter",e,t,n),r,a,s,o)]}case"Conv2D":{const r=cd("strides",e,t,n),a=md(e,t,n),s=cd("dataFormat",e,t,n).toUpperCase(),o=cd("dilations",e,t,n);return[(void 0)(cd("x",e,t,n),cd("filter",e,t,n),[r[1],r[2]],a,s,[o[1],o[2]])]}case"_FusedConv2D":{const{stride:r,pad:a,dataFormat:s,dilations:o,biasArg:i,preluArg:u,activationFunc:l,leakyreluAlpha:c}=oh(e,t,n);return[Zd.conv2d({x:cd("x",e,t,n),filter:cd("filter",e,t,n),strides:[r[1],r[2]],pad:a,dataFormat:s,dilations:[o[1],o[2]],bias:i,activation:l,preluActivationWeights:u,leakyreluAlpha:c})]}case"FusedDepthwiseConv2dNative":{const{stride:r,pad:a,dataFormat:s,dilations:o,biasArg:i,preluArg:u,activationFunc:l,leakyreluAlpha:c}=oh(e,t,n);return[Zd.depthwiseConv2d({x:cd("x",e,t,n),filter:cd("filter",e,t,n),strides:[r[1],r[2]],pad:a,dataFormat:s,dilations:[o[1],o[2]],bias:i,activation:l,preluActivationWeights:u,leakyreluAlpha:c})]}case"Conv2DBackpropInput":case"Conv2dTranspose":{const r=cd("outputShape",e,t,n),a=cd("strides",e,t,n),s=md(e,t,n);return[(void 0)(cd("x",e,t,n),cd("filter",e,t,n),r,[a[1],a[2]],s)]}case"DepthwiseConv2dNative":case"DepthwiseConv2d":{const r=cd("strides",e,t,n),a=md(e,t,n),s=cd("dilations",e,t,n),o=cd("dataFormat",e,t,n).toUpperCase();return[Ei(cd("input",e,t,n),cd("filter",e,t,n),[r[1],r[2]],a,o,[s[1],s[2]])]}case"Conv3D":{const r=cd("strides",e,t,n),a=cd("pad",e,t,n),s=cd("dataFormat",e,t,n).toUpperCase(),o=cd("dilations",e,t,n);return[(void 0)(cd("x",e,t,n),cd("filter",e,t,n),[r[1],r[2],r[3]],a,s,[o[1],o[2],o[3]])]}case"AvgPool":{const r=cd("strides",e,t,n),a=cd("pad",e,t,n),s=cd("kernelSize",e,t,n);return[(void 0)(cd("x",e,t,n),[s[1],s[2]],[r[1],r[2]],a)]}case"MaxPool":{const r=cd("strides",e,t,n),a=cd("pad",e,t,n),s=cd("kernelSize",e,t,n);return[Nu(cd("x",e,t,n),[s[1],s[2]],[r[1],r[2]],a)]}case"MaxPoolWithArgmax":{const r=cd("strides",e,t,n),a=cd("pad",e,t,n),s=cd("kernelSize",e,t,n),o=cd("includeBatchInIndex",e,t,n),{result:i,indexes:u}=(void 0)(cd("x",e,t,n),[s[1],s[2]],[r[1],r[2]],a,o);return[i,u]}case"AvgPool3D":{const r=cd("strides",e,t,n),a=cd("pad",e,t,n),s=cd("kernelSize",e,t,n);return[(void 0)(cd("x",e,t,n),[s[1],s[2],s[3]],[r[1],r[2],r[3]],a)]}case"MaxPool3D":{const r=cd("strides",e,t,n),a=cd("pad",e,t,n),s=cd("kernelSize",e,t,n);return[(void 0)(cd("x",e,t,n),[s[1],s[2],s[3]],[r[1],r[2],r[3]],a)]}case"Dilation2D":{const r=cd("strides",e,t,n),a=cd("pad",e,t,n),s=cd("dilations",e,t,n),o=r[1],i=r[2],u=s[1],l=s[2];return[(void 0)(cd("x",e,t,n),cd("filter",e,t,n),[o,i],a,[u,l],"NHWC")]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"creation":return io((()=>((e,t,n)=>{switch(e.op){case"Fill":{const r=cd("shape",e,t,n),a=cd("dtype",e,t,n);return[(void 0)(r,cd("value",e,t,n),a)]}case"LinSpace":return[(void 0)(cd("start",e,t,n),cd("stop",e,t,n),cd("num",e,t,n))];case"Multinomial":return[(void 0)(cd("logits",e,t,n),cd("numSamples",e,t,n),cd("seed",e,t,n))];case"OneHot":return[(void 0)(cd("indices",e,t,n),cd("depth",e,t,n),cd("onValue",e,t,n),cd("offValue",e,t,n))];case"Ones":return[(void 0)(cd("shape",e,t,n),cd("dtype",e,t,n))];case"OnesLike":return[(void 0)(cd("x",e,t,n))];case"RandomUniform":return[(void 0)(cd("shape",e,t,n),cd("minval",e,t,n),cd("maxval",e,t,n),cd("dtype",e,t,n))];case"Range":return[(void 0)(cd("start",e,t,n),cd("stop",e,t,n),cd("step",e,t,n),cd("dtype",e,t,n))];case"TruncatedNormal":{const r=cd("shape",e,t,n),a=cd("mean",e,t,n),s=cd("stdDev",e,t,n),o=cd("seed",e,t,n);return[(void 0)(r,a,s,cd("dtype",e,t,n),o)]}case"Zeros":return[(void 0)(cd("shape",e,t,n),cd("dtype",e,t,n))];case"ZerosLike":return[(void 0)(cd("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"dynamic":return(async(e,t,n)=>{switch(e.op){case"NonMaxSuppressionV5":{const{boxes:r,scores:a,maxOutputSize:s,iouThreshold:o,scoreThreshold:i,softNmsSigma:u}=ih(e,t,n),l=await(void 0)(r,a,s,o,i,u);return[l.selectedIndices,l.selectedScores]}case"NonMaxSuppressionV4":{const{boxes:r,scores:a,maxOutputSize:s,iouThreshold:o,scoreThreshold:i}=ih(e,t,n),u=cd("padToMaxOutputSize",e,t,n),l=await(void 0)(r,a,s,o,i,u);return[l.selectedIndices,l.validOutputs]}case"NonMaxSuppressionV3":case"NonMaxSuppressionV2":{const{boxes:r,scores:a,maxOutputSize:s,iouThreshold:o,scoreThreshold:i}=ih(e,t,n);return[await(void 0)(r,a,s,o,i)]}case"Where":{const r=(void 0)(cd("condition",e,t,n),"bool"),a=[await(void 0)(r)];return r.dispose(),a}case"ListDiff":return(void 0)(cd("x",e,t,n),cd("y",e,t,n));default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n);case"evaluation":return io((()=>((e,t,n)=>{switch(e.op){case"TopKV2":{const r=(void 0)(cd("x",e,t,n),cd("k",e,t,n),cd("sorted",e,t,n));return[r.values,r.indices]}case"Unique":{const r=(void 0)(cd("x",e,t,n));return[r.values,r.indices]}case"UniqueV2":{const r=(void 0)(cd("x",e,t,n),cd("axis",e,t,n));return[r.values,r.indices]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"image":return io((()=>((e,t,n)=>{switch(e.op){case"ResizeBilinear":{const r=cd("images",e,t,n),a=cd("size",e,t,n),s=cd("alignCorners",e,t,n),o=cd("halfPixelCenters",e,t,n);return[(void 0)(r,[a[0],a[1]],s,o)]}case"ResizeNearestNeighbor":{const r=cd("images",e,t,n),a=cd("size",e,t,n),s=cd("alignCorners",e,t,n),o=cd("halfPixelCenters",e,t,n);return[(void 0)(r,[a[0],a[1]],s,o)]}case"CropAndResize":return[(void 0)(cd("image",e,t,n),cd("boxes",e,t,n),cd("boxInd",e,t,n),cd("cropSize",e,t,n),cd("method",e,t,n),cd("extrapolationValue",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"graph":return io((()=>((e,t,n)=>{switch(e.op){case"Const":return t[e.name];case"PlaceholderWithDefault":const r=cd("default",e,t,n);return[pd(e.name,t,n)||r];case"Placeholder":return[pd(e.name,t,n)];case"Identity":case"StopGradient":case"FakeQuantWithMinMaxVars":return[gd(cd("x",e,t,n))];case"IdentityN":return cd("x",e,t,n).map((e=>gd(e)));case"Snapshot":return[gd(cd("x",e,t,n))];case"Shape":return[Jl(cd("x",e,t,n).shape,"int32")];case"ShapeN":return cd("x",e,t,n).map((e=>Jl(e.shape)));case"Size":return[_l(cd("x",e,t,n).size,"int32")];case"Rank":return[_l(cd("x",e,t,n).rank,"int32")];case"NoOp":return[_l(1)];case"Print":const a=cd("x",e,t,n),s=cd("data",e,t,n),o=cd("message",e,t,n),i=cd("summarize",e,t,n);console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."),console.log(o);for(let e=0;e<s.length;e++)console.log(Array.prototype.slice.call(s[e].dataSync()).slice(0,i));return[a];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"logical":return io((()=>((e,t,n)=>{switch(e.op){case"Equal":case"NotEqual":case"Greater":case"GreaterEqual":case"Less":case"LessEqual":case"LogicalAnd":return[(void 0)(cd("a",e,t,n),cd("b",e,t,n))];case"LogicalNot":return[(void 0)(cd("a",e,t,n))];case"LogicalOr":return[(void 0)(cd("a",e,t,n),cd("b",e,t,n))];case"Select":case"SelectV2":return[(void 0)(cd("condition",e,t,n),cd("a",e,t,n),cd("b",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"matrices":return io((()=>((e,t,n)=>{switch(e.op){case"BatchMatMul":case"BatchMatMulV2":case"MatMul":return[(void 0)(cd("a",e,t,n),cd("b",e,t,n),cd("transposeA",e,t,n),cd("transposeB",e,t,n))];case"Einsum":return[(void 0)(cd("equation",e,t,n),...cd("tensors",e,t,n))];case"Transpose":return[(void 0)(cd("x",e,t,n),cd("perm",e,t,n))];case"_FusedMatMul":const[r,a]=cd("fusedOps",e,t,n),s="biasadd"===r,o="prelu"===a,i=cd("numArgs",e,t,n),u=cd("leakyreluAlpha",e,t,n);if(s){if(o&&2!==i)throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!o&&1!==i)throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.")}const[l,c]=cd("args",e,t,n);return[Zd.matMul({a:cd("a",e,t,n),b:cd("b",e,t,n),transposeA:cd("transposeA",e,t,n),transposeB:cd("transposeB",e,t,n),bias:l,activation:a,preluActivationWeights:c,leakyreluAlpha:u})];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"normalization":return io((()=>((e,t,n)=>{switch(e.op){case"FusedBatchNorm":case"FusedBatchNormV2":case"FusedBatchNormV3":return[(void 0)(cd("x",e,t,n),cd("mean",e,t,n),cd("variance",e,t,n),cd("offset",e,t,n),cd("scale",e,t,n),cd("epsilon",e,t,n))];case"LRN":return[(void 0)(cd("x",e,t,n),cd("radius",e,t,n),cd("bias",e,t,n),cd("alpha",e,t,n),cd("beta",e,t,n))];case"Softmax":case"LogSoftmax":return[(void 0)(cd("x",e,t,n))];case"SparseToDense":return[(void 0)(cd("sparseIndices",e,t,n),cd("outputShape",e,t,n),cd("sparseValues",e,t,n),cd("defaultValue",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"reduction":return io((()=>((e,t,n)=>{switch(e.op){case"Max":{const r=cd("axis",e,t,n),a=cd("keepDims",e,t,n);return[(void 0)(cd("x",e,t,n),r,a)]}case"Mean":{const r=cd("axis",e,t,n),a=cd("keepDims",e,t,n);return[(void 0)(cd("x",e,t,n),r,a)]}case"Min":{const r=cd("axis",e,t,n),a=cd("keepDims",e,t,n);return[(void 0)(cd("x",e,t,n),r,a)]}case"Sum":{const r=cd("axis",e,t,n),a=cd("keepDims",e,t,n);return[(void 0)(cd("x",e,t,n),r,a)]}case"All":{const r=cd("axis",e,t,n),a=cd("keepDims",e,t,n);return[(void 0)(cd("x",e,t,n),r,a)]}case"Any":{const r=cd("axis",e,t,n),a=cd("keepDims",e,t,n);return[(void 0)(cd("x",e,t,n),r,a)]}case"ArgMax":{const r=cd("axis",e,t,n);return[(void 0)(cd("x",e,t,n),r)]}case"ArgMin":{const r=cd("axis",e,t,n);return[(void 0)(cd("x",e,t,n),r)]}case"Prod":{const r=cd("axis",e,t,n),a=cd("keepDims",e,t,n);return[(void 0)(cd("x",e,t,n),r,a)]}case"Cumsum":{const r=cd("axis",e,t,n),a=cd("exclusive",e,t,n),s=cd("reverse",e,t,n);return[(void 0)(cd("x",e,t,n),r,a,s)]}case"Bincount":return[(void 0)(cd("x",e,t,n),cd("weights",e,t,n),cd("size",e,t,n))];case"DenseBincount":return[(void 0)(cd("x",e,t,n),cd("weights",e,t,n),cd("size",e,t,n),cd("binaryOutput",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"slice_join":return io((()=>((e,t,n)=>{switch(e.op){case"ConcatV2":case"Concat":{const r=cd("n",e,t,n),a=cd("axis",e,t,n);let s=cd("tensors",e,t,n);return s=s.slice(0,r),[Ho(s,a)]}case"Gather":return[(void 0)(cd("x",e,t,n),(void 0)(cd("indices",e,t,n),"int32"),0)];case"GatherV2":{const r=cd("axis",e,t,n),a=cd("batchDims",e,t,n);return[(void 0)(cd("x",e,t,n),(void 0)(cd("indices",e,t,n),"int32"),r,a)]}case"Reverse":{const r=cd("dims",e,t,n),a=[];for(let e=0;e<r.length;e++)r[e]&&a.push(e);return[(void 0)(cd("x",e,t,n),a)]}case"ReverseV2":{const r=cd("axis",e,t,n);return[(void 0)(cd("x",e,t,n),r)]}case"Slice":{const r=cd("begin",e,t,n),a=cd("size",e,t,n);return[(void 0)(cd("x",e,t,n),r,a)]}case"StridedSlice":{const r=cd("begin",e,t,n),a=cd("end",e,t,n),s=cd("strides",e,t,n),o=cd("beginMask",e,t,n),i=cd("endMask",e,t,n),u=cd("ellipsisMask",e,t,n),l=cd("newAxisMask",e,t,n),c=cd("shrinkAxisMask",e,t,n),p=cd("x",e,t,n);return[Ql(p,r,a,s,o,i,u,l,c)]}case"Pack":return io((()=>{const r=cd("axis",e,t,n),a=cd("tensors",e,t,n),s=a[0].shape,o=ql(a[0]).shape,i=a.map((e=>{const t=d(e.shape,s);if(!t&&!d(ql(e).shape,o))throw new Error("the input tensors shape does not match");return t?e:Uo(e,s)}));return[Xl(i,r)]}));case"Unpack":{const r=cd("axis",e,t,n);return(void 0)(cd("tensor",e,t,n),r)}case"Tile":{const r=cd("reps",e,t,n);return[(void 0)(cd("x",e,t,n),r)]}case"Split":case"SplitV":{const r=cd("axis",e,t,n),a=cd("numOrSizeSplits",e,t,n);return(void 0)(cd("x",e,t,n),a,r)}case"ScatterNd":return[(void 0)(cd("indices",e,t,n),cd("values",e,t,n),cd("shape",e,t,n))];case"GatherNd":return[(void 0)(cd("x",e,t,n),cd("indices",e,t,n))];case"SparseToDense":{const r=cd("sparseIndices",e,t,n),a=cd("outputShape",e,t,n),s=cd("sparseValues",e,t,n),o=cd("defaultValue",e,t,n);return[(void 0)(r,s,a,s.dtype===o.dtype?o:(void 0)(o,s.dtype))]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"sparse":return io((()=>((e,t,n)=>{switch(e.op){case"SparseFillEmptyRows":{const{outputIndices:r,outputValues:a,emptyRowIndicator:s,reverseIndexMap:o}=(void 0)(cd("indices",e,t,n),cd("values",e,t,n),cd("denseShape",e,t,n),cd("defaultValue",e,t,n));return[r,a,s,o]}case"SparseReshape":{const{outputIndices:r,outputShape:a}=(void 0)(cd("inputIndices",e,t,n),cd("inputShape",e,t,n),cd("newShape",e,t,n));return[r,a]}case"SparseSegmentMean":case"SparseSegmentSum":return[(void 0)(cd("data",e,t,n),cd("indices",e,t,n),cd("segmentIds",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"spectral":return io((()=>((e,t,n)=>{switch(e.op){case"FFT":case"IFFT":case"RFFT":case"IRFFT":return[(void 0)(cd("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"string":return io((()=>((e,t,n)=>{switch(e.op){case"StringNGrams":{const{nGrams:r,nGramsSplits:a}=(void 0)(cd("data",e,t,n),cd("dataSplits",e,t,n),cd("separator",e,t,n),cd("nGramWidths",e,t,n),cd("leftPad",e,t,n),cd("rightPad",e,t,n),cd("padWidth",e,t,n),cd("preserveShortSequences",e,t,n));return[r,a]}case"StringSplit":{const{indices:r,values:a,shape:s}=(void 0)(cd("input",e,t,n),cd("delimiter",e,t,n),cd("skipEmpty",e,t,n));return[r,a,s]}case"StringToHashBucketFast":return[(void 0)(cd("input",e,t,n),cd("numBuckets",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"transformation":return io((()=>((e,t,n)=>{switch(e.op){case"Cast":return[(void 0)(cd("x",e,t,n),cd("dtype",e,t,n))];case"ExpandDims":{const r=cd("axis",e,t,n);return[(void 0)(cd("x",e,t,n),r)]}case"Squeeze":{const r=cd("axis",e,t,n);return[ql(cd("x",e,t,n),r)]}case"Reshape":return[Uo(cd("x",e,t,n),cd("shape",e,t,n))];case"MirrorPad":return[(void 0)(cd("x",e,t,n),cd("padding",e,t,n),cd("mode",e,t,n))];case"PadV2":case"Pad":return[zu(cd("x",e,t,n),cd("padding",e,t,n),cd("constantValue",e,t,n))];case"SpaceToBatchND":{const r=cd("blockShape",e,t,n),a=cd("paddings",e,t,n);return[(void 0)(cd("x",e,t,n),r,a)]}case"BatchToSpaceND":{const r=cd("blockShape",e,t,n),a=cd("crops",e,t,n);return[(void 0)(cd("x",e,t,n),r,a)]}case"DepthToSpace":{const r=cd("blockSize",e,t,n),a=cd("dataFormat",e,t,n).toUpperCase();return[(void 0)(cd("x",e,t,n),r,a)]}case"BroadcastTo":return[(void 0)(cd("x",e,t,n),cd("shape",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"hash_table":return(async(e,t,n,r)=>{switch(e.op){case"HashTable":case"HashTableV2":{const a=cd("keyDType",e,t,n),s=cd("valueDType",e,t,n),o=new uh(a,s);return r.addHashTable(e.name,o),[o.handle]}case"LookupTableImport":case"LookupTableImportV2":{const a=cd("tableHandle",e,t,n,r),s=cd("keys",e,t,n),o=cd("values",e,t,n),i=r.getHashTableById(a.id);return[await i.import(s,o)]}case"LookupTableFind":case"LookupTableFindV2":{const a=cd("tableHandle",e,t,n,r),s=cd("keys",e,t,n),o=cd("defaultValue",e,t,n),i=r.getHashTableById(a.id);return[await i.find(s,o)]}case"LookupTableSize":case"LookupTableSizeV2":{const a=cd("tableHandle",e,t,n,r);return[r.getHashTableById(a.id).tensorSize()]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n,r);case"custom":const a=ld(e.op);if(a&&a.customExecutor)return a.customExecutor(new Qd(e,t,n));throw TypeError(`Custom op ${e.op} is not registered.`);default:throw TypeError(`Unknown op '${e.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`)}})(e,t,n);return z(a)?a.then((e=>[].concat(e))):[].concat(a)}class ch{constructor(e={},t={},n={},r={}){this.weightMap=e,this.tensorArrayMap=t,this.tensorListMap=n,this.functionMap=r,this.rootContext={id:0,frameName:"",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}newFrame(e,t){return{id:e,frameName:t,iterationId:0}}set currentContext(e){this.contexts!==e&&(this.contexts=e,this.generateCurrentContextIds())}get currentContext(){return this.contexts}get currentContextId(){return this._currentContextIds[0]}get currentContextIds(){return this._currentContextIds}generateCurrentContextIds(){const e=[];for(let t=0;t<this.contexts.length-1;t++){const n=this.contexts.slice(0,this.contexts.length-t);e.push(this.contextIdforContexts(n))}e.push(""),this._currentContextIds=e}contextIdforContexts(e){return e?e.map((e=>0===e.id&&0===e.iterationId?"":`${e.frameName}-${e.iterationId}`)).join("/"):""}enterFrame(e){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,e)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))}exitFrame(){if(!(this.contexts&&this.contexts.length>1))throw new Error("Cannot exit frame, the context is empty");this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift()}nextIteration(){if(!(this.contexts&&this.contexts.length>0))throw new Error("Cannot increase frame iteration, the context is empty");{this.contexts=this.contexts.slice(),this.lastId++;const e=Object.assign({},this.contexts[this.contexts.length-1]);e.iterationId+=1,e.id=this.lastId,this.contexts.splice(-1,1,e),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))}}getWeight(e){return this.weightMap[e]}addTensorArray(e){this.tensorArrayMap[e.id]=e}getTensorArray(e){return this.tensorArrayMap[e]}addTensorList(e){this.tensorListMap[e.id]=e}getTensorList(e){return this.tensorListMap[e]}dispose(e){for(const t in this.tensorArrayMap)this.tensorArrayMap[t].clearAndClose(e);for(const t in this.tensorListMap)this.tensorListMap[t].clearAndClose(e)}}function ph(e,t,n,r){const a=new Set,s=[];let o=null,i=null;const u=new Set,l=Object.keys(e).map((e=>fd(e)[0]));let c=[];null!=r&&(c=r.map((e=>fd(e.name)[0])));const p=[...t];for(;p.length>0;){const e=p.pop();(mh(e)||gh(e)||yh(e))&&null==o&&(o=e,i=o.children.map((e=>e.name)).filter((e=>a.has(e)))),a.add(e.name),null==n[e.name]&&(-1===l.indexOf(e.name)&&-1===c.indexOf(e.name)&&(0!==e.inputs.length?e.inputs.forEach((e=>{u.has(e.name)||(u.add(e.name),p.push(e))})):s.push(e.name)))}return{inputs:e,outputs:t,usedNodes:a,missingInputs:s,dynamicNode:o,syncInputs:i}}const dh=["Switch","Merge","Enter","Exit","NextIteration","StatelessIf","StatelessWhile","if","While"],hh=["NonMaxSuppressionV2","NonMaxSuppressionV3","NonMaxSuppressionV5","Where"],fh=["HashTable","HashTableV2","LookupTableImport","LookupTableImportV2","LookupTableFind","LookupTableFindV2","LookupTableSize","LookupTableSizeV2"];function mh(e){return dh.indexOf(e.op)>=0}function gh(e){return hh.indexOf(e.op)>=0}function yh(e){return fh.indexOf(e.op)>=0}class xh{constructor(e,t){this.graph=e,this.parent=t,this.compiledMap=new Map,this._weightMap={},this.SEPERATOR=",",this._functions={},this._functionExecutorMap={},this._outputs=e.outputs,this._inputs=e.inputs,this._initNodes=e.initNodes,this._signature=e.signature,this._functions=e.functions,null!=e.functions&&Object.keys(e.functions).forEach((t=>{this._functionExecutorMap[t]=new xh(e.functions[t],this)}))}get weightIds(){return this.parent?this.parent.weightIds:this._weightIds}get functionExecutorMap(){return this.parent?this.parent.functionExecutorMap:this._functionExecutorMap}get weightMap(){return this.parent?this.parent.weightMap:this._weightMap}set weightMap(e){const t=Object.keys(e).map((t=>e[t].map((e=>e.id))));this._weightIds=[].concat(...t),this._weightMap=e}set resourceManager(e){this._resourceManager=e}get inputs(){return this._inputs.map((e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0})))}get outputs(){return this._outputs.map((e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0})))}get inputNodes(){return this._inputs.map((e=>e.signatureKey||e.name))}get outputNodes(){return this._outputs.map((e=>{const t=e.signatureKey||e.name;return e.defaultOutput?`${t}:${e.defaultOutput}`:t}))}get functions(){return Object.keys(this._functions).reduce(((e,t)=>(e[t]=this._functions[t].signature,e)),{})}getCompilationKey(e,t){const n=e.map((e=>e.name)).sort(),r=t.map((e=>e.name)).sort();return n.join(this.SEPERATOR)+"--"+r.join(this.SEPERATOR)}compile(e,t){const n=ph(e,t,this.weightMap,this._initNodes),{missingInputs:r,dynamicNode:a,syncInputs:s}=n;if(null!=a)throw new Error(`This execution contains the node '${a.name}', which has the dynamic op '${a.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${s}]`);if(r.length>0){const n=t.map((e=>e.name)),a=Object.keys(e);throw new Error(`Cannot compute the outputs [${n}] from the provided inputs [${a}]. Missing the following inputs: [${r}]`)}return function(e,t,n){const{usedNodes:r,inputs:a}=n,s=[],o=Object.keys(a).map((e=>fd(e)[0])).map((t=>e.nodes[t])),i=e.initNodes;o.forEach((e=>{r.has(e.name)&&s.push(e)})),e.weights.forEach((e=>{r.has(e.name)&&s.push(e)})),null!=i&&i.forEach((e=>{r.has(e.name)&&s.push(e)}));const u=new Set,l=[];for(;s.length>0;){const e=s.pop();u.add(e.name),t[e.name]||l.push(e),e.children.forEach((e=>{!u.has(e.name)&&r.has(e.name)&&e.inputs.every((e=>u.has(e.name)))&&s.push(e)}))}return l}(this.graph,this.weightMap,n)}execute(e,t){e=this.mapInputs(e);const n=Object.keys(e).sort();this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t);const r=n.map((e=>this.graph.nodes[fd(e)[0]])),a=t.map((e=>fd(e)[0]));let s=a.map((e=>this.graph.nodes[e]));0===s.length&&(s=this._outputs);const o=this.getCompilationKey(r,s);let i=this.compiledMap.get(o);null==i&&(i=this.compile(e,s),this.compiledMap.set(o,i));const u={},l={};return io((()=>{const n=new ch(this.weightMap,u,l,this.functionExecutorMap),r=Object.assign({},this.weightMap);Object.keys(e).forEach((t=>{const[n,a]=fd(t),s=[];s[a]=e[t],r[n]=s}));const s=this.getFrozenTensorIds(r),o={};for(let e=0;e<i.length;e++){const t=i[e];if(!r[t.name]){const e=lh(t,r,n,this._resourceManager);if(z(e))throw new Error(`The execution of the op '${t.op}' returned a promise. Please use model.executeAsync() instead.`);r[t.name]=e,this.checkTensorForDisposal(t.name,t,r,n,s,a,o)}}return null==this.parent&&n.dispose(s),t.map((e=>pd(e,r,n)))}))}getFrozenTensorIds(e){const t=[].concat.apply([],Object.keys(e).map((t=>e[t])).map((e=>e.map((e=>e.id)))));return new Set(t)}checkTensorForDisposal(e,t,n,r,a,s,o){"control"!==t.category&&-1===s.indexOf(e)&&(n[e].forEach((e=>{null!=e&&(o[e.id]=(o[e.id]||0)+t.children.length)})),t.inputs.forEach((e=>{if("control"!==e.category){const t=function(e,t,n){return t[hd(e,n.currentContextId)]}(e.name,n,r);null!=t&&t.forEach((e=>{if(e&&!e.kept&&!a.has(e.id)){const t=o[e.id];1===t?(e.dispose(),delete o[e.id]):null!=t&&o[e.id]--}}))}})))}async executeAsync(e,t){return this._executeAsync(e,t)}async _executeAsync(e,t,n=!1,r={},a={}){n||(e=this.mapInputs(e),this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t));const s=new ch(this.weightMap,r,a,this.functionExecutorMap),o=await this.executeWithControlFlow(e,s,t,n),i=t.map((e=>pd(e,o,s))),u=i.map((e=>e.id)),l=Object.keys(e).map((t=>e[t].id)),c=new Set([...u,...l,...this.weightIds]);return Object.keys(o).forEach((e=>{o[e].forEach((e=>{!e||e.kept||e.isDisposed||c.has(e.id)||e.dispose()}))})),null==this.parent&&s.dispose(c),i}async executeFunctionAsync(e,t,n){const r=e.reduce(((e,t,n)=>(e[this.inputs[n].name]=t,e)),{});return this._executeAsync(r,this.outputNodes,!0,t,n)}async executeWithControlFlow(e,t,n,r){const a=Object.keys(e),s=a.map((e=>this.graph.nodes[fd(e)[0]])),o=n.map((e=>fd(e)[0]));let i=o.map((e=>this.graph.nodes[e]));0===i.length&&(i=this._outputs);const{usedNodes:u,missingInputs:l,dynamicNode:c,syncInputs:p}=ph(e,i,this.weightMap,this._initNodes),d=[...s,...this.graph.weights,...this._initNodes||[]].map((e=>({node:e,contexts:t.currentContext}))),h=Object.assign({},this.weightMap);Object.keys(e).forEach((t=>{const[n,r]=fd(t),a=[];a[r]=e[t],h[n]=a}));const f={},m=this.getFrozenTensorIds(h),g={};for(;d.length>0;){const e=this.processStack(s,d,t,h,g,m,o,f,u);await Promise.all(e)}null!=c||r||console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.");const y=i.filter((e=>!mh(e)&&!pd(e.name,h,t))).map((e=>e.name));if(y.length>0){let e="";throw null!=c&&(e=`Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${p}]`),new Error(`Cannot compute the outputs [${y}] from the provided inputs [${a}]. Consider providing the following inputs: [${l}]. ${e}`)}return h}processStack(e,t,n,r,a,s,o,i,u){const l=[];for(;t.length>0;){const e=t.pop();n.currentContext=e.contexts;let c="";if("Enter"===e.node.op&&cd("isConstant",e.node,r,n)&&([c]=dd(e.node.name,n)),null==r[e.node.name]){const p=lh(e.node,r,n,this._resourceManager);c||([c]=dd(e.node.name,n));const d=n.currentContext;z(p)?l.push(p.then((l=>(r[c]=l,n.currentContext=d,this.checkTensorForDisposal(c,e.node,r,n,s,o,i),this.processChildNodes(e.node,t,n,r,a,u),l)))):(r[c]=p,this.checkTensorForDisposal(c,e.node,r,n,s,o,i),this.processChildNodes(e.node,t,n,r,a,u))}else this.processChildNodes(e.node,t,n,r,a,u)}return l}processChildNodes(e,t,n,r,a,s){e.children.forEach((e=>{const[o]=dd(e.name,n);!a[o]&&s.has(e.name)&&("Merge"===e.op?e.inputNames.some((e=>!!pd(e,r,n)))&&(a[o]=!0,t.push({contexts:n.currentContext,node:e})):e.inputNames.every((e=>!!pd(e,r,n)))&&(a[o]=!0,t.push({contexts:n.currentContext,node:e})))}))}dispose(){Object.keys(this.weightMap).forEach((e=>this.weightMap[e].forEach((e=>e.dispose()))))}checkInputShapeAndType(e){Object.keys(e).forEach((t=>{const n=e[t],[r]=fd(t),a=this.graph.nodes[r];if(a.attrParams.shape&&a.attrParams.shape.value){const e=a.attrParams.shape.value;i(e.length===n.shape.length&&n.shape.every(((t,n)=>-1===e[n]||e[n]===t)),(()=>`The shape of dict['${a.name}'] provided in model.execute(dict) must be [${e}], but was [${n.shape}]`))}a.attrParams.dtype&&a.attrParams.dtype.value&&i(n.dtype===a.attrParams.dtype.value,(()=>`The dtype of dict['${a.name}'] provided in model.execute(dict) must be ${a.attrParams.dtype.value}, but was ${n.dtype}`))}))}mapInputs(e){const t={};for(const n in e)if(null!=this._signature&&null!=this._signature.inputs&&null!=this._signature.inputs[n]){t[this._signature.inputs[n].name]=e[n]}else t[n]=e[n];return t}checkInputs(e){const t=Object.keys(e).filter((e=>{const[t]=fd(e);return null==this.graph.nodes[t]}));if(t.length>0)throw new Error(`The dict provided in model.execute(dict) has keys: [${t}] that are not part of graph`)}mapOutputs(e){return e.map((e=>{if(null!=this._signature&&null!=this._signature.outputs&&null!=this._signature.outputs[e]){return this._signature.outputs[e].name}return e}),{})}checkOutputs(e){e.forEach((e=>{const[t]=fd(e);if(!this.graph.nodes[t])throw new Error(`The output '${e}' is not found in the graph`)}))}}class bh{constructor(e={},t={}){this.hashTableNameToHandle=e,this.hashTableMap=t}addHashTable(e,t){this.hashTableNameToHandle[e]=t.handle,this.hashTableMap[t.id]=t}getHashTableHandleByName(e){return this.hashTableNameToHandle[e]}getHashTableById(e){return this.hashTableMap[e]}dispose(){for(const e in this.hashTableMap)this.hashTableMap[e].clearAndClose(),delete this.hashTableMap[e];for(const e in this.hashTableNameToHandle)this.hashTableNameToHandle[e].dispose(),delete this.hashTableNameToHandle[e]}}class vh{constructor(e,t={}){this.modelUrl=e,this.loadOptions=t,this.version="n/a",null==t&&(this.loadOptions={}),this.resourceManager=new bh}get modelVersion(){return this.version}get inputNodes(){return this.executor.inputNodes}get outputNodes(){return this.executor.outputNodes}get inputs(){return this.executor.inputs}get outputs(){return this.executor.outputs}get weights(){return this.executor.weightMap}get metadata(){return this.artifacts.userDefinedMetadata}get modelSignature(){return this.signature}findIOHandler(){const e=this.modelUrl;if(null!=e.load)this.handler=e;else if(null!=this.loadOptions.requestInit)this.handler=is(e,this.loadOptions);else{const t=Ca(e,this.loadOptions);if(0===t.length)t.push(is(e,this.loadOptions));else if(t.length>1)throw new Error(`Found more than one (${t.length}) load handlers for URL '${[e]}'`);this.handler=t[0]}}async load(){if(this.findIOHandler(),null==this.handler.load)throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const e=await this.handler.load();return this.loadSync(e)}loadSync(e){this.artifacts=e;const t=this.artifacts.modelTopology;let n;n=null!=this.artifacts.userDefinedMetadata&&null!=this.artifacts.userDefinedMetadata.signature?this.artifacts.userDefinedMetadata.signature:this.artifacts.signature,this.signature=n,this.version=`${t.versions.producer}.${t.versions.minConsumer}`;const r=va(this.artifacts.weightData,this.artifacts.weightSpecs);if(this.executor=new xh(Fd.Instance.transformGraph(t,this.signature)),this.executor.weightMap=this.convertTensorMapToTensorsMap(r),this.executor.resourceManager=this.resourceManager,null!=e.modelInitializer&&null!=e.modelInitializer.node){const t=Fd.Instance.transformGraph(e.modelInitializer);this.initializer=new xh(t),this.initializer.weightMap=this.executor.weightMap,this.initializer.resourceManager=this.resourceManager,this.initializer.executeAsync({},[])}return!0}async save(e,t){if("string"==typeof e){const t=_a(e);if(0===t.length)throw new Error(`Cannot find any save handlers for URL '${e}'`);if(t.length>1)throw new Error(`Found more than one (${t.length}) save handlers for URL '${e}'`);e=t[0]}if(null==e.save)throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");return e.save(this.artifacts)}predict(e,t){return this.execute(e,this.outputNodes)}normalizeInputs(e){if(!(e instanceof Br||Array.isArray(e)))return e;if((e=Array.isArray(e)?e:[e]).length!==this.inputNodes.length)throw new Error(`Input tensor count mismatch,the graph model has ${this.inputNodes.length} placeholders, while there are ${e.length} input tensors.`);return this.inputNodes.reduce(((t,n,r)=>(t[n]=e[r],t)),{})}normalizeOutputs(e){return e=e||this.outputNodes,Array.isArray(e)?e:[e]}execute(e,t){e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const n=this.executor.execute(e,t);return n.length>1?n:n[0]}async executeAsync(e,t){e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const n=await this.executor.executeAsync(e,t);return n.length>1?n:n[0]}convertTensorMapToTensorsMap(e){return Object.keys(e).reduce(((t,n)=>(t[n]=[e[n]],t)),{})}dispose(){this.executor.dispose(),this.initializer&&this.initializer.dispose(),this.resourceManager.dispose()}}async function wh(e,t={}){if(null==e)throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");null==t&&(t={}),t.fromTFHub&&null==e.load&&(e.endsWith("/")||(e+="/"),e=`${e}model.json?tfjs-format=file`);const n=new vh(e,t);return await n.load(),n}function Eh(e,t){Array.isArray(e)||(e=[e]),e.forEach((e=>{null!=e&&i("complex64"!==e.dtype,(()=>`${t} does not support complex64 tensors in the CPU backend.`))}))}const Th=oc;class Nh extends t{constructor(){super(),this.blockSize=48,this.firstUse=!0,this.data=new e(this,oo())}nextDataId(){return Nh.nextDataId++}write(e,t,n){this.firstUse&&(this.firstUse=!1,j().get("IS_NODE")&&jp("\n============================\nHi there 👋. Looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, which binds to TensorFlow C++, by running npm i @tensorflow/tfjs-node, or npm i @tensorflow/tfjs-node-gpu if you have CUDA. Then call require('@tensorflow/tfjs-node'); (-gpu suffix for CUDA) at the start of your program. Visit https://github.com/tensorflow/tfjs-node for more details.\n============================"));const r={id:this.nextDataId()};return this.data.set(r,{values:e,dtype:n,refCount:1}),r}makeTensorInfo(e,t,n){let r;if("string"===t&&null!=n&&n.length>0&&S(n[0])){const a=n.map((e=>Tr(e)));r=this.write(a,e,t)}else r=this.write(n,e,t);return{dataId:r,shape:e,dtype:t}}refCount(e){if(this.data.has(e)){return this.data.get(e).refCount}return 0}incRef(e){this.data.get(e).refCount++}decRef(e){if(this.data.has(e)){this.data.get(e).refCount--}}move(e,t,n,r,a){this.data.set(e,{values:t,dtype:r,refCount:a})}numDataIds(){return this.data.numDataIds()}async read(e){return this.readSync(e)}readSync(e){const{dtype:t,complexTensorInfos:n}=this.data.get(e);if("complex64"===t){return Kp(this.readSync(n.real.dataId),this.readSync(n.imag.dataId))}return this.data.get(e).values}bufferSync(e){const t=this.readSync(e.dataId);let n=t;if("string"===e.dtype)try{n=t.map((e=>Nr(e)))}catch(e){throw new Error("Failed to decode encoded string bytes into utf-8")}return ri(e.shape,e.dtype,n)}makeOutput(e,t,n){const r=this.write(e,t,n);return oo().makeTensorFromDataId(r,t,n,this)}disposeData(e,t=!1){if(this.data.has(e)){if(this.data.get(e).refCount--,!t&&this.data.get(e).refCount>0)return!1;const{complexTensorInfos:n}=this.data.get(e);null!=n&&(this.disposeData(n.real.dataId,!0),this.disposeData(n.imag.dataId,!0)),this.data.delete(e)}return!0}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}async time(e){const t=Er();e();return{kernelMs:Er()-t}}memory(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}}where(e){Eh([e],"where");const t=this.readSync(e.dataId);return Th(e.shape,t)}dispose(){}floatPrecision(){return 32}epsilon(){return super.epsilon()}}function kh(e){const t=new Float32Array(e.length);for(let n=0;n<e.length;++n)t[n]=Math.abs(e[n]);return t}Nh.nextDataId=0;function $h(e){return(t,n,r,a,s)=>{const o=Ii(t,n),i=o.length,u=M(o),l=v(s,p(o)),c=t.length,d=n.length,h=M(t),f=M(n),m=ki(t,o),g=ki(n,o);if(m.length+g.length===0)for(let t=0;t<l.length;++t)l[t]=e(r[t%r.length],a[t%a.length]);else for(let t=0;t<l.length;++t){const n=U(t,i,u),s=n.slice(-c);m.forEach((e=>s[e]=0));const o=V(s,c,h),p=n.slice(-d);g.forEach((e=>p[e]=0));const y=V(p,d,f);l[t]=e(r[o],a[y])}return[l,o]}}function Ih(e){const{inputs:t,backend:n}=e,{real:r,imag:a}=t,s=n.data.get(r.dataId).values,o=n.data.get(a.dataId).values,i=n.makeTensorInfo(r.shape,"complex64");return n.data.get(i.dataId).complexTensorInfos={real:n.makeTensorInfo(r.shape,"float32",s),imag:n.makeTensorInfo(a.shape,"float32",o)},i}function Sh(e,t,n="float32"){if("complex64"===n){return Ih({inputs:{real:Sh(e,t,"float32"),imag:Sh(e,t,"float32")},backend:e})}const r=B(p(t),n);return e.makeTensorInfo(t,n,r)}function _h(e){const{inputs:t,backend:n}=e,{x:r}=t;return n.incRef(r.dataId),{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}const Ch={kernelName:Qe,backendName:"cpu",kernelFunc:_h};function Ah(e){const{inputs:t,backend:n}=e,{input:r}=t,a=n.data.get(r.dataId).complexTensorInfos.real,s=n.data.get(a.dataId).values;return n.makeTensorInfo(a.shape,a.dtype,s)}function Rh(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{dtype:s}=r;if("complex64"===s){if("complex64"===a.dtype)return _h({inputs:{x:a},backend:n});const e=Sh(n,a.shape,a.dtype),t=Rh({inputs:{x:a},backend:n,attrs:{dtype:"float32"}}),r=Ih({inputs:{real:t,imag:e},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),r}if("complex64"===a.dtype){const e=Ah({inputs:{input:a},backend:n}),t=Rh({inputs:{x:e},backend:n,attrs:{dtype:s}});return n.disposeIntermediateTensorInfo(e),t}if(!N(a.dtype,s)){const e=_h({inputs:{x:a},backend:n});return{dataId:e.dataId,shape:e.shape,dtype:s}}if("int32"===s){const e=n.data.get(a.dataId).values,t=Int32Array.from(e);return n.makeTensorInfo(a.shape,"int32",t)}if("bool"===s){const e=n.data.get(a.dataId).values,t=wr([0],a.dtype),[r,s]=$h(((e,t)=>e!==t?1:0))(a.shape,[],e,t,"bool");return n.makeTensorInfo(s,"bool",r)}throw new Error(`Error in Cast: failed to cast ${a.dtype} to ${s}`)}const Oh={kernelName:fe,backendName:"cpu",kernelFunc:Rh};function Mh(e,t,n,r){return null==n?({inputs:n,backend:a})=>{const{a:s,b:o}=n,i=a;Eh([s,o],e);const u=i.data.get(s.dataId).values,l=i.data.get(o.dataId).values,c="string"===s.dtype?Zp(u):u,p="string"===s.dtype?Zp(l):l,d=r||s.dtype,[h,f]=t(s.shape,o.shape,c,p,d);return i.makeTensorInfo(f,d,h)}:({inputs:e,backend:a})=>{const{a:s,b:o}=e,i=a;if("complex64"===s.dtype||"complex64"===o.dtype){const e=Rh({inputs:{x:s},backend:i,attrs:{dtype:"complex64"}}),t=i.data.get(e.dataId),r=t.complexTensorInfos.real,a=t.complexTensorInfos.imag,u=i.data.get(r.dataId).values,l=i.data.get(a.dataId).values,c=Rh({inputs:{x:o},backend:i,attrs:{dtype:"complex64"}}),p=i.data.get(c.dataId),d=p.complexTensorInfos.real,h=p.complexTensorInfos.imag,f=i.data.get(d.dataId).values,m=i.data.get(h.dataId).values,[g,y,x]=n(s.shape,o.shape,u,l,f,m),b=i.makeTensorInfo(x,"float32",g),v=i.makeTensorInfo(x,"float32",y),w=Ih({inputs:{real:b,imag:v},backend:i});return i.disposeIntermediateTensorInfo(e),i.disposeIntermediateTensorInfo(c),i.disposeIntermediateTensorInfo(b),i.disposeIntermediateTensorInfo(v),w}{const e=i.data.get(s.dataId).values,n=i.data.get(o.dataId).values,a=r||s.dtype,[u,l]=t(s.shape,o.shape,e,n,a);return i.makeTensorInfo(l,a,u)}}}function Dh(e){return(t,n,r,a,s,o)=>{const i=Ii(t,n),u=p(i),l=i.length,c=M(i),d=v("float32",u),h=v("float32",u),f=ki(t,i),m=ki(n,i),g=Kp(r,a),y=Kp(s,o),x=t.length,b=M(t),w=n.length,E=M(n);if(f.length+m.length===0)for(let t=0;t<d.length;t++){const n=t%g.length,r=t%y.length,a=e(g[2*n],g[2*n+1],y[2*r],y[2*r+1]);d[t]=a.real,h[t]=a.imag}else for(let t=0;t<d.length;t++){const n=U(t,l,c),r=n.slice(-x);f.forEach((e=>r[e]=0));const a=V(r,x,b),s=n.slice(-w);m.forEach((e=>s[e]=0));const o=V(s,w,E),i=e(g[2*a],g[2*a+1],y[2*o],y[2*o+1]);d[t]=i.real,h[t]=i.imag}return[d,h,i]}}const Fh=$h(((e,t)=>e+t)),Lh=Dh(((e,t,n,r)=>({real:e+n,imag:t+r}))),Bh=Mh(ee,Fh,Lh),Ph={kernelName:ee,backendName:"cpu",kernelFunc:Bh};function Vh(e){return(t,n,r)=>{const a=v(n,t.length);for(let n=0;n<t.length;++n)a[n]=e(t[n],r);return a}}function Uh(e,t,n){return({inputs:r,attrs:a,backend:s})=>{const{x:o}=r;if(Eh(o,e),"string"===o.dtype||"string"===n)throw new Error("unaryKernelFunc does not support string input/output");const i=s,u=i.data.get(o.dataId).values,l=p(o.shape),c=n||o.dtype,d=w(c,l);for(let e=0;e<l;++e)d[e]=t(u[e],a);return i.makeTensorInfo(o.shape,c,d)}}function zh(e,t,n){return({inputs:r,attrs:a,backend:s})=>{const{x:o}=r;if(Eh(o,e),"string"===o.dtype||"string"===n)throw new Error("unaryKernelFunc does not support string input/output");const i=s,u=i.data.get(o.dataId).values,l=n||o.dtype,c=t(u,l,a);return i.makeTensorInfo(o.shape,l,c)}}const Wh=Vh((e=>Math.ceil(e)));zh(me,Wh);function Gh(e,t,n,r){const a=w(n,p(t));if(r&&"string"!==n){let t=0;e.forEach((e=>{const n=p(e.shape);a.set(e.vals,t),t+=n}))}else{let r=0;e.forEach((e=>{const s="string"===n?Zp(e.vals):e.vals;let o=0;for(let n=0;n<e.shape[0];++n){const i=n*t[1]+r;for(let t=0;t<e.shape[1];++t)a[i+t]=s[o++]}r+=e.shape[1]}))}return a}const Hh=$h(((e,t)=>e===t?1:0)),jh=(Mh(Be,Hh,null,"bool"),Vh((e=>Math.exp(e)))),Kh=(zh(Pe,jh),Vh((e=>Math.expm1(e)))),qh=(zh(Ue,Kh),Vh((e=>Math.floor(e))));zh(Ge,qh);const Xh=$h(((e,t)=>e>t?1:0)),Yh=(Mh(Xe,Xh,null,"bool"),$h(((e,t)=>e>=t?1:0))),Qh=(Mh(Ye,Yh,null,"bool"),$h(((e,t)=>e<t?1:0))),Zh=(Mh(at,Qh,null,"bool"),$h(((e,t)=>e<=t?1:0)));Mh(st,Zh,null,"bool");const Jh=Vh((e=>Math.log(e)));zh(it,Jh);const ef=$h(((e,t)=>Math.max(e,t))),tf=(Mh(dt,ef),$h(((e,t)=>Math.min(e,t)))),nf=(Mh(yt,tf),$h(((e,t)=>e*t))),rf=Dh(((e,t,n,r)=>({real:e*n-t*r,imag:e*r+t*n}))),af=Mh(vt,nf,rf),sf={kernelName:vt,backendName:"cpu",kernelFunc:af};function of(e,t,n){const r=vr(-1,n);return nf([],t,r,e,n)}const uf=$h(((e,t)=>e!==t?1:0));Mh(Et,uf,null,"bool");function lf(e,t,n,r,a){const s=t.length,o=p(t),i=M(t),u=M(a),l=v(n,p(a));for(let t=0;t<o;++t){const n=U(t,s,i),a=new Array(n.length);for(let e=0;e<a.length;e++)a[e]=n[r[e]];l[V(a,s,u)]=e[t]}return l}function cf(e,t,n,r){const[a,s]=fu(e,r),o=jr(t,"int32"),i=B(p(a),o),u=p(s);for(let e=0;e<i.length;++e){const t=e*u;let r=1;for(let e=0;e<u;++e)r*=n[t+e];i[e]=r}return{outVals:i,outShape:a,outDtype:o}}const pf=Vh((e=>1/Math.sqrt(e)));zh(zt,pf);function df(e,t,n,r,a){const s=Hs(r,t,n),o=p(n),i=M(r);if(s){const n=js(t,i);return"string"===a?e.slice(n,n+o):e.subarray(n,n+o)}const u=ri(r,a,"string"===a?Zp(e):e),l=ri(n,a);for(let e=0;e<l.size;++e){const n=l.indexToLoc(e),r=n.map(((e,n)=>e+t[n]));l.set(u.get(...r),...n)}return"string"===a?Jp(l.values):l.values}function hf(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{begin:s,size:o}=r;Eh(a,"slice");const[i,u]=Ks(a,s,o);Os(a,i,u);const l=df(n.data.get(a.dataId).values,i,u,a.shape,a.dtype);return n.makeTensorInfo(u,a.dtype,l)}const ff={kernelName:jt,backendName:"cpu",kernelFunc:hf};const mf=$h(((e,t)=>{const n=e-t;return n*n}));Mh(un,mf);function gf(e,t,n,r){const a=ri(e,t.dtype);for(let e=0;e<a.size;e++){const s=a.indexToLoc(e),o=new Array(s.length);for(let e=0;e<o.length;e++)o[e]=s[e]*n[e]+r[e];a.set(t.get(...o),...s)}return a}class yf{constructor(e,t,n,r,a,s){this.separator=Tr(e),this.nGramWidths=t,this.leftPad=Tr(n),this.rightPad=Tr(r),this.padWidth=a,this.preserveShort=s}getPadWidth(e){return Math.min(this.padWidth<0?e-1:this.padWidth,e-1)}getNumNGrams(e,t){const n=this.getPadWidth(t);return Math.max(0,e+2*n-t+1)}createNGrams(e,t,n,r,a,s){for(let o=0;o<a;++o){const i=this.getPadWidth(s),u=Math.max(0,i-o),l=Math.max(0,i-(a-(o+1))),c=s-(u+l),p=t+(u>0?0:o-i);let d=0;d+=u*this.leftPad.length;for(let t=0;t<c;++t)d+=e[p+t].length;d+=l*this.rightPad.length;d+=(u+l+c-1)*this.separator.length,n[r+o]=new Uint8Array(d);const h=n[r+o];let f=0;const m=e=>e.forEach((e=>h[f++]=e));for(let e=0;e<u;++e)m(this.leftPad),m(this.separator);for(let t=0;t<c-1;++t)m(e[p+t]),m(this.separator);if(c>0){m(e[p+c-1]);for(let e=0;e<l;++e)m(this.separator),m(this.rightPad)}else{for(let e=0;e<l-1;++e)m(this.rightPad),m(this.separator);m(this.rightPad)}}}compute(e,t){const n=e.length,r=t.length;if(r>0){let e=t[0];if(0!==e)throw new Error(`First split value must be 0, got ${e}`);for(let a=1;a<r;++a){let r=t[a]>=e;if(r=r&&t[a]<=n,!r)throw new Error(`Invalid split value ${t[a]}, must be in [${e}, ${n}]`);e=t[a]}if(e!==n)throw new Error(`Last split value must be data size. Expected ${n}, got ${e}`)}const a=r-1,s=w("int32",r);if(0===n||0===r){const e=new Array(n);for(let e=0;e<=a;++e)s[e]=0;return[e,s]}s[0]=0;for(let e=1;e<=a;++e){const n=t[e]-t[e-1];let r=0;this.nGramWidths.forEach((e=>{r+=this.getNumNGrams(n,e)})),this.preserveShort&&n>0&&0===r&&(r=1),s[e]=s[e-1]+r}const o=new Array(s[a]);for(let n=0;n<a;++n){const r=t[n];let a=s[n];if(this.nGramWidths.forEach((s=>{const i=t[n+1]-t[n],u=this.getNumNGrams(i,s);this.createNGrams(e,r,o,a,u,s),a+=u})),this.preserveShort&&a===s[n]){const s=t[n+1]-t[n];if(0===s)continue;const i=s+2*this.padWidth,u=1;this.createNGrams(e,r,o,a,u,i)}}return[o,s]}}function xf(e,t,n){if(!e.length)return[];if(0===t.length){const t=new Array(e.length);for(let n=0;n<e.length;++n)t[n]=e.subarray(n,n+1);return t}if(1===t.length){const r=t[0],a=[];let s=e.indexOf(r);for(;-1!==s;){const t=e.subarray(0,s);n&&0===t.length||a.push(t),s=(e=e.subarray(s+1)).indexOf(r)}return n&&0===e.length||a.push(e),a}const r=[];let a=0;for(let s=0;s<e.length+1;s++)if(s===e.length||-1!==t.indexOf(e[s])){const t=e.subarray(a,s);n&&0===t.length||r.push(t),a=s+1}return r}const bf=$h(((e,t)=>e-t)),vf=Dh(((e,t,n,r)=>({real:e-n,imag:t-r}))),wf=Mh(hn,bf,vf),Ef={kernelName:hn,backendName:"cpu",kernelFunc:wf};var Tf=Object.freeze({__proto__:null,simpleAbsImpl:kh,addImpl:Fh,bincountImpl:function(e,t,n,r,a){const s=p(r),o=B(a,n);for(let n=0;n<e.length;n++){const r=e[n];if(r<0)throw new Error("Input x must be non-negative!");r>=a||(o[r]+=s>0?t[n]:1)}return o},bincountReduceImpl:function(e,t,n,r=!1){const a=e.shape[0],s=e.shape[1],o=ri([a,n],t.dtype);for(let i=0;i<a;i++)for(let a=0;a<s;a++){const s=e.get(i,a);if(s<0)throw new Error("Input x must be non-negative!");s>=n||(r?o.set(1,i,s):t.size>0?o.set(o.get(i,s)+t.get(i,a),i,s):o.set(o.get(i,s)+1,i,s))}return o},ceilImpl:Wh,concatImpl:Gh,equalImpl:Hh,expImpl:jh,expm1Impl:Kh,floorImpl:qh,gatherNdImpl:function(e,t,n,r,a,s,o,i,u){const l=ri([r,s],n);for(let n=0;n<r;n++){const r=[];let c=0;for(let t=0;t<a;t++){const s=e[n*a+t];c+=s*o[t],r.push(s)}if(c<0||c>=u/s)throw new Error(`Invalid indices: ${r} does not index into ${i}`);for(let e=0;e<s;e++)l.values[n*s+e]=t.get(...t.indexToLoc(c*s+e))}return l},gatherV2Impl:function(e,t,n){const r=ri(n,e.dtype);for(let n=0;n<r.size;++n){const a=r.indexToLoc(n).slice(),s=a[0],o=a[2],i=t.locToIndex([s,o]);a[2]=t.values[i];const u=e.locToIndex(a);r.values[n]=e.values[u]}return r},greaterImpl:Xh,greaterEqualImpl:Yh,lessImpl:Qh,lessEqualImpl:Zh,linSpaceImpl:function(e,t,n){const r=(t-e)/(n-1),a=B(n,"float32");a[0]=e;for(let e=1;e<a.length;e++)a[e]=a[e-1]+r;return a},logImpl:Jh,maxImpl:function(e,t,n,r){const a=v(r,p(n));for(let n=0;n<a.length;++n){const r=n*t;let s=e[r];for(let n=0;n<t;++n){const t=e[r+n];(Number.isNaN(t)||t>s)&&(s=t)}a[n]=s}return a},maximumImpl:ef,minimumImpl:tf,multiplyImpl:nf,negImpl:of,notEqualImpl:uf,prodImpl:cf,rangeImpl:function(e,t,n,r){if(e===t||e<t&&n<0||t<e&&n>1)return B(0,r);const a=B(Math.abs(Math.ceil((t-e)/n)),r);t<e&&1===n&&(n=-1),a[0]=e;for(let e=1;e<a.length;e++)a[e]=a[e-1]+n;return a},rsqrtImpl:pf,sliceImpl:df,sparseFillEmptyRowsImpl:function(e,t,n,r,a,s,o){const i=t[0],u=s[0],l=new Array(u),c=new Array(i),p=t[1];if(0===u){if(0!==i)throw new Error(`Received SparseTensor with denseShape[0] = 0 but\n         indices.shape[0] = ${i}`);return[w(n,0),[0,p],w(a,0),l,c]}let d=!0,h=0;const f=new Array(u).fill(0);for(let t=0;t<i;++t){const n=e[t*p];if(n<0)throw new Error(`indices(${t}, 0) is invalid: ${n} < 0`);if(n>=u)throw new Error(`indices(${t}, 0) is invalid: ${n} >= ${u}`);++f[n],d=d&&n>=h,h=n}let m=!0;for(let e=0;e<u;++e){const t=0===f[e];l[e]=t,m=m&&!t,f[e]=Math.max(f[e],1),e>0&&(f[e]+=f[e-1])}if(m&&d){const t=e,n=r;for(let e=0;e<i;++e)c[e]=e;return[t,[i,p],n,l,c]}{const t=f[u-1],s=w(n,t*p),d=w(a,t),h=new Array(u).fill(0);for(let t=0;t<i;++t){const n=e[t*p],a=h[n],o=(0===n?0:f[n-1])+a;h[n]++;for(let n=0;n<p;++n)s[o*p+n]=e[t*p+n];d[o]=r[t],c[t]=o}for(let e=0;e<u;++e){if(0===h[e]){const t=0===e?0:f[e-1];s[t*p+0]=e;for(let e=1;e<p;++e)s[t*p+e]=0;d[t]=o}}return[s,[t,p],d,l,c]}},sparseReshapeImpl:function(e,t,n,r,a){const s=p(r),o=t[0],i=a.length,u=[];let l=1,c=-1;for(let e=0;e<i;++e){const t=a[e];if(-1===t){if(-1!==c)throw new Error(`only one output dimension may be -1, not both ${c} and ${e}`);c=e,u.push(1)}else{if(t<0)throw new Error(`size ${e} must be non-negative, not ${t}`);l*=t,u.push(t)}}if(-1!==c){if(l<=0)throw new Error("reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero");const e=Math.trunc(s/l);if(l*e!==s)throw new Error(`Input to reshape is a SparseTensor with ${s}\n          dense values, but the requested shape requires a multiple of ${l}. inputShape=${r} outputShape= ${u}`);u[c]=e}const d=p(u);if(d!==s)throw new Error(`Input to reshape is a tensor with ${s} dense values, but the requested shape has ${d}. inputShape=${r} outputShape=${u}`);const h=r.length,f=[];if(h>0){f[h-1]=1;for(let e=h-2;e>=0;--e)f[e]=f[e+1]*r[e+1]}const m=[];if(i>0){m[i-1]=1;for(let e=i-2;e>=0;--e)m[e]=m[e+1]*u[e+1]}const g=w(n,o*i);for(let t=0;t<o;++t){let n=0;for(let r=0;r<h;++r)n+=e[t*h+r]*f[r];for(let e=0;e<i;++e)g[t*i+e]=Math.trunc(n/m[e]),n%=m[e]}return[g,[o,i],u]},sparseSegmentReductionImpl:function(e,t,n,r,a,s=!1,o=0){const i=r.length;if(i!==a.length)throw new Error("segmentIds and indices should have same size.");const u=[t[0],e.length/t[0]],l=u[1],c=i>0?a[i-1]+1:0;if(c<0)throw new Error("segment ids must be >= 0");const p=t.slice();p[0]=c;const d=w(n,p.reduce(((e,t)=>e*t),1));if(0===i)return c>0&&d.fill(o),[d,p];if(c<=0)throw new Error("segment ids must be >= 0");let h=0,f=1,m=0,g=a[h];for(;;){let t=0;if(f<i){if(t=a[f],g===t){++f;continue}if(g>=t)throw new Error("segment ids are not increasing")}if(g<0||g>=c)throw new Error(`Segment id ${g} out of range [0, ${c}), possibly because segmentIds input is not sorted.`);g>m&&d.fill(o,m*l,g*l);for(let t=h;t<f;++t){const n=r[t];if(n<0||n>=u[0])throw new Error(`Bad: indices[${t}] == ${r[t]} out of range [0, ${u[0]})`);for(let t=0;t<l;t++)d[g*l+t]+=e[n*l+t]}if(s)for(let e=0;e<l;e++)d[g*l+e]/=f-h;if(h=f,++f,m=g+1,g=t,f>i)break}return m<c&&d.fill(o,m*l,c*l),[d,p]},squaredDifferenceImpl:mf,stridedSliceImpl:gf,stringNGramsImpl:function(e,t,n,r,a,s,o,i){return new yf(n,r,a,s,o,i).compute(e,t)},stringSplitImpl:function(e,t,n){const r=e.length,a=[];let s=0,o=0;const i=new Array(r);for(let u=0;u<r;++u){const r=xf(e[u],t,n),l=r.length;i[u]=l,s+=l,o=Math.max(o,l),a.push(...r)}const u=w("int32",2*s),l=new Array(s),c=[r,o];let p=0;for(let e=0;e<r;++e)for(let t=0;t<i[e];++t)u[2*p]=e,u[2*p+1]=t,l[p]=a[p],++p;return[u,l,c]},stringToHashBucketFastImpl:function(e,t){const n=w("int32",e.length);for(let r=0;r<e.length;++r)n[r]=br(e[r]).modulo(t).getLowBitsUnsigned();return n},subImpl:bf,tileImpl:function(e,t){const n=new Array(e.rank);for(let r=0;r<n.length;r++)n[r]=e.shape[r]*t[r];const r=ri(n,e.dtype);for(let t=0;t<r.values.length;++t){const n=r.indexToLoc(t),a=new Array(e.rank);for(let t=0;t<a.length;t++)a[t]=n[t]%e.shape[t];const s=e.locToIndex(a);r.values[t]=e.values[s]}return r},topKImpl:function(e,t,n,r,a){const s=t[t.length-1],[o,i]=[e.length/s,s],u=v(n,o*r),l=v("int32",o*r);for(let t=0;t<o;t++){const n=t*i,a=e.subarray(n,n+i),s=[];for(let e=0;e<a.length;e++)s.push({value:a[e],index:e});s.sort(((e,t)=>t.value-e.value));const o=t*r,c=u.subarray(o,o+r),p=l.subarray(o,o+r);for(let e=0;e<r;e++)c[e]=s[e].value,p[e]=s[e].index}const c=t.slice();return c[c.length-1]=r,[ri(c,n,u),ri(c,"int32",l)]},transposeImpl:lf,uniqueImpl:function(e,t,n,r){const a=x(t,n)[0],s=[1,n[0],1];for(let e=0;e<a;e++)s[0]*=n[e];s[1]=n[a];for(let e=a+1;e<n.length;e++)s[2]*=n[e];const o={},i=new Int32Array(n[a]),u=new Mr(s,r,e),l=[],c=1===s[0]&&1===s[2];for(let t=0;t<n[a];t++){let n;if(c)n=e[t].toString();else{const e=[];for(let n=0;n<s[0];n++)for(let r=0;r<s[2];r++)e.push(u.get(n,t,r));n=e.join(",")}if(void 0!==o[n])i[t]=o[n];else{const e=Object.keys(o).length;o[n]=e,i[t]=e,l.push(t)}}const p=s.slice();p[1]=Object.keys(o).length;const d=new Mr(p,r);l.forEach(((e,t)=>{for(let n=0;n<s[0];n++)for(let r=0;r<s[2];r++)d.set(u.get(n,e,r),n,t,r)}));const h=n.slice();return h[a]=p[1],{outputValues:d.values,outputShape:h,indices:i}}});function Nf(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{shape:s}=r,o=p(a.shape),u=y(s,o),l=p(u);i(o===l,(()=>`The new shape (${u}) has ${l} elements and the old shape (${a.shape}) has ${o} elements. The new shape and old shape must have the same number of elements.`)),n.incRef(a.dataId);const c=n.data.get(a.dataId);if(null!=c.complexTensorInfos){const e=c.complexTensorInfos.real,t=c.complexTensorInfos.imag;e.shape=u,t.shape=u}return{dataId:a.dataId,shape:u,dtype:a.dtype}}po("cpu",(()=>new Nh),1);const kf={kernelName:Ft,backendName:"cpu",kernelFunc:Nf};function $f(e){const{inputs:t,backend:n,attrs:r}=e,{input:a}=t,{dim:s}=r,o=a.shape.length,u=a.shape.slice();let l=s;return s<0&&(i(-(o+1)<=s,(()=>`Axis must be in the interval [${-(o+1)}, ${o}]`)),l=o+s+1),u.splice(l,0,1),Nf({inputs:{x:a},backend:n,attrs:{shape:u}})}const If={kernelName:Ve,backendName:"cpu",kernelFunc:$f},Sf={kernelName:kn,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:r}=e,{radians:a,fillValue:s,center:o}=t,i=n,u=v(r.dtype,p(r.shape)),[l,c,d,h]=r.shape,[f,m]=Hp(o,c,d),g=Math.sin(a),y=Math.cos(a),x=i.data.get(r.dataId).values;for(let e=0;e<l;e++){const t=e*d*c*h;for(let e=0;e<c;e++){const n=e*(d*h);for(let r=0;r<d;r++){const a=r*h;for(let o=0;o<h;o++){const i=[l,e,r,o],p=i[2],b=i[1];let v=(p-f)*y-(b-m)*g,w=(p-f)*g+(b-m)*y;v=Math.round(v+f),w=Math.round(w+m);let E=s;if("number"!=typeof s&&(E=3===o?255:s[o]),v>=0&&v<d&&w>=0&&w<c){E=x[t+w*(d*h)+v*h+o]}u[t+n+a+o]=E}}}}return{dataId:i.write(u,r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}};const _f={kernelName:Ie,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{image:a,boxes:s,boxInd:o}=t,{cropSize:i,method:u,extrapolationValue:l}=r,[c,p,d,h]=a.shape,f=s.shape[0],[m,g]=i,y=ri([f,m,g,h],"float32"),x=n.data.get(s.dataId).values,b=n.data.get(o.dataId).values,v=n.data.get(a.dataId).values,w=M(a.shape),E=M(y.shape);for(let e=0;e<f;e++){const t=4*e,n=x[t],r=x[t+1],a=x[t+2],s=x[t+3],o=b[e];if(o>=c)continue;const i=m>1?(a-n)*(p-1)/(m-1):0,f=g>1?(s-r)*(d-1)/(g-1):0;for(let t=0;t<m;t++){const c=m>1?n*(p-1)+t*i:.5*(n+a)*(p-1);if(c<0||c>p-1)for(let n=0;n<g;n++)for(let r=0;r<h;r++){const a=r+n*E[2]+t*E[1]+e*E[0];y.values[a]=l}else if("bilinear"===u){const n=Math.floor(c),a=Math.ceil(c),i=c-n;for(let u=0;u<g;u++){const c=g>1?r*(d-1)+u*f:.5*(r+s)*(d-1);if(c<0||c>d-1){for(let n=0;n<h;n++){const r=n+u*E[2]+t*E[1]+e*E[0];y.values[r]=l}continue}const p=Math.floor(c),m=Math.ceil(c),x=c-p;for(let r=0;r<h;r++){let s=r+p*w[2]+n*w[1]+o*w[0];const l=v[s];s=r+m*w[2]+n*w[1]+o*w[0];const c=v[s];s=r+p*w[2]+a*w[1]+o*w[0];const d=v[s];s=r+m*w[2]+a*w[1]+o*w[0];const h=l+(c-l)*x,f=d+(v[s]-d)*x;s=r+u*E[2]+t*E[1]+e*E[0],y.values[s]=h+(f-h)*i}}}else for(let n=0;n<g;++n){const a=g>1?r*(d-1)+n*f:.5*(r+s)*(d-1);if(a<0||a>d-1){for(let r=0;r<h;r++){const a=r+n*E[2]+t*E[1]+e*E[0];y.values[a]=l}continue}const i=Math.round(a),u=Math.round(c);for(let r=0;r<h;r++){const a=r+i*w[2]+u*w[1]+o*w[0],s=r+n*E[2]+t*E[1]+e*E[0];y.values[s]=v[a]}}}}return n.makeTensorInfo(y.shape,y.dtype,y.values)}},Cf=$h(((e,t)=>e/t)),Af=Mh(De,Cf),Rf={kernelName:De,backendName:"cpu",kernelFunc:Af},Of=Uh(Le,(e=>e>=0?e:Math.exp(e)-1));function Mf(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{alpha:s}=r;Eh([a],"leakyRelu");const o=p(a.shape),i=n.data.get(a.dataId).values,u=v("float32",o);for(let e=0;e<i.length;e++)u[e]=i[e]<0?s*i[e]:i[e];return n.makeTensorInfo(a.shape,"float32",u)}const Df=$h(((e,t)=>e<0?t*e:e));function Ff(e){const{inputs:t,backend:n}=e,{x:r,alpha:a}=t;Eh([r,a],"prelu");const s=n.data.get(r.dataId).values,o=n.data.get(a.dataId).values,[i,u]=Df(r.shape,a.shape,s,o,r.dtype);return n.makeTensorInfo(u,r.dtype,i)}const Lf={kernelName:Ct,backendName:"cpu",kernelFunc:Ff},Bf=Uh(Dt,(e=>Math.max(0,e))),Pf={kernelName:Dt,backendName:"cpu",kernelFunc:Bf},Vf=Uh(Pt,(e=>Math.min(Math.max(0,e),6))),Uf=Uh(Xt,(e=>1/(1+Math.exp(-e)))),zf={kernelName:Xt,backendName:"cpu",kernelFunc:Uf};function Wf(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,filter:s}=t,{strides:o,pad:i,dataFormat:u,dilations:l,dimRoundingMode:c}=r;Eh([a,s],"conv2d");const p=Vo(u),d=Ao(a.shape,s.shape,o,l,i,c,!1,p),h=d.filterHeight,f=d.filterWidth,m=d.dilationHeight,g=d.dilationWidth,y=d.padInfo.left,x=d.padInfo.top,b="channelsLast"===d.dataFormat,v=new Mr(d.outShape,a.dtype),w=M(a.shape),E=M(s.shape),T=w[0],N=b?w[1]:w[2],k=b?w[2]:1,$=b?1:w[1],I=v.strides[0],S=b?v.strides[1]:v.strides[2],_=b?v.strides[2]:1,C=b?1:v.strides[1],A=n.data.get(a.dataId).values,R=n.data.get(s.dataId).values,O=v.values;for(let e=0;e<d.batchSize;++e){const t=e*T,n=e*I;for(let e=0;e<d.outHeight;++e){const r=n+e*S,a=e*d.strideHeight-x;for(let e=0;e<h;++e){const n=a+e*m;if(n<0||n>=d.inHeight)continue;const s=e*E[0],o=t+n*N;for(let e=0;e<d.outWidth;++e){const t=r+e*_,n=e*d.strideWidth-y;for(let e=0;e<f;++e){const r=n+e*g;if(r<0||r>=d.inWidth)continue;const a=o+r*k;let i=s+e*E[1];for(let e=0;e<d.inChannels;++e){const n=A[a+e*$];for(let e=0;e<d.outChannels;++e)O[t+e*C]+=n*R[i+e];i+=d.outChannels}}}}}}return n.makeTensorInfo(v.shape,v.dtype,O)}const Gf={kernelName:In,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,filter:s,bias:o,preluActivationWeights:i}=t,{strides:u,pad:l,dataFormat:c,dilations:p,dimRoundingMode:d,activation:h,leakyreluAlpha:f}=r;let m=Wf({inputs:{x:a,filter:s},backend:n,attrs:{strides:u,pad:l,dataFormat:c,dilations:p,dimRoundingMode:d}});if(o){const e=m;m=Bh({inputs:{a:m,b:o},backend:n}),n.disposeIntermediateTensorInfo(e)}if(h){const e=m;m=function(e,t,n,r,a){if("linear"===n)return _h({inputs:{x:t},backend:e});if("relu"===n)return Bf({inputs:{x:t},backend:e});if("elu"===n)return Of({inputs:{x:t},backend:e});if("relu6"===n)return Vf({inputs:{x:t},backend:e});if("prelu"===n)return Ff({inputs:{x:t,alpha:r},backend:e});if("leakyrelu"===n)return Mf({inputs:{x:t},backend:e,attrs:{alpha:a}});if("sigmoid"===n)return Uf({inputs:{x:t},backend:e});throw new Error(`Activation ${n} has not been implemented for the CPU backend.`)}(n,m,h,i,f),n.disposeIntermediateTensorInfo(e)}return m}};const Hf={kernelName:Ce,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,filter:s}=t,{strides:o,pad:u,dilations:l,dimRoundingMode:c}=r;Eh([a,s],"depthwiseConv2DNative");const p=M(a.shape),d=M(s.shape);let h=l;null==h&&(h=[1,1]),i(Po(o,h),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${o} and dilations '${h}'`));const f=Ao(a.shape,s.shape,o,h,u,c,!0),{filterHeight:m,filterWidth:g,dilationHeight:y,dilationWidth:x,padInfo:b}=f,v=b.left,w=b.top,E=f.outChannels/f.inChannels,T=new Mr(f.outShape,a.dtype),N=n.data.get(a.dataId).values,k=n.data.get(s.dataId).values,$=T.values;for(let e=0;e<f.batchSize;++e){const t=e*p[0],n=e*T.strides[0];for(let e=0;e<f.outHeight;++e){const r=n+e*T.strides[1],a=e*f.strideHeight-w;for(let e=0;e<m;++e){const n=a+e*y;if(n<0||n>=f.inHeight)continue;const s=e*d[0],o=t+n*p[1];for(let e=0;e<f.outWidth;++e){const t=r+e*T.strides[2],n=e*f.strideWidth-v;for(let e=0;e<g;++e){const r=n+e*x;if(r<0||r>=f.inWidth)continue;const a=s+e*d[1],i=o+r*f.inChannels;let u=t,l=a;for(let e=0;e<f.inChannels;++e){const t=N[i+e];for(let e=0;e<E;++e)$[u+e]+=t*k[l+e];u+=E,l+=E}}}}}}return n.makeTensorInfo(T.shape,T.dtype,T.values)}};function jf(e,t,n,r,a,s){const o=a.strideHeight,i=a.strideWidth,u=a.dilationHeight,l=a.dilationWidth,c=a.effectiveFilterHeight,p=a.effectiveFilterWidth,d=a.padInfo.top,h=a.padInfo.left,f="max"===s?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,m=ri(a.outShape,n),g=m.values,y=a.outShape[1]*a.outShape[2]*a.outShape[3],x=a.outShape[2]*a.outShape[3],b=a.outShape[3];for(let t=0;t<a.batchSize;++t){const n=t*y,m=t*r[0];for(let t=0;t<a.inChannels;++t)for(let y=0;y<a.outHeight;++y){const v=y*o-d,w=Math.max(0,v),E=Math.min(a.inHeight,c+v),T=n+y*x;for(let n=0;n<a.outWidth;++n){const o=n*i-h,c=Math.max(0,o),d=Math.min(a.inWidth,p+o);let y=f,x=0,v=0;for(let n=w;n<E;n+=u){const a=m+n*r[1];for(let n=c;n<d;n+=l){const o=e[a+n*r[2]+t];"max"===s&&o>y?y=o:"avg"===s&&(x+=o,v++)}if(isNaN(y))break}g[T+n*b+t]="avg"===s?x/v:y}}}return m}const Kf={kernelName:ht,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t;Eh(a,"maxPool");const{filterSize:s,strides:o,pad:u,dimRoundingMode:l}=r;i(Po(o,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${o} and dilations '1'`));const c=Co(a.shape,s,o,1,u,l);let p;if(1===c.filterWidth&&1===c.filterHeight&&d(c.inShape,c.outShape))p=_h({inputs:{x:a},backend:n});else{const e=n.data.get(a.dataId).values,t=M(a.shape),r=jf(e,a.shape,a.dtype,t,c,"max");p=n.makeTensorInfo(c.outShape,a.dtype,r.values)}return p}};const qf={kernelName:_t,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{paddings:s,constantValue:o}=r;Eh(a,"pad");const i=s.map(((e,t)=>e[0]+a.shape[t]+e[1])),u=s.map((e=>e[0])),l=n.data.get(a.dataId).values,c=p(a.shape),d=a.shape.length,h=M(a.shape),f=p(i),m=i.length,g=M(i),y=v(a.dtype,f);0!==o&&y.fill(o);for(let e=0;e<c;e++){y[V(U(e,d,h).map(((e,t)=>e+u[t])),m,g)]=l[e]}return{dataId:n.write(y,i,a.dtype),shape:i,dtype:a.dtype}}};const Xf={kernelName:Bt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:a}=t,{alignCorners:s,halfPixelCenters:o,size:i}=r;Eh(a,"resizeBilinear");const u=M(a.shape),[l,c]=i,[d,h,f,m]=a.shape,g=n.data.get(a.dataId).values,y=new Float32Array(p([d,l,c,m])),x=[s&&l>1?h-1:h,s&&c>1?f-1:f],b=[s&&l>1?l-1:l,s&&c>1?c-1:c];let v=0;const w=x[0]/b[0],E=x[1]/b[1];for(let e=0;e<d;e++)for(let t=0;t<l;t++){let n;n=o?w*(t+.5)-.5:w*t;const r=Math.max(0,Math.floor(n)),a=n-r,s=Math.min(h-1,Math.ceil(n)),i=e*u[0]+r*u[1],l=e*u[0]+s*u[1];for(let e=0;e<c;e++){let t;t=o?E*(e+.5)-.5:E*e;const n=Math.max(0,Math.floor(t)),r=t-n,s=Math.min(f-1,Math.ceil(t)),c=i+n*u[2],p=l+n*u[2],d=i+s*u[2],h=l+s*u[2];for(let e=0;e<m;e++){const t=g[c+e],n=g[p+e],s=t+(g[d+e]-t)*r,o=s+(n+(g[h+e]-n)*r-s)*a;y[v++]=o}}}return n.makeTensorInfo([d,l,c,m],"float32",y)}};const Yf={kernelName:ln,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{begin:s,end:o,strides:i,beginMask:u,endMask:l,ellipsisMask:c,newAxisMask:p,shrinkAxisMask:d}=r;Eh(a,"stridedSlice");const{nonStrided:h,$begin:f,$strides:m,size:g,newShape:y,outShape:x}=qs(a.shape,s,o,i,u,l,c,p,d),b=Nf({inputs:{x:a},backend:n,attrs:{shape:y}});let v;if(h){const e=hf({inputs:{x:b},backend:n,attrs:{begin:f,size:g}});v=Nf({inputs:{x:e},backend:n,attrs:{shape:x}}),n.disposeIntermediateTensorInfo(e)}else if(x.some((e=>0===e)))v=n.makeTensorInfo(x,a.dtype,[]);else{const e=gf(x,n.bufferSync(b),m,f);v=n.makeTensorInfo(e.shape,e.dtype,e.values)}const w=Nf({inputs:{x:v},backend:n,attrs:{shape:x}});return n.disposeIntermediateTensorInfo(b),n.disposeIntermediateTensorInfo(v),w}};function Qf(e){const{inputs:t,backend:n}=e,{input:r}=t,a=n.data.get(r.dataId).complexTensorInfos.imag,s=n.data.get(a.dataId).values;return n.makeTensorInfo(a.shape,a.dtype,s)}function Zf(e){const{inputs:t,backend:n,attrs:r}=e,{axis:a}=r,s=x(a,t[0].shape)[0];let o=Wp(t.map((e=>e.shape)),s);if(0===p(o))return n.makeTensorInfo(o,t[0].dtype,[]);const i=t.filter((e=>p(e.shape)>0));if(1===i.length)return _h({inputs:{x:i[0]},backend:n});if(zp(i.map((e=>e.shape)),s),"complex64"===i[0].dtype){const e=i.map((e=>Ah({inputs:{input:e},backend:n}))),t=i.map((e=>Qf({inputs:{input:e},backend:n}))),r=Zf({inputs:e,backend:n,attrs:{axis:s}}),a=Zf({inputs:t,backend:n,attrs:{axis:s}}),o=Ih({inputs:{real:r,imag:a},backend:n});return e.forEach((e=>n.disposeIntermediateTensorInfo(e))),t.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(a),o}const u=i.map((e=>{const t=p(e.shape.slice(s));return Nf({inputs:{x:e},backend:n,attrs:{shape:[-1,t]}})})),l=u.map((e=>({vals:n.data.get(e.dataId).values,shape:e.shape})));o=Wp(u.map((e=>e.shape)),1);const c=1===u[0].shape[0],d=Gh(l,o,t[0].dtype,c),h=Wp(i.map((e=>e.shape)),s),f=n.makeTensorInfo(h,t[0].dtype,d);return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),f}const Jf={kernelName:be,backendName:"cpu",kernelFunc:Zf};const em={kernelName:St,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{axis:a}=r;if(1===t.length)return $f({inputs:{input:t[0]},backend:n,attrs:{dim:a}});const s=t[0].shape,o=t[0].dtype;t.forEach((e=>{u(s,e.shape,"All tensors passed to stack must have matching shapes"),i(o===e.dtype,(()=>"All tensors passed to stack must have matching dtypes"))}));const l=[],c=Zf({inputs:t.map((e=>{const t=$f({inputs:{input:e},backend:n,attrs:{dim:a}});return l.push(t),t})),backend:n,attrs:{axis:a}});return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}},tm=Uc;const nm={kernelName:Tt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{boxes:a,scores:s}=t,{maxOutputSize:o,iouThreshold:i,scoreThreshold:u}=r;Eh(a,"NonMaxSuppression");const l=n.data.get(a.dataId).values,c=n.data.get(s.dataId).values,{selectedIndices:p}=tm(l,c,o,i,u);return n.makeTensorInfo([p.length],"int32",new Int32Array(p))}},rm={},am={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function sm(e,t){rm[e]=t}function om(e){if(!(e in rm)){const t=function(e){if(1!==e&&2!==e)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");const t=function(e){if("undefined"!=typeof OffscreenCanvas&&2===e)return new OffscreenCanvas(300,150);if("undefined"!=typeof document)return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}(e);if(t.addEventListener("webglcontextlost",(t=>{t.preventDefault(),delete rm[e]}),!1),1===e)return t.getContext("webgl",am)||t.getContext("experimental-webgl",am);return t.getContext("webgl2",am)}(e);if(null===t)return console.log("Could not get context for WebGL version",e),null;rm[e]=t}const t=rm[e];return t.isContextLost()?(delete rm[e],om(e)):(t.disable(t.DEPTH_TEST),t.disable(t.STENCIL_TEST),t.disable(t.BLEND),t.disable(t.DITHER),t.disable(t.POLYGON_OFFSET_FILL),t.disable(t.SAMPLE_COVERAGE),t.enable(t.SCISSOR_TEST),t.enable(t.CULL_FACE),t.cullFace(t.BACK),rm[e])}var im,um,lm;function cm(e,t){return[t,e]}function pm(e){const t=p(e);return f(Math.ceil(t/4))}function dm(e,t){return[Math.max(1,Math.ceil(t/2)),Math.max(1,Math.ceil(e/2))]}function hm(e,t){const n=e;let r,a,s,o,i,u,l,c,p,d;return 2===j().getNumber("WEBGL_VERSION")?(r=n.R32F,a=n.R16F,s=n.RGBA16F,o=n.RGBA32F,i=n.RED,l=4,c=1,p=n.HALF_FLOAT,d=n.FLOAT):(r=e.RGBA,a=e.RGBA,s=e.RGBA,o=n.RGBA,i=e.RGBA,l=4,c=4,p=null!=t?t.HALF_FLOAT_OES:null,d=e.FLOAT),u=e.RGBA,{internalFormatFloat:r,internalFormatHalfFloat:a,internalFormatPackedHalfFloat:s,internalFormatPackedFloat:o,textureFormatFloat:i,downloadTextureFormat:u,downloadUnpackNumChannels:l,defaultNumChannels:c,textureTypeHalfFloat:p,textureTypeFloat:d}}function fm(e,t){const n=t();return j().getBool("DEBUG")&&function(e){const t=e.getError();if(t!==e.NO_ERROR)throw new Error("WebGL Error: "+gm(e,t))}(e),n}!function(e){e[e.DENSE=0]="DENSE",e[e.SHARED_BATCH=1]="SHARED_BATCH"}(im||(im={})),function(e){e[e.RENDER=0]="RENDER",e[e.UPLOAD=1]="UPLOAD",e[e.PIXELS=2]="PIXELS",e[e.DOWNLOAD=3]="DOWNLOAD"}(um||(um={})),function(e){e[e.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",e[e.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",e[e.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",e[e.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",e[e.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16"}(lm||(lm={}));function mm(e){return!!(j().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||0===e||5.96e-8<Math.abs(e)&&Math.abs(e)<65504)}function gm(e,t){switch(t){case e.NO_ERROR:return"NO_ERROR";case e.INVALID_ENUM:return"INVALID_ENUM";case e.INVALID_VALUE:return"INVALID_VALUE";case e.INVALID_OPERATION:return"INVALID_OPERATION";case e.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case e.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case e.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return`Unknown error code ${t}`}}function ym(e,t){return Bm(e,(()=>e.getExtension(t)),'Extension "'+t+'" not supported on this browser.')}function xm(e,t){const n=Bm(e,(()=>e.createShader(e.VERTEX_SHADER)),"Unable to create vertex WebGLShader.");if(fm(e,(()=>e.shaderSource(n,t))),fm(e,(()=>e.compileShader(n))),!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw console.log(e.getShaderInfoLog(n)),new Error("Failed to compile vertex shader.");return n}function bm(e,t){const n=Bm(e,(()=>e.createShader(e.FRAGMENT_SHADER)),"Unable to create fragment WebGLShader.");if(fm(e,(()=>e.shaderSource(n,t))),fm(e,(()=>e.compileShader(n))),!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw function(e,t){const n=vm.exec(t);if(null==n)return console.log(`Couldn't parse line number in error: ${t}`),void console.log(e);const r=+n[1],a=e.split("\n"),s=a.length.toString().length+2,o=a.map(((e,t)=>m((t+1).toString(),s)+e));let i=0;for(let e=0;e<o.length;e++)i=Math.max(o[e].length,i);const u=o.slice(0,r-1),l=o.slice(r-1,r),c=o.slice(r);console.log(u.join("\n")),console.log(t.split("\n")[0]),console.log(`%c ${m(l[0],i)}`,"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(c.join("\n"))}(t,e.getShaderInfoLog(n)),new Error("Failed to compile fragment shader.");return n}const vm=/ERROR: [0-9]+:([0-9]+):/g;function wm(e){return Bm(e,(()=>e.createProgram()),"Unable to create WebGLProgram.")}function Em(e,t){if(fm(e,(()=>e.linkProgram(t))),!1===e.getProgramParameter(t,e.LINK_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Failed to link vertex and fragment shaders.")}function Tm(e,t){if(fm(e,(()=>e.validateProgram(t))),!1===e.getProgramParameter(t,e.VALIDATE_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Shader program validation failed.")}function Nm(e,t){const n=Bm(e,(()=>e.createBuffer()),"Unable to create WebGLBuffer");return fm(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,n))),fm(e,(()=>e.bufferData(e.ARRAY_BUFFER,t,e.STATIC_DRAW))),n}function km(e,t){const n=Bm(e,(()=>e.createBuffer()),"Unable to create WebGLBuffer");return fm(e,(()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,n))),fm(e,(()=>e.bufferData(e.ELEMENT_ARRAY_BUFFER,t,e.STATIC_DRAW))),n}function $m(e){return Bm(e,(()=>e.createTexture()),"Unable to create WebGLTexture.")}function Im(e,t){const n=j().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(e<=0||t<=0){throw new Error("Requested texture size "+`[${e}x${t}]`+" is invalid.")}if(e>n||t>n){throw new Error("Requested texture size "+`[${e}x${t}]`+" greater than WebGL maximum on this browser / GPU "+`[${n}x${n}]`+".")}}function Sm(e){return Bm(e,(()=>e.createFramebuffer()),"Unable to create WebGLFramebuffer.")}function _m(e,t,n,r,a,s,o){const i=e.getAttribLocation(t,n);return-1!==i&&(fm(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,r))),fm(e,(()=>e.vertexAttribPointer(i,a,e.FLOAT,!1,s,o))),fm(e,(()=>e.enableVertexAttribArray(i))),!0)}function Cm(e,t,n){Pm(e,n),fm(e,(()=>e.activeTexture(e.TEXTURE0+n))),fm(e,(()=>e.bindTexture(e.TEXTURE_2D,t)))}function Am(e,t,n){return Bm(e,(()=>e.getUniformLocation(t,n)),'uniform "'+n+'" not present in program.')}function Rm(e,t,n){return e.getUniformLocation(t,n)}function Om(e,t,n,r){fm(e,(()=>Cm(e,t,r))),fm(e,(()=>e.uniform1i(n,r)))}function Mm(e,t,n){fm(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,n))),fm(e,(()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,t,0)))}function Dm(e,t){fm(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,t))),fm(e,(()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,null,0)))}function Fm(e){const t=e.checkFramebufferStatus(e.FRAMEBUFFER);if(t!==e.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+Lm(e,t))}function Lm(e,t){switch(t){case e.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case e.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return`unknown error ${t}`}}function Bm(e,t,n){const r=fm(e,(()=>t()));if(null==r)throw new Error(n);return r}function Pm(e,t){const n=e.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,r=t+e.TEXTURE0;if(r<e.TEXTURE0||r>n){throw new Error(`textureUnit must be in ${`[gl.TEXTURE0, gl.TEXTURE${n}]`}.`)}}function Vm(e,t=2){return p(e.slice(0,e.length-t))}function Um(e){if(0===e.length)throw Error("Cannot get rows and columns of an empty shape array.");return[e.length>1?e[e.length-2]:1,e[e.length-1]]}function zm(e){let t=[1,1,1];return 0===e.length||1===e.length&&1===e[0]||(t=[Vm(e),...Um(e)]),t}function Wm(e,t=!1){let n=j().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(t&&(n*=2,1===(e=e.map(((t,n)=>n>=e.length-2?s(e[n]):e[n]))).length&&(e=[2,e[0]])),2!==e.length){const t=b(e);e=t.newShape}let r=p(e);if(e.length<=1&&r<=n)return[1,r];if(2===e.length&&e[0]<=n&&e[1]<=n)return e;if(3===e.length&&e[0]*e[1]<=n&&e[2]<=n)return[e[0]*e[1],e[2]];if(3===e.length&&e[0]<=n&&e[1]*e[2]<=n)return[e[0],e[1]*e[2]];if(4===e.length&&e[0]*e[1]*e[2]<=n&&e[3]<=n)return[e[0]*e[1]*e[2],e[3]];if(4===e.length&&e[0]<=n&&e[1]*e[2]*e[3]<=n)return[e[0],e[1]*e[2]*e[3]];if(t){const t=Vm(e);let n=2,a=2;return e.length&&([n,a]=Um(e)),r=t*(n/2)*(a/2),f(r).map((e=>2*e))}return f(r)}function Gm(e){return e%2==0}function Hm(e,t){if(d(e=e.slice(-2),t=t.slice(-2)))return!0;if(!e.length||!t.length)return!0;if(0===e[0]||0===e[1]||0===t[0]||0===t[1])return!0;if(e.length!==t.length){const n=e.slice(-1)[0],r=t.slice(-1)[0];if(n===r)return!0;if(Gm(n)&&Gm(r)&&(1===e[0]||1===t[0]))return!0}return e[1]===t[1]&&Gm(e[0])&&Gm(t[0])}let jm,Km;function qm(e){if(null==jm){const t=om(e);jm=t.getParameter(t.MAX_TEXTURE_SIZE)}return jm}function Xm(e){if(null==Km){const t=om(e);Km=t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,Km)}function Ym(e){if(0===e)return 0;let t;const n=om(e);return t=Qm(n,"EXT_disjoint_timer_query_webgl2")&&2===e?2:Qm(n,"EXT_disjoint_timer_query")?1:0,t}function Qm(e,t){return null!=e.getExtension(t)}function Zm(e){try{if(null!=om(e))return!0}catch(e){return console.log("Error when getting WebGL context: ",e),!1}return!1}function Jm(e){if(0===e)return!1;const t=om(e);if(1===e){if(!Qm(t,"OES_texture_float"))return!1}else if(!Qm(t,"EXT_color_buffer_float"))return!1;return tg(t)}function eg(e){if(0===e)return!1;const t=om(e);if(1!==e){if(Qm(t,"EXT_color_buffer_float"))return tg(t);const e="EXT_color_buffer_half_float";if(Qm(t,e)){const n=t.getExtension(e);return function(e,t){const n=hm(e,t),r=e.createTexture();e.bindTexture(e.TEXTURE_2D,r);const a=1,s=1;e.texImage2D(e.TEXTURE_2D,0,n.internalFormatHalfFloat,a,s,0,n.textureFormatFloat,n.textureTypeHalfFloat,null);const o=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,o),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,r,0);const i=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(r),e.deleteFramebuffer(o),i}(t,n)}return!1}if(!Qm(t,"OES_texture_float"))return!1;if(!Qm(t,"WEBGL_color_buffer_float"))return!1;return tg(t)}function tg(e){const t=hm(e),n=e.createTexture();e.bindTexture(e.TEXTURE_2D,n);e.texImage2D(e.TEXTURE_2D,0,t.internalFormatFloat,1,1,0,t.textureFormatFloat,t.textureTypeFloat,null);const r=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,r),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,n,0);const a=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(n),e.deleteFramebuffer(r),a}function ng(e){if(2!==e)return!1;return null!=om(e).fenceSync}function rg(e,t){Array.isArray(e)||(e=[e]),e.forEach((e=>{null!=e&&i("complex64"!==e.dtype,(()=>`${t} does not support complex64 tensors in the WebGL backend.`))}))}var ag=Object.freeze({__proto__:null,callAndCheck:fm,canBeRepresented:mm,getWebGLErrorMessage:gm,getExtensionOrThrow:ym,createVertexShader:xm,createFragmentShader:bm,createProgram:wm,linkProgram:Em,validateProgram:Tm,createStaticVertexBuffer:Nm,createStaticIndexBuffer:km,getNumChannels:function(){return 2===j().getNumber("WEBGL_VERSION")?1:4},createTexture:$m,validateTextureSize:Im,createFramebuffer:Sm,bindVertexBufferToProgramAttribute:_m,bindTextureUnit:Cm,unbindTextureUnit:function(e,t){Pm(e,t),fm(e,(()=>e.activeTexture(e.TEXTURE0+t))),fm(e,(()=>e.bindTexture(e.TEXTURE_2D,null)))},getProgramUniformLocationOrThrow:Am,getProgramUniformLocation:Rm,bindTextureToProgramUniformSampler:Om,bindCanvasToFramebuffer:function(e){fm(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,null))),fm(e,(()=>e.viewport(0,0,e.canvas.width,e.canvas.height))),fm(e,(()=>e.scissor(0,0,e.canvas.width,e.canvas.height)))},bindColorTextureToFramebuffer:Mm,unbindColorTextureFromFramebuffer:Dm,validateFramebuffer:Fm,getFramebufferErrorMessage:Lm,getBatchDim:Vm,getRowsCols:Um,getShapeAs3D:zm,getTextureShapeFromLogicalShape:Wm,isReshapeFree:Hm,getWebGLMaxTextureSize:qm,resetMaxTextureSize:function(){jm=null},resetMaxTexturesInShader:function(){Km=null},getMaxTexturesInShader:Xm,getWebGLDisjointQueryTimerVersion:Ym,hasExtension:Qm,isWebGLVersionEnabled:Zm,isCapableOfRenderingToFloatTexture:Jm,isDownloadFloatTextureEnabled:eg,isWebGLFenceEnabled:ng,assertNotComplex:rg});const sg=j();function og(){let e,t,n,r,a,s,o,i,u,l;return 2===j().getNumber("WEBGL_VERSION")?(e="#version 300 es",t="in",n="out",r="in",a="texture",s="outputColor",o="out vec4 outputColor;",i="\n      bool isnan_custom(float val) {\n        return (val > 0.0 || val < 0.0) ? false : val != 0.0;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ",u="",l="\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "):(e="",t="attribute",n="varying",r="varying",a="texture2D",s="gl_FragColor",o="",i="\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    ",u="\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    ",l="\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "),{version:e,attribute:t,varyingVs:n,varyingFs:r,texture2D:a,output:s,defineOutput:o,defineSpecialNaN:i,defineSpecialInf:u,defineRound:l}}function ig(e,t,n="index"){const r=M(t);return r.map(((t,a)=>`${`int ${e[a]} = ${n} / ${t}`}; ${a===r.length-1?`int ${e[a+1]} = ${n} - ${e[a]} * ${t}`:`index -= ${e[a]} * ${t}`};`)).join("")}function ug(e){const t=M(e).map((e=>e.toString()));return`\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${t[0]} + coords.y * ${t[1]} + coords.z;\n  }\n`}sg.registerFlag("HAS_WEBGL",(()=>sg.getNumber("WEBGL_VERSION")>0)),sg.registerFlag("WEBGL_VERSION",(()=>Zm(2)?2:Zm(1)?1:0)),sg.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS",(()=>!1)),sg.registerFlag("WEBGL_BUFFER_SUPPORTED",(()=>2===sg.get("WEBGL_VERSION"))),sg.registerFlag("WEBGL_CPU_FORWARD",(()=>!0)),sg.registerFlag("WEBGL_FORCE_F16_TEXTURES",(()=>!1)),sg.registerFlag("WEBGL_PACK",(()=>sg.getBool("HAS_WEBGL"))),sg.registerFlag("WEBGL_PACK_NORMALIZATION",(()=>sg.getBool("WEBGL_PACK"))),sg.registerFlag("WEBGL_PACK_CLIP",(()=>sg.getBool("WEBGL_PACK"))),sg.registerFlag("WEBGL_PACK_DEPTHWISECONV",(()=>sg.getBool("WEBGL_PACK"))),sg.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",(()=>sg.getBool("WEBGL_PACK"))),sg.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",(()=>sg.getBool("WEBGL_PACK"))),sg.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",(()=>sg.getBool("WEBGL_PACK"))),sg.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",(()=>sg.getBool("WEBGL_PACK"))),sg.registerFlag("WEBGL_PACK_REDUCE",(()=>sg.getBool("WEBGL_PACK"))),sg.registerFlag("WEBGL_LAZILY_UNPACK",(()=>sg.getBool("WEBGL_PACK"))),sg.registerFlag("WEBGL_CONV_IM2COL",(()=>sg.getBool("WEBGL_PACK"))),sg.registerFlag("WEBGL_MAX_TEXTURE_SIZE",(()=>qm(sg.getNumber("WEBGL_VERSION")))),sg.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",(()=>Xm(sg.getNumber("WEBGL_VERSION")))),sg.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",(()=>{const e=sg.getNumber("WEBGL_VERSION");return 0===e?0:Ym(e)})),sg.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",(()=>sg.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!sa())),sg.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",(()=>Jm(sg.getNumber("WEBGL_VERSION")))),sg.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",(()=>!sg.getBool("WEBGL_FORCE_F16_TEXTURES")&&sg.getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))),sg.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",(()=>eg(sg.getNumber("WEBGL_VERSION")))),sg.registerFlag("WEBGL_FENCE_API_ENABLED",(()=>ng(sg.getNumber("WEBGL_VERSION")))),sg.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",(()=>sg.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0)),sg.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD",(()=>-1),(e=>{if(e<0&&-1!==e)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${e}.`)})),sg.registerFlag("WEBGL_FLUSH_THRESHOLD",(()=>sa()&&sg.getBool("IS_CHROME")?1:-1),(e=>{if(e<0&&-1!==e)throw new Error(`WEBGL_FLUSH_THRESHOLD must be -1 (indicating never manual flush) or at least 0, but got ${e}.`)})),sg.registerFlag("CPU_HANDOFF_SIZE_THRESHOLD",(()=>128));const lg="\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n";class cg{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=im.DENSE;const t=pm(e),n=og();this.outputShape=e,this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${ig(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${t[0]}, ${t[1]}));\n        int index = 4 * (resTexRC.x * ${t[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${n.output} = result;\n      }\n    `}}class pg{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=im.DENSE;const t=pm(e),n=og();this.outputShape=e,this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${ig(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${t[0]}, ${t[1]}));\n        int index = 4 * (resTexRC.x * ${t[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${n.output} = result;\n      }\n    `}}class dg{constructor(e){this.variableNames=["A"],this.outTexUsage=um.DOWNLOAD;const t=og();this.outputShape=e,this.userCode=`\n      ${lg}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${t.output} = encode_float(x);\n      }\n    `}}class hg{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=um.DOWNLOAD;const t=og();this.outputShape=e,this.userCode=`\n      ${lg}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${t.output} = encode_float(x);\n      }\n    `}}class fg{constructor(e,t,n=!1){this.variableNames=["A"];const r=og(),[a,s]=t;this.outputShape=e;let o="result";n&&(o="floor(result * 255. + 0.5)"),this.userCode=`\n      ${ug(e)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        int flatIndex = getFlatIndex(coords);\n        int offset = imod(flatIndex, 4);\n\n        flatIndex = idiv(flatIndex, 4, 1.);\n\n        int r = flatIndex / ${s};\n        int c = imod(flatIndex, ${s});\n        vec2 uv = (vec2(c, r) + halfCR) / vec2(${s}.0, ${a}.0);\n        vec4 values = ${r.texture2D}(A, uv);\n\n        float result;\n\n        if(offset == 0) {\n          result = values[0];\n        } else if(offset == 1) {\n          result = values[1];\n        } else if(offset == 2) {\n          result = values[2];\n        } else {\n          result = values[3];\n        }\n\n        ${r.output} = vec4(${o}, 0., 0., 0.);\n      }\n    `}}class mg{constructor(e,t,n=!1){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const r=og(),[a,s]=t;this.outputShape=e;let o="",i="result";n&&(i="floor(result * 255. + 0.5)");for(let t=0;t<=1;t++)for(let n=0;n<=1;n++){const i=2*t+n;o+=`\n          localCoords = coords;\n          if(localCoords[2] + ${n} < ${e[2]}) {\n            localCoords[2] += ${n};\n            if(localCoords[1] + ${t} < ${e[1]}) {\n              localCoords[1] += ${t};\n\n              flatIndex = getFlatIndex(localCoords);\n              offset = imod(flatIndex, 4);\n\n              flatIndex = idiv(flatIndex, 4, 1.);\n\n              r = flatIndex / ${s};\n              c = imod(flatIndex, ${s});\n              uv = (vec2(c, r) + halfCR) / vec2(${s}.0, ${a}.0);\n              values = ${r.texture2D}(A, uv);\n\n              if(offset == 0) {\n                result[${i}] = values[0];\n              } else if(offset == 1) {\n                result[${i}] = values[1];\n              } else if(offset == 2) {\n                result[${i}] = values[2];\n              } else {\n                result[${i}] = values[3];\n              }\n            }\n          }\n        `}this.userCode=`\n      ${ug(e)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        vec4 result = vec4(0.);\n        int flatIndex, r, c, offset;\n        ivec3 localCoords;\n        vec2 uv;\n        vec4 values;\n\n        ${o}\n\n        ${r.output} = ${i};\n      }\n    `}}function gg(e){const t=og();return xm(e,`${t.version}\n    precision highp float;\n    ${t.attribute} vec3 clipSpacePos;\n    ${t.attribute} vec2 uv;\n    ${t.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`)}function yg(e){return Nm(e,new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]))}function xg(e){return km(e,new Uint16Array([0,1,2,2,1,3]))}function bg(e,t,n,r,a,s){Im(t,n);const o=$m(e),i=e.TEXTURE_2D;return fm(e,(()=>e.bindTexture(i,o))),fm(e,(()=>e.texParameteri(i,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE))),fm(e,(()=>e.texParameteri(i,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE))),fm(e,(()=>e.texParameteri(i,e.TEXTURE_MIN_FILTER,e.NEAREST))),fm(e,(()=>e.texParameteri(i,e.TEXTURE_MAG_FILTER,e.NEAREST))),fm(e,(()=>e.texImage2D(i,0,r,t,n,0,a,s,null))),fm(e,(()=>e.bindTexture(e.TEXTURE_2D,null))),o}function vg(e){return e.internalFormatFloat}function wg(e,t,n,r){const[a,s]=cm(t,n);return bg(e,a,s,vg(r),r.textureFormatFloat,e.FLOAT)}function Eg(e){return e.internalFormatHalfFloat}function Tg(e,t,n,r){const[a,s]=cm(t,n);return bg(e,a,s,Eg(r),r.textureFormatFloat,r.textureTypeHalfFloat)}function Ng(e){return e.downloadTextureFormat}function kg(e,t,n,r){const[a,s]=cm(t,n);return bg(e,a,s,Ng(r),e.RGBA,e.UNSIGNED_BYTE)}function $g(e){return e.internalFormatPackedFloat}function Ig(e,t,n,r){const[a,s]=dm(t,n);return bg(e,a,s,$g(r),e.RGBA,e.FLOAT)}function Sg(e){return e.internalFormatPackedHalfFloat}function _g(e,t,n,r){const[a,s]=dm(t,n);return bg(e,a,s,Sg(r),e.RGBA,r.textureTypeHalfFloat)}function Cg(e,t,n){fm(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,n)));return _m(e,t,"clipSpacePos",n,3,20,0)&&_m(e,t,"uv",n,2,20,12)}function Ag(e,t,n,r,a,s){let o,i,u;fm(e,(()=>e.bindTexture(e.TEXTURE_2D,t))),a instanceof Uint8Array?(o=new Uint8Array(n*r*4),i=e.UNSIGNED_BYTE,u=e.RGBA):(o=new Float32Array(n*r*4),i=e.FLOAT,u=s.internalFormatPackedFloat),o.set(a),fm(e,(()=>e.texImage2D(e.TEXTURE_2D,0,u,n,r,0,e.RGBA,i,o))),fm(e,(()=>e.bindTexture(e.TEXTURE_2D,null)))}function Rg(e,t,n){fm(e,(()=>e.bindTexture(e.TEXTURE_2D,t))),n.data instanceof Uint8Array?fm(e,(()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,n.width,n.height,0,e.RGBA,e.UNSIGNED_BYTE,n.data))):fm(e,(()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,n))),fm(e,(()=>e.bindTexture(e.TEXTURE_2D,null)))}function Og(e,t,n,r){const a=e.createBuffer();fm(e,(()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,a)));const s=16*t*n;return fm(e,(()=>e.bufferData(e.PIXEL_PACK_BUFFER,s,e.STREAM_READ))),fm(e,(()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,0))),fm(e,(()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,null))),a}function Mg(e,t,n){const r=e,a=new Float32Array(n);return r.bindBuffer(r.PIXEL_PACK_BUFFER,t),r.getBufferSubData(r.PIXEL_PACK_BUFFER,0,a),r.bindBuffer(r.PIXEL_PACK_BUFFER,null),a}function Dg(e,t,n,r){const[a,s]=cm(t,n),o=new Uint8Array(t*n*4);return fm(e,(()=>e.readPixels(0,0,a,s,r.downloadTextureFormat,e.UNSIGNED_BYTE,o))),new Float32Array(o.buffer)}function Fg(e,t,n,r,a,s,o,i){const u=e,l=new Float32Array(function(e,t){const[n,r]=dm(e,t);return n*r*4}(s,o));return u.bindBuffer(u.PIXEL_PACK_BUFFER,t),u.getBufferSubData(u.PIXEL_PACK_BUFFER,0,l),u.bindBuffer(u.PIXEL_PACK_BUFFER,null),l}function Lg(e,t,n){const r=new Float32Array(t*n*4);return fm(e,(()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,r))),r}var Bg=Object.freeze({__proto__:null,createVertexShader:gg,createVertexBuffer:yg,createIndexBuffer:xg,getInternalFormatForFloat32MatrixTexture:vg,createFloat32MatrixTexture:wg,getInternalFormatForFloat16MatrixTexture:Eg,createFloat16MatrixTexture:Tg,getInternalFormatForUnsignedBytesMatrixTexture:Ng,createUnsignedBytesMatrixTexture:kg,getInternalFormatForPackedMatrixTexture:$g,createPackedMatrixTexture:Ig,getInternalFormatForFloat16PackedMatrixTexture:Sg,createFloat16PackedMatrixTexture:_g,bindVertexProgramAttributeStreams:Cg,uploadDenseMatrixToTexture:Ag,uploadPixelDataToTexture:Rg,createBufferFromOutputTexture:Og,downloadFloat32MatrixFromBuffer:Mg,downloadByteEncodedFloatMatrixFromOutputTexture:Dg,downloadPackedMatrixFromBuffer:Fg,downloadMatrixFromPackedOutputTexture:Lg});class Pg{constructor(e){this.outputTexture=null,this.program=null,this.disposed=!1,this.vertexAttrsAreBound=!1,this.itemsToPoll=[];const t=j().getNumber("WEBGL_VERSION");null!=e?(this.gl=e,sm(t,e)):this.gl=om(t);let n="WEBGL_color_buffer_float";const r="EXT_color_buffer_half_float";if(1===j().getNumber("WEBGL_VERSION")){const e="OES_texture_float",t="OES_texture_half_float";if(this.textureFloatExtension=ym(this.gl,e),Qm(this.gl,t))this.textureHalfFloatExtension=ym(this.gl,t);else if(j().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(n),Qm(this.gl,r))this.colorBufferHalfFloatExtension=ym(this.gl,r);else if(j().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(n="EXT_color_buffer_float",Qm(this.gl,n))this.colorBufferFloatExtension=this.gl.getExtension(n);else{if(!Qm(this.gl,r))throw new Error("GL context does not support color renderable floats");this.colorBufferHalfFloatExtension=this.gl.getExtension(r)}this.vertexBuffer=yg(this.gl),this.indexBuffer=xg(this.gl),this.framebuffer=Sm(this.gl),this.textureConfig=hm(this.gl,this.textureHalfFloatExtension)}get debug(){return j().getBool("DEBUG")}dispose(){if(this.disposed)return;null!=this.program&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),null!=this.outputTexture&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");const e=this.gl;fm(e,(()=>e.finish())),fm(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,null))),fm(e,(()=>e.deleteFramebuffer(this.framebuffer))),fm(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,null))),fm(e,(()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null))),fm(e,(()=>e.deleteBuffer(this.indexBuffer))),this.disposed=!0}createFloat32MatrixTexture(e,t){return this.throwIfDisposed(),wg(this.gl,e,t,this.textureConfig)}createFloat16MatrixTexture(e,t){return this.throwIfDisposed(),Tg(this.gl,e,t,this.textureConfig)}createUnsignedBytesMatrixTexture(e,t){return this.throwIfDisposed(),kg(this.gl,e,t,this.textureConfig)}uploadPixelDataToTexture(e,t){this.throwIfDisposed(),Rg(this.gl,e,t)}uploadDenseMatrixToTexture(e,t,n,r){this.throwIfDisposed(),Ag(this.gl,e,t,n,r,this.textureConfig)}createFloat16PackedMatrixTexture(e,t){return this.throwIfDisposed(),_g(this.gl,e,t,this.textureConfig)}createPackedMatrixTexture(e,t){return this.throwIfDisposed(),Ig(this.gl,e,t,this.textureConfig)}deleteMatrixTexture(e){this.throwIfDisposed(),this.outputTexture===e&&(Dm(this.gl,this.framebuffer),this.outputTexture=null),fm(this.gl,(()=>this.gl.deleteTexture(e)))}downloadByteEncodedFloatMatrixFromOutputTexture(e,t,n){return this.downloadMatrixDriver(e,(()=>Dg(this.gl,t,n,this.textureConfig)))}downloadPackedMatrixFromBuffer(e,t,n,r,a,s){return Fg(this.gl,e,0,0,0,a,s,this.textureConfig)}downloadFloat32MatrixFromBuffer(e,t){return Mg(this.gl,e,t)}createBufferFromTexture(e,t,n){this.bindTextureToFrameBuffer(e);const r=Og(this.gl,t,n,this.textureConfig);return this.unbindTextureToFrameBuffer(),r}createAndWaitForFence(){const e=this.createFence(this.gl);return this.pollFence(e)}createFence(e){let t,n;if(j().getBool("WEBGL_FENCE_API_ENABLED")){const r=e,a=r.fenceSync(r.SYNC_GPU_COMMANDS_COMPLETE,0);e.flush(),n=()=>{const e=r.clientWaitSync(a,0,0);return e===r.ALREADY_SIGNALED||e===r.CONDITION_SATISFIED},t=a}else j().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(t=this.beginQuery(),this.endQuery(),n=()=>this.isQueryAvailable(t,j().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):n=()=>!0;return{query:t,isFencePassed:n}}downloadMatrixFromPackedTexture(e,t,n){return this.downloadMatrixDriver(e,(()=>Lg(this.gl,t,n)))}createProgram(e){this.throwIfDisposed();const t=this.gl,n=bm(t,e);null==this.vertexShader&&(this.vertexShader=gg(t));const r=wm(t);return fm(t,(()=>t.attachShader(r,this.vertexShader))),fm(t,(()=>t.attachShader(r,n))),Em(t,r),this.debug&&Tm(t,r),this.vertexAttrsAreBound||(this.setProgram(r),this.vertexAttrsAreBound=Cg(t,this.program,this.vertexBuffer)),r}deleteProgram(e){this.throwIfDisposed(),e===this.program&&(this.program=null),null!=e&&fm(this.gl,(()=>this.gl.deleteProgram(e)))}setProgram(e){this.throwIfDisposed(),this.program=e,null!=this.program&&this.debug&&Tm(this.gl,this.program),fm(this.gl,(()=>this.gl.useProgram(e)))}getUniformLocation(e,t,n=!0){return this.throwIfDisposed(),n?Am(this.gl,e,t):Rm(this.gl,e,t)}getAttributeLocation(e,t){return this.throwIfDisposed(),fm(this.gl,(()=>this.gl.getAttribLocation(e,t)))}getUniformLocationNoThrow(e,t){return this.throwIfDisposed(),this.gl.getUniformLocation(e,t)}setInputMatrixTexture(e,t,n){this.throwIfDisposed(),this.throwIfNoProgram(),Om(this.gl,e,t,n)}setOutputMatrixTexture(e,t,n){this.setOutputMatrixTextureDriver(e,n,t)}setOutputPackedMatrixTexture(e,t,n){this.throwIfDisposed();const[r,a]=dm(t,n);this.setOutputMatrixTextureDriver(e,r,a)}setOutputMatrixWriteRegion(e,t,n,r){this.setOutputMatrixWriteRegionDriver(n,e,r,t)}setOutputPackedMatrixWriteRegion(e,t,n,r){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){null!=this.program&&Tm(this.gl,this.program),Fm(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();const e=this.gl;this.debug&&this.debugValidate(),fm(e,(()=>e.drawElements(e.TRIANGLES,6,e.UNSIGNED_SHORT,0)))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),fm(this.gl,(()=>this.gl.finish()))}getQueryTimerExtension(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=ym(this.gl,2===j().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(2===j().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2(),n=e.createQuery();return e.beginQuery(t.TIME_ELAPSED_EXT,n),n}const e=this.getQueryTimerExtensionWebGL1(),t=e.createQueryEXT();return e.beginQueryEXT(e.TIME_ELAPSED_EXT,t),t}endQuery(){if(2===j().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2();return void e.endQuery(t.TIME_ELAPSED_EXT)}const e=this.getQueryTimerExtensionWebGL1();e.endQueryEXT(e.TIME_ELAPSED_EXT)}async waitForQueryAndGetTime(e){return await g((()=>this.disposed||this.isQueryAvailable(e,j().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")))),this.getQueryTime(e,j().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}getQueryTime(e,t){if(0===t)return null;if(2===t){const t=this.gl;return t.getQueryParameter(e,t.QUERY_RESULT)/1e6}{const t=this.getQueryTimerExtensionWebGL1();return t.getQueryObjectEXT(e,t.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(e,t){if(0===t)return!0;if(2===t){const t=this.gl,n=this.getQueryTimerExtensionWebGL2(),r=t.getQueryParameter(e,t.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(n.GPU_DISJOINT_EXT)),r&&!this.disjoint}{const t=this.getQueryTimerExtensionWebGL1(),n=t.getQueryObjectEXT(e,t.QUERY_RESULT_AVAILABLE_EXT);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(t.GPU_DISJOINT_EXT)),n&&!this.disjoint}}pollFence(e){return new Promise((t=>{this.addItemToPoll((()=>e.isFencePassed()),(()=>t()))}))}pollItems(){const e=function(e){let t=0;for(;t<e.length;++t){if(!e[t]())break}return t-1}(this.itemsToPoll.map((e=>e.isDoneFn)));for(let t=0;t<=e;++t){const{resolveFn:e}=this.itemsToPoll[t];e()}this.itemsToPoll=this.itemsToPoll.slice(e+1)}addItemToPoll(e,t){this.itemsToPoll.push({isDoneFn:e,resolveFn:t}),this.itemsToPoll.length>1||g((()=>(this.pollItems(),0===this.itemsToPoll.length)))}bindTextureToFrameBuffer(e){this.throwIfDisposed(),Mm(this.gl,e,this.framebuffer),this.debug&&Fm(this.gl)}unbindTextureToFrameBuffer(){null!=this.outputTexture?(Mm(this.gl,this.outputTexture,this.framebuffer),this.debug&&Fm(this.gl)):Dm(this.gl,this.framebuffer)}downloadMatrixDriver(e,t){this.bindTextureToFrameBuffer(e);const n=t();return this.unbindTextureToFrameBuffer(),n}setOutputMatrixTextureDriver(e,t,n){this.throwIfDisposed();const r=this.gl;Mm(r,e,this.framebuffer),this.debug&&Fm(r),this.outputTexture=e,fm(r,(()=>r.viewport(0,0,t,n))),fm(r,(()=>r.scissor(0,0,t,n)))}setOutputMatrixWriteRegionDriver(e,t,n,r){this.throwIfDisposed(),fm(this.gl,(()=>this.gl.scissor(e,t,n,r)))}throwIfDisposed(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(null==this.program)throw new Error("No GPU program is currently set.")}}const{getBroadcastDims:Vg}=ed;function Ug(e,t,n,r){const a=[];e.forEach((e=>{const t=p(e.shapeInfo.logicalShape);e.shapeInfo.isUniform?a.push(`uniform float ${e.name}${t>1?`[${t}]`:""};`):(a.push(`uniform sampler2D ${e.name};`),a.push(`uniform int offset${e.name};`))}));const s=a.join("\n"),o=e.map((e=>function(e,t,n=!1){let r="";r+=n?Wg(e):zg(e);const a=e.shapeInfo.logicalShape,s=t.logicalShape;a.length<=s.length&&(r+=n?function(e,t){const n=e.name,r=n.charAt(0).toUpperCase()+n.slice(1),a="get"+r+"AtOutCoords",s=e.shapeInfo.logicalShape.length,o=t.logicalShape.length,i=Vg(e.shapeInfo.logicalShape,t.logicalShape),u=Qg(o),l=o-s;let c;const d=["x","y","z","w","u","v"];c=0===s?"":o<2&&i.length>=1?"coords = 0;":i.map((e=>`coords.${d[e+l]} = 0;`)).join("\n");let h="";h=o<2&&s>0?"coords":e.shapeInfo.logicalShape.map(((e,t)=>`coords.${d[t+l]}`)).join(", ");let f="return outputValue;";const m=1===p(e.shapeInfo.logicalShape),g=1===p(t.logicalShape);if(1!==s||m||g){if(m&&!g)f=1===o?"\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      ":"\n        return vec4(outputValue.x);\n      ";else if(i.length){const e=s-2,t=s-1;i.indexOf(e)>-1&&i.indexOf(t)>-1?f="return vec4(outputValue.x);":i.indexOf(e)>-1?f="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":i.indexOf(t)>-1&&(f="return vec4(outputValue.xx, outputValue.zz);")}}else f="\n      return vec4(outputValue.xy, outputValue.xy);\n    ";return`\n    vec4 ${a}() {\n      ${u} coords = getOutputCoords();\n      ${c}\n      vec4 outputValue = get${r}(${h});\n      ${f}\n    }\n  `}(e,t):function(e,t){const n=e.name,r=n.charAt(0).toUpperCase()+n.slice(1),a="get"+r+"AtOutCoords",s=t.texShape,o=e.shapeInfo.texShape,i=e.shapeInfo.logicalShape.length,u=t.logicalShape.length;if(!e.shapeInfo.isUniform&&i===u&&null==e.shapeInfo.flatOffset&&d(o,s))return`\n      float ${a}() {\n        return sampleTexture(${n}, resultUV);\n      }\n    `;const l=Qg(u),c=Vg(e.shapeInfo.logicalShape,t.logicalShape),p=u-i;let h;const f=["x","y","z","w","u","v"];h=0===i?"":u<2&&c.length>=1?"coords = 0;":c.map((e=>`coords.${f[e+p]} = 0;`)).join("\n");let m="";m=u<2&&i>0?"coords":e.shapeInfo.logicalShape.map(((e,t)=>`coords.${f[t+p]}`)).join(", ");return`\n    float ${a}() {\n      ${l} coords = getOutputCoords();\n      ${h}\n      return get${r}(${m});\n    }\n  `}(e,t));return r}(e,t,r))).join("\n"),i=t.texShape,u=og(),l=function(e){return`\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${e.texture2D}(textureSampler, uv).r;\n    }\n  `}(u);let c,h,f=function(e){return`${e.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${e.varyingFs} vec2 resultUV;\n    ${e.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${e.defineSpecialNaN}\n    ${e.defineSpecialInf}\n    ${e.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${Gg}\n    ${Hg}\n    ${jg}\n  `}(u);t.isPacked?(c=function(e,t){switch(e.length){case 0:return qg();case 1:return function(e,t){const n=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if(1===n[0])return`\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${n[1]}.0);\n      }\n    `;if(1===n[1])return`\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${n[0]}.0);\n      }\n    `;return`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      return 2 * (resTexRC.x * ${n[1]} + resTexRC.y);\n    }\n  `}(0,t);case 2:return function(e,t){const n=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if(d(e,t))return`\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${n[0]}, ${n[1]}));\n      }\n    `;const r=Math.ceil(e[1]/2);return`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec2(r, c);\n    }\n  `}(e,t);case 3:return function(e,t){const n=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],r=Math.ceil(e[2]/2),a=r*Math.ceil(e[1]/2);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n\n      int b = index / ${a};\n      index -= b * ${a};\n\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `}(e,t);default:return function(e,t){const n=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],r=Math.ceil(e[e.length-1]/2),a=r*Math.ceil(e[e.length-2]/2);let s=a,o="",i="b, r, c";for(let t=2;t<e.length-1;t++)s*=e[e.length-t-1],o=`\n      int b${t} = index / ${s};\n      index -= b${t} * ${s};\n    `+o,i=`b${t}, `+i;return`\n    ivec${e.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n\n      ${o}\n\n      int b = index / ${a};\n      index -= b * ${a};\n\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec${e.length}(${i});\n    }\n  `}(e,t)}}(t.logicalShape,i),h=function(e){return`\n    void setOutput(vec4 val) {\n      ${e.output} = val;\n    }\n  `}(u)):(c=function(e,t){switch(e.length){case 0:return qg();case 1:return function(e,t){if(1===t[0])return`\n      int getOutputCoords() {\n        return int(resultUV.x * ${t[1]}.0);\n      }\n    `;if(1===t[1])return`\n      int getOutputCoords() {\n        return int(resultUV.y * ${t[0]}.0);\n      }\n    `;return`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      return resTexRC.x * ${t[1]} + resTexRC.y;\n    }\n  `}(0,t);case 2:return function(e,t){if(d(e,t))return`\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${t[0]}, ${t[1]}));\n      }\n    `;if(1===e[1])return`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;if(1===e[0])return`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;return`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      int r = index / ${e[1]};\n      int c = index - r * ${e[1]};\n      return ivec2(r, c);\n    }\n  `}(e,t);case 3:return function(e,t){const n=ig(["r","c","d"],e);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${n}\n      return ivec3(r, c, d);\n    }\n  `}(e,t);case 4:return function(e,t){const n=ig(["r","c","d","d2"],e);return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${n}\n      return ivec4(r, c, d, d2);\n    }\n  `}(e,t);case 5:return function(e,t){const n=ig(["r","c","d","d2","d3"],e);return`\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${t[0]},\n                             ${t[1]}));\n\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `}(e,t);case 6:return function(e,t){const n=ig(["r","c","d","d2","d3","d4"],e);return`\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `}(e,t);default:throw new Error(`${e.length}-D output sampling is not yet supported`)}}(t.logicalShape,i),h=function(e){return`\n    void setOutput(float val) {\n      ${e.output} = vec4(val, 0, 0, 0);\n    }\n  `}(u)),r&&(f+=Kg);return[f,l,h,s,c,o,n].join("\n")}function zg(e){const t=e.shapeInfo.logicalShape;switch(t.length){case 0:return function(e){const t=e.name,n="get"+t.charAt(0).toUpperCase()+t.slice(1);if(e.shapeInfo.isUniform)return`float ${n}() {return ${t};}`;const[r,a]=e.shapeInfo.texShape;if(1===r&&1===a)return`\n      float ${n}() {\n        return sampleTexture(${t}, halfCR);\n      }\n    `;const[s,o]=e.shapeInfo.texShape,i=Xg(t);return`\n    float ${n}() {\n      vec2 uv = uvFromFlat(${s}, ${o}, ${i});\n      return sampleTexture(${t}, uv);\n    }\n  `}(e);case 1:return function(e){const t=e.name,n="get"+t.charAt(0).toUpperCase()+t.slice(1);if(e.shapeInfo.isUniform)return`\n      float ${n}(int index) {\n        ${Yg(e)}\n      }\n    `;const r=e.shapeInfo.texShape,a=r[0],s=r[1];if(1===s&&1===a)return`\n      float ${n}(int index) {\n        return sampleTexture(${t}, halfCR);\n      }\n    `;const o=Xg(t);if(1===s)return`\n      float ${n}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${o}) + 0.5) / ${a}.0);\n        return sampleTexture(${t}, uv);\n      }\n    `;if(1===a)return`\n      float ${n}(int index) {\n        vec2 uv = vec2((float(index + ${o}) + 0.5) / ${s}.0, 0.5);\n        return sampleTexture(${t}, uv);\n      }\n    `;return`\n    float ${n}(int index) {\n      vec2 uv = uvFromFlat(${a}, ${s}, index + ${o});\n      return sampleTexture(${t}, uv);\n    }\n  `}(e);case 2:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),a=e.shapeInfo.texShape;if(null!=a&&d(t,a)){const e=a[0];return`\n    float ${r}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${a[1]}.0, ${e}.0);\n      return sampleTexture(${n}, uv);\n    }\n  `}const{newShape:s,keptDims:o}=b(t),i=s;if(i.length<t.length){const t=["row","col"];return`\n      ${zg(Zg(e,i))}\n      float ${r}(int row, int col) {\n        return ${r}(${Jg(t,o)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${t[1]}, 1)));\n        ${Yg(e)}\n      }\n    `;const u=a[0],l=a[1],c=Xg(n);if(1===l)return`\n    float ${r}(int row, int col) {\n      float index = dot(vec3(row, col, ${c}), vec3(${t[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${u}.0);\n      return sampleTexture(${n}, uv);\n    }\n  `;if(1===u)return`\n    float ${r}(int row, int col) {\n      float index = dot(vec3(row, col, ${c}), vec3(${t[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${l}.0, 0.5);\n      return sampleTexture(${n}, uv);\n    }\n  `;return`\n  float ${r}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${t[1]} + col + ${c};\n    vec2 uv = uvFromFlat(${u}, ${l}, index);\n    return sampleTexture(${n}, uv);\n  }\n`}(e);case 3:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),a=t[1]*t[2],s=t[2],{newShape:o,keptDims:i}=b(t),u=o;if(u.length<t.length){const t=["row","col","depth"];return`\n        ${zg(Zg(e,u))}\n        float ${r}(int row, int col, int depth) {\n          return ${r}(${Jg(t,i)});\n        }\n      `}if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${a}, ${s}, 1)));\n        ${Yg(e)}\n      }\n    `;const l=e.shapeInfo.texShape,c=l[0],p=l[1],d=e.shapeInfo.flatOffset;if(p===a&&null==d)return`\n        float ${r}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${s}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${p}.0, ${c}.0);\n          return sampleTexture(${n}, uv);\n        }\n      `;if(p===s&&null==d)return`\n    float ${r}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${t[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${p}.0, ${c}.0);\n      return sampleTexture(${n}, uv);\n    }\n  `;const h=Xg(n);return`\n      float ${r}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${a} + col * ${s} + depth + ${h};\n        vec2 uv = uvFromFlat(${c}, ${p}, index);\n        return sampleTexture(${n}, uv);\n      }\n  `}(e);case 4:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),a=t[3],s=t[2]*a,o=t[1]*s,{newShape:i,keptDims:u}=b(t);if(i.length<t.length){const t=["row","col","depth","depth2"];return`\n      ${zg(Zg(e,i))}\n      float ${r}(int row, int col, int depth, int depth2) {\n        return ${r}(${Jg(t,u)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${o}, ${s}, ${a}, 1)));\n        ${Yg(e)}\n      }\n    `;const l=e.shapeInfo.flatOffset,c=e.shapeInfo.texShape,p=c[0],d=c[1];if(d===o&&null==l)return`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${s}, ${a}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${d}.0, ${p}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(d===a&&null==l)return`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${t[1]*t[2]}, ${t[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${d}.0, ${p}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;const h=Xg(n);return`\n    float ${r}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${o} + col * ${s} +\n          depth * ${a} + depth2;\n      vec2 uv = uvFromFlat(${p}, ${d}, index + ${h});\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);case 5:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),a=t[4],s=t[3]*a,o=t[2]*s,i=t[1]*o,{newShape:u,keptDims:l}=b(t);if(u.length<t.length){const t=["row","col","depth","depth2","depth3"];return`\n      ${zg(Zg(e,u))}\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        return ${r}(${Jg(t,l)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${i}, ${o}, ${s}, ${a})) +\n          depth3;\n        ${Yg(e)}\n      }\n    `;const c=e.shapeInfo.flatOffset,p=e.shapeInfo.texShape,d=p[0],h=p[1];if(h===i&&null==c)return`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${o}, ${s}, ${a}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${h}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(h===a&&null==c)return`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]},\n               ${t[2]*t[3]}, ${t[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${h}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;const f=Xg(n);return`\n    float ${r}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${i} + col * ${o} + depth * ${s} +\n          depth2 * ${a} + depth3 + ${f};\n      vec2 uv = uvFromFlat(${d}, ${h}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);case 6:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),{newShape:a,keptDims:s}=b(t);if(a.length<t.length){const t=["row","col","depth","depth2","depth3","depth4"];return`\n      ${zg(Zg(e,a))}\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${r}(${Jg(t,s)});\n      }\n    `}const o=t[5],i=t[4]*o,u=t[3]*i,l=t[2]*u,c=t[1]*l;if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${c}, ${l}, ${u}, ${i})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${o}, 1)));\n        ${Yg(e)}\n      }\n    `;const p=e.shapeInfo.flatOffset,d=e.shapeInfo.texShape,h=d[0],f=d[1];if(f===c&&null==p)return`\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${l}, ${u}, ${i}, ${o})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${f}.0, ${h}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(f===o&&null==p)return`\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]*t[4]},\n               ${t[2]*t[3]*t[4]},\n               ${t[3]*t[4]},\n               ${t[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${f}.0, ${h}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;const m=Xg(n);return`\n    float ${r}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${c} + col * ${l} + depth * ${u} +\n          depth2 * ${i} + depth3 * ${o} + depth4 + ${m};\n      vec2 uv = uvFromFlat(${h}, ${f}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);default:throw new Error(`${t.length}-D input sampling is not yet supported`)}}function Wg(e){switch(e.shapeInfo.logicalShape.length){case 0:return function(e){const t=e.name,n="get"+t.charAt(0).toUpperCase()+t.slice(1),r=og();return`\n    vec4 ${n}() {\n      return ${r.texture2D}(${t}, halfCR);\n    }\n  `}(e);case 1:return function(e){const t=e.name,n="get"+t.charAt(0).toUpperCase()+t.slice(1),r=e.shapeInfo.texShape,a=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)],s=og();return`\n    vec4 ${n}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${a[0]}, ${a[1]}, index);\n      return ${s.texture2D}(${t}, uv);\n    }\n  `}(e);case 2:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),a=e.shapeInfo.texShape,s=a[0],o=a[1],i=og();if(null!=a&&d(t,a))return`\n      vec4 ${r}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${o}.0, ${s}.0);\n\n        return ${i.texture2D}(${n}, uv);\n      }\n    `;const u=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)],l=Math.ceil(t[1]/2);return`\n    vec4 ${r}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${l}, ${u[0]}, ${u[1]}, row, col);\n      return ${i.texture2D}(${n}, uv);\n    }\n  `}(e);case 3:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),a=e.shapeInfo.texShape,s=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)];if(1===t[0]){const n=[1,2],a=["b","row","col"];return`\n        ${Wg(Zg(e,t.slice(1)))}\n        vec4 ${r}(int b, int row, int col) {\n          return ${r}(${Jg(a,n)});\n        }\n      `}const o=s[0],i=s[1],u=Math.ceil(t[2]/2),l=u*Math.ceil(t[1]/2),c=og();return`\n    vec4 ${r}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${o}, ${i}, ${l}, ${u}, b, row, col);\n      return ${c.texture2D}(${n}, uv);\n    }\n  `}(e);default:return function(e){const t=e.shapeInfo.logicalShape,n=t.length,r=e.name,a="get"+r.charAt(0).toUpperCase()+r.slice(1),s=e.shapeInfo.texShape,o=[Math.ceil(s[0]/2),Math.ceil(s[1]/2)],i=o[0],u=o[1],l=Math.ceil(t[n-1]/2);let c=l*Math.ceil(t[n-2]/2),p="int b, int row, int col",d=`b * ${c} + (row / 2) * ${l} + (col / 2)`;for(let e=2;e<n-1;e++)p=`int b${e}, `+p,c*=t[n-e-1],d=`b${e} * ${c} + `+d;const h=og();return`\n    vec4 ${a}(${p}) {\n      int index = ${d};\n      int texR = index / ${u};\n      int texC = index - texR * ${u};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${u}, ${i});\n      return ${h.texture2D}(${r}, uv);\n    }\n  `}(e)}}const Gg="\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",Hg="\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",jg="\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",Kg="\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";function qg(){return"\n    int getOutputCoords() {\n      return 0;\n    }\n  "}function Xg(e){return`offset${e}`}function Yg(e){const t=e.name,n=p(e.shapeInfo.logicalShape);return n<2?`return ${t};`:`\n    for (int i = 0; i < ${n}; i++) {\n      if (i == index) {\n        return ${t}[i];\n      }\n    }\n  `}function Qg(e){if(e<=1)return"int";if(2===e)return"ivec2";if(3===e)return"ivec3";if(4===e)return"ivec4";if(5===e)return"ivec5";if(6===e)return"ivec6";throw Error(`GPU for rank ${e} is not yet supported`)}function Zg(e,t){const n=JSON.parse(JSON.stringify(e));return n.shapeInfo.logicalShape=t,n}function Jg(e,t){return t.map((t=>e[t])).join(", ")}function ey(e,t){if(e.length!==t.length)throw Error(`Binary was compiled with ${e.length} inputs, but was executed with ${t.length} inputs`);e.forEach(((e,n)=>{const r=e.logicalShape,a=t[n],s=a.shape;if(!d(r,s))throw Error(`Binary was compiled with different shapes than the current args. Shapes ${r} and ${s} must match`);if(e.isUniform&&a.isUniform)return;const o=e.texShape,i=a.isUniform?null:a.texData.texShape;if(!d(o,i))throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${o} and ${i} must match`)}))}const{addImpl:ty,bincountImpl:ny,bincountReduceImpl:ry,ceilImpl:ay,concatImpl:sy,equalImpl:oy,expImpl:iy,expm1Impl:uy,floorImpl:ly,gatherNdImpl:cy,gatherV2Impl:py,greaterImpl:dy,greaterEqualImpl:hy,lessImpl:fy,lessEqualImpl:my,linSpaceImpl:gy,logImpl:yy,maxImpl:xy,maximumImpl:by,minimumImpl:vy,multiplyImpl:wy,negImpl:Ey,notEqualImpl:Ty,prodImpl:Ny,rangeImpl:ky,rsqrtImpl:$y,simpleAbsImpl:Iy,sliceImpl:Sy,sparseFillEmptyRowsImpl:_y,sparseReshapeImpl:Cy,sparseSegmentReductionImpl:Ay,stridedSliceImpl:Ry,stringNGramsImpl:Oy,stringSplitImpl:My,stringToHashBucketFastImpl:Dy,subImpl:Fy,tileImpl:Ly,topKImpl:By,transposeImpl:Py,uniqueImpl:Vy}=Tf;function Uy(e,t){return["x","y","z","w","u","v"].slice(0,t).map((t=>`${e}.${t}`))}function zy(e,t){return 1===t?[e]:Uy(e,t)}class Wy{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=e;const t=e.length;if(0===t)this.userCode="\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";else{const n=zy("rc",t),r=Qg(t),a=function(e,t,n){if(1===e)return`rc > ${t[0]}`;let r="";for(let a=e-2;a<e;a++)r+=`${n[a]} >= ${t[a]}`,a<e-1&&(r+="||");return r}(t,e,n),s=function(e,t,n,r){if(1===e)return"";const a=r.slice(-2);return`\n    int r = ${a[0]};\n    int c = ${a[1]};\n    int rp1 = r + 1;\n    int cp1 = c + 1;\n\n    bool cEdge = cp1 >= ${t};\n    bool rEdge = rp1 >= ${n};\n  `}(t,e[e.length-1],e[e.length-2],n),o=function(e,t){const n=e.length,r=function(e,t){const n=[];for(let r=0;r<=1;r++)for(let a=0;a<=1;a++){let s=`${0===r?"r":"rp1"}, ${0===a?"c":"cp1"}`;for(let n=2;n<e;n++)s=`${t[t.length-1-n]},`+s;n.push(s)}return n}(n,t);if(1===n)return`getA(rc),\n            rc + 1 >= ${e[0]} ? 0. : getA(rc + 1),\n            0, 0`;return`getA(${r[0]}),\n          cEdge ? 0. : getA(${r[1]}),\n          rEdge ? 0. : getA(${r[2]}),\n          rEdge || cEdge ? 0. : getA(${r[3]})`}(e,n);this.userCode=`\n        void main() {\n          ${r} rc = getOutputCoords();\n\n          if(${a}) {\n            setOutput(vec4(0));\n          } else {\n            ${s}\n\n            setOutput(vec4(${o}));\n          }\n        }\n      `}}}class Gy{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e;let n="";for(let e=0;e<4;e++){let t="thisRC = rc;";e%2==1&&(t+="thisRC.z += 1;"),e>1&&(t+="thisRC.y += 1;"),n+=`\n        ${t}\n        ${e>0?"if(thisRC.y < rows && thisRC.z < cols){":""}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${e}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${e>0?"}":""}\n      `}var r;this.userCode=`\n      ${r=t,`\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${ig(["r","c","d"],r)}\n      return ivec3(r, c, d);\n    }\n  `}\n      ${ug(e)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${e[1]};\n        int cols = ${e[2]};\n\n        ${n}\n\n        setOutput(result);\n      }\n    `}}class Hy{constructor(e){this.gpgpu=e,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.logEnabled=!1,this.usedTextures={}}acquireTexture(e,t,n){const r=Ky(t,n),a=qy(e,r,n);a in this.freeTextures||(this.freeTextures[a]=[]),a in this.usedTextures||(this.usedTextures[a]=[]);const s=jy(e,r,this.gpgpu.gl,this.gpgpu.textureConfig,n);if(this.freeTextures[a].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=s,this.log();const e=this.freeTextures[a].shift();return this.usedTextures[a].push(e),e}let o;return r===lm.PACKED_2X2_FLOAT32?o=this.gpgpu.createPackedMatrixTexture(e[0],e[1]):r===lm.PACKED_2X2_FLOAT16?o=this.gpgpu.createFloat16PackedMatrixTexture(e[0],e[1]):r===lm.UNPACKED_FLOAT32?o=this.gpgpu.createFloat32MatrixTexture(e[0],e[1]):r===lm.UNPACKED_FLOAT16?o=this.gpgpu.createFloat16MatrixTexture(e[0],e[1]):r===lm.PACKED_4X1_UNSIGNED_BYTE&&(o=this.gpgpu.createUnsignedBytesMatrixTexture(e[0],e[1])),this.usedTextures[a].push(o),this.numUsedTextures++,this._numBytesAllocated+=s,this.log(),o}releaseTexture(e,t,n,r){if(null==this.freeTextures)return;const a=Ky(n,r),s=qy(t,a,r);s in this.freeTextures||(this.freeTextures[s]=[]);const o=jy(t,a,this.gpgpu.gl,this.gpgpu.textureConfig,r),i=j().get("WEBGL_DELETE_TEXTURE_THRESHOLD");-1!==i&&this._numBytesAllocated>i?(this.gpgpu.deleteMatrixTexture(e),this._numBytesAllocated-=o):(this.freeTextures[s].push(e),this.numFreeTextures++,this._numBytesFree+=o),this.numUsedTextures--;const u=this.usedTextures[s],l=u.indexOf(e);if(l<0)throw new Error("Cannot release a texture that was never provided by this texture manager");u.splice(l,1),this.log()}log(){if(!this.logEnabled)return;const e=this.numFreeTextures+this.numUsedTextures;console.log("Free/Used",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${e})`);const t=this._numBytesFree/this._numBytesAllocated;console.log(`Bytes allocated: ${this._numBytesAllocated}`),console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100*t)}%)`)}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(null!=this.freeTextures){for(const e in this.freeTextures)this.freeTextures[e].forEach((e=>{this.gpgpu.deleteMatrixTexture(e)}));for(const e in this.usedTextures)this.usedTextures[e].forEach((e=>{this.gpgpu.deleteMatrixTexture(e)}));this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}}function jy(e,t,n,r,a){const s=function(e,t){switch(e){case lm.PACKED_2X2_FLOAT32:return $g(t);case lm.PACKED_2X2_FLOAT16:return Sg(t);case lm.UNPACKED_FLOAT32:return vg(t);case lm.UNPACKED_FLOAT16:return Eg(t);case lm.PACKED_4X1_UNSIGNED_BYTE:return Ng(t);default:throw new Error(`Unknown physical texture type ${e}`)}}(t,r);let o;if(a){const[t,n]=dm(e[0],e[1]);o=t*n}else{const[t,n]=cm(e[0],e[1]);o=t*n}return o*function(e,t){const n=e;if(t===n.R32F)return 4;if(t===n.R16F)return 2;if(t===n.RGBA32F)return 16;if(t===e.RGBA)return 16;if(t===n.RGBA16F)return 8;throw new Error(`Unknown internal format ${t}`)}(n,s)}function Ky(e,t){if(e===um.UPLOAD)return lm.PACKED_2X2_FLOAT32;if(e===um.RENDER||null==e)return function(e){return j().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?e?lm.PACKED_2X2_FLOAT32:lm.UNPACKED_FLOAT32:e?lm.PACKED_2X2_FLOAT16:lm.UNPACKED_FLOAT16}(t);if(e===um.DOWNLOAD||e===um.PIXELS)return lm.PACKED_4X1_UNSIGNED_BYTE;throw new Error(`Unknown logical texture type ${e}`)}function qy(e,t,n){return`${e[0]}_${e[1]}_${t}_${n}`}class Xy{constructor(e,t){this.variableNames=["A"],this.outputShape=e,this.userCode=`\n      float unaryOperation(float x) {\n        ${t}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}const Yy="return abs(x);";const Qy="return x;";class Zy{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.userCode=`\n      vec4 unaryOperation(vec4 x) {\n        ${t}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}class Jy{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=e;const t=e.length,n=zy("rc",t),r=Qg(t),a=function(e,t){if(1===e)return"rc";let n="";for(let r=0;r<e;r++)n+=t[r],r<e-1&&(n+=",");return n}(t,n),s=n.slice(-2),o=t<=1?"rc":`vec2(${s.join(",")})`;this.userCode=`\n      void main() {\n        ${r} rc = getOutputCoords();\n        vec4 packedInput = getA(${a});\n\n        setOutput(getChannel(packedInput, ${o}));\n      }\n    `}}const ex=oc,tx={};const nx=j().getNumber("CPU_HANDOFF_SIZE_THRESHOLD");class rx extends t{constructor(t){if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.lastGlFlushTime=0,this.warnedAboutMemory=!1,this.pendingDeletes=0,this.disposed=!1,!j().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");if(null==t){const e=om(j().getNumber("WEBGL_VERSION"));this.binaryCache=((n=j().getNumber("WEBGL_VERSION"))in tx||(tx[n]={}),tx[n]),this.gpgpu=new Pg(e),this.canvas=e.canvas,this.gpgpuCreatedLocally=!0}else this.gpgpu=t,this.binaryCache={},this.gpgpuCreatedLocally=!1,this.canvas=t.gl.canvas;var n;this.textureManager=new Hy(this.gpgpu),this.numMBBeforeWarning=null==j().global.screen?1024:j().global.screen.height*j().global.screen.width*window.devicePixelRatio*600/1024/1024,this.texData=new e(this,oo())}nextDataId(){return rx.nextDataId++}numDataIds(){return this.texData.numDataIds()-this.pendingDeletes}write(e,t,n){if((j().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS")||j().getBool("DEBUG"))&&this.checkNumericalProblems(e),"complex64"===n&&null!=e)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");const r={id:this.nextDataId()};return this.texData.set(r,{shape:t,dtype:n,values:e,usage:um.UPLOAD,refCount:1}),r}refCount(e){if(this.texData.has(e)){return this.texData.get(e).refCount}return 0}incRef(e){this.texData.get(e).refCount++}decRef(e){if(this.texData.has(e)){this.texData.get(e).refCount--}}move(e,t,n,r,a){if(j().getBool("DEBUG")&&this.checkNumericalProblems(t),"complex64"===r)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(e,{shape:n,dtype:r,values:t,usage:um.UPLOAD,refCount:a})}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}readSync(e){const t=this.texData.get(e),{values:n,dtype:r,complexTensorInfos:a,slice:s,shape:o,isPacked:i}=t;if(null!=s){let t;t=i?new Zy(o,Qy):new Xy(o,Qy);const n=this.runWebGLProgram(t,[{dataId:e,shape:o,dtype:r}],r),a=this.readSync(n.dataId);return this.disposeIntermediateTensorInfo(n),a}if(null!=n)return this.convertAndCacheOnCPU(e);if("string"===r)return n;const u=null!=this.activeTimers;let l,c;if(u&&(l=Er()),"complex64"===r){c=Kp(this.readSync(a.real.dataId),this.readSync(a.imag.dataId))}else c=this.getValuesFromTexture(e);return u&&(this.downloadWaitMs+=Er()-l),this.convertAndCacheOnCPU(e,c)}async read(e){if(this.pendingRead.has(e)){const t=this.pendingRead.get(e);return new Promise((e=>t.push(e)))}const t=this.texData.get(e),{values:n,shape:r,slice:a,dtype:s,complexTensorInfos:o,isPacked:i}=t;if(null!=a){let t;t=i?new Zy(r,Qy):new Xy(r,Qy);const n=this.runWebGLProgram(t,[{dataId:e,shape:r,dtype:s}],s),a=this.read(n.dataId);return this.disposeIntermediateTensorInfo(n),a}if(null!=n)return this.convertAndCacheOnCPU(e);if(!j().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&2===j().getNumber("WEBGL_VERSION"))throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let u,l,c=null;if("complex64"!==s&&j().get("WEBGL_BUFFER_SUPPORTED")){u=this.decode(e);const t=this.texData.get(u.dataId);c=this.gpgpu.createBufferFromTexture(t.texture,...pm(r))}if(this.pendingRead.set(e,[]),"complex64"!==s&&await this.gpgpu.createAndWaitForFence(),"complex64"===s){const e=await Promise.all([this.read(o.real.dataId),this.read(o.imag.dataId)]);l=Kp(e[0],e[1])}else if(null==c)l=this.getValuesFromTexture(e);else{const e=p(r);l=this.gpgpu.downloadFloat32MatrixFromBuffer(c,e)}null!=u&&this.disposeIntermediateTensorInfo(u);const d=this.convertAndCacheOnCPU(e,l),h=this.pendingRead.get(e);return this.pendingRead.delete(e),h.forEach((e=>e(d))),this.pendingDisposal.has(e)&&(this.pendingDisposal.delete(e),this.disposeData(e)&&oo().removeDataId(e,this),this.pendingDeletes--),d}bufferSync(e){const t=this.readSync(e.dataId);let n=t;if("string"===e.dtype)try{n=t.map((e=>Nr(e)))}catch(e){throw new Error("Failed to decode encoded string bytes into utf-8")}return ri(e.shape,e.dtype,n)}checkNumericalProblems(e){if(null!=e)for(let t=0;t<e.length;t++){const n=e[t];if(!mm(n)){if(j().getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))throw Error(`The value ${n} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);throw Error(`The value ${n} cannot be represented on this device.`)}}}getValuesFromTexture(e){const{shape:t,dtype:n,isPacked:r}=this.texData.get(e),a=p(t);if(j().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){const n=this.decode(e),r=this.texData.get(n.dataId),s=this.gpgpu.downloadMatrixFromPackedTexture(r.texture,...pm(t)).subarray(0,a);return this.disposeIntermediateTensorInfo(n),s}const s=j().getBool("WEBGL_PACK")&&!0===r,o=s?zm(t):t,i=s?new hg(o):new dg(o),u=this.runWebGLProgram(i,[{shape:o,dtype:n,dataId:e}],"float32"),l=this.texData.get(u.dataId),c=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(l.texture,l.texShape[0],l.texShape[1]).subarray(0,a);return this.disposeIntermediateTensorInfo(u),c}timerAvailable(){return j().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0}async time(e){const t=this.activeTimers,n=[];let r=!1;null==this.programTimersStack?(this.programTimersStack=n,r=!0):this.activeTimers.push(n),this.activeTimers=n,e();const a=c(this.activeTimers.map((e=>e.query))).filter((e=>null!=e)),s=c(this.activeTimers.map((e=>e.name))).filter((e=>null!=e));this.activeTimers=t,r&&(this.programTimersStack=null);const i={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null};if(j().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){const e=await Promise.all(a);i.kernelMs=o(e),i.getExtraProfileInfo=()=>e.map(((e,t)=>({name:s[t],ms:e}))).map((e=>`${e.name}: ${e.ms}`)).join(", ")}else i.kernelMs={error:"WebGL query timers are not supported in this environment."};return this.uploadWaitMs=0,this.downloadWaitMs=0,i}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}startTimer(){return j().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:Er(),endMs:null}}endTimer(e){return j().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),e):(e.endMs=Er(),e)}async getQueryTime(e){if(j().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0)return this.gpgpu.waitForQueryAndGetTime(e);const t=e;return t.endMs-t.startMs}disposeData(e,t=!1){if(this.pendingDisposal.has(e))return!1;if(!this.texData.has(e))return!0;if(t?this.texData.get(e).refCount=0:this.texData.get(e).refCount--,!t&&this.texData.get(e).refCount>0)return!1;if(this.pendingRead.has(e))return this.pendingDisposal.add(e),this.pendingDeletes++,!1;this.releaseGPUData(e);const{complexTensorInfos:n}=this.texData.get(e);return null!=n&&(this.disposeData(n.real.dataId,t),this.disposeData(n.imag.dataId,t)),this.texData.delete(e),!0}releaseGPUData(e){const{texture:t,dtype:n,texShape:r,usage:a,isPacked:s,slice:o}=this.texData.get(e),i=o&&o.origDataId||e,u=this.dataRefCount.get(i);u>1?this.dataRefCount.set(i,u-1):(this.dataRefCount.delete(i),null!=t&&(this.numBytesInGPU-=this.computeBytes(r,n),this.textureManager.releaseTexture(t,r,a,s)));const l=this.texData.get(e);l.texture=null,l.texShape=null,l.isPacked=!1,l.slice=null}getTexture(e){return this.uploadToGPU(e),this.texData.get(e).texture}getDataInfo(e){return this.texData.get(e)}shouldExecuteOnCPU(e,t=nx){return j().getBool("WEBGL_CPU_FORWARD")&&e.every((e=>null==this.texData.get(e.dataId).texture&&p(e.shape)<t))}getGPGPUContext(){return this.gpgpu}where(e){jp("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");const t=e.dataSync();return ex(e.shape,t)}packedUnaryOp(e,t,n){const r=new Zy(e.shape,t),a=this.compileAndRun(r,[e],n);return oo().makeTensorFromDataId(a.dataId,a.shape,a.dtype)}abs(e){if(this.shouldExecuteOnCPU([e])&&"complex64"!==e.dtype){const t=Iy(this.texData.get(e.dataId).values);return this.makeOutput(e.shape,e.dtype,t)}if(j().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,Yy,e.dtype);const t=new Xy(e.shape,Yy),n=this.compileAndRun(t,[e]);return oo().makeTensorFromDataId(n.dataId,n.shape,n.dtype)}makeTensorInfo(e,t,n){let r;if("string"===t&&null!=n&&n.length>0&&S(n[0])){const a=n.map((e=>Tr(e)));r=this.write(a,e,t)}else r=this.write(n,e,t);return this.texData.get(r).usage=null,{dataId:r,shape:e,dtype:t}}makeOutput(e,t,n){const{dataId:r}=this.makeTensorInfo(e,t,n);return oo().makeTensorFromDataId(r,e,t,this)}unpackTensor(e){const t=new Jy(e.shape);return this.runWebGLProgram(t,[e],e.dtype)}packTensor(e){const t=new Wy(e.shape);return this.runWebGLProgram(t,[e],e.dtype,null,!0)}packedReshape(e,t){const n=[Vm(e.shape),...Um(e.shape)],r={dtype:e.dtype,shape:n,dataId:e.dataId},a=[Vm(t),...Um(t)],s=new Gy(a,n),o=this.runWebGLProgram(s,[r],e.dtype,null,!0);return{dataId:o.dataId,shape:t,dtype:o.dtype}}decode(e){const t=this.texData.get(e),{isPacked:n,shape:r,dtype:a}=t,s=zm(r);let o;o=n?new pg(s):new cg(s);return{dtype:a,shape:r,dataId:this.runWebGLProgram(o,[{shape:s,dtype:a,dataId:e}],a,null,!0).dataId}}runWebGLProgram(e,t,n,r,a=!1){const s=this.makeTensorInfo(e.outputShape,n),o=this.texData.get(s.dataId);if(e.packedOutput&&(o.isPacked=!0),e.outPackingScheme===im.DENSE){const t=pm(e.outputShape);o.texShape=t.map((e=>2*e))}if(null!=e.outTexUsage&&(o.usage=e.outTexUsage),0===p(s.shape))return o.values=v(s.dtype,0),s;const i=[],u=t.map((t=>{if("complex64"===t.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let n=this.texData.get(t.dataId);if(null==n.texture){if(!e.packedInputs&&p(t.shape)<=j().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:t.shape,texData:null,isUniform:!0,uniformValues:n.values};e.packedInputs&&(n.isPacked=!0,n.shape=t.shape)}else if(!!n.isPacked!=!!e.packedInputs)t=n.isPacked?this.unpackTensor(t):this.packTensor(t),i.push(t),n=this.texData.get(t.dataId);else if(n.isPacked&&!Hm(n.shape,t.shape)){const e=t,r=t.shape;t.shape=n.shape,t=this.packedReshape(t,r),i.push(t),n=this.texData.get(t.dataId),e.shape=r}return this.uploadToGPU(t.dataId),{shape:t.shape,texData:n,isUniform:!1}}));this.uploadToGPU(s.dataId);const l={shape:s.shape,texData:o,isUniform:!1},c=function(e,t,n){let r="";t.concat(n).forEach((e=>{const t=null!=e.texData&&null!=e.texData.slice&&e.texData.slice.flatOffset>0,n=e.isUniform?"uniform":e.texData.texShape;r+=`${e.shape}_${n}_${t}`}));const a=e.userCode;let s=e.constructor.name;return s+="_"+r+"_"+a,s}(e,u,l),d=this.getAndSaveBinary(c,(()=>function(e,t,n,r){const a=t.userCode,s=n.map(((e,n)=>{const r={logicalShape:e.shape,texShape:e.isUniform?null:e.texData.texShape,isUniform:e.isUniform,isPacked:!e.isUniform&&e.texData.isPacked,flatOffset:null};return null!=e.texData&&null!=e.texData.slice&&e.texData.slice.flatOffset>0&&(r.flatOffset=e.texData.slice.flatOffset),{name:t.variableNames[n],shapeInfo:r}})),o=s.map((e=>e.shapeInfo)),i={logicalShape:r.shape,texShape:r.texData.texShape,isUniform:!1,isPacked:r.texData.isPacked,flatOffset:null},u=Ug(s,i,a,t.packedInputs),l=e.createProgram(u);let c=null;const p=e.getUniformLocation(l,"NAN",!1);1===j().getNumber("WEBGL_VERSION")&&(c=e.getUniformLocation(l,"INFINITY",!1));const d={};for(let n=0;n<t.variableNames.length;n++){const r=t.variableNames[n],a=!1;d[r]=e.getUniformLocation(l,r,a),d[`offset${r}`]=e.getUniformLocation(l,`offset${r}`,a)}return{program:t,source:u,webGLProgram:l,uniformLocations:d,inShapeInfos:o,outShapeInfo:i,infLoc:c,nanLoc:p}}(this.gpgpu,e,u,l))),h=null!=this.activeTimers;let f;h&&(f=this.startTimer()),function(e,t,n,r,a){ey(t.inShapeInfos,n),ey([t.outShapeInfo],[r]);const s=r.texData.texture,o=r.texData.texShape;r.texData.isPacked?e.setOutputPackedMatrixTexture(s,o[0],o[1]):e.setOutputMatrixTexture(s,o[0],o[1]),e.setProgram(t.webGLProgram),1===j().getNumber("WEBGL_VERSION")&&null!==t.infLoc&&e.gl.uniform1f(t.infLoc,1/0),null!==t.nanLoc&&e.gl.uniform1f(t.nanLoc,NaN),n.forEach(((n,r)=>{const a=t.program.variableNames[r],s=t.uniformLocations[a],o=t.uniformLocations[`offset${a}`];if(null!=s)if(n.isUniform)if(p(n.shape)<2)e.gl.uniform1f(s,n.uniformValues[0]);else{let t=n.uniformValues;t instanceof Float32Array||(t=new Float32Array(t)),e.gl.uniform1fv(s,t)}else null!=n.texData.slice&&null!=o&&e.gl.uniform1i(o,n.texData.slice.flatOffset),e.setInputMatrixTexture(n.texData.texture,s,r)})),null!=a&&a(e,t.webGLProgram),e.executeProgram()}(this.gpgpu,d,u,l,r),i.forEach((e=>this.disposeIntermediateTensorInfo(e))),h&&(f=this.endTimer(f),this.activeTimers.push({name:e.constructor.name,query:this.getQueryTime(f)}));const m=j().get("WEBGL_FLUSH_THRESHOLD");if(m>0){const e=Er();e-this.lastGlFlushTime>m&&(this.gpgpu.gl.flush(),this.lastGlFlushTime=e)}if(!j().getBool("WEBGL_LAZILY_UNPACK")&&o.isPacked&&!1===a){const e=this.unpackTensor(s);return this.disposeIntermediateTensorInfo(s),e}return s}compileAndRun(e,t,n,r,a=!1){n=n||t[0].dtype;return this.runWebGLProgram(e,t,n,r,a)}getAndSaveBinary(e,t){return e in this.binaryCache||(this.binaryCache[e]=t()),this.binaryCache[e]}getTextureManager(){return this.textureManager}dispose(){if(!this.disposed){if(!j().getBool("IS_TEST")){Object.keys(this.binaryCache).forEach((e=>{this.gpgpu.deleteProgram(this.binaryCache[e].webGLProgram),delete this.binaryCache[e]}))}this.textureManager.dispose(),null!=this.canvas&&"undefined"!=typeof HTMLCanvasElement&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0}}floatPrecision(){return null==this.floatPrecisionValue&&(this.floatPrecisionValue=io((()=>{if(!j().get("WEBGL_RENDER_FLOAT32_ENABLED")){const e=j().getBool("DEBUG");j().set("DEBUG",!1);const t=this.abs(_l(1e-8)).dataSync()[0];if(j().set("DEBUG",e),t>0)return 32}return 16}))),this.floatPrecisionValue}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}uploadToGPU(e){const t=this.texData.get(e),{shape:n,dtype:r,values:a,texture:s,usage:o,isPacked:i}=t;if(null!=s)return;const u=null!=this.activeTimers;let l;u&&(l=Er());let c=t.texShape;if(null==c&&(c=Wm(n,i),t.texShape=c),null!=a){const e=zm(n);let s,o=c[1],p=c[0];const d=a instanceof Uint8Array;i?([o,p]=dm(c[0],c[1]),s=new mg(e,[p,o],d)):s=new fg(e,[p,o],d);const h=this.makeTensorInfo([p,o],r);this.texData.get(h.dataId).usage=d?um.PIXELS:um.UPLOAD,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(h.dataId),o,p,a);const f=!0,m=this.runWebGLProgram(s,[h],r,null,f),g=this.texData.get(m.dataId);t.texture=g.texture,t.texShape=g.texShape,t.isPacked=g.isPacked,t.usage=g.usage,this.disposeIntermediateTensorInfo(h),this.texData.delete(m.dataId),t.values=null,u&&(this.uploadWaitMs+=Er()-l)}else{const e=this.acquireTexture(c,o,r,i);t.texture=e}}convertAndCacheOnCPU(e,t){const n=this.texData.get(e),{dtype:r}=n;return this.releaseGPUData(e),null!=t&&(n.values=function(e,t){if("float32"===t||"complex64"===t)return e;if("int32"===t||"bool"===t){const n="int32"===t?new Int32Array(e.length):new Uint8Array(e.length);for(let t=0;t<n.length;++t)n[t]=Math.round(e[t]);return n}throw new Error(`Unknown dtype ${t}`)}(t,r)),n.values}acquireTexture(e,t,n,r){if(this.numBytesInGPU+=this.computeBytes(e,n),!this.warnedAboutMemory&&this.numBytesInGPU>1024*this.numMBBeforeWarning*1024){const e=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(`High memory usage in GPU: ${e} MB, most likely due to a memory leak`)}return this.textureManager.acquireTexture(e,t,r)}computeBytes(e,t){return e[0]*e[1]*$(t)}}rx.nextDataId=0;function ax(){j().set("WEBGL_FORCE_F16_TEXTURES",!0)}oa()&&po("webgl",(()=>new rx),2);const sx={forceHalfFloat:ax};class ox{constructor(e){this.variableNames=["A"];const t=og(),[n,r]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${r}.0, ${n}.0);\n\n        vec4 values = ${t.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `}}class ix{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const t=og(),[n,r]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${r}.0, ${n}.0);\n            vec4 values = ${t.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${t.output} = result;\n      }\n    `}}const ux={kernelName:Nn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e;let{pixels:a}=t;const{numChannels:s}=r,o="undefined"!=typeof HTMLVideoElement&&a instanceof HTMLVideoElement,i="undefined"!=typeof HTMLImageElement&&a instanceof HTMLImageElement,[u,l]=o?[a.videoWidth,a.videoHeight]:[a.width,a.height],c=[l,u],p=[l,u,s];(i||o)&&(null==lx&&(lx=document.createElement("canvas").getContext("2d")),lx.canvas.width=u,lx.canvas.height=l,lx.drawImage(a,0,0,u,l),a=lx.canvas);const d=n.makeTensorInfo(c,"int32");n.texData.get(d.dataId).usage=um.PIXELS,n.gpgpu.uploadPixelDataToTexture(n.getTexture(d.dataId),a);const h=j().getBool("WEBGL_PACK")?new ix(p):new ox(p),f=n.runWebGLProgram(h,[d],"int32");return n.disposeData(d.dataId),f}};let lx;function cx(e){const{inputs:t,backend:n}=e,{x:r}=t;return n.incRef(r.dataId),{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}const px={kernelName:Qe,backendName:"webgl",kernelFunc:cx};function dx(e){const{inputs:t,backend:n}=e,{real:r,imag:a}=t,s=n.makeTensorInfo(r.shape,"complex64"),o=n.texData.get(s.dataId),i=cx({inputs:{x:r},backend:n}),u=cx({inputs:{x:a},backend:n});return o.complexTensorInfos={real:i,imag:u},s}class hx{constructor(e,t,n){this.variableNames=["A","B"],this.outputShape=Ii(t,n),this.userCode=`\n      float binaryOperation(float a, float b) {\n        ${e}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `}}class fx{constructor(e,t,n,r=!1){this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=Ii(t,n);const a=this.outputShape.length;let s="";if(r)if(0===a||1===p(this.outputShape))s="\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        ";else{if(s=`\n          ${Qg(a)} coords = getOutputCoords();\n        `,1===a)s+=`\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;else{const e=zy("coords",a);s+=`\n            bool nextRowOutOfBounds =\n              (${e[a-2]} + 1) >= ${this.outputShape[a-2]};\n            bool nextColOutOfBounds =\n              (${e[a-1]} + 1) >= ${this.outputShape[a-1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `}}this.userCode=`\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${e}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${s}\n\n        setOutput(result);\n      }\n    `}}const mx="return (a < 0.) ? b * a : a;",gx="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n";const yx="return (a < 0.) ? b * a : a;",xx="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n";const bx={kernelName:Ct,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r,alpha:a}=t,s=j().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new fx(xx,r.shape,a.shape):new hx(yx,r.shape,a.shape);return n.runWebGLProgram(s,[r,a],r.dtype)}};function vx({opSnippet:e,packedOpSnippet:t,cpuKernelImpl:n,dtype:r}){return({inputs:a,backend:s})=>{const{x:o}=a,i=s,u=r||o.dtype;if(i.shouldExecuteOnCPU([o])&&null!=n){const e=i.texData.get(o.dataId),t=n(e.values,u);return i.makeTensorInfo(o.shape,u,t)}let l;return l=j().getBool("WEBGL_PACK_UNARY_OPERATIONS")&&null!=t?new Zy(o.shape,t):new Xy(o.shape,e),i.runWebGLProgram(l,[o],u)}}function wx({opSnippet:e,packedOpSnippet:t,checkOutOfBounds:n=!1,supportsComplex:r=!1,cpuKernelImpl:a,dtype:s}){return({inputs:o,backend:i})=>{const{a:u,b:l}=o,c=i;if(r&&"complex64"===u.dtype){const t=c.texData.get(u.dataId),n=c.texData.get(l.dataId),[r,a]=[[t.complexTensorInfos.real,n.complexTensorInfos.real],[t.complexTensorInfos.imag,n.complexTensorInfos.imag]].map((t=>{const[n,r]=t,a={dataId:n.dataId,dtype:n.dtype,shape:u.shape},s={dataId:r.dataId,dtype:r.dtype,shape:l.shape},o=new hx(e,u.shape,l.shape);return c.runWebGLProgram(o,[a,s],jr(n.dtype,r.dtype))})),s=dx({inputs:{real:r,imag:a},backend:c});return c.disposeIntermediateTensorInfo(r),c.disposeIntermediateTensorInfo(a),s}const p=s||jr(u.dtype,l.dtype);if(("string"===u.dtype||"string"===l.dtype||c.shouldExecuteOnCPU([u,l]))&&null!=a){const e=c.texData.get(u.dataId).values,t=c.texData.get(l.dataId).values,n="string"===u.dtype?Zp(e):e,r="string"===u.dtype?Zp(t):t,[s,o]=a(u.shape,l.shape,n,r,p),i=c.makeTensorInfo(o,p);return c.texData.get(i.dataId).values=s,i}let d;return d=j().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&null!=t?new fx(t,u.shape,l.shape,n):new hx(e,u.shape,l.shape),c.runWebGLProgram(d,[u,l],p)}}function Ex(e,t=!1){if("linear"===e)return"return x;";if("relu"===e)return t?"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n":"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : x;\n";if("elu"===e)return t?"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n":"return (x >= 0.0) ? x : (exp(x) - 1.0);";if("relu6"===e)return t?"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n":"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n";if("prelu"===e)return t?xx:yx;if("leakyrelu"===e)return t?gx:mx;if("sigmoid"===e)return"return 1.0 / (1.0 + exp(-1.0 * x));";throw new Error(`Activation ${e} has not been implemented for the WebGL backend.`)}const Tx=wx({opSnippet:"return float(a != b);",cpuKernelImpl:Ty,dtype:"bool"});function Nx(e){const{inputs:t,backend:n}=e,{input:r}=t;return cx({inputs:{x:n.texData.get(r.dataId).complexTensorInfos.real},backend:n})}const kx={kernelName:fe,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:r,attrs:a}=t,{x:s}=n,{dtype:o}=a;if("complex64"===o){if("complex64"===s.dtype)return cx({inputs:{x:s},backend:r});const t=_u(s.shape),n=e({inputs:{x:s},backend:r,attrs:{dtype:"float32"}}),a=dx({inputs:{real:n,imag:t},backend:r});return t.dispose(),r.disposeIntermediateTensorInfo(n),a}if("complex64"===s.dtype){const t=Nx({inputs:{input:s},backend:r}),n=e({inputs:{x:t},backend:r,attrs:{dtype:o}});return r.disposeIntermediateTensorInfo(t),n}if(!N(s.dtype,o)){const e=cx({inputs:{x:s},backend:r});return{dataId:e.dataId,shape:e.shape,dtype:o}}if("int32"===o)return function(e,t){const n=new Xy(e.shape,"return float(int(x));"),r=t.runWebGLProgram(n,[e],"int32");return{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}(s,r);if("bool"===o){const e=r.makeTensorInfo([],"bool",v("bool",1)),t=Tx({inputs:{a:s,b:e},backend:r});return r.disposeIntermediateTensorInfo(e),t}throw new Error(`Error in Cast: failed to cast ${s.dtype} to ${o}`)}};function $x(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{shape:s}=r,o=n,u=p(a.shape),l=y(s,u),c=p(l);i(u===c,(()=>`The new shape (${l}) has ${c} elements and the old shape (${a.shape}) has ${u} elements. The new shape and old shape must have the same number of elements.`));const d=o.texData.get(a.dataId);return!d.isPacked||Hm(a.shape,l)||null!==d.texture&&Hm(d.shape,l)?(o.incRef(a.dataId),{dataId:a.dataId,shape:l,dtype:a.dtype}):function(e,t,n){const r=[Vm(e.shape),...Um(e.shape)],a={dtype:e.dtype,shape:r,dataId:e.dataId},s=[Vm(t),...Um(t)],o=new Gy(s,r),i=n.runWebGLProgram(o,[a],e.dtype,null,!0);return{dataId:i.dataId,shape:t,dtype:i.dtype}}(a,l,o)}const Ix={kernelName:Ft,backendName:"webgl",kernelFunc:$x};function Sx(e){const{inputs:t,attrs:n,backend:r}=e,{dim:a}=n,{input:s}=t,o=s.shape.length,u=s.shape.slice();let l=a;return a<0&&(i(-(o+1)<=a,(()=>`Axis must be in the interval [${-(o+1)}, ${o}]`)),l=o+a+1),u.splice(l,0,1),$x({inputs:{x:s},backend:r,attrs:{shape:u}})}const _x={kernelName:Ve,backendName:"webgl",kernelFunc:Sx};class Cx{constructor(e,t){this.variableNames=["Image"],this.outputShape=[];const n=e[1],r=e[2];this.outputShape=e;let a="";a="number"==typeof t?`float outputValue = ${t.toFixed(2)};`:`\n        vec3 fill = vec3(${t.join(",")});\n        float outputValue = fill[coords[3]];`,this.userCode=`\n        uniform vec4 params;\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - params[0]) * params[3] -\n            (float(y) - params[1]) * params[2];\n          float coordYFloat = (float(x) - params[0]) * params[2] +\n            (float(y) - params[1]) * params[3];\n          int coordX = int(round(coordXFloat + params[0]));\n          int coordY = int(round(coordYFloat + params[1]));\n          ${a}\n          if(coordX >= 0 && coordX < ${r} && coordY >= 0 && coordY < ${n}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}getCustomSetupFunc(e,t,n,r){return(a,s)=>{null==this.paramsLoc&&(this.paramsLoc=a.getUniformLocationNoThrow(s,"params")),a.gl.uniform4f(this.paramsLoc,e,t,n,r)}}}const Ax={kernelName:kn,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:r}=e,{radians:a,fillValue:s,center:o}=t,i=n,u=new Cx(r.shape,s),[l,c]=Hp(o,r.shape[1],r.shape[2]),p=u.getCustomSetupFunc(l,c,Math.sin(a),Math.cos(a));return i.runWebGLProgram(u,[r],r.dtype,p)}};class Rx{constructor(e,t,n,r,a){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];const[s,o,i,u]=e,[l]=t,[c,p]=n;this.outputShape=[l,c,p,u];const d="bilinear"===r?1:0,[h,f]=[o-1+".0",i-1+".0"],[m,g,y]=c>1?[""+(o-1)/(c-1),"(y2-y1) * height_ratio",`y1*${h} + float(y)*(height_scale)`]:["0.0","0.0",`0.5 * (y1+y2) * ${h}`],[x,b,v]=p>1?[""+(i-1)/(p-1),"(x2-x1) * width_ratio",`x1*${f} + float(x)*(width_scale)`]:["0.0","0.0",`0.5 * (x1+x2) * ${f}`];this.userCode=`\n      const float height_ratio = float(${m});\n      const float width_ratio = float(${x});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${s}) {\n          return;\n        }\n\n        float height_scale = ${g};\n        float width_scale = ${b};\n\n        float in_y = ${y};\n        if( in_y < 0.0 || in_y > ${h} ) {\n          setOutput(float(${a}));\n          return;\n        }\n        float in_x = ${v};\n        if( in_x < 0.0 || in_x > ${f} ) {\n          setOutput(float(${a}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${d} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `}}const Ox={kernelName:Ie,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{image:a,boxes:s,boxInd:o}=t,{cropSize:i,method:u,extrapolationValue:l}=r,c=new Rx(a.shape,s.shape,i,u,l);return n.runWebGLProgram(c,[a,s,o],"float32")}},Mx=wx({opSnippet:"\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;",packedOpSnippet:"\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n",checkOutOfBounds:!0}),Dx={kernelName:De,backendName:"webgl",kernelFunc:Mx};class Fx{constructor(e,t=!1,n=null,r=!1,a=!1){this.variableNames=["x","W"],this.outputShape=e.outShape;const s=e.padInfo.top,o=e.padInfo.left,i=e.strideHeight,u=e.strideWidth,l=e.dilationHeight,c=e.dilationWidth,p=e.filterHeight,d=e.filterWidth,h=4*Math.floor(e.inChannels/4),f=e.inChannels%4,m="channelsLast"===e.dataFormat,g=m?1:2,y=m?2:3,x=m?3:1;let b="",v="";n&&(b=r?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:a?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,v="result = activation(result);");const w=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),a&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${b}\n\n      const ivec2 strides = ivec2(${i}, ${u});\n      const ivec2 pads = ivec2(${s}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${x}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${g}], coords[${y}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${p}; wR++) {\n          int xR = xRCorner + wR * ${l};\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${d}; wC++) {\n            int xC = xCCorner + wC * ${c};\n\n            if (xC < 0 || xC >= ${e.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${h}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${m}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${1===f}) {\n\n              if (${m}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${h}) *\n                    getW(wR, wC, ${h}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${h}, xR, xC) *\n                    getW(wR, wC, ${h}, d2);\n              }\n\n            } else if (${2===f}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${h}, d2),\n                getW(wR, wC, ${h} + 1, d2)\n              );\n\n              if (${m}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${h}),\n                  getX(batch, xR, xC, ${h} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${h}, xR, xC),\n                  getX(batch, ${h} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${3===f}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${h}, d2),\n                getW(wR, wC, ${h} + 1, d2),\n                getW(wR, wC, ${h} + 2, d2)\n              );\n\n              if (${m}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${h}),\n                  getX(batch, xR, xC, ${h} + 1),\n                  getX(batch, xR, xC, ${h} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${h}, xR, xC),\n                  getX(batch, ${h} + 1, xR, xC),\n                  getX(batch, ${h} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${w}\n        ${v}\n        setOutput(result);\n      }\n    `}}class Lx{constructor(e,t,n){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e;const{filterWidth:r,inChannels:a,strideWidth:s,strideHeight:o,padInfo:i,outWidth:u,dilationWidth:l,dilationHeight:c,dataFormat:p}=n,{left:d,top:h}=i,f=a*r,m=og(),g="channelsLast"===p,y=g?0:1,x=g?1:2;let b="";for(let n=0;n<=1;n++)for(let r=0;r<=1;r++)b+=`\n          blockIndex = rc.y + ${r};\n          pos = rc.x + ${n};\n\n          if(blockIndex < ${e[1]} && pos < ${e[0]}) {\n            offsetY = int(blockIndex / (${u})) * ${o} - ${h};\n            d0 = offsetY + ${c} * (pos / ${f});\n\n            if(d0 < ${t[y]} && d0 >= 0) {\n\n              offsetX = int(mod(float(blockIndex), ${u}.) * ${s}. - ${d}.);\n              d1 = offsetX + ${l} * (int(mod(float(pos), ${f}.) / ${a}.));\n\n              if(d1 < ${t[x]} && d1 >= 0) {\n\n                ch = int(mod(float(pos), ${a}.));\n\n                if (${g}) {\n                  innerDims = vec2(d1, ch);\n                  result[${2*n+r}] = getChannel(\n                    getA(d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${2*n+r}] = getChannel(\n                    getA(ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;this.userCode=`\n      void main() {\n        ivec2 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${b}\n\n        ${m.output} = result;\n      }\n    `}}class Bx{constructor(e,t,n,r=!1,a=!1,s=!1,o=null,i=!1,u=!1){this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=n;const l=r?e[1]:e[2],c=Math.ceil(l/2),p=r?"i * 2, rc.y":"rc.y, i * 2",d=a?"rc.z, i * 2":"i * 2, rc.z",h=r?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],f=a?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"];let m="",g="";o&&(m=i?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${o}\n        }`:u?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${o}\n        }`:`vec4 activation(vec4 x) {\n          ${o}\n        }`,g="result = activation(result);");const y=s?"result += getBiasAtOutCoords();":"";s&&this.variableNames.push("bias"),i&&this.variableNames.push("preluActivationWeights"),u&&this.variableNames.push("leakyreluAlpha");let x="rc.x",b="rc.x";e[0]<t[0]?x=`int(min(float(rc.x), ${e[0]-1}.))`:t[0]<e[0]&&(b=`int(min(float(rc.x), ${t[0]-1}.))`),this.userCode=`\n      ${m}\n\n      const float sharedDimension = ${c}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        for (int i = 0; i < ${c}; i++) {\n          int batchA = ${x};\n          int batchB = ${b};\n          vec4 a = getMatrixA(batchA, ${p});\n          vec4 b = getMatrixB(batchB, ${d});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${h[0]} * ${f[0]});\n          result += (${h[1]} * ${f[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${y}\n\n        ${g}\n\n        setOutput(result);\n      }\n    `}}const Px="return areal * breal - aimag * bimag;",Vx="return areal * bimag + aimag * breal;";class Ux{constructor(e,t,n){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=Ii(t,n),this.userCode=`\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${e}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `}}const zx="return a * b;";function Wx(e){const{inputs:t,backend:n}=e,{a:r,b:a}=t,s=jr(r.dtype,a.dtype);if("complex64"===r.dtype){const e=n.texData.get(r.dataId),t=n.texData.get(a.dataId),s=new Ux(Px,r.shape,a.shape),o=new Ux(Vx,r.shape,a.shape),i=[{dataId:e.complexTensorInfos.real.dataId,dtype:e.complexTensorInfos.real.dtype,shape:r.shape},{dataId:e.complexTensorInfos.imag.dataId,dtype:e.complexTensorInfos.imag.dtype,shape:r.shape},{dataId:t.complexTensorInfos.real.dataId,dtype:t.complexTensorInfos.real.dtype,shape:a.shape},{dataId:t.complexTensorInfos.imag.dataId,dtype:t.complexTensorInfos.imag.dtype,shape:a.shape}],u=n.runWebGLProgram(s,i,"float32"),l=n.runWebGLProgram(o,i,"float32"),c=dx({inputs:{real:u,imag:l},backend:n});return n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(l),c}if(n.shouldExecuteOnCPU([r,a])){const e=n.texData.get(r.dataId),t=n.texData.get(a.dataId),[o,i]=wy(r.shape,a.shape,e.values,t.values,s),u=n.makeTensorInfo(i,s);return n.texData.get(u.dataId).values=o,u}let o;return o=j().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new fx(zx,r.shape,a.shape):new hx(zx,r.shape,a.shape),n.runWebGLProgram(o,[r,a],s)}const Gx={kernelName:vt,backendName:"webgl",kernelFunc:Wx};class Hx{constructor(e,t){this.variableNames=["x"];const{windowSize:n,batchSize:r,inSize:a,outSize:s}=e;this.outputShape=[r,s];const o=4*Math.floor(n/4),i=n%4;let u="sumValue += dot(values, ones);";if(null!=t){const e=1/t;u=`sumValue += dot(values * ${h(e)?e.toPrecision(2):e}, ones);`}let l="";a%n>0&&(l=`\n        if (inIdx < 0 || inIdx >= ${a}) {\n          return 0.0;\n        }\n      `),this.userCode=`\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${l}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${o}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${u}\n        }\n\n        int inIdx = inOffset + ${o};\n        if (${1===i}) {\n          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);\n\n          ${u}\n        } else if (${2===i}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1), 0.0, 0.0);\n\n          ${u}\n        } else if (${3===i}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2), 0.0);\n\n          ${u}\n        }\n        setOutput(sumValue);\n      }\n    `}}class jx{constructor(e,t){this.variableNames=["x"];const{windowSize:n,batchSize:r,inSize:a,outSize:s}=e;this.outputShape=[r,s];let o="0.0",i="";"prod"===t?o="1.0":"min"===t?(o="1.0 / 1e-20",i="min"):"max"===t&&(o="-1.0 / 1e-20",i="max");let u=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"sum"===t?u="sumValue":"prod"===t?u="prodValue":"all"===t?u="allValue":"any"===t&&(u="anyValue");const l=4*Math.floor(n/4),c=n%4;let p=`\n      if (${"sum"===t}) {\n        sumValue += dot(values, ones);\n      } else if (${"prod"===t}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${i}(values, minMaxValue);\n        if (${"min"===t} || ${"max"===t}) {\n          minMaxValue = ${i}(values, minMaxValue);\n          bvec4 isNaN = isnan(values);\n          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {\n            minMaxValue = vec4(NAN);\n          }\n        }\n      }\n    `,d="vec4";"all"===t?(o="1.0",p="\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ",d="bvec4"):"any"===t&&(o="0.0",p="\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      ",d="bvec4");let h="";a%n>0&&(h=`\n        if (inIdx < 0 || inIdx >= ${a}) {\n          return initializationValue;\n        }\n      `),this.userCode=`\n      const float initializationValue = ${o};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${h}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        vec4 minMaxValue = vec4(${o});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${l}; i += 4) {\n          int inIdx = inOffset + i;\n          ${d} values = ${d}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${p}\n        }\n\n        int inIdx = inOffset + ${l};\n        if (${1===c}) {\n          ${d} values = ${d}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${p}\n        } else if (${2===c}) {\n          ${d} values = ${d}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${p}\n        } else if (${3===c}) {\n          ${d} values = ${d}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${p}\n        }\n        setOutput(${u});\n      }\n    `}}function Kx(e,t,n,r){const a=function(e){const t=[];for(;0===t.length||1!==t[t.length-1].outSize;){const n=t.length?t[t.length-1].outSize:e[1],r=Gp(n);t.push({inSize:n,windowSize:r,outSize:Math.ceil(n/r)})}return t}(e.shape);let s=e;for(let o=0;o<a.length;o++){const{inSize:i,windowSize:u,outSize:l}=a[o];let c,p;c="mean"===n?0===o?new Hx({windowSize:u,inSize:i,batchSize:e.shape[0],outSize:l},i):new Hx({windowSize:u,inSize:i,batchSize:e.shape[0],outSize:l}):new jx({windowSize:u,inSize:i,batchSize:e.shape[0],outSize:l},n),p=s,s=r.runWebGLProgram(c,[s],t),p.dataId!==e.dataId&&r.disposeIntermediateTensorInfo(p)}return s}class qx{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let r=0;r<n.length;r++)n[r]=e[t[r]];this.outputShape=n,this.rank=n.length;const r=Qg(this.rank),a=function(e){const t=e.length;if(t>6)throw Error(`Transpose for rank ${t} is not yet supported`);const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],r=new Array(t);for(let t=0;t<e.length;t++)r[e[t]]=n[t];return r.join()}(t);this.userCode=`\n    void main() {\n      ${r} resRC = getOutputCoords();\n      setOutput(getA(${a}));\n    }\n    `}}class Xx{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;const n=new Array(e.length);for(let r=0;r<n.length;r++)n[r]=e[t[r]];if(this.outputShape=n,this.rank=n.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);const r=Qg(this.rank),a=Uy("rc",this.rank),s=new Array(this.rank);for(let e=0;e<t.length;e++)s[t[e]]=a[e];const o=`vec2(${s.slice(-2).join()})`,i=`++${a[this.rank-1]} < ${n[this.rank-1]}`,u=`getChannel(getA(${s.join()}), ${o})`;this.userCode=`\n    void main() {\n      ${r} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${u};\n      if(${i}) {\n        result[1] = ${u};\n      }\n      --${a[this.rank-1]};\n      if(++${a[this.rank-2]} < ${n[this.rank-2]}) {\n        result[2] = ${u};\n        if(${i}) {\n          result[3] = ${u};\n        }\n      }\n      setOutput(result);\n    }\n    `}}function Yx(e,t,n){const r=j().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Xx(e.shape,t):new qx(e.shape,t);return n.runWebGLProgram(r,[e],e.dtype)}function Qx(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:s,keepDims:o}=r;return function(e,t,n,r){const a=t,s=e.shape.length,o=x(a,e.shape);let i=o;const u=yu(i,s),l=null!=u;let c=e;l&&(c=Yx(e,u,r),i=xu(i.length,s)),gu("sum",i,s);const[d,h]=fu(c.shape,i);let f=d;n&&(f=mu(d,o));const m=p(h),g=$x({inputs:{x:c},attrs:{shape:[p(e.shape)/m,m]},backend:r}),y=Kx(g,Kr(e.dtype),"sum",r),b=$x({inputs:{x:y},attrs:{shape:f},backend:r});return r.disposeIntermediateTensorInfo(g),r.disposeIntermediateTensorInfo(y),l&&r.disposeIntermediateTensorInfo(c),b}(a,s,o,n)}function Zx(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{perm:s}=r,o=n,i=a.shape.length,u=new Array(i);for(let e=0;e<u.length;e++)u[e]=a.shape[s[e]];let l;if(o.shouldExecuteOnCPU([a])){const e=o.texData.get(a.dataId).values,t=Py(e,a.shape,a.dtype,s,u);l=o.makeTensorInfo(u,a.dtype);o.texData.get(l.dataId).values=t}else l=Yx(a,s,o);return l}function Jx({a:e,b:t,transposeA:n,transposeB:r,backend:a,bias:s=null,preluActivationWeights:o=null,leakyreluAlpha:u=0,activation:l=null}){const c=e.shape.length,d=t.shape.length,h=n?e.shape[c-2]:e.shape[c-1],f=r?t.shape[d-1]:t.shape[d-2],m=n?e.shape[c-1]:e.shape[c-2],g=r?t.shape[d-2]:t.shape[d-1],y=e.shape.slice(0,-2),x=t.shape.slice(0,-2),b=p(y),v=p(x);i(c>=2&&d>=2&&(b===v||1===b||1===v),(()=>`Error in matMul: the input batch dimensions must either be the same or at least one input batch dimension must be 1. Got input batch dimensions of (${y}) and (${x}).`));const w=(b>v?e.shape.slice(0,-2):t.shape.slice(0,-2)).concat([m,g]);i(h===f,(()=>`Error in matMul: inner shapes (${h}) and (${f}) of Tensors with shapes ${e.shape} and ${t.shape} and transposeA=${n} and transposeB=${r} must match.`));const E=n?[b,h,m]:[b,m,h],T=r?[v,g,f]:[v,f,g],N=$x({inputs:{x:e},backend:a,attrs:{shape:E}}),k=$x({inputs:{x:t},backend:a,attrs:{shape:T}}),$=[N,k],I=Math.max(b,v),S=n?N.shape[1]:N.shape[2],_=null!=s,C=null!=o,A="leakyrelu"===l,R=null!=l?Ex(l,!0):null;let O;if((1===m||1===g)&&S>1e3&&!1===(_||C||A||null!=R)){let e=N,t=k;n&&(e=Zx({inputs:{x:N},backend:a,attrs:{perm:[0,2,1]}}),$.push(e)),r&&(t=Zx({inputs:{x:k},backend:a,attrs:{perm:[0,2,1]}}),$.push(t));const s=1===g;let o=e;1!==g&&(o=$x({inputs:{x:e},backend:a,attrs:{shape:[I,S,1]}}),$.push(o));const i=1===g?2:1;let u=t;s&&(u=$x({inputs:{x:t},backend:a,attrs:{shape:[I,1,S]}}),$.push(u));const l=Wx({inputs:{a:o,b:u},backend:a});O=Qx({inputs:{x:l},backend:a,attrs:{axis:i,keepDims:!0}}),$.push(l)}else{const i=jr(e.dtype,t.dtype),l=new Bx(E,T,[I,m,g],n,r,_,R,C,A),c=[N,k];if(null!=s&&c.push(s),C&&c.push(o),A){const e=a.makeTensorInfo([],"float32",vr(u,"float32"));c.push(e),$.push(e)}O=a.runWebGLProgram(l,c,i)}const M=$x({inputs:{x:O},backend:a,attrs:{shape:w}});$.push(O);for(const e of $)a.disposeIntermediateTensorInfo(e);return M}const eb={kernelName:In,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,filter:s,bias:o,preluActivationWeights:u}=t,{strides:l,pad:c,dataFormat:d,dilations:h,dimRoundingMode:f,activation:m,leakyreluAlpha:g}=r,y=Vo(d),x=Ao(a.shape,s.shape,l,h,c,f,!1,y);let b;const v=[];if(1!==x.filterHeight||1!==x.filterWidth||1!==x.dilationHeight||1!==x.dilationWidth||1!==x.strideHeight||1!==x.strideWidth||"SAME"!==x.padInfo.type&&"VALID"!==x.padInfo.type)if(j().getBool("WEBGL_CONV_IM2COL")&&1===a.shape[0])b=function({x:e,filter:t,convInfo:n,backend:r,bias:a=null,preluActivationWeights:s=null,leakyreluAlpha:o=0,activation:i=null}){const{filterWidth:u,filterHeight:l,inChannels:c,outWidth:d,outHeight:h,dataFormat:f}=n,m="channelsLast"===f,g=u*l*c,y=h*d,x=[g,y],b=[],v=$x({inputs:{x:e},backend:r,attrs:{shape:e.shape.slice(1)}}),w=$x({inputs:{x:t},backend:r,attrs:{shape:[1,g,p(t.shape)/g]}});b.push(v),b.push(w);const E=new Lx(x,v.shape,n),T=r.runWebGLProgram(E,[v],"float32"),N=$x({inputs:{x:T},backend:r,attrs:{shape:[1,x[0],x[1]]}});b.push(T),b.push(N);const k=null!=a,$=null!=s,I="leakyrelu"===i,S=i?Ex(i,!0):null,_=new Bx(N.shape,w.shape,[1,y,n.outChannels],!0,!1,k,S,$,I),C=[N,w];if(a&&C.push(a),$&&C.push(s),I){const e=r.makeTensorInfo([],"float32",vr(o,"float32"));C.push(e),b.push(e)}const A=r.runWebGLProgram(_,C,"float32"),R=$x({inputs:{x:A},backend:r,attrs:{shape:m?[1,h,d,n.outChannels]:[1,n.outChannels,h,d]}});b.push(A);for(const e of b)r.disposeIntermediateTensorInfo(e);return R}({x:a,filter:s,convInfo:x,backend:n,bias:o,activation:m,preluActivationWeights:u,leakyreluAlpha:g});else{const e=null!=o,t=null!=u,r="leakyrelu"===m,i=m?Ex(m,!1):null,l=new Fx(x,e,i,t,r),c=[a,s];if(o&&c.push(o),u&&c.push(u),r){const e=n.makeTensorInfo([],"float32",vr(g,"float32"));c.push(e),v.push(e)}b=n.runWebGLProgram(l,c,"float32")}else b=function({x:e,filter:t,convInfo:n,backend:r,bias:a=null,preluActivationWeights:s=null,leakyreluAlpha:o=0,activation:u=null}){const l=e.shape,c=r.texData.get(e.dataId),p=n.inChannels,d=l[0]*l[1]*l[2],h=n.outChannels,f="channelsLast"===n.dataFormat;let m;const g=[],y=(1===d||1===h)&&p>1e3,x=l[2]%2!=0&&!!c.isPacked;if(!y&&j().getBool("WEBGL_LAZILY_UNPACK")&&j().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&x){const p=f?l[0]*l[1]*(l[2]+1):l[0]*l[2]*(l[3]+1),d={dataId:e.dataId,shape:[1,p,n.inChannels],dtype:e.dtype},h=c.shape;c.shape=c.shape.slice(),c.shape[c.shape.length-2]++,i(Hm(c.shape,d.shape),(()=>`packed reshape ${c.shape} to ${d.shape} isn't free`));const y=$x({inputs:{x:t},backend:r,attrs:{shape:[1,n.inChannels,n.outChannels]}});g.push(y);const x=Jx({a:d,b:y,backend:r,transposeA:!1,transposeB:!1,bias:a,activation:u,preluActivationWeights:s,leakyreluAlpha:o}),b=r.texData.get(x.dataId);i(b.isPacked,(()=>"batchMatMul result is expected to be packed")),c.shape=h,b.shape=n.outShape,m=cx({inputs:{x:x},backend:r}),m.shape=n.outShape,g.push(x)}else{const i=$x({inputs:{x:e},backend:r,attrs:{shape:[1,f?l[0]*l[1]*l[2]:l[0]*l[2]*l[3],n.inChannels]}}),c=$x({inputs:{x:t},backend:r,attrs:{shape:[1,n.inChannels,n.outChannels]}}),p=Jx({a:i,b:c,transposeA:!1,transposeB:!1,backend:r,bias:a,activation:u,preluActivationWeights:s,leakyreluAlpha:o});m=$x({inputs:{x:p},backend:r,attrs:{shape:n.outShape}}),g.push(i),g.push(c),g.push(p)}for(const e of g)r.disposeIntermediateTensorInfo(e);return m}({x:a,filter:s,convInfo:x,backend:n,bias:o,activation:m,preluActivationWeights:u,leakyreluAlpha:g});const w=$x({inputs:{x:b},backend:n,attrs:{shape:x.outShape}});return v.push(b),v.forEach((e=>n.disposeIntermediateTensorInfo(e))),w}};class tb{constructor(e,t=!1,n=null,r=!1,a=!1){this.variableNames=["x","W"],this.outputShape=e.outShape;const s=e.inHeight,o=e.inWidth,i=e.padInfo.top,u=e.padInfo.left,l=e.strideHeight,c=e.strideWidth,p=e.dilationHeight,d=e.dilationWidth,h=e.filterHeight,f=e.filterWidth,m=e.outChannels/e.inChannels;let g="",y="";n&&(g=r?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:a?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,y="result = activation(result);");const x=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),a&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${g}\n\n      const ivec2 strides = ivec2(${l}, ${c});\n      const ivec2 pads = ivec2(${i}, ${u});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${m};\n        int q = d2 - d1 * ${m};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${h}; wR++) {\n          int xR = xRCorner + wR * ${p};\n\n          if (xR < 0 || xR >= ${s}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${f}; wC++) {\n            int xC = xCCorner + wC * ${d};\n\n            if (xC < 0 || xC >= ${o}) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${x}\n        ${y}\n        setOutput(result);\n      }\n    `}}class nb{constructor(e,t=!1,n=null,r=!1,a=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e.outShape;const o=e.outChannels/e.inChannels,i=e.inHeight,u=e.inWidth,l=e.padInfo.top,c=e.padInfo.left,p=e.strideHeight,d=e.strideWidth,h=e.dilationHeight,f=e.dilationWidth,m=e.filterHeight,g=e.filterWidth,y=g;let x="\n      int xR; int xC; int xCOffset;\n      vec4 wTexel; vec4 previous; vec4 final;";for(let e=0;e<g;e++)x+=`\n          vec4 xTexelC${2*e};\n          int xTexelC${2*e}Ready;\n          vec4 xC${e};`;for(let e=0;e<m;e++){for(let e=0;e<g;e++)x+=`\n          xTexelC${2*e} = vec4(0.0);\n          xTexelC${2*e}Ready = 0;\n          xC${e} = vec4(0.0);`;x+=`\n        xR = xRCorner + ${e*h};\n        if (xR >=0 && xR < ${i}) {\n      `;for(let t=0;t<(y+1)/2;t++){const n=2*t,r=n*f;if(x+=`\n          xC = xCCorner + ${r};\n          `,1===d){if(n<g&&(c%2==1?(x+=`\n                xCOffset = xC + 1;\n                if (xCOffset >= 0 && xCOffset < ${u} && xTexelC${r}Ready == 0) {\n                  xTexelC${r} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= ${u}) {\n                    xTexelC${r}.zw = vec2(0.0);\n                  }\n                  xTexelC${r}Ready = 1;\n                }\n              `,x+=1===f&&r>0?`\n                xC${n} = vec4(xTexelC${r-2}.zw, xTexelC${r}.xy);\n                `:`\n                  xCOffset = xC + 1 - 2;\n\n                  if (xCOffset >= 0 && xCOffset < ${u}) {\n                    previous = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= ${u}) {\n                      previous.zw = vec2(0.0);\n                    }\n\n                    xC${n} = vec4(previous.zw, xTexelC${r}.xy);\n                  } else {\n                    xC${n} = vec4(0.0, 0.0, xTexelC${r}.xy);\n                  }\n                  `):x+=`\n                if (xC >= 0 && xC < ${u} && xTexelC${r}Ready == 0) {\n                  xTexelC${r} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= ${u}) {\n                    xTexelC${r}.zw = vec2(0.0);\n                  }\n                  xTexelC${r}Ready = 1;\n                }\n\n                xC${n} = xTexelC${r};\n                `,r+1<g)){const e=c%2==0?s(f):f;f%2==0&&c%2==1||f%2!=0&&c%2!=1?(x+=`\n                  xCOffset = xC + ${c%2} + ${e};\n\n                  if (xCOffset >= 0 && xCOffset < ${u} && xTexelC${r+2}Ready == 0) {\n                    xTexelC${r+2} = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= ${u}) {\n                      xTexelC${r+2}.zw = vec2(0.0);\n                    }\n                    xTexelC${r+2}Ready = 1;\n                  }\n                  `,f>1&&(x+=`\n                    xCOffset -= 2;\n                    if (xCOffset >= 0 && xCOffset < ${u} && xTexelC${r}Ready == 0) {\n                      xTexelC${r} = getX(batch, xR, xCOffset, d1);\n                      xTexelC${r}Ready = 1;\n                    }\n                    `),x+=`\n                  xC${n+1} = vec4(xTexelC${r}.zw, xTexelC${r+2}.xy);\n                  `):x+=1===e?`\n                    xC${n+1} = xTexelC${r};\n                    `:`\n                    xCOffset = xC + ${e};\n\n                    if (xCOffset >= 0 && xCOffset < ${u} && xTexelC${r+2}Ready == 0) {\n                      xTexelC${r+2} = getX(batch, xR, xCOffset, d1);\n                      if (xCOffset + 1 >= ${u}) {\n                        xTexelC${r+2}.zw = vec2(0.0);\n                      }\n                      xTexelC${r+2}Ready = 1;\n                    }\n\n                    xC${n+1} = xTexelC${r+2};\n                    `}}else r<g&&(c%2==1?(x+=`\n                xCOffset = xC + 1 - ${d};\n                if(xCOffset >= 0 && xCOffset < ${u} && xTexelC${r}Ready == 0) {\n                  xTexelC${r} = getX(batch, xR, xCOffset, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= ${u}) {\n                    xTexelC${r}.zw = vec2(0.0);\n                  }\n                  xTexelC${r}Ready = 1;\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < ${u} && xTexelC${r+2}Ready == 0) {\n                  xTexelC${r+2} = getX(batch, xR, xC + 1, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xC + 2 >= ${u}) {\n                    xTexelC${r+2}.zw = vec2(0.0);\n                  }\n                  xTexelC${r+2}Ready = 1;\n                }\n\n                xC${n} = vec4(xTexelC${r}.zw, xTexelC${r+2}.zw);\n              `,r+1<g&&(x+=`\n                  final = vec4(0.0);\n                  xCOffset = xC + 1 + ${d};\n                  if(xCOffset >= 0 && xCOffset < ${u}) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xC${n+1} = vec4(xTexelC${r+2}.xy, final.xy);\n                `)):(x+=`\n                if(xC >= 0 && xC < ${u} && xTexelC${r}Ready == 0) {\n                  xTexelC${r} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= ${u}) {\n                    xTexelC${r}.zw = vec2(0.0);\n                  }\n                  xTexelC${r}Ready = 1;\n                }\n\n                xCOffset = xC + ${d};\n                if(xCOffset >= 0 && xCOffset < ${u} && xTexelC${r+2}Ready == 0) {\n                  xTexelC${r+2} = getX(batch, xR, xCOffset, d1);\n                  if (xCOffset + 1 >= ${u}) {\n                    xTexelC${r+2}.zw = vec2(0.);\n                  }\n                  xTexelC${r+2}Ready = 1;\n                }\n\n                xC${n} = vec4(\n                  xTexelC${r}.xy, xTexelC${r+2}.xy);\n              `,r+1<g&&(x+=`\n                  xC${n+1} = vec4(xTexelC${r}.zw, xTexelC${r+2}.zw);\n                `)));n<g&&(x+=`\n            wTexel = getW(${e}, ${r}, d1, q);\n            dotProd += xC${n} * vec4(wTexel.xz, wTexel.xz);\n          `,r+1<g&&(x+=`\n              wTexel = getW(${e}, ${r+1}, d1, q);\n              dotProd += xC${n+1} * vec4(wTexel.xz, wTexel.xz);\n            `))}x+="\n        }\n      "}let b="",v="";n&&(b=r?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:a?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`vec4 activation(vec4 x) {\n          ${n}\n        }`,v="result = activation(result);");const w=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),a&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${b}\n\n      const ivec2 strides = ivec2(${p}, ${d});\n      const ivec2 pads = ivec2(${l}, ${c});\n\n      void main() {\n\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${o};\n        int q = d2 - d1 * ${o};\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n        vec4 dotProd = vec4(0.000000000000001);\n\n        ${x}\n\n        vec4 result = dotProd - vec4(0.000000000000001);\n        ${w}\n        ${v}\n        setOutput(result);\n      }\n    `}}const rb={kernelName:Ce,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,filter:s}=t,{strides:o,pad:u,dilations:l,dimRoundingMode:c}=r;let p=l;null==p&&(p=[1,1]),i(Po(o,p),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${o} and dilations '${p}'`));const d=Ao(a.shape,s.shape,o,p,u,c,!0);let h;return h=j().getBool("WEBGL_PACK_DEPTHWISECONV")&&d.strideWidth<=2&&d.outChannels/d.inChannels==1?new nb(d):new tb(d),n.runWebGLProgram(h,[a,s],"float32")}},ab="return a + b;",sb=wx({opSnippet:ab,packedOpSnippet:ab,supportsComplex:!0,cpuKernelImpl:ty}),ob={kernelName:ee,backendName:"webgl",kernelFunc:sb};class ib{constructor(e,t,n,r=!1,a=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const s=e.filterWidth,o=e.strideHeight,i=e.strideWidth,u=e.dilationHeight,l=e.dilationWidth,c=e.effectiveFilterHeight,p=e.effectiveFilterWidth,d=e.padInfo.top,h=e.padInfo.left;this.outputShape=e.outShape;const f="avg"===t,m=`((batch  * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + d`,g=`(xR * ${e.inWidth} + xC) * ${e.inChannels} + d`;let y="0.0";if(f||(y="-1.0 / 1e-20"),n){const t=">=";return void(this.userCode=`\n        const ivec2 strides = ivec2(${o}, ${i});\n        const ivec2 pads = ivec2(${d}, ${h});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${c};\n              wR += ${u}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${p};\n                wC += ${l}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value ${t} currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${r?a?m:g:`wR * ${p} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let x=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(x="avgValue / count");const b=4*Math.floor(s/4),v=s%4,w=`\n      if (${f}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec2 strides = ivec2(${o}, ${i});\n      const ivec2 pads = ivec2(${d}, ${h});\n      const float initializationValue = ${y};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${y});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${c};\n            wR += ${u}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${b}; wC += 4) {\n            int xC = xCCorner + wC * ${l};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${l}, d),\n              getValue(batch, xR, xC + 2 * ${l}, d),\n              getValue(batch, xR, xC + 3 * ${l}, d)\n            );\n\n            ${w}\n          }\n\n          int xC = xCCorner + ${b};\n          if (${1===v}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${w}\n          } else if (${2===v}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${l}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${w}\n          } else if (${3===v}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${l}, d),\n              getValue(batch, xR, xC + 2 * ${l}, d),\n              initializationValue\n            );\n\n            ${w}\n          }\n        }\n        setOutput(${x});\n      }\n    `}}const ub={kernelName:ht,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t;rg(a,"maxPool");const{filterSize:s,strides:o,pad:u,dimRoundingMode:l}=r;i(Po(o,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${o} and dilations '1'`));const c=Co(a.shape,s,o,1,u,l);if(1===c.filterWidth&&1===c.filterHeight&&d(c.inShape,c.outShape))return cx({inputs:{x:a},backend:n});const p=new ib(c,"max",!1);return n.runWebGLProgram(p,[a],a.dtype)}};class lb{constructor(e,t,n){this.variableNames=["x"],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const r=e.length,a=Qg(r),s=t.map((e=>e[0])).join(","),o=t.map(((t,n)=>t[0]+e[n])).join(","),i=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,r);this.userCode=1!==r?`\n      ${a} start = ${a}(${s});\n      ${a} end = ${a}(${o});\n      uniform float value;\n\n      void main() {\n        ${a} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(value);\n        } else {\n          ${a} coords = outC - start;\n          setOutput(getX(${i}));\n        }\n      }\n    `:`\n        int start = ${s};\n        int end = ${o};\n        uniform float value;\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(value);\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `}getCustomSetupFunc(e){return(t,n)=>{null==this.valueLoc&&(this.valueLoc=t.getUniformLocationNoThrow(n,"value")),t.gl.uniform1f(this.valueLoc,e)}}}class cb{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const r=e.length,a=Qg(r),s=t.map((e=>e[0])).join(","),o=t.map(((t,n)=>t[0]+e[n])).join(","),i=zy("rc",r),u=zy("source",r),l=`${i[r-1]} < ${this.outputShape[r-1]}`,c=1===r?"source":`vec2(${u.slice(-2).join()})`,p=[`${a} rc = outputLoc;`,`${i[r-1]} += 1;\n       if(${l}) {\n      `,1===r?"":`}\n       rc = outputLoc;\n       ${i[r-2]} += 1;\n       if(${i[r-2]} < ${this.outputShape[r-2]}) {`,1===r?"":`  ${i[r-1]} += 1;\n         if(${l}) {`],d=1===r?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))";let h="";for(let e=0,t=1===r?2:4;e<t;e++)h+=`\n        ${p[e]}\n        if (${d}) {\n          result[${e}] = float(value);\n        } else {\n          ${a} source = rc - start;\n          result[${e}] = getChannel(getX(${u.join()}), ${c});\n        }\n      `;h+=1===r?"} ":"}}",this.userCode=`\n      const ${a} start = ${a}(${s});\n      const ${a} end = ${a}(${o});\n      uniform float value;\n\n      void main() {\n        ${a} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${h}\n        setOutput(result);\n      }\n    `}getCustomSetupFunc(e){return(t,n)=>{null==this.valueLoc&&(this.valueLoc=t.getUniformLocationNoThrow(n,"value")),t.gl.uniform1f(this.valueLoc,e)}}}const pb={kernelName:_t,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{paddings:s,constantValue:o}=r,i=j().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new cb(a.shape,s,o):new lb(a.shape,s,o),u=i.getCustomSetupFunc(o);return n.runWebGLProgram(i,[a],a.dtype,u)}},db=vx({opSnippet:"return 1.0 / (1.0 + exp(-1.0 * x));"}),hb={kernelName:Xt,backendName:"webgl",kernelFunc:db};class fb{constructor(e,t,n,r,a){this.variableNames=["A"],this.outputShape=[];const[s,o,i,u]=e;this.outputShape=[s,t,n,u];const l=[r&&t>1?o-1:o,r&&n>1?i-1:i],c=[r&&t>1?t-1:t,r&&n>1?n-1:n];let p;p=a?"(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${l[0]/c[0]},\n          ${l[1]/c[1]});\n      const vec2 inputShapeRC = vec2(${o}.0, ${i}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${p};\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `}}class mb{constructor(e,t,n,r,a){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[s,o,i,u]=e;this.outputShape=[s,t,n,u];const l=[r&&t>1?o-1:o,r&&n>1?i-1:i],c=[r&&t>1?t-1:t,r&&n>1?n-1:n];let p;p=a?"(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${l[0]/c[0]},\n          ${l[1]/c[1]},\n          ${l[1]/c[1]});\n      const vec3 inputShapeRC = vec3(${o}.0, ${i}.0,\n                                     ${i}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${p};\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${u-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `}}const gb={kernelName:Bt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:a}=t,{alignCorners:s,halfPixelCenters:o,size:i}=r,[u,l]=i,c=j().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new mb(a.shape,u,l,s,o):new fb(a.shape,u,l,s,o);return n.runWebGLProgram(c,[a],"float32")}},yb="return a - b;",xb=wx({opSnippet:yb,packedOpSnippet:yb,supportsComplex:!0,cpuKernelImpl:Fy}),bb={kernelName:hn,backendName:"webgl",kernelFunc:xb},vb=vx({opSnippet:"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : x;\n",packedOpSnippet:"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),wb={kernelName:Dt,backendName:"webgl",kernelFunc:vb};class Eb{constructor(e,t,n){this.variableNames=["x"],this.outputShape=n;const r=n.length,a=Qg(n.length),s=Qg(n.length);let o="";if(1===r)o="coords * strides + begin";else{let e=0;o=n.map(((t,r)=>(e++,1===n.length?`coords * strides[${r}] + begin[${r}]`:`coords[${e-1}] * strides[${r}] + begin[${r}]`))).join(",")}this.userCode=`\n      ${a} begin = ${a}(${e});\n      ${a} strides = ${a}(${t});\n\n      void main() {\n        ${s} coords = getOutputCoords();\n        setOutput(getX(${o}));\n      }\n    `}}class Tb{constructor(e){this.variableNames=["source"],this.outputShape=e,this.rank=e.length;const t=Qg(this.rank),n=`uniform int start[${this.rank}];`,r=function(e){if(1===e)return"sourceLoc";if(e<=6)return Nb.slice(0,e).map((e=>"sourceLoc."+e)).join(",");throw Error(`Slicing for rank ${e} is not yet supported`)}(this.rank);let a;a=`\n        ${t} sourceLoc;\n        ${t} coords = getOutputCoords();\n        ${e.map(((e,t)=>`sourceLoc.${Nb[t]} = start[${t}] + coords.${Nb[t]};`)).join("\n")}\n      `,this.userCode=`\n      ${n}\n      void main() {\n        ${a}\n        setOutput(getSource(${r}));\n      }\n    `}getCustomSetupFunc(e){if(e.length!==this.rank)throw Error(`The rank (${this.rank}) of the program must match the length of start (${e.length})`);return(t,n)=>{null==this.startLoc&&(this.startLoc=t.getUniformLocationNoThrow(n,"start"),null==this.startLoc)||t.gl.uniform1iv(this.startLoc,e)}}}const Nb=["x","y","z","w","u","v"];class kb{constructor(e){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.rank=e.length;const t=Qg(this.rank),n=zy("coords",this.rank),r=zy("sourceLoc",this.rank),a=1===this.rank?"sourceLoc":`vec2(${r.slice(-2).join()})`,s=`getChannel(getSource(${r.join()}), ${a})`,o=`\n      result.x = ${s};\n      if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n        ++${r[this.rank-1]};\n        result.y = ${s};\n        --${r[this.rank-1]};\n      }\n    `,i=1===this.rank?"":`\n      --${n[this.rank-1]};\n      if (++${n[this.rank-2]} < ${e[this.rank-2]}) {\n        ++${r[this.rank-2]};\n        result.z = ${s};\n        if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n          ++${r[this.rank-1]};\n          result.w = ${s};\n        }\n      }\n    `,u=this.rank<=4?`sourceLoc = coords +\n            ${t}(${e.map(((e,t)=>`start[${t}]`)).join()});`:e.map(((e,t)=>`${r[t]} = ${n[t]} + start[${t}];`)).join("\n");this.userCode=`\n      uniform int start[${this.rank}];\n      void main() {\n        ${t} coords = getOutputCoords();\n        ${t} sourceLoc;\n        ${u}\n        vec4 result = vec4(0.);\n        ${o}\n        ${i}\n        setOutput(result);\n      }\n    `}getCustomSetupFunc(e){if(e.length!==this.rank)throw Error(`The rank (${this.rank}) of the program must match the length of start (${e.length})`);return(t,n)=>{null==this.startLoc&&(this.startLoc=t.getUniformLocationNoThrow(n,"start"),null==this.startLoc)||t.gl.uniform1iv(this.startLoc,e)}}}function $b(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{begin:s,size:o}=r,[i,u]=Ks(a,s,o);if(Os(a,i,u),0===p(u))return n.makeTensorInfo(u,a.dtype,[]);if(n.shouldExecuteOnCPU([a])||"string"===a.dtype){const e=n.texData.get(a.dataId),t=Sy(e.values,i,u,a.shape,a.dtype);return n.makeTensorInfo(u,a.dtype,t)}const{isPacked:l}=n.texData.get(a.dataId),c=Hs(a.shape,i,u);if(l||!c){const e=j().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new kb(u):new Tb(u),t=e.getCustomSetupFunc(i);return n.runWebGLProgram(e,[a],a.dtype,t)}return n.uploadToGPU(a.dataId),function(e,t,n,r){const a=r.texData.get(e.dataId),s=r.makeTensorInfo(n,e.dtype),o=r.texData.get(s.dataId);Object.assign(o,a),o.refCount=1,o.shape=n,o.dtype=e.dtype;let i=js(t,M(e.shape));a.slice&&(i+=a.slice.flatOffset),o.slice={flatOffset:i,origDataId:a.slice&&a.slice.origDataId||e.dataId};const u=r.dataRefCount.get(o.slice.origDataId)||1;return r.dataRefCount.set(o.slice.origDataId,u+1),s}(a,i,u,n)}const Ib={kernelName:jt,backendName:"webgl",kernelFunc:$b};const Sb={kernelName:ln,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{begin:s,end:o,strides:i,beginMask:u,endMask:l,ellipsisMask:c,newAxisMask:p,shrinkAxisMask:d}=r,{nonStrided:h,$begin:f,$strides:m,size:g,newShape:y,outShape:x}=qs(a.shape,s,o,i,u,l,c,p,d),b=$x({inputs:{x:a},backend:n,attrs:{shape:y}});let v;if(h){const e=$b({inputs:{x:b},backend:n,attrs:{begin:f,size:g}});v=$x({inputs:{x:e},backend:n,attrs:{shape:x}}),n.disposeIntermediateTensorInfo(e)}else if(x.some((e=>0===e)))v=n.makeTensorInfo(x,a.dtype,[]);else{if(n.shouldExecuteOnCPU([b])){const e=n.texData.get(b.dataId).values,t=ri(b.shape,b.dtype,e),r=Ry(x,t,m,f);v=n.makeTensorInfo(x,b.dtype,r.values)}else{const e=new Eb(f,m,x);v=n.runWebGLProgram(e,[b],b.dtype)}}const w=$x({inputs:{x:v},backend:n,attrs:{shape:x}});return n.disposeIntermediateTensorInfo(b),n.disposeIntermediateTensorInfo(v),w}};class _b{constructor(e){this.outputShape=[],this.outputShape=Wp(e,1),this.variableNames=e.map(((e,t)=>`T${t}`));const t=new Array(e.length-1);t[0]=e[0][1];for(let n=1;n<t.length;n++)t[n]=t[n-1]+e[n][1];const n=[`if (yC < ${t[0]}) setOutput(getT0(yR, yC));`];for(let e=1;e<t.length;e++){const r=t[e-1];n.push(`else if (yC < ${t[e]}) setOutput(getT${e}(yR, yC-${r}));`)}const r=t.length,a=t[t.length-1];n.push(`else setOutput(getT${r}(yR, yC-${a}));`),this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${n.join("\n        ")}\n      }\n    `}}class Cb{constructor(e,t){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=Wp(e,t);const n=this.outputShape,r=n.length,a=Qg(r),s=zy("coords",r),o=["x","y","z","w","u","v"].slice(0,r);this.variableNames=e.map(((e,t)=>`T${t}`));const i=new Array(e.length-1);i[0]=e[0][t];for(let n=1;n<i.length;n++)i[n]=i[n-1]+e[n][t];const u=o[t],l=o.slice(-2),c=o.join();let p=`if (${u} < ${i[0]}) {\n        return getChannel(\n            getT0(${c}), vec2(${l.join()}));\n        }`;for(let e=1;e<i.length;e++){const t=i[e-1];p+=`\n        if (${u} < ${i[e]}  && ${u} >= ${i[e-1]}) {\n          return getChannel(\n            getT${e}(${Ab(o,u,t)}),\n            vec2(${Ab(l,u,t)}));\n        }`}const d=i.length,h=i[i.length-1];p+=`\n        return getChannel(\n          getT${d}(${Ab(o,u,h)}),\n          vec2(${Ab(l,u,h)}));`,this.userCode=`\n      float getValue(${o.map((e=>"int "+e))}) {\n        ${p}\n      }\n\n      void main() {\n        ${a} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${s}), 0., 0., 0.);\n\n        ${s[r-1]} = ${s[r-1]} + 1;\n        if (${s[r-1]} < ${n[r-1]}) {\n          result.g = getValue(${s});\n        }\n\n        ${s[r-2]} = ${s[r-2]} + 1;\n        if (${s[r-2]} < ${n[r-2]}) {\n          result.a = getValue(${s});\n        }\n\n        ${s[r-1]} = ${s[r-1]} - 1;\n        if (${s[r-2]} < ${n[r-2]} &&\n            ${s[r-1]} < ${n[r-1]}) {\n          result.b = getValue(${s});\n        }\n        setOutput(result);\n      }\n    `}}function Ab(e,t,n){const r=e.indexOf(t);return e.map(((e,t)=>t===r?`${e} - ${n}`:e)).join()}function Rb(e){const{inputs:t,backend:n}=e,{input:r}=t;return cx({inputs:{x:n.texData.get(r.dataId).complexTensorInfos.imag},backend:n})}function Ob(e,t,n){const r=e[0].dtype;if("complex64"===r){const r=e.map((e=>Nx({inputs:{input:e},backend:n}))),a=e.map((e=>Rb({inputs:{input:e},backend:n}))),s=Ob(r,t,n),o=Ob(a,t,n),i=dx({inputs:{real:s,imag:o},backend:n});return r.forEach((e=>n.disposeIntermediateTensorInfo(e))),a.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(o),i}let a=n.shouldExecuteOnCPU(e);if("string"===r&&(a=!0),a){const a=e.map((e=>{const r=p(e.shape.slice(t));return $x({inputs:{x:e},backend:n,attrs:{shape:[-1,r]}})})),s=a.map((e=>({vals:n.readSync(e.dataId),shape:e.shape}))),o=Wp(a.map((e=>e.shape)),1),i=1===a[0].shape[0],u=sy(s,o,r,i),l=Wp(e.map((e=>e.shape)),t),c=n.makeTensorInfo(l,r,u);return a.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}if(e.length>j().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER")){const r=Math.floor(e.length/2),a=Ob(e.slice(0,r),t,n),s=Ob(e.slice(r),t,n),o=Ob([a,s],t,n);return n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(s),o}if(j().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&e[0].shape.length>1){const a=new Cb(e.map((e=>e.shape)),t);return n.runWebGLProgram(a,e,r)}const{tensors2D:s,outShape:o}=function(e,t,n){const r=Wp(e.map((e=>e.shape)),t);return{tensors2D:e.map((e=>$x({inputs:{x:e},attrs:{shape:[-1,p(e.shape.slice(t))]},backend:n}))),outShape:r}}(e,t,n),i=new _b(s.map((e=>e.shape))),u=n.runWebGLProgram(i,s,r);s.forEach((e=>n.disposeIntermediateTensorInfo(e)));const l=$x({inputs:{x:u},attrs:{shape:o},backend:n});return n.disposeIntermediateTensorInfo(u),l}function Mb(e){const{inputs:t,backend:n,attrs:r}=e,{axis:a}=r,s=x(a,t[0].shape)[0],o=Wp(t.map((e=>e.shape)),s);if(0===p(o))return n.makeTensorInfo(o,t[0].dtype,[]);const i=t.filter((e=>p(e.shape)>0));if(1===i.length)return cx({inputs:{x:i[0]},backend:n});return zp(i.map((e=>e.shape)),s),Ob(i,s,n)}const Db={kernelName:be,backendName:"webgl",kernelFunc:Mb};const Fb={kernelName:St,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{axis:a}=r;if(1===t.length)return Sx({inputs:{input:t[0]},backend:n,attrs:{dim:a}});const s=t[0].shape,o=t[0].dtype;t.forEach((e=>{u(s,e.shape,"All tensors passed to stack must have matching shapes"),i(o===e.dtype,(()=>"All tensors passed to stack must have matching dtypes"))}));const l=[],c=Mb({inputs:t.map((e=>{const t=Sx({inputs:{input:e},backend:n,attrs:{dim:a}});return l.push(t),t})),backend:n,attrs:{axis:a}});return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}},Lb=Uc;const Bb={kernelName:Tt,backendName:"webgl",kernelFunc:function(e){jp("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:r}=e,{boxes:a,scores:s}=t,{maxOutputSize:o,iouThreshold:i,scoreThreshold:u}=r,l=n.readSync(a.dataId),c=n.readSync(s.dataId),{selectedIndices:p}=Lb(l,c,o,i,u);return n.makeTensorInfo([p.length],"int32",new Int32Array(p))}};Mn(Oh),Mn(If),Mn(Sf),Mn(_f),Mn(Rf),Mn(Gf),Mn(Hf),Mn(Ph),Mn(Lf),Mn(Kf),Mn(qf),Mn(kf),Mn(Ch),Mn(zf),Mn(Xf),Mn(Ef),Mn(Pf),Mn(Yf),Mn(em),Mn(Jf),Mn(ff),Mn(sf),Mn(nm),Mn(ux),Mn(kx),Mn(_x),Mn(Ax),Mn(Ox),Mn(Dx),Mn(eb),Mn(rb),Mn(ob),Mn(bx),Mn(ub),Mn(pb),Mn(Ix),Mn(px),Mn(hb),Mn(gb),Mn(bb),Mn(wb),Mn(Sb),Mn(Fb),Mn(Db),Mn(Ib),Mn(Gx),Mn(Bb);var Pb=Object.freeze({__proto__:null,AdadeltaOptimizer:Rp,AdagradOptimizer:Op,AdamOptimizer:Mp,AdamaxOptimizer:Dp,MomentumOptimizer:Lp,Optimizer:Ap,RMSPropOptimizer:Bp,SGDOptimizer:Fp,Tensor:Br,TensorBuffer:Mr,Variable:Pr,get Rank(){return Vr},sumOutType:Kr,upcastType:jr,get Reduction(){return ip},customGrad:ru,grad:function(e){return i(R(e),(()=>"The f passed in grad(f) must be a function")),(t,n)=>{const r=da(t,"x","tf.grad","string_or_numeric"),a=null!=n?da(n,"dy","tf.grad"):null;return ra.tidy((()=>{const{value:t,grads:n}=ra.gradients((()=>e(r)),[r],a);return null!=a&&u(t.shape,a.shape,"The shape of dy passed in grad(f)(x, dy) must match the shape returned by f(x)"),au(n),n[0]}))}},grads:function(e){return i(R(e),(()=>"The f passed in grads(f) must be a function")),(t,n)=>{i(Array.isArray(t),(()=>"The args passed in grads(f)(args) must be an array of `Tensor`s or `TensorLike`s"));const r=ha(t,"args","tf.grads","string_or_numeric"),a=null!=n?da(n,"dy","tf.grads"):null;return ra.tidy((()=>{const{value:t,grads:n}=ra.gradients((()=>e(...r)),r,a);return null!=a&&u(t.shape,a.shape,"The shape of dy passed in grads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),au(n),n}))}},valueAndGrad:function(e){return i(R(e),(()=>"The f passed in valueAndGrad(f) must be a function")),(t,n)=>{i(t instanceof Br,(()=>"The x passed in valueAndGrad(f)(x) must be a tensor")),i(null==n||n instanceof Br,(()=>"The dy passed in valueAndGrad(f)(x, dy) must be a tensor"));const{grads:r,value:a}=ra.gradients((()=>e(t)),[t],n);return au(r),{grad:r[0],value:a}}},valueAndGrads:function(e){return i(R(e),(()=>"The f passed in valueAndGrads(f) must be a function")),(t,n)=>{i(Array.isArray(t)&&t.every((e=>e instanceof Br)),(()=>"The args passed in valueAndGrads(f)(args) must be array of tensors")),i(null==n||n instanceof Br,(()=>"The dy passed in valueAndGrads(f)(args, dy) must be a tensor"));const r=ra.gradients((()=>e(...t)),t,n);return null!=n&&u(r.value.shape,n.shape,"The shape of dy passed in valueAndGrads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),au(r.grads),r}},variableGrads:nu,Environment:G,env:j,get ENV(){return q},nextFrame:function(){return new Promise((e=>Up((()=>e()))))},KernelBackend:t,DataStorage:e,abs:yo,acos:xo,acosh:bo,add:ho,addN:vo,all:wo,any:Eo,argMax:To,argMin:No,asin:ko,asinh:$o,atan:Io,atan2:So,atanh:_o,avgPool:zo,avgPool3d:Wo,basicLSTMCell:Xo,batchToSpaceND:Yo,batchNorm:Qo,batchNorm2d:Zo,batchNorm3d:Jo,batchNorm4d:ei,bincount:ti,broadcastTo:ni,buffer:ri,cast:ms,ceil:ai,clipByValue:si,clone:Go,complex:ga,concat:Ho,concat1d:oi,concat2d:ii,concat3d:ui,concat4d:li,conv1d:pi,conv2d:ci,conv2dTranspose:hi,conv3d:fi,conv3dTranspose:gi,cos:yi,cosh:xi,cumsum:bi,denseBincount:vi,depthToSpace:wi,depthwiseConv2d:Ei,diag:Ti,dilation2d:Ni,div:mo,divNoNan:Ai,dot:Ri,einsum:Oi,elu:Mi,equal:Si,erf:Di,exp:Fi,expandDims:Li,expm1:Bi,eye:Vi,fill:Ui,floor:zi,floorDiv:fo,gather:Wi,greater:Gi,greaterEqual:Hi,imag:ji,isFinite:Ki,isInf:qi,isNaN:Xi,leakyRelu:Yi,less:Qi,lessEqual:Zi,linspace:function(e,t,n){if(n<=0)throw new Error("The number of values should be positive.");const r={start:e,stop:t,num:n};return ra.runKernel(ot,{},r)},localResponseNormalization:Ji,log:eu,log1p:tu,logSigmoid:iu,logSoftmax:pu,logSumExp:bu,logicalAnd:vu,logicalNot:wu,logicalOr:Eu,logicalXor:Tu,matMul:gs,max:uu,maxPool:Nu,maxPool3d:ku,maxPoolWithArgmax:$u,maximum:Iu,mean:Su,meshgrid:function(e,t,{indexing:n="xy"}={}){if("xy"!==n&&"ij"!==n)throw new TypeError(`${n} is not a valid third argument to meshgrid`);if(void 0===e)return[];let r=da(e,"x","meshgrid",e instanceof Br?e.dtype:"float32");if(void 0===t)return[r];let a=da(t,"y","meshgrid",t instanceof Br?t.dtype:"float32");const s=p(r.shape),o=p(a.shape);return"xy"===n?(r=Uo(r,[1,-1]),a=Uo(a,[-1,1]),[gs(Cu([o,1],r.dtype),r),gs(a,Cu([1,s],a.dtype))]):(r=Uo(r,[-1,1]),a=Uo(a,[1,-1]),[gs(r,Cu([1,o],r.dtype)),gs(Cu([s,1],a.dtype),a)])},min:Au,minimum:Ru,mirrorPad:Ou,mod:Mu,moments:Fu,mul:go,multiRNNCell:Lu,multinomial:Bu,neg:su,notEqual:Pu,oneHot:ys,ones:Cu,onesLike:Vu,outerProduct:Uu,pad:zu,pad1d:Wu,pad2d:Gu,pad3d:Hu,pad4d:ju,pool:qu,pow:Xu,prelu:Yu,print:Qu,prod:Zu,rand:Ju,randomGamma:fl,randomNormal:ml,randomUniform:gl,range:yl,real:xl,reciprocal:bl,relu:vl,relu6:wl,reshape:Uo,reverse:El,reverse1d:Tl,reverse2d:Nl,reverse3d:kl,reverse4d:$l,round:Il,rsqrt:Sl,scalar:_l,selu:Cl,separableConv2d:Al,setdiff1dAsync:Rl,sigmoid:jo,sign:Ol,sin:Ml,sinh:Dl,slice:Ko,slice1d:Fl,slice2d:Ll,slice3d:Bl,slice4d:Pl,softmax:Vl,softplus:ou,spaceToBatchND:Ku,fft:Ul,ifft:zl,irfft:Wl,rfft:Hl,split:Gl,sqrt:jl,square:Du,squaredDifference:Kl,squeeze:ql,stack:Xl,step:Yl,stridedSlice:Ql,sub:lu,sum:cu,tan:Zl,tanh:qo,tensor:xa,tensor1d:Jl,tensor2d:ec,tensor3d:ws,tensor4d:function(e,t,n){if(l(e),null!=t&&4!==t.length)throw new Error("tensor4d() requires shape to have four numbers");const r=la(e,n);if(4!==r.length&&1!==r.length)throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");return ya(e,t,r,n)},tensor5d:function(e,t,n){if(l(e),null!=t&&5!==t.length)throw new Error("tensor5d() requires shape to have five numbers");const r=la(e,n);if(5!==r.length&&1!==r.length)throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");return ya(e,t,r,n)},tensor6d:function(e,t,n){if(l(e),null!=t&&6!==t.length)throw new Error("tensor6d() requires shape to have six numbers");const r=la(e,n);if(6!==r.length&&1!==r.length)throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");return ya(e,t=t||r,r,n)},tile:Pi,topk:tc,truncatedNormal:nc,unique:rc,unsortedSegmentSum:ac,unstack:sc,variable:function(e,t=!0,n,r){return ra.makeVariable(e,t,n,r)},where:_i,whereAsync:ic,zeros:_u,zerosLike:Ci,op:ma,OP_SCOPE_SUFFIX:fa,booleanMaskAsync:uc,transpose:xs,norm:cc,movingAverage:pc,scatterND:dc,sparseToDense:hc,gatherND:fc,dropout:mc,enclosingPowerOfTwo:gc,cosineWindow:yc,inTopKAsync:xc,image:$p,linalg:Ip,losses:Sp,spectral:Np,fused:_c,signal:kp,sparse:_p,string:Cp,train:Vp,enableProdMode:function(){j().set("PROD",!0)},enableDebugMode:function(){j().set("DEBUG",!0)},disableDeprecationWarnings:function(){j().set("DEPRECATION_WARNINGS_ENABLED",!1),console.warn("TensorFlow.js deprecation warnings have been disabled.")},deprecationWarn:so,disposeVariables:function(){ra.disposeVariables()},engine:oo,memory:function(){return ra.memory()},profile:function(e){return ra.profile(e)},tidy:io,dispose:uo,keep:lo,time:function(e){return ra.time(e)},setBackend:function(e){return ra.setBackend(e)},ready:function(){return ra.ready()},getBackend:co,removeBackend:function(e){ra.removeBackend(e)},findBackend:function(e){return ra.findBackend(e)},findBackendFactory:function(e){return ra.findBackendFactory(e)},registerBackend:po,backend:function(){return ra.backend},setPlatform:function(e,t){j().setPlatform(e,t)},getKernel:An,getGradient:Rn,getKernelsForBackend:On,registerKernel:Mn,registerGradient:function(e){const{kernelName:t}=e;Cn.has(t)&&j().getBool("DEBUG")&&console.warn(`Overriding the gradient for '${t}'`),Cn.set(t,e)},unregisterKernel:function(e,t){const n=Dn(e,t);if(!_n.has(n))throw new Error(`The kernel '${e}' for backend '${t}' is not registered`);_n.delete(n)},unregisterGradient:function(e){if(!Cn.has(e))throw new Error(`The gradient '${e}' for backend is not registered`);Cn.delete(e)},copyRegisteredKernels:function(e,t){On(e).forEach((e=>{Mn(Object.assign({},e,{backendName:t}))}))},Abs:Q,Acos:Z,Acosh:J,Add:ee,AddN:te,All:"All",Any:"Any",ArgMax:ne,ArgMin:re,Asin:ae,Asinh:se,Atan:oe,Atanh:ie,Atan2:ue,AvgPool:le,AvgPoolGrad:"AvgPoolGrad",AvgPool3D:ce,AvgPool3DGrad:"AvgPool3DGrad",BatchMatMul:pe,BatchToSpaceND:de,Bincount:he,BroadcastTo:"BroadcastTo",Cast:fe,Ceil:me,ClipByValue:ge,Complex:ye,ComplexAbs:xe,Concat:be,Conv2D:ve,Conv2DBackpropFilter:we,Conv2DBackpropInput:Ee,Conv3D:Te,Conv3DBackpropFilterV2:"Conv3DBackpropFilterV2",Conv3DBackpropInputV2:Ne,Cos:"Cos",Cosh:ke,Cumsum:$e,CropAndResize:Ie,DenseBincount:Se,DepthToSpace:_e,DepthwiseConv2dNative:Ce,DepthwiseConv2dNativeBackpropFilter:Ae,DepthwiseConv2dNativeBackpropInput:Re,Diag:Oe,Dilation2D:Me,Dilation2DBackpropInput:"Dilation2DBackpropInput",Dilation2DBackpropFilter:"Dilation2DBackpropFilter",RealDiv:De,Einsum:Fe,Elu:Le,EluGrad:"EluGrad",Erf:"Erf",Equal:Be,Exp:Pe,ExpandDims:Ve,Expm1:Ue,FFT:"FFT",Fill:ze,FlipLeftRight:We,Floor:Ge,FloorDiv:He,FusedBatchNorm:je,GatherV2:Ke,GatherNd:qe,Greater:Xe,GreaterEqual:Ye,Identity:Qe,IFFT:Ze,Imag:Je,IsFinite:et,IsInf:tt,IsNan:nt,LeakyRelu:rt,Less:at,LessEqual:st,LinSpace:ot,Log:it,Log1p:ut,LogicalAnd:lt,LogicalNot:ct,LogicalOr:pt,LogSoftmax:"LogSoftmax",LRN:"LRN",LRNGrad:"LRNGrad",Max:"Max",Maximum:dt,MaxPool:ht,MaxPoolGrad:"MaxPoolGrad",MaxPool3D:ft,MaxPool3DGrad:"MaxPool3DGrad",MaxPoolWithArgmax:mt,Mean:gt,Min:"Min",Minimum:yt,MirrorPad:xt,Mod:"Mod",Multinomial:bt,Multiply:vt,Neg:wt,NotEqual:Et,NonMaxSuppressionV3:Tt,NonMaxSuppressionV4:Nt,NonMaxSuppressionV5:kt,OnesLike:$t,OneHot:It,Pack:St,PadV2:_t,Pool:"Pool",Pow:"Pow",Prelu:Ct,Prod:At,Range:Rt,Real:Ot,Reciprocal:Mt,Relu:Dt,Reshape:Ft,ResizeNearestNeighbor:Lt,ResizeNearestNeighborGrad:"ResizeNearestNeighborGrad",ResizeBilinear:Bt,ResizeBilinearGrad:"ResizeBilinearGrad",Relu6:Pt,Reverse:Vt,Round:Ut,Rsqrt:zt,ScatterNd:Wt,Select:Gt,Selu:Ht,Slice:jt,Sin:"Sin",Sinh:Kt,Sign:qt,Sigmoid:Xt,Softplus:Yt,Sqrt:Qt,Sum:Zt,SpaceToBatchND:Jt,SplitV:en,Softmax:tn,SparseFillEmptyRows:nn,SparseReshape:rn,SparseSegmentMean:an,SparseSegmentSum:sn,SparseToDense:on,SquaredDifference:un,Square:"Square",StridedSlice:ln,StringNGrams:cn,StringSplit:pn,StringToHashBucketFast:dn,Sub:hn,Tan:"Tan",Tanh:fn,Tile:mn,TopK:gn,Transform:yn,Transpose:xn,Unique:bn,Unpack:vn,UnsortedSegmentSum:wn,ZerosLike:En,Step:Tn,FromPixels:Nn,RotateWithOffset:kn,_FusedMatMul:$n,FusedConv2D:In,FusedDepthwiseConv2D:Sn,version_core:"3.7.0",browser:$s,io:fs,math:vs,serialization:Js,test_util:ao,util:kr,backend_util:ed,tensor_util:Zr,slice_util:Xs,gather_util:Ss,scatter_util:Rs,device_util:ia,kernel_impls:td,GraphModel:vh,loadGraphModel:wh,deregisterOp:function(e){delete ud[e]},registerOp:function(e,t){const n={tfOpName:e,category:"custom",inputs:[],attrs:[],customExecutor:t};ud[e]=n},version_converter:"3.7.0",MathBackendCPU:Nh,version_cpu:"3.7.0",shared:Tf,version_webgl:"3.7.0",MathBackendWebGL:rx,setWebGLContext:sm,GPGPUContext:Pg,gpgpu_util:Bg,webgl_util:ag,forceHalfFloat:ax,webgl:sx}),Vb=function(){return(Vb=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e}).apply(this,arguments)};function Ub(e,t,n,r){return new(n||(n=Promise))((function(a,s){function o(e){try{u(r.next(e))}catch(e){s(e)}}function i(e){try{u(r.throw(e))}catch(e){s(e)}}function u(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,i)}u((r=r.apply(e,t||[])).next())}))}function zb(e,t){var n,r,a,s,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return s={next:i(0),throw:i(1),return:i(2)},"function"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function i(s){return function(i){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(a=2&s[0]?r.return:s[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,s[1])).done)return a;switch(r=0,a&&(s=[2&s[0],a.value]),s[0]){case 0:case 1:a=s;break;case 4:return o.label++,{value:s[1],done:!1};case 5:o.label++,r=s[1],s=[0];continue;case 7:s=o.ops.pop(),o.trys.pop();continue;default:if(!((a=(a=o.trys).length>0&&a[a.length-1])||6!==s[0]&&2!==s[0])){o=0;continue}if(3===s[0]&&(!a||s[1]>a[0]&&s[1]<a[3])){o.label=s[1];break}if(6===s[0]&&o.label<a[1]){o.label=a[1],a=s;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(s);break}a[2]&&o.ops.pop(),o.trys.pop();continue}s=t.call(e,o)}catch(e){s=[6,e],r=0}finally{n=a=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,i])}}}function Wb(e,t,n,r){return new(n||(n=Promise))((function(a,s){function o(e){try{u(r.next(e))}catch(e){s(e)}}function i(e){try{u(r.throw(e))}catch(e){s(e)}}function u(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,i)}u((r=r.apply(e,t||[])).next())}))}function Gb(e,t){var n,r,a,s,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return s={next:i(0),throw:i(1),return:i(2)},"function"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function i(s){return function(i){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(a=2&s[0]?r.return:s[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,s[1])).done)return a;switch(r=0,a&&(s=[2&s[0],a.value]),s[0]){case 0:case 1:a=s;break;case 4:return o.label++,{value:s[1],done:!1};case 5:o.label++,r=s[1],s=[0];continue;case 7:s=o.ops.pop(),o.trys.pop();continue;default:if(!(a=(a=o.trys).length>0&&a[a.length-1])&&(6===s[0]||2===s[0])){o=0;continue}if(3===s[0]&&(!a||s[1]>a[0]&&s[1]<a[3])){o.label=s[1];break}if(6===s[0]&&o.label<a[1]){o.label=a[1],a=s;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(s);break}a[2]&&o.ops.pop(),o.trys.pop();continue}s=t.call(e,o)}catch(e){s=[6,e],r=0}finally{n=a=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,i])}}}var Hb=function(e){return{startEndTensor:e,startPoint:Ko(e,[0,0],[-1,2]),endPoint:Ko(e,[0,2],[-1,2])}},jb={strides:[8,16],anchors:[2,6]};function Kb(e,t){var n,r,a;if(e.topLeft instanceof Br&&e.bottomRight instanceof Br){var s=io((function(){return[Ho([Ko(lu(t-1,e.topLeft),0,1),Ko(e.topLeft,1,1)]),Ho([lu(t-1,Ko(e.bottomRight,0,1)),Ko(e.bottomRight,1,1)])]}));n=s[0],r=s[1],null!=e.landmarks&&(a=io((function(){var n=lu(Jl([t-1,0]),e.landmarks),r=Jl([1,-1]);return go(n,r)})))}else{var o=e.topLeft,i=o[0],u=o[1],l=e.bottomRight,c=l[0],p=l[1];n=[t-1-i,u],r=[t-1-c,p],null!=e.landmarks&&(a=e.landmarks.map((function(e){return[t-1-e[0],e[1]]})))}var d={topLeft:n,bottomRight:r};return null!=a&&(d.landmarks=a),null!=e.probability&&(d.probability=e.probability instanceof Br?e.probability.clone():e.probability),d}function qb(e,t){return io((function(){var n;return n=e.hasOwnProperty("box")?e.box:e,ql(function(e,t){var n=go(e.startPoint,t),r=go(e.endPoint,t),a=ii([n,r],1);return Hb(a)}(n,t).startEndTensor)}))}var Xb=function(){function e(e,t,n,r,a,s){this.blazeFaceModel=e,this.width=t,this.height=n,this.maxFaces=r,this.anchorsData=function(e,t,n){for(var r=[],a=0;a<n.strides.length;a++)for(var s=n.strides[a],o=Math.floor((t+s-1)/s),i=Math.floor((e+s-1)/s),u=n.anchors[a],l=0;l<o;l++)for(var c=s*(l+.5),p=0;p<i;p++)for(var d=s*(p+.5),h=0;h<u;h++)r.push([d,c]);return r}(t,n,jb),this.anchors=ec(this.anchorsData),this.inputSizeData=[t,n],this.inputSize=Jl([t,n]),this.iouThreshold=a,this.scoreThreshold=s}return e.prototype.getBoundingBoxes=function(e,t,n){return void 0===n&&(n=!0),Wb(this,void 0,void 0,(function(){var r,a,s,o,i,u,l,c,p,d,h,f,m,g,y=this;return Gb(this,(function(x){switch(x.label){case 0:return r=io((function(){var t=$p.resizeBilinear(e,[y.width,y.height]),n=go(lu(mo(t,255),.5),2),r=y.blazeFaceModel.predict(n),a=ql(r),s=function(e,t,n){var r=Ko(e,[0,1],[-1,2]),a=ho(r,t),s=Ko(e,[0,3],[-1,2]),o=mo(s,n),i=mo(a,n),u=mo(o,2),l=lu(i,u),c=ho(i,u),p=go(l,n),d=go(c,n);return ii([p,d],1)}(a,y.anchors,y.inputSize),o=Ko(a,[0,0],[-1,1]);return[a,s,ql(jo(o))]})),a=r[0],s=r[1],o=r[2],i=console.warn,console.warn=function(){},u=$p.nonMaxSuppression(s,o,this.maxFaces,this.iouThreshold,this.scoreThreshold),console.warn=i,[4,u.array()];case 1:return l=x.sent(),u.dispose(),c=l.map((function(e){return Ko(s,[e,0],[1,-1])})),t?[3,3]:[4,Promise.all(c.map((function(e){return Wb(y,void 0,void 0,(function(){var t;return Gb(this,(function(n){switch(n.label){case 0:return[4,e.array()];case 1:return t=n.sent(),e.dispose(),[2,t]}}))}))})))];case 2:c=x.sent(),x.label=3;case 3:for(p=e.shape[1],d=e.shape[2],h=t?mo([d,p],this.inputSize):[d/this.inputSizeData[0],p/this.inputSizeData[1]],f=[],m=function(e){var r=c[e],s=io((function(){var s=Hb(r instanceof Br?r:ec(r));if(!n)return s;var i,u=l[e];return i=t?Ko(y.anchors,[u,0],[1,2]):y.anchorsData[u],{box:s,landmarks:Uo(ql(Ko(a,[u,5],[1,-1])),[6,-1]),probability:Ko(o,[u],[1]),anchor:i}}));f.push(s)},g=0;g<c.length;g++)m(g);return s.dispose(),o.dispose(),a.dispose(),[2,{boxes:f,scaleFactor:h}]}}))}))},e.prototype.estimateFaces=function(e,t,n,r){return void 0===t&&(t=!1),void 0===n&&(n=!1),void 0===r&&(r=!0),Wb(this,void 0,void 0,(function(){var a,s,o,i,u,l,c=this;return Gb(this,(function(p){switch(p.label){case 0:return a=function(e){return e instanceof Br?[e.shape[0],e.shape[1]]:[e.height,e.width]}(e),s=a[1],o=io((function(){return e instanceof Br||(e=ks(e)),Li(ms(e,"float32"),0)})),[4,this.getBoundingBoxes(o,t,r)];case 1:return i=p.sent(),u=i.boxes,l=i.scaleFactor,o.dispose(),t?[2,u.map((function(e){var t=qb(e,l),a={topLeft:Ko(t,[0],[2]),bottomRight:Ko(t,[2],[2])};if(r){var o=e,i=o.landmarks,u=o.probability,c=o.anchor,p=go(ho(i,c),l);a.landmarks=p,a.probability=u}return n&&(a=Kb(a,s)),a}))]:[2,Promise.all(u.map((function(e){return Wb(c,void 0,void 0,(function(){var t,a,o,i,u,c,p,d,h,f,m,g=this;return Gb(this,(function(y){switch(y.label){case 0:return t=qb(e,l),r?[3,2]:[4,t.array()];case 1:return u=y.sent(),a={topLeft:u.slice(0,2),bottomRight:u.slice(2)},[3,4];case 2:return[4,Promise.all([e.landmarks,t,e.probability].map((function(e){return Wb(g,void 0,void 0,(function(){return Gb(this,(function(t){return[2,e.array()]}))}))})))];case 3:o=y.sent(),i=o[0],u=o[1],c=o[2],p=e.anchor,h=(d=l)[0],f=d[1],m=i.map((function(e){return[(e[0]+p[0])*h,(e[1]+p[1])*f]})),a={topLeft:u.slice(0,2),bottomRight:u.slice(2),landmarks:m,probability:c},function(e){e.startEndTensor.dispose(),e.startPoint.dispose(),e.endPoint.dispose()}(e.box),e.landmarks.dispose(),e.probability.dispose(),y.label=4;case 4:return t.dispose(),n&&(a=Kb(a,s)),[2,a]}}))}))})))]}}))}))},e}();function Yb(e){var t=void 0===e?{}:e,n=t.maxFaces,r=void 0===n?10:n,a=t.inputWidth,s=void 0===a?128:a,o=t.inputHeight,i=void 0===o?128:o,u=t.iouThreshold,l=void 0===u?.3:u,c=t.scoreThreshold,p=void 0===c?.75:c,d=t.modelUrl;return Wb(this,void 0,void 0,(function(){var e;return Gb(this,(function(t){switch(t.label){case 0:return null==d?[3,2]:[4,wh(d)];case 1:return e=t.sent(),[3,4];case 2:return[4,wh("https://cdn.static.oppenlab.com/weblf/test/blazeface/model.json",{fromTFHub_:!0})];case 3:e=t.sent(),t.label=4;case 4:return[2,new Xb(e,s,i,r,l,p)]}}))}))}var Qb={silhouette:[10,338,297,332,284,251,389,356,454,323,361,288,397,365,379,378,400,377,152,148,176,149,150,136,172,58,132,93,234,127,162,21,54,103,67,109],lipsUpperOuter:[61,185,40,39,37,0,267,269,270,409,291],lipsLowerOuter:[146,91,181,84,17,314,405,321,375,291],lipsUpperInner:[78,191,80,81,82,13,312,311,310,415,308],lipsLowerInner:[78,95,88,178,87,14,317,402,318,324,308],rightEyeUpper0:[246,161,160,159,158,157,173],rightEyeLower0:[33,7,163,144,145,153,154,155,133],rightEyeUpper1:[247,30,29,27,28,56,190],rightEyeLower1:[130,25,110,24,23,22,26,112,243],rightEyeUpper2:[113,225,224,223,222,221,189],rightEyeLower2:[226,31,228,229,230,231,232,233,244],rightEyeLower3:[143,111,117,118,119,120,121,128,245],rightEyebrowUpper:[156,70,63,105,66,107,55,193],rightEyebrowLower:[35,124,46,53,52,65],rightEyeIris:[473,474,475,476,477],leftEyeUpper0:[466,388,387,386,385,384,398],leftEyeLower0:[263,249,390,373,374,380,381,382,362],leftEyeUpper1:[467,260,259,257,258,286,414],leftEyeLower1:[359,255,339,254,253,252,256,341,463],leftEyeUpper2:[342,445,444,443,442,441,413],leftEyeLower2:[446,261,448,449,450,451,452,453,464],leftEyeLower3:[372,340,346,347,348,349,350,357,465],leftEyebrowUpper:[383,300,293,334,296,336,285,417],leftEyebrowLower:[265,353,276,283,282,295],leftEyeIris:[468,469,470,471,472],midwayBetweenEyes:[168],noseTip:[1],noseBottom:[2],noseRightCorner:[98],noseLeftCorner:[327],rightCheek:[205],leftCheek:[425]};function Zb(e){return[Math.abs(e.endPoint[0]-e.startPoint[0]),Math.abs(e.endPoint[1]-e.startPoint[1])]}function Jb(e){return[e.startPoint[0]+(e.endPoint[0]-e.startPoint[0])/2,e.startPoint[1]+(e.endPoint[1]-e.startPoint[1])/2]}function ev(e,t){void 0===t&&(t=1.5);var n=Jb(e),r=Zb(e),a=[t*r[0]/2,t*r[1]/2];return{startPoint:[n[0]-a[0],n[1]-a[1]],endPoint:[n[0]+a[0],n[1]+a[1]],landmarks:e.landmarks}}function tv(e){var t=Jb(e),n=Zb(e),r=Math.max.apply(Math,n)/2;return{startPoint:[t[0]-r,t[1]-r],endPoint:[t[0]+r,t[1]+r],landmarks:e.landmarks}}var nv=[[1,0,0],[0,1,0],[0,0,1]];function rv(e,t){return[[1,0,e],[0,1,t],[0,0,1]]}function av(e,t){for(var n=0,r=0;r<e.length;r++)n+=e[r]*t[r];return n}function sv(e,t){for(var n=[],r=0;r<e.length;r++)n.push(e[r][t]);return n}function ov(e,t){for(var n=[],r=e.length,a=0;a<r;a++){n.push([]);for(var s=0;s<r;s++)n[a].push(av(e[a],sv(t,s)))}return n}function iv(e,t){var n=Math.cos(e),r=Math.sin(e),a=[[n,-r,0],[r,n,0],[0,0,1]],s=ov(rv(t[0],t[1]),a);return ov(s,rv(-t[0],-t[1]))}var uv=[13,Qb.midwayBetweenEyes[0]],lv=[3,2],cv=Qb.leftEyeLower0,pv=[cv[0],cv[cv.length-1]],dv=Qb.rightEyeLower0,hv=[dv[0],dv[dv.length-1]],fv=[{key:"EyeUpper0",indices:[9,10,11,12,13,14,15]},{key:"EyeUpper1",indices:[25,26,27,28,29,30,31]},{key:"EyeUpper2",indices:[41,42,43,44,45,46,47]},{key:"EyeLower0",indices:[0,1,2,3,4,5,6,7,8]},{key:"EyeLower1",indices:[16,17,18,19,20,21,22,23,24]},{key:"EyeLower2",indices:[32,33,34,35,36,37,38,39,40]},{key:"EyeLower3",indices:[54,55,56,57,58,59,60,61,62]},{key:"EyebrowUpper",indices:[63,64,65,66,67,68,69,70]},{key:"EyebrowLower",indices:[48,49,50,51,52,53]}];function mv(e,t,n,r){for(var a=0;a<fv.length;a++){var s=fv[a],o=s.key,i=s.indices,u=Qb[""+n+o];if(null==r||r.includes(o))for(var l=0;l<i.length;l++){var c=i[l];e[u[l]]=[t[c][0],t[c][1],(t[c][2]+e[u[l]][2])/2]}}}var gv=function(){function e(e,t,n,r,a,s,o){this.regionsOfInterest=[],this.runsWithoutFaceDetector=0,this.boundingBoxDetector=e,this.meshDetector=t,this.irisModel=o,this.meshWidth=n,this.meshHeight=r,this.maxContinuousChecks=a,this.maxFaces=s}return e.prototype.transformRawCoords=function(e,t,n,r){var a,s,o,i,u=this,l=Zb({startPoint:t.startPoint,endPoint:t.endPoint}),c=[l[0]/this.meshWidth,l[1]/this.meshHeight],p=e.map((function(e){return[c[0]*(e[0]-u.meshWidth/2),c[1]*(e[1]-u.meshHeight/2),e[2]]})),d=iv(n,[0,0]),h=p.map((function(e){return function(e,t){return[av(e,t[0]),av(e,t[1])]}(e,d).concat([e[2]])})),f=(s=[[(a=r)[0][0],a[1][0]],[a[0][1],a[1][1]]],o=[a[0][2],a[1][2]],i=[-av(s[0],o),-av(s[1],o)],[s[0].concat(i[0]),s[1].concat(i[1]),[0,0,1]]),m=Jb({startPoint:t.startPoint,endPoint:t.endPoint}).concat([1]),g=[av(m,f[0]),av(m,f[1])];return h.map((function(e){return[e[0]+g[0],e[1]+g[1],e[2]]}))},e.prototype.getLeftToRightEyeDepthDifference=function(e){return e[pv[0]][2]-e[hv[0]][2]},e.prototype.getEyeBox=function(e,t,n,r,a){void 0===a&&(a=!1);var s=tv(ev(this.calculateLandmarksBoundingBox([e[n],e[r]]),2.3)),o=Zb(s),i=$p.cropAndResize(t,[[s.startPoint[1]/this.meshHeight,s.startPoint[0]/this.meshWidth,s.endPoint[1]/this.meshHeight,s.endPoint[0]/this.meshWidth]],[0],[64,64]);return a&&(i=$p.flipLeftRight(i)),{box:s,boxSize:o,crop:i}},e.prototype.getEyeCoords=function(e,t,n,r){void 0===r&&(r=!1);for(var a=[],s=0;s<76;s++){var o=e[3*s],i=e[3*s+1],u=e[3*s+2];a.push([(r?1-o/64:o/64)*n[0]+t.startPoint[0],i/64*n[1]+t.startPoint[1],u])}return{rawCoords:a,iris:a.slice(71)}},e.prototype.getAdjustedIrisCoords=function(e,t,n){var r=e[Qb[n+"EyeUpper0"][3]][2],a=e[Qb[n+"EyeLower0"][4]][2],s=(r+a)/2;return t.map((function(e,t){var n=s;return 2===t?n=r:4===t&&(n=a),[e[0],e[1],n]}))},e.prototype.predict=function(e,t){return Ub(this,void 0,void 0,(function(){var n,r,a,s,o=this;return zb(this,(function(i){switch(i.label){case 0:return this.shouldUpdateRegionsOfInterest()?[4,this.boundingBoxDetector.getBoundingBoxes(e,!1,!0)]:[3,2];case 1:return n=i.sent(),r=n.boxes,a=n.scaleFactor,0===r.length?(this.regionsOfInterest=[],[2,null]):(s=r.map((function(e){var t,n,r={startPoint:ql(e.box.startPoint).arraySync(),endPoint:ql(e.box.endPoint).arraySync()},s=tv(ev((n=a,{startPoint:[(t=r).startPoint[0]*n[0],t.startPoint[1]*n[1]],endPoint:[t.endPoint[0]*n[0],t.endPoint[1]*n[1]]})));return Vb({},s,{landmarks:e.landmarks.arraySync()})})),r.forEach((function(e){null!=e&&null!=e.startPoint&&(e.startEndTensor.dispose(),e.startPoint.dispose(),e.endPoint.dispose())})),this.updateRegionsOfInterest(s),this.runsWithoutFaceDetector=0,[3,3]);case 2:this.runsWithoutFaceDetector++,i.label=3;case 3:return[2,io((function(){return o.regionsOfInterest.map((function(n,r){var a,s=n.landmarks.length>=468,i=uv[0],u=uv[1];!1===s&&(i=lv[0],u=lv[1]),a=function(e,t){var n;return(n=Math.PI/2-Math.atan2(-(t[1]-e[1]),t[0]-e[0]))-2*Math.PI*Math.floor((n+Math.PI)/(2*Math.PI))}(n.landmarks[i],n.landmarks[u]);var l=Jb({startPoint:n.startPoint,endPoint:n.endPoint}),c=[l[0]/e.shape[2],l[1]/e.shape[1]],p=e,d=nv;0!==a&&(p=$p.rotateWithOffset(e,a,0,c),d=iv(-a,l));var h={startPoint:n.startPoint,endPoint:n.endPoint},f=mo(function(e,t,n){var r=t.shape[1],a=t.shape[2],s=[[e.startPoint[1]/r,e.startPoint[0]/a,e.endPoint[1]/r,e.endPoint[0]/a]];return $p.cropAndResize(t,s,[0],n,"bilinear",0)}(h,p,[o.meshHeight,o.meshWidth]),255),m=o.meshDetector.predict(f),g=m[1],y=m[2],x=Uo(y,[-1,3]).arraySync();if(t){var b=o.getEyeBox(x,f,pv[0],pv[1],!0),v=b.box,w=b.boxSize,E=b.crop,T=o.getEyeBox(x,f,hv[0],hv[1]),N=T.box,k=T.boxSize,$=T.crop,I=o.irisModel.predict(Ho([E,$])).dataSync(),S=I.slice(0,228),_=o.getEyeCoords(S,v,w,!0),C=_.rawCoords,A=_.iris,R=I.slice(228),O=o.getEyeCoords(R,N,k),M=O.rawCoords,D=O.iris,F=o.getLeftToRightEyeDepthDifference(x);Math.abs(F)<30?(mv(x,C,"left"),mv(x,M,"right")):F<1?mv(x,C,"left",["EyeUpper0","EyeLower0"]):mv(x,M,"right",["EyeUpper0","EyeLower0"]);var L=o.getAdjustedIrisCoords(x,A,"left"),B=o.getAdjustedIrisCoords(x,D,"right");x=x.concat(L).concat(B)}var P=o.transformRawCoords(x,n,a,d),V=ec(P),U=ev(o.calculateLandmarksBoundingBox(P)),z=tv(U);return o.regionsOfInterest[r]=Vb({},z,{landmarks:V.arraySync()}),{coords:ec(x,[x.length,3]),scaledCoords:V,box:U,flag:ql(g)}}))}))]}}))}))},e.prototype.updateRegionsOfInterest=function(e){for(var t=0;t<e.length;t++){var n=e[t],r=this.regionsOfInterest[t],a=0;if(r&&r.startPoint){var s=n.startPoint,o=s[0],i=s[1],u=n.endPoint,l=u[0],c=u[1],p=r.startPoint,d=p[0],h=p[1],f=r.endPoint,m=f[0],g=f[1],y=Math.max(o,d),x=Math.max(i,h),b=(Math.min(l,m)-y)*(Math.min(c,g)-x);a=b/((l-o)*(c-i)+(m-d)*(g-i)-b)}a<.25&&(this.regionsOfInterest[t]=n)}this.regionsOfInterest=this.regionsOfInterest.slice(0,e.length)},e.prototype.clearRegionOfInterest=function(e){null!=this.regionsOfInterest[e]&&(this.regionsOfInterest=this.regionsOfInterest.slice(0,e).concat(this.regionsOfInterest.slice(e+1)))},e.prototype.shouldUpdateRegionsOfInterest=function(){var e=this.regionsOfInterest.length,t=0===e;return 1===this.maxFaces||t?t:e!==this.maxFaces&&this.runsWithoutFaceDetector>=this.maxContinuousChecks},e.prototype.calculateLandmarksBoundingBox=function(e){var t=e.map((function(e){return e[0]})),n=e.map((function(e){return e[1]}));return{startPoint:[Math.min.apply(Math,t),Math.min.apply(Math,n)],endPoint:[Math.max.apply(Math,t),Math.max.apply(Math,n)]}},e}(),yv=[[.499976992607117,.652534008026123],[.500025987625122,.547487020492554],[.499974012374878,.602371990680695],[.482113003730774,.471979022026062],[.500150978565216,.527155995368958],[.499909996986389,.498252987861633],[.499523013830185,.40106201171875],[.289712011814117,.380764007568359],[.499954998493195,.312398016452789],[.499987006187439,.269918978214264],[.500023007392883,.107050001621246],[.500023007392883,.666234016418457],[.5000159740448,.679224014282227],[.500023007392883,.692348003387451],[.499976992607117,.695277988910675],[.499976992607117,.70593398809433],[.499976992607117,.719385027885437],[.499976992607117,.737019002437592],[.499967992305756,.781370997428894],[.499816000461578,.562981009483337],[.473773002624512,.573909997940063],[.104906998574734,.254140973091125],[.365929991006851,.409575998783112],[.338757991790771,.41302502155304],[.311120003461838,.409460008144379],[.274657994508743,.389131009578705],[.393361985683441,.403706014156342],[.345234006643295,.344011008739471],[.370094001293182,.346076011657715],[.319321990013123,.347265005111694],[.297903001308441,.353591024875641],[.24779200553894,.410809993743896],[.396889001131058,.842755019664764],[.280097991228104,.375599980354309],[.106310002505779,.399955987930298],[.2099249958992,.391353011131287],[.355807989835739,.534406006336212],[.471751004457474,.65040397644043],[.474155008792877,.680191993713379],[.439785003662109,.657229006290436],[.414617002010345,.66654098033905],[.450374007225037,.680860996246338],[.428770989179611,.682690978050232],[.374971002340317,.727805018424988],[.486716985702515,.547628998756409],[.485300987958908,.527395009994507],[.257764995098114,.314490020275116],[.401223003864288,.455172002315521],[.429818987846375,.548614978790283],[.421351999044418,.533740997314453],[.276895999908447,.532056987285614],[.483370006084442,.499586999416351],[.33721199631691,.282882988452911],[.296391993761063,.293242990970612],[.169294998049736,.193813979625702],[.447580009698868,.302609980106354],[.392390012741089,.353887975215912],[.354490011930466,.696784019470215],[.067304998636246,.730105042457581],[.442739009857178,.572826027870178],[.457098007202148,.584792017936707],[.381974011659622,.694710969924927],[.392388999462128,.694203019142151],[.277076005935669,.271932005882263],[.422551989555359,.563233017921448],[.385919004678726,.281364023685455],[.383103013038635,.255840003490448],[.331431001424789,.119714021682739],[.229923993349075,.232002973556519],[.364500999450684,.189113974571228],[.229622006416321,.299540996551514],[.173287004232407,.278747975826263],[.472878992557526,.666198015213013],[.446828007698059,.668527007102966],[.422762006521225,.673889994621277],[.445307999849319,.580065965652466],[.388103008270264,.693961024284363],[.403039008378983,.706539988517761],[.403629004955292,.693953037261963],[.460041999816895,.557139039039612],[.431158006191254,.692366003990173],[.452181994915009,.692366003990173],[.475387006998062,.692366003990173],[.465828001499176,.779190003871918],[.472328990697861,.736225962638855],[.473087012767792,.717857003211975],[.473122000694275,.704625964164734],[.473033010959625,.695277988910675],[.427942007780075,.695277988910675],[.426479011774063,.703539967536926],[.423162013292313,.711845993995667],[.4183090031147,.720062971115112],[.390094995498657,.639572978019714],[.013953999616206,.560034036636353],[.499913990497589,.58014702796936],[.413199990987778,.69539999961853],[.409626007080078,.701822996139526],[.468080013990402,.601534962654114],[.422728985548019,.585985004901886],[.463079988956451,.593783974647522],[.37211999297142,.47341400384903],[.334562003612518,.496073007583618],[.411671012639999,.546965003013611],[.242175996303558,.14767599105835],[.290776997804642,.201445996761322],[.327338010072708,.256527006626129],[.399509996175766,.748921036720276],[.441727995872498,.261676013469696],[.429764986038208,.187834024429321],[.412198007106781,.108901023864746],[.288955003023148,.398952007293701],[.218936994671822,.435410976409912],[.41278201341629,.398970007896423],[.257135003805161,.355440020561218],[.427684992551804,.437960982322693],[.448339998722076,.536936044692993],[.178560003638268,.45755398273468],[.247308000922203,.457193970680237],[.286267012357712,.467674970626831],[.332827985286713,.460712015628815],[.368755996227264,.447206974029541],[.398963987827301,.432654976844788],[.476410001516342,.405806005001068],[.189241006970406,.523923993110657],[.228962004184723,.348950982093811],[.490725994110107,.562400996685028],[.404670000076294,.485132992267609],[.019469000399113,.401564002037048],[.426243007183075,.420431017875671],[.396993011236191,.548797011375427],[.266469985246658,.376977026462555],[.439121007919312,.51895797252655],[.032313998788595,.644356966018677],[.419054001569748,.387154996395111],[.462783008813858,.505746960639954],[.238978996872902,.779744982719421],[.198220998048782,.831938028335571],[.107550002634525,.540755033493042],[.183610007166862,.740257024765015],[.134409993886948,.333683013916016],[.385764002799988,.883153975009918],[.490967005491257,.579378008842468],[.382384985685349,.508572995662689],[.174399003386497,.397670984268188],[.318785011768341,.39623498916626],[.343364000320435,.400596976280212],[.396100014448166,.710216999053955],[.187885001301765,.588537991046906],[.430987000465393,.944064974784851],[.318993002176285,.898285031318665],[.266247987747192,.869701027870178],[.500023007392883,.190576016902924],[.499976992607117,.954452991485596],[.366169989109039,.398822009563446],[.393207013607025,.39553701877594],[.410373002290726,.391080021858215],[.194993004202843,.342101991176605],[.388664990663528,.362284004688263],[.365961998701096,.355970978736877],[.343364000320435,.355356991291046],[.318785011768341,.35834002494812],[.301414996385574,.363156020641327],[.058132998645306,.319076001644135],[.301414996385574,.387449026107788],[.499987989664078,.618434011936188],[.415838003158569,.624195992946625],[.445681989192963,.566076993942261],[.465844005346298,.620640993118286],[.49992299079895,.351523995399475],[.288718998432159,.819945991039276],[.335278987884521,.852819979190826],[.440512001514435,.902418971061707],[.128294005990028,.791940987110138],[.408771991729736,.373893976211548],[.455606997013092,.451801002025604],[.499877005815506,.908990025520325],[.375436991453171,.924192011356354],[.11421000212431,.615022003650665],[.448662012815475,.695277988910675],[.4480200111866,.704632043838501],[.447111994028091,.715808033943176],[.444831997156143,.730794012546539],[.430011987686157,.766808986663818],[.406787008047104,.685672998428345],[.400738000869751,.681069016456604],[.392399996519089,.677703022956848],[.367855995893478,.663918972015381],[.247923001646996,.601333022117615],[.452769994735718,.420849978923798],[.43639200925827,.359887003898621],[.416164010763168,.368713974952698],[.413385987281799,.692366003990173],[.228018000721931,.683571994304657],[.468268007040024,.352671027183533],[.411361992359161,.804327011108398],[.499989002943039,.469825029373169],[.479153990745544,.442654013633728],[.499974012374878,.439637005329132],[.432112008333206,.493588984012604],[.499886006116867,.866917014122009],[.49991300702095,.821729004383087],[.456548988819122,.819200992584229],[.344549000263214,.745438992977142],[.37890899181366,.574010014533997],[.374292999505997,.780184984207153],[.319687992334366,.570737957954407],[.357154995203018,.604269981384277],[.295284003019333,.621580958366394],[.447750002145767,.862477004528046],[.410986006259918,.508723020553589],[.31395098567009,.775308012962341],[.354128003120422,.812552988529205],[.324548006057739,.703992962837219],[.189096003770828,.646299958229065],[.279776990413666,.71465802192688],[.1338230073452,.682700991630554],[.336768001317978,.644733011722565],[.429883986711502,.466521978378296],[.455527991056442,.548622965812683],[.437114000320435,.558896005153656],[.467287987470627,.529924988746643],[.414712011814117,.335219979286194],[.37704598903656,.322777986526489],[.344107985496521,.320150971412659],[.312875986099243,.32233202457428],[.283526003360748,.333190023899078],[.241245999932289,.382785975933075],[.102986000478268,.468762993812561],[.267612010240555,.424560010433197],[.297879010438919,.433175981044769],[.333433985710144,.433878004550934],[.366427004337311,.426115989685059],[.396012008190155,.416696012020111],[.420121014118195,.41022801399231],[.007561000064015,.480777025222778],[.432949006557465,.569517970085144],[.458638995885849,.479089021682739],[.473466008901596,.545744001865387],[.476087987422943,.563830018043518],[.468472003936768,.555056989192963],[.433990985155106,.582361996173859],[.483518004417419,.562983989715576],[.482482999563217,.57784903049469],[.42645001411438,.389798998832703],[.438998997211456,.39649498462677],[.450067013502121,.400434017181396],[.289712011814117,.368252992630005],[.276670008897781,.363372981548309],[.517862021923065,.471948027610779],[.710287988185883,.380764007568359],[.526226997375488,.573909997940063],[.895093023777008,.254140973091125],[.634069979190826,.409575998783112],[.661242008209229,.41302502155304],[.688880026340485,.409460008144379],[.725341975688934,.389131009578705],[.606630027294159,.40370500087738],[.654766023159027,.344011008739471],[.629905998706818,.346076011657715],[.680678009986877,.347265005111694],[.702096998691559,.353591024875641],[.75221198797226,.410804986953735],[.602918028831482,.842862963676453],[.719901978969574,.375599980354309],[.893692970275879,.399959981441498],[.790081977844238,.391354024410248],[.643998026847839,.534487962722778],[.528249025344849,.65040397644043],[.525849997997284,.680191040039062],[.560214996337891,.657229006290436],[.585384011268616,.66654098033905],[.549625992774963,.680860996246338],[.57122802734375,.682691991329193],[.624852001667023,.72809898853302],[.513050019741058,.547281980514526],[.51509702205658,.527251958847046],[.742246985435486,.314507007598877],[.598631024360657,.454979002475739],[.570338010787964,.548575043678284],[.578631997108459,.533622980117798],[.723087012767792,.532054007053375],[.516445994377136,.499638974666595],[.662801027297974,.282917976379395],[.70362401008606,.293271005153656],[.830704987049103,.193813979625702],[.552385985851288,.302568018436432],[.607609987258911,.353887975215912],[.645429015159607,.696707010269165],[.932694971561432,.730105042457581],[.557260990142822,.572826027870178],[.542901992797852,.584792017936707],[.6180260181427,.694710969924927],[.607590973377228,.694203019142151],[.722943007946014,.271963000297546],[.577413976192474,.563166975975037],[.614082992076874,.281386971473694],[.616907000541687,.255886018276215],[.668509006500244,.119913995265961],[.770092010498047,.232020974159241],[.635536015033722,.189248979091644],[.77039098739624,.299556016921997],[.826722025871277,.278755009174347],[.527121007442474,.666198015213013],[.553171992301941,.668527007102966],[.577238023281097,.673889994621277],[.554691970348358,.580065965652466],[.611896991729736,.693961024284363],[.59696102142334,.706539988517761],[.596370995044708,.693953037261963],[.539958000183105,.557139039039612],[.568841993808746,.692366003990173],[.547818005084991,.692366003990173],[.52461302280426,.692366003990173],[.534089982509613,.779141008853912],[.527670979499817,.736225962638855],[.526912987232208,.717857003211975],[.526877999305725,.704625964164734],[.526966989040375,.695277988910675],[.572058022022247,.695277988910675],[.573521018028259,.703539967536926],[.57683801651001,.711845993995667],[.581691026687622,.720062971115112],[.609944999217987,.639909982681274],[.986046016216278,.560034036636353],[.5867999792099,.69539999961853],[.590372025966644,.701822996139526],[.531915009021759,.601536989212036],[.577268004417419,.585934996604919],[.536915004253387,.593786001205444],[.627542972564697,.473352015018463],[.665585994720459,.495950996875763],[.588353991508484,.546862006187439],[.757824003696442,.14767599105835],[.709249973297119,.201507985591888],[.672684013843536,.256581008434296],[.600408971309662,.74900496006012],[.55826598405838,.261672019958496],[.570303976535797,.187870979309082],[.588165998458862,.109044015407562],[.711045026779175,.398952007293701],[.781069993972778,.435405015945435],[.587247014045715,.398931980133057],[.742869973182678,.355445981025696],[.572156012058258,.437651991844177],[.55186802148819,.536570012569427],[.821442008018494,.457556009292603],[.752701997756958,.457181990146637],[.71375697851181,.467626988887787],[.66711300611496,.460672974586487],[.631101012229919,.447153985500336],[.6008620262146,.432473003864288],[.523481011390686,.405627012252808],[.810747981071472,.523926019668579],[.771045982837677,.348959028720856],[.509127020835876,.562718033790588],[.595292985439301,.485023975372314],[.980530977249146,.401564002037048],[.573499977588654,.420000016689301],[.602994978427887,.548687994480133],[.733529984951019,.376977026462555],[.560611009597778,.519016981124878],[.967685997486115,.644356966018677],[.580985009670258,.387160003185272],[.537728011608124,.505385041236877],[.760966002941132,.779752969741821],[.801778972148895,.831938028335571],[.892440974712372,.54076099395752],[.816350996494293,.740260004997253],[.865594983100891,.333687007427216],[.614073991775513,.883246004581451],[.508952975273132,.579437971115112],[.617941975593567,.508316040039062],[.825608015060425,.397674977779388],[.681214988231659,.39623498916626],[.656635999679565,.400596976280212],[.603900015354156,.710216999053955],[.81208598613739,.588539004325867],[.56801301240921,.944564998149872],[.681007981300354,.898285031318665],[.733752012252808,.869701027870178],[.633830010890961,.398822009563446],[.606792986392975,.39553701877594],[.589659988880157,.391062021255493],[.805015981197357,.342108011245728],[.611334979534149,.362284004688263],[.634037971496582,.355970978736877],[.656635999679565,.355356991291046],[.681214988231659,.35834002494812],[.698584973812103,.363156020641327],[.941866993904114,.319076001644135],[.698584973812103,.387449026107788],[.584177017211914,.624107003211975],[.554318010807037,.566076993942261],[.534153997898102,.62064003944397],[.711217999458313,.819975018501282],[.664629995822906,.852871000766754],[.559099972248077,.902631998062134],[.871706008911133,.791940987110138],[.591234028339386,.373893976211548],[.544341027736664,.451583981513977],[.624562978744507,.924192011356354],[.88577002286911,.615028977394104],[.551338016986847,.695277988910675],[.551980018615723,.704632043838501],[.552887976169586,.715808033943176],[.555167973041534,.730794012546539],[.569944024085999,.767035007476807],[.593203008174896,.685675978660583],[.599261999130249,.681069016456604],[.607599973678589,.677703022956848],[.631937980651855,.663500010967255],[.752032995223999,.601315021514893],[.547226011753082,.420395016670227],[.563543975353241,.359827995300293],[.583841025829315,.368713974952698],[.586614012718201,.692366003990173],[.771915018558502,.683578014373779],[.531597018241882,.352482974529266],[.588370978832245,.804440975189209],[.52079701423645,.442565023899078],[.567984998226166,.493479013442993],[.543282985687256,.819254994392395],[.655317008495331,.745514988899231],[.621008992195129,.574018001556396],[.625559985637665,.78031200170517],[.680198013782501,.570719003677368],[.64276397228241,.604337990283966],[.704662978649139,.621529996395111],[.552012026309967,.862591981887817],[.589071989059448,.508637011051178],[.685944974422455,.775357007980347],[.645735025405884,.812640011310577],[.675342977046967,.703978002071381],[.810858011245728,.646304965019226],[.72012197971344,.714666962623596],[.866151988506317,.682704985141754],[.663187026977539,.644596993923187],[.570082008838654,.466325998306274],[.544561982154846,.548375964164734],[.562758982181549,.558784961700439],[.531987011432648,.530140042304993],[.585271000862122,.335177004337311],[.622952997684479,.32277899980545],[.655896008014679,.320163011550903],[.687132000923157,.322345972061157],[.716481983661652,.333200991153717],[.758756995201111,.382786989212036],[.897013008594513,.468769013881683],[.732392013072968,.424547016620636],[.70211398601532,.433162987232208],[.66652500629425,.433866024017334],[.633504986763,.426087975502014],[.603875994682312,.416586995124817],[.579657971858978,.409945011138916],[.992439985275269,.480777025222778],[.567192018032074,.569419980049133],[.54136598110199,.478899002075195],[.526564002037048,.546118021011353],[.523913025856018,.563830018043518],[.531529009342194,.555056989192963],[.566035985946655,.582329034805298],[.51631098985672,.563053965568542],[.5174720287323,.577877044677734],[.573594987392426,.389806985855103],[.560697972774506,.395331978797913],[.549755990505219,.399751007556915],[.710287988185883,.368252992630005],[.723330020904541,.363372981548309]];function xv(e){return Ub(this,void 0,void 0,(function(){var t,n,r,a,s,o,i,u,l,c,p,d,h,f,m,g;return zb(this,(function(y){switch(y.label){case 0:return t=e.maxContinuousChecks,n=void 0===t?5:t,r=e.detectionConfidence,a=void 0===r?.9:r,s=e.maxFaces,o=void 0===s?10:s,i=e.iouThreshold,u=void 0===i?.3:i,l=e.scoreThreshold,c=void 0===l?.75:l,p=e.shouldLoadIrisModel,d=void 0===p||p,h=e.modelUrl,f=e.detectorModelUrl,m=e.irisModelUrl,d?[4,Promise.all([bv(f,o,u,c),vv(h),wv(m)])]:[3,2];case 1:return g=y.sent(),[3,4];case 2:return[4,Promise.all([bv(f,o,u,c),vv(h)])];case 3:g=y.sent(),y.label=4;case 4:return[2,new Nv(g[0],g[1],n,a,o,d?g[2]:null)]}}))}))}function bv(e,t,n,r){return Ub(this,void 0,void 0,(function(){return zb(this,(function(a){return[2,Yb({modelUrl:e,maxFaces:t,iouThreshold:n,scoreThreshold:r})]}))}))}function vv(e){return Ub(this,void 0,void 0,(function(){return zb(this,(function(t){return null!=e?[2,wh(e)]:[2,wh("https://tfhub.dev/mediapipe/tfjs-model/facemesh/1/default/1",{fromTFHub:!0})]}))}))}function wv(e){return Ub(this,void 0,void 0,(function(){return zb(this,(function(t){return null!=e?[2,wh(e)]:[2,wh("https://tfhub.dev/mediapipe/tfjs-model/iris/1/default/2",{fromTFHub:!0})]}))}))}function Ev(e,t){if(e.mesh instanceof Br){var n=io((function(){var n=Jl([t-1,0,0]),r=Jl([1,-1,1]);return io((function(){return[Ho([lu(t-1,Ko(e.boundingBox.topLeft,0,1)),Ko(e.boundingBox.topLeft,1,1)]),Ho([lu(t-1,Ko(e.boundingBox.bottomRight,0,1)),Ko(e.boundingBox.bottomRight,1,1)]),go(lu(n,e.mesh),r),go(lu(n,e.scaledMesh),r)]}))})),r=n[0],a=n[1],s=n[2],o=n[3];return Object.assign({},e,{boundingBox:{topLeft:r,bottomRight:a},mesh:s,scaledMesh:o})}return Object.assign({},e,{boundingBox:{topLeft:[t-1-e.boundingBox.topLeft[0],e.boundingBox.topLeft[1]],bottomRight:[t-1-e.boundingBox.bottomRight[0],e.boundingBox.bottomRight[1]]},mesh:e.mesh.map((function(e){var n=e.slice(0);return n[0]=t-1-e[0],n})),scaledMesh:e.scaledMesh.map((function(e){var n=e.slice(0);return n[0]=t-1-e[0],n}))})}var Tv,Nv=function(){function e(e,t,n,r,a,s){this.kind="MediaPipeFaceMesh",this.pipeline=new gv(e,t,192,192,n,a,s),this.detectionConfidence=r}return e.getAnnotations=function(){return Qb},e.getUVCoords=function(){return yv},e.prototype.estimateFaces=function(e){return Ub(this,void 0,void 0,(function(){var t,n,r,a,s,o,i,u,l,c,p,d,h=this;return zb(this,(function(f){switch(f.label){case 0:if(t=e.returnTensors,n=void 0!==t&&t,r=e.flipHorizontal,a=void 0!==r&&r,s=e.predictIrises,o=void 0===s||s,i=e.input,o&&null==this.pipeline.irisModel)throw new Error("The iris model was not loaded as part of facemesh. Please initialize the model with facemesh.load({shouldLoadIrisModel: true}).");return u=function(e){return e instanceof Br?[e.shape[0],e.shape[1]]:[e.height,e.width]}(i),l=u[1],c=io((function(){return i instanceof Br||(i=ks(i)),Li(ms(i,"float32"),0)})),"webgl"!==co()?[3,2]:(d=j().get("WEBGL_PACK_DEPTHWISECONV"),j().set("WEBGL_PACK_DEPTHWISECONV",!0),[4,this.pipeline.predict(c,o)]);case 1:return p=f.sent(),j().set("WEBGL_PACK_DEPTHWISECONV",d),[3,4];case 2:return[4,this.pipeline.predict(c,o)];case 3:p=f.sent(),f.label=4;case 4:return c.dispose(),null!=p&&p.length>0?[2,Promise.all(p.map((function(e,t){return Ub(h,void 0,void 0,(function(){var r,s,i,u,c,p,d,h,f,m,g,y,x,b,v=this;return zb(this,(function(w){switch(w.label){case 0:return r=e.coords,s=e.scaledCoords,i=e.box,u=e.flag,c=[u],n||(c=c.concat([r,s])),[4,Promise.all(c.map((function(e){return Ub(v,void 0,void 0,(function(){return zb(this,(function(t){return[2,e.array()]}))}))})))];case 1:if(p=w.sent(),d=p[0],u.dispose(),d<this.detectionConfidence&&this.pipeline.clearRegionOfInterest(t),n)return h={kind:"MediaPipePredictionTensors",faceInViewConfidence:d,mesh:r,scaledMesh:s,boundingBox:{topLeft:Jl(i.startPoint),bottomRight:Jl(i.endPoint)}},a?[2,Ev(h,l)]:[2,h];for(b in f=p.slice(1),m=f[0],g=f[1],s.dispose(),r.dispose(),y={kind:"MediaPipePredictionValues",faceInViewConfidence:d,boundingBox:{topLeft:i.startPoint,bottomRight:i.endPoint},mesh:m,scaledMesh:g},a&&(y=Ev(y,l)),x={},Qb)(o||!1===b.includes("Iris"))&&(x[b]=Qb[b].map((function(e){return y.scaledMesh[e]})));return y.annotations=x,[2,y]}}))}))})))]:[2,[]]}}))}))},e}();(Tv||(Tv={})).mediapipeFacemesh="mediapipe-facemesh";const kv=[127,34,139,11,0,37,232,231,120,72,37,39,128,121,47,232,121,128,104,69,67,175,171,148,157,154,155,118,50,101,73,39,40,9,151,108,48,115,131,194,204,211,74,40,185,80,42,183,40,92,186,230,229,118,202,212,214,83,18,17,76,61,146,160,29,30,56,157,173,106,204,194,135,214,192,203,165,98,21,71,68,51,45,4,144,24,23,77,146,91,205,50,187,201,200,18,91,106,182,90,91,181,85,84,17,206,203,36,148,171,140,92,40,39,193,189,244,159,158,28,247,246,161,236,3,196,54,68,104,193,168,8,117,228,31,189,193,55,98,97,99,126,47,100,166,79,218,155,154,26,209,49,131,135,136,150,47,126,217,223,52,53,45,51,134,211,170,140,67,69,108,43,106,91,230,119,120,226,130,247,63,53,52,238,20,242,46,70,156,78,62,96,46,53,63,143,34,227,173,155,133,123,117,111,44,125,19,236,134,51,216,206,205,154,153,22,39,37,167,200,201,208,36,142,100,57,212,202,20,60,99,28,158,157,35,226,113,160,159,27,204,202,210,113,225,46,43,202,204,62,76,77,137,123,116,41,38,72,203,129,142,64,98,240,49,102,64,41,73,74,212,216,207,42,74,184,169,170,211,170,149,176,105,66,69,122,6,168,123,147,187,96,77,90,65,55,107,89,90,180,101,100,120,63,105,104,93,137,227,15,86,85,129,102,49,14,87,86,55,8,9,100,47,121,145,23,22,88,89,179,6,122,196,88,95,96,138,172,136,215,58,172,115,48,219,42,80,81,195,3,51,43,146,61,171,175,199,81,82,38,53,46,225,144,163,110,246,33,7,52,65,66,229,228,117,34,127,234,107,108,69,109,108,151,48,64,235,62,78,191,129,209,126,111,35,143,163,161,246,117,123,50,222,65,52,19,125,141,221,55,65,3,195,197,25,7,33,220,237,44,70,71,139,122,193,245,247,130,33,71,21,162,153,158,159,170,169,150,188,174,196,216,186,92,144,160,161,2,97,167,141,125,241,164,167,37,72,38,12,145,159,160,38,82,13,63,68,71,226,35,111,158,153,154,101,50,205,206,92,165,209,198,217,165,167,97,220,115,218,133,112,243,239,238,241,214,135,169,190,173,133,171,208,32,125,44,237,86,87,178,85,86,179,84,85,180,83,84,181,201,83,182,137,93,132,76,62,183,61,76,184,57,61,185,212,57,186,214,207,187,34,143,156,79,239,237,123,137,177,44,1,4,201,194,32,64,102,129,213,215,138,59,166,219,242,99,97,2,94,141,75,59,235,24,110,228,25,130,226,23,24,229,22,23,230,26,22,231,112,26,232,189,190,243,221,56,190,28,56,221,27,28,222,29,27,223,30,29,224,247,30,225,238,79,20,166,59,75,60,75,240,147,177,215,20,79,166,187,147,213,112,233,244,233,128,245,128,114,188,114,217,174,131,115,220,217,198,236,198,131,134,177,132,58,143,35,124,110,163,7,228,110,25,356,389,368,11,302,267,452,350,349,302,303,269,357,343,277,452,453,357,333,332,297,175,152,377,384,398,382,347,348,330,303,304,270,9,336,337,278,279,360,418,262,431,304,408,409,310,415,407,270,409,410,450,348,347,422,430,434,313,314,17,306,307,375,387,388,260,286,414,398,335,406,418,364,367,416,423,358,327,251,284,298,281,5,4,373,374,253,307,320,321,425,427,411,421,313,18,321,405,406,320,404,405,315,16,17,426,425,266,377,400,369,322,391,269,417,465,464,386,257,258,466,260,388,456,399,419,284,332,333,417,285,8,346,340,261,413,441,285,327,460,328,355,371,329,392,439,438,382,341,256,429,420,360,364,394,379,277,343,437,443,444,283,275,440,363,431,262,369,297,338,337,273,375,321,450,451,349,446,342,467,293,334,282,458,461,462,276,353,383,308,324,325,276,300,293,372,345,447,382,398,362,352,345,340,274,1,19,456,248,281,436,427,425,381,256,252,269,391,393,200,199,428,266,330,329,287,273,422,250,462,328,258,286,384,265,353,342,387,259,257,424,431,430,342,353,276,273,335,424,292,325,307,366,447,345,271,303,302,423,266,371,294,455,460,279,278,294,271,272,304,432,434,427,272,407,408,394,430,431,395,369,400,334,333,299,351,417,168,352,280,411,325,319,320,295,296,336,319,403,404,330,348,349,293,298,333,323,454,447,15,16,315,358,429,279,14,15,316,285,336,9,329,349,350,374,380,252,318,402,403,6,197,419,318,319,325,367,364,365,435,367,397,344,438,439,272,271,311,195,5,281,273,287,291,396,428,199,311,271,268,283,444,445,373,254,339,263,466,249,282,334,296,449,347,346,264,447,454,336,296,299,338,10,151,278,439,455,292,407,415,358,371,355,340,345,372,390,249,466,346,347,280,442,443,282,19,94,370,441,442,295,248,419,197,263,255,359,440,275,274,300,383,368,351,412,465,263,467,466,301,368,389,380,374,386,395,378,379,412,351,419,436,426,322,373,390,388,2,164,393,370,462,461,164,0,267,302,11,12,374,373,387,268,12,13,293,300,301,446,261,340,385,384,381,330,266,425,426,423,391,429,355,437,391,327,326,440,457,438,341,382,362,459,457,461,434,430,394,414,463,362,396,369,262,354,461,457,316,403,402,315,404,403,314,405,404,313,406,405,421,418,406,366,401,361,306,408,407,291,409,408,287,410,409,432,436,410,434,416,411,264,368,383,309,438,457,352,376,401,274,275,4,421,428,262,294,327,358,433,416,367,289,455,439,462,370,326,2,326,370,305,460,455,254,449,448,255,261,446,253,450,449,252,451,450,256,452,451,341,453,452,413,464,463,441,413,414,258,442,441,257,443,442,259,444,443,260,445,444,467,342,445,459,458,250,289,392,290,290,328,460,376,433,435,250,290,392,411,416,433,341,463,464,453,464,465,357,465,412,343,412,399,360,363,440,437,399,456,420,456,363,401,435,288,372,383,353,339,255,249,448,261,255,133,243,190,133,155,112,33,246,247,33,130,25,398,384,286,362,398,414,362,463,341,263,359,467,263,249,255,466,467,260,75,60,166,238,239,79,162,127,139,72,11,37,121,232,120,73,72,39,114,128,47,233,232,128,103,104,67,152,175,148,173,157,155,119,118,101,74,73,40,107,9,108,49,48,131,32,194,211,184,74,185,191,80,183,185,40,186,119,230,118,210,202,214,84,83,17,77,76,146,161,160,30,190,56,173,182,106,194,138,135,192,129,203,98,54,21,68,5,51,4,145,144,23,90,77,91,207,205,187,83,201,18,181,91,182,180,90,181,16,85,17,205,206,36,176,148,140,165,92,39,245,193,244,27,159,28,30,247,161,174,236,196,103,54,104,55,193,8,111,117,31,221,189,55,240,98,99,142,126,100,219,166,218,112,155,26,198,209,131,169,135,150,114,47,217,224,223,53,220,45,134,32,211,140,109,67,108,146,43,91,231,230,120,113,226,247,105,63,52,241,238,242,124,46,156,95,78,96,70,46,63,116,143,227,116,123,111,1,44,19,3,236,51,207,216,205,26,154,22,165,39,167,199,200,208,101,36,100,43,57,202,242,20,99,56,28,157,124,35,113,29,160,27,211,204,210,124,113,46,106,43,204,96,62,77,227,137,116,73,41,72,36,203,142,235,64,240,48,49,64,42,41,74,214,212,207,183,42,184,210,169,211,140,170,176,104,105,69,193,122,168,50,123,187,89,96,90,66,65,107,179,89,180,119,101,120,68,63,104,234,93,227,16,15,85,209,129,49,15,14,86,107,55,9,120,100,121,153,145,22,178,88,179,197,6,196,89,88,96,135,138,136,138,215,172,218,115,219,41,42,81,5,195,51,57,43,61,208,171,199,41,81,38,224,53,225,24,144,110,105,52,66,118,229,117,227,34,234,66,107,69,10,109,151,219,48,235,183,62,191,142,129,126,116,111,143,7,163,246,118,117,50,223,222,52,94,19,141,222,221,65,196,3,197,45,220,44,156,70,139,188,122,245,139,71,162,145,153,159,149,170,150,122,188,196,206,216,92,163,144,161,164,2,167,242,141,241,0,164,37,11,72,12,144,145,160,12,38,13,70,63,71,31,226,111,157,158,154,36,101,205,203,206,165,126,209,217,98,165,97,237,220,218,237,239,241,210,214,169,140,171,32,241,125,237,179,86,178,180,85,179,181,84,180,182,83,181,194,201,182,177,137,132,184,76,183,185,61,184,186,57,185,216,212,186,192,214,187,139,34,156,218,79,237,147,123,177,45,44,4,208,201,32,98,64,129,192,213,138,235,59,219,141,242,97,97,2,141,240,75,235,229,24,228,31,25,226,230,23,229,231,22,230,232,26,231,233,112,232,244,189,243,189,221,190,222,28,221,223,27,222,224,29,223,225,30,224,113,247,225,99,60,240,213,147,215,60,20,166,192,187,213,243,112,244,244,233,245,245,128,188,188,114,174,134,131,220,174,217,236,236,198,134,215,177,58,156,143,124,25,110,7,31,228,25,264,356,368,0,11,267,451,452,349,267,302,269,350,357,277,350,452,357,299,333,297,396,175,377,381,384,382,280,347,330,269,303,270,151,9,337,344,278,360,424,418,431,270,304,409,272,310,407,322,270,410,449,450,347,432,422,434,18,313,17,291,306,375,259,387,260,424,335,418,434,364,416,391,423,327,301,251,298,275,281,4,254,373,253,375,307,321,280,425,411,200,421,18,335,321,406,321,320,405,314,315,17,423,426,266,396,377,369,270,322,269,413,417,464,385,386,258,248,456,419,298,284,333,168,417,8,448,346,261,417,413,285,326,327,328,277,355,329,309,392,438,381,382,256,279,429,360,365,364,379,355,277,437,282,443,283,281,275,363,395,431,369,299,297,337,335,273,321,348,450,349,359,446,467,283,293,282,250,458,462,300,276,383,292,308,325,283,276,293,264,372,447,346,352,340,354,274,19,363,456,281,426,436,425,380,381,252,267,269,393,421,200,428,371,266,329,432,287,422,290,250,328,385,258,384,446,265,342,386,387,257,422,424,430,445,342,276,422,273,424,306,292,307,352,366,345,268,271,302,358,423,371,327,294,460,331,279,294,303,271,304,436,432,427,304,272,408,395,394,431,378,395,400,296,334,299,6,351,168,376,352,411,307,325,320,285,295,336,320,319,404,329,330,349,334,293,333,366,323,447,316,15,315,331,358,279,317,14,316,8,285,9,277,329,350,253,374,252,319,318,403,351,6,419,324,318,325,397,367,365,288,435,397,278,344,439,310,272,311,248,195,281,375,273,291,175,396,199,312,311,268,276,283,445,390,373,339,295,282,296,448,449,346,356,264,454,337,336,299,337,338,151,294,278,455,308,292,415,429,358,355,265,340,372,388,390,466,352,346,280,295,442,282,354,19,370,285,441,295,195,248,197,457,440,274,301,300,368,417,351,465,251,301,389,385,380,386,394,395,379,399,412,419,410,436,322,387,373,388,326,2,393,354,370,461,393,164,267,268,302,12,386,374,387,312,268,13,298,293,301,265,446,340,380,385,381,280,330,425,322,426,391,420,429,437,393,391,326,344,440,438,458,459,461,364,434,394,428,396,262,274,354,457,317,316,402,316,315,403,315,314,404,314,313,405,313,421,406,323,366,361,292,306,407,306,291,408,291,287,409,287,432,410,427,434,411,372,264,383,459,309,457,366,352,401,1,274,4,418,421,262,331,294,358,435,433,367,392,289,439,328,462,326,94,2,370,289,305,455,339,254,448,359,255,446,254,253,449,253,252,450,252,256,451,256,341,452,414,413,463,286,441,414,286,258,441,258,257,442,257,259,443,259,260,444,260,467,445,309,459,250,305,289,290,305,290,460,401,376,435,309,250,392,376,411,433,453,341,464,357,453,465,343,357,412,437,343,399,344,360,440,420,437,456,360,420,363,361,401,288,265,372,353,390,339,249,339,448,255];!function(e){let t,n,r,a,s,o;const i={backend:"webgl"},u=468,l="#32EEDB";function c(e,t){return Math.sqrt(Math.pow(e[0]-t[0],2)+Math.pow(e[1]-t[1],2))}function p(e,t,n){const r=new Path2D;r.moveTo(t[0][0],t[0][1]);for(let e=1;e<t.length;e++){const n=t[e];r.lineTo(n[0],n[1])}n&&r.closePath(),e.stroke(r)}const d=async()=>{e.profile((async()=>{const e=await t.estimateFaces({input:s,returnTensors:!1,flipHorizontal:!1,predictIrises:!1});n.drawImage(s,0,0,r,a,0,0,o.width,o.height),e.length>0&&e.forEach((e=>{const t=e.scaledMesh;if(i.triangulateMesh){n.strokeStyle=l,n.lineWidth=.5;for(let e=0;e<kv.length/3;e++){const r=[kv[3*e],kv[3*e+1],kv[3*e+2]].map((e=>t[e]));p(n,r,!0)}}else{n.fillStyle=l;for(let e=0;e<u;e++){const r=t[e][0],a=t[e][1];n.beginPath(),n.arc(r,a,1,0,2*Math.PI),n.fill()}}if(t.length>u){n.strokeStyle="#FF2C35",n.lineWidth=1;const e=t[468],r=c(t[472],t[470]),a=c(t[471],t[469]);if(n.beginPath(),n.ellipse(e[0],e[1],a/2,r/2,0,0,2*Math.PI),n.stroke(),t.length>473){const e=t[473],r=c(t[475],t[477]),a=c(t[476],t[474]);n.beginPath(),n.ellipse(e[0],e[1],a/2,r/2,0,0,2*Math.PI),n.stroke()}}}))})).then((e=>{console.log(e.kernelNames)})),requestAnimationFrame(d)};(async()=>{await e.setBackend(i.backend),await async function(){s=document.getElementById("video");const e=await navigator.mediaDevices.getUserMedia({audio:!1,video:{facingMode:"user"}});return s.srcObject=e,new Promise((e=>{s.onloadedmetadata=()=>{e(s)}}))}(),s.play(),r=s.videoWidth,a=s.videoHeight,s.width=r,s.height=a,o=document.getElementById("output"),o.width=r,o.height=a,n=o.getContext("2d"),n.fillStyle="rgba(255, 0, 0, 0.5)",t=await function(e,t){return void 0===e&&(e=Tv.mediapipeFacemesh),void 0===t&&(t={}),Ub(this,void 0,void 0,(function(){return zb(this,(function(n){if(e===Tv.mediapipeFacemesh)return[2,xv(t)];throw new Error(e+" is not a valid package name.")}))}))}(Tv.mediapipeFacemesh,{maxFaces:1,shouldLoadIrisModel:!1,modelUrl:"https://cdn.static.oppenlab.com/weblf/test/facemesh/model.json"}),d()})()}(Pb)}));
